(set-option :global-decls false)
(set-option :smt.mbqi false)
(set-option :auto_config false)
(set-option :produce-unsat-cores true)
(set-option :model true)
(set-option :smt.case_split 3)
(set-option :rewriter.enable_der false)
(set-option :rewriter.sort_disjunctions false)
(set-option :pi.decompose_patterns false)
(set-option :smt.relevancy 2)
(declare-sort FString)
(declare-fun FString_constr_id (FString) Int)

(declare-sort Term)
(declare-fun Term_constr_id (Term) Int)
(declare-sort Dummy_sort)
(declare-fun Dummy_value () Dummy_sort)
(declare-datatypes () ((Fuel 
(ZFuel) 
(SFuel (prec Fuel)))))
(declare-fun MaxIFuel () Fuel)
(declare-fun MaxFuel () Fuel)
(declare-fun PreType (Term) Term)
(declare-fun Valid (Term) Bool)
(declare-fun HasTypeFuel (Fuel Term Term) Bool)
(define-fun HasTypeZ ((x Term) (t Term)) Bool
(HasTypeFuel ZFuel x t))
(define-fun HasType ((x Term) (t Term)) Bool
(HasTypeFuel MaxIFuel x t))
(declare-fun IsTotFun (Term) Bool)

                ;;fuel irrelevance
(assert (forall ((f Fuel) (x Term) (t Term))
(! (= (HasTypeFuel (SFuel f) x t)
(HasTypeZ x t))
:pattern ((HasTypeFuel (SFuel f) x t)))))
(declare-fun NoHoist (Term Bool) Bool)
;;no-hoist
(assert (forall ((dummy Term) (b Bool))
(! (= (NoHoist dummy b)
b)
:pattern ((NoHoist dummy b)))))
(define-fun  IsTyped ((x Term)) Bool
(exists ((t Term)) (HasTypeZ x t)))
(declare-fun ApplyTF (Term Fuel) Term)
(declare-fun ApplyTT (Term Term) Term)
(declare-fun Prec (Term Term) Bool)
(assert (forall ((x Term) (y Term) (z Term))
(! (implies (and (Prec x y) (Prec y z))
(Prec x z))
                                   :pattern ((Prec x z) (Prec x y)))))
(assert (forall ((x Term) (y Term))
(implies (Prec x y)
(not (Prec y x)))))
(declare-fun Closure (Term) Term)
(declare-fun ConsTerm (Term Term) Term)
(declare-fun ConsFuel (Fuel Term) Term)
(declare-fun Tm_uvar (Int) Term)
(define-fun Reify ((x Term)) Term x)
(declare-fun Prims.precedes (Term Term Term Term) Term)
(declare-fun Range_const (Int) Term)
(declare-fun _mul (Int Int) Int)
(declare-fun _div (Int Int) Int)
(declare-fun _mod (Int Int) Int)
(declare-fun __uu__PartialApp () Term)
(assert (forall ((x Int) (y Int)) (! (= (_mul x y) (* x y)) :pattern ((_mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (_div x y) (div x y)) :pattern ((_div x y)))))
(assert (forall ((x Int) (y Int)) (! (= (_mod x y) (mod x y)) :pattern ((_mod x y)))))
(declare-fun _rmul (Real Real) Real)
(declare-fun _rdiv (Real Real) Real)
(assert (forall ((x Real) (y Real)) (! (= (_rmul x y) (* x y)) :pattern ((_rmul x y)))))
(assert (forall ((x Real) (y Real)) (! (= (_rdiv x y) (/ x y)) :pattern ((_rdiv x y)))))
(define-fun Unreachable () Bool false)
; <start constructor FString_const>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FString_const (Int) FString)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= 0
(FString_constr_id (FString_const @u0)))
 

:pattern ((FString_const @u0))
:qid constructor_distinct_FString_const))
:named constructor_distinct_FString_const))
;;;;;;;;;;;;;;;;Projector
(declare-fun FString_const_proj_0 (FString) Int)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= (FString_const_proj_0 (FString_const @u0))
@u0)
 

:pattern ((FString_const @u0))
:qid projection_inverse_FString_const_proj_0))
:named projection_inverse_FString_const_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FString_const ((__@u0 FString)) Bool
 (and (= (FString_constr_id __@u0)
0)
(= __@u0
(FString_const (FString_const_proj_0 __@u0)))))

; </end constructor FString_const>


; <start constructor Tm_type>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Tm_type () Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (= 2
(Term_constr_id Tm_type))
:named constructor_distinct_Tm_type))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Tm_type ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
2)
(= __@x0
Tm_type)))

; </end constructor Tm_type>


; <start constructor Tm_arrow>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Tm_arrow (Int) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= 3
(Term_constr_id (Tm_arrow @u0)))
 

:pattern ((Tm_arrow @u0))
:qid constructor_distinct_Tm_arrow))
:named constructor_distinct_Tm_arrow))
;;;;;;;;;;;;;;;;Projector
(declare-fun Tm_arrow_id (Term) Int)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= (Tm_arrow_id (Tm_arrow @u0))
@u0)
 

:pattern ((Tm_arrow @u0))
:qid projection_inverse_Tm_arrow_id))
:named projection_inverse_Tm_arrow_id))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Tm_arrow ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
3)
(= __@x0
(Tm_arrow (Tm_arrow_id __@x0)))))

; </end constructor Tm_arrow>


; <start constructor Tm_unit>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Tm_unit () Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (= 6
(Term_constr_id Tm_unit))
:named constructor_distinct_Tm_unit))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Tm_unit ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
6)
(= __@x0
Tm_unit)))

; </end constructor Tm_unit>


; <start constructor BoxInt>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxInt (Int) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= 7
(Term_constr_id (BoxInt @u0)))
 

:pattern ((BoxInt @u0))
:qid constructor_distinct_BoxInt))
:named constructor_distinct_BoxInt))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxInt_proj_0 (Term) Int)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= (BoxInt_proj_0 (BoxInt @u0))
@u0)
 

:pattern ((BoxInt @u0))
:qid projection_inverse_BoxInt_proj_0))
:named projection_inverse_BoxInt_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxInt ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
7)
(= __@x0
(BoxInt (BoxInt_proj_0 __@x0)))))

; </end constructor BoxInt>


; <start constructor BoxBool>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxBool (Bool) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Bool))
 (! (= 8
(Term_constr_id (BoxBool @u0)))
 

:pattern ((BoxBool @u0))
:qid constructor_distinct_BoxBool))
:named constructor_distinct_BoxBool))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxBool_proj_0 (Term) Bool)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Bool))
 (! (= (BoxBool_proj_0 (BoxBool @u0))
@u0)
 

:pattern ((BoxBool @u0))
:qid projection_inverse_BoxBool_proj_0))
:named projection_inverse_BoxBool_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxBool ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
8)
(= __@x0
(BoxBool (BoxBool_proj_0 __@x0)))))

; </end constructor BoxBool>


; <start constructor BoxString>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxString (FString) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 FString))
 (! (= 9
(Term_constr_id (BoxString @u0)))
 

:pattern ((BoxString @u0))
:qid constructor_distinct_BoxString))
:named constructor_distinct_BoxString))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxString_proj_0 (Term) FString)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 FString))
 (! (= (BoxString_proj_0 (BoxString @u0))
@u0)
 

:pattern ((BoxString @u0))
:qid projection_inverse_BoxString_proj_0))
:named projection_inverse_BoxString_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxString ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
9)
(= __@x0
(BoxString (BoxString_proj_0 __@x0)))))

; </end constructor BoxString>


; <start constructor BoxReal>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxReal (Real) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Real))
 (! (= 10
(Term_constr_id (BoxReal @u0)))
 

:pattern ((BoxReal @u0))
:qid constructor_distinct_BoxReal))
:named constructor_distinct_BoxReal))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxReal_proj_0 (Term) Real)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Real))
 (! (= (BoxReal_proj_0 (BoxReal @u0))
@u0)
 

:pattern ((BoxReal @u0))
:qid projection_inverse_BoxReal_proj_0))
:named projection_inverse_BoxReal_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxReal ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
10)
(= __@x0
(BoxReal (BoxReal_proj_0 __@x0)))))

; </end constructor BoxReal>

(declare-fun Prims.precedes@tok () Term)
(assert
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
(! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT Prims.precedes@tok
@x0)
@x1)
@x2)
@x3)
(Prims.precedes @x0 @x1 @x2 @x3))

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT Prims.precedes@tok
@x0)
@x1)
@x2)
@x3)))))

(declare-fun Prims.lex_t () Term)
(assert (forall ((t1 Term) (t2 Term) (e1 Term) (e2 Term))
(! (iff (Valid (Prims.precedes t1 t2 e1 e2))
(Valid (Prims.precedes Prims.lex_t Prims.lex_t e1 e2)))
:pattern (Prims.precedes t1 t2 e1 e2))))
(assert (forall ((t1 Term) (t2 Term))
(! (iff (Valid (Prims.precedes Prims.lex_t Prims.lex_t t1 t2)) 
(Prec t1 t2))
:pattern ((Prims.precedes Prims.lex_t Prims.lex_t t1 t2)))))
(assert (forall ((e Term) (t Term))
(! (implies (HasType e t)
(Valid t))
:pattern ((HasType e t)
(Valid t))
:qid __prelude_valid_intro)))


;;; Start module Prims

; Externals for module Prims


; <Start encoding Prims.attribute>

(declare-fun Prims.attribute () Term)

; </end encoding Prims.attribute>


; <Start encoding Prims.cps>

(declare-fun Prims.cps () Term)

; </end encoding Prims.cps>


; <Start encoding Prims.hasEq>

(declare-fun Prims.hasEq (Term) Term)
;;;;;;;;;;;;;;;;_: Type -> Prims.GTot Type
(declare-fun Tm_arrow_ef9cb512a25ee351fa5536d617490497 () Term)
(declare-fun Prims.hasEq@tok () Term)

; </end encoding Prims.hasEq>


; <Start encoding Prims.eqtype>

(declare-fun Prims.eqtype () Term)
(declare-fun Tm_refine_414d0a9f578ab0048252f8c8f552b99f () Term)

; </end encoding Prims.eqtype>


; <Start encoding Prims.bool>

(declare-fun Prims.bool () Term)
;;;;;;;;;;;;;;;;bool typing
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (forall ((@u0 Bool))
 (! (HasType (BoxBool @u0)
Prims.bool)
 

:pattern ((BoxBool @u0))
:qid bool_typing))
:named bool_typing))
;;;;;;;;;;;;;;;;bool inversion
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.bool)
(is-BoxBool @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.bool))
:qid bool_inversion))
:named bool_inversion))

; </end encoding Prims.bool>


; <Start encoding Prims.empty>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.empty () Term)

; <Start encoding Prims.empty>


; <start constructor Prims.empty>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.empty ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
111)
(= __@x0
Prims.empty)))

; </end constructor Prims.empty>


; </end encoding Prims.empty>


; </end encoding Prims.empty>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.trivial () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.T () Term)
;;;;;;;;;;;;;;;;data constructor proxy: T
(declare-fun Prims.T@tok () Term)

; <Start encoding Prims.trivial>


; <start constructor Prims.trivial>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.trivial ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
116)
(= __@x0
Prims.trivial)))

; </end constructor Prims.trivial>


; </end encoding Prims.trivial>


; <Start encoding Prims.T>


; <start constructor Prims.T>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.T ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
122)
(= __@x0
Prims.T)))

; </end constructor Prims.T>


; </end encoding Prims.T>


; </end encoding >


; <Start encoding Prims.uu___is_T>

(declare-fun Prims.uu___is_T (Term) Term)
;;;;;;;;;;;;;;;;projectee: Prims.trivial -> Prims.bool
(declare-fun Tm_arrow_053f01f066524059a49c5dc621e6494a () Term)
(declare-fun Prims.uu___is_T@tok () Term)

; </end encoding Prims.uu___is_T>


; <Start encoding Prims.unit>

(declare-fun Prims.unit () Term)

; </end encoding Prims.unit>


; <Start encoding Prims.squash>

(declare-fun Prims.squash (Term) Term)

(declare-fun Prims.squash@tok () Term)
(declare-fun Tm_refine_2de20c066034c13bf76e9c0b94f4806c (Term) Term)

; </end encoding Prims.squash>


; <Start encoding Prims.auto_squash>

(declare-fun Prims.auto_squash (Term) Term)

(declare-fun Prims.auto_squash@tok () Term)

; </end encoding Prims.auto_squash>


; <Start encoding Prims.logical>

(declare-fun Prims.logical () Term)

; </end encoding Prims.logical>


; <Start encoding Prims.smt_theory_symbol>

(declare-fun Prims.smt_theory_symbol () Term)

; </end encoding Prims.smt_theory_symbol>


; <Start encoding Prims.l_True>

(declare-fun Prims.l_True () Term)

; </end encoding Prims.l_True>


; <Start encoding Prims.l_False>

(declare-fun Prims.l_False () Term)

; </end encoding Prims.l_False>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.equals (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.equals@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.equals@x1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.equals@x2 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.equals@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Refl (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Refl_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Refl_x (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Refl
(declare-fun Prims.Refl@tok () Term)
;;;;;;;;;;;;;;;;Prims.equals x x
(declare-fun Tm_arrow_8e00c6263684633abbc1d1a87608e391 () Term)

; <Start encoding Prims.equals>


; <start constructor Prims.equals>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.equals ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
134)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(Prims.equals @x0
@x1
@x2))
 
;;no pats
:qid is-Prims.equals))))

; </end constructor Prims.equals>


; </end encoding Prims.equals>


; <Start encoding Prims.Refl>


; <start constructor Prims.Refl>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Refl ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
141)
(= __@x0
(Prims.Refl (Prims.Refl_a __@x0)
(Prims.Refl_x __@x0)))))

; </end constructor Prims.Refl>


; </end encoding Prims.Refl>


; </end encoding >


; <Start encoding Prims.uu___is_Refl>

(declare-fun Prims.uu___is_Refl (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: Prims.equals x _ -> Prims.bool
(declare-fun Tm_arrow_2a4540f76c8969717ea911077d7b4d15 () Term)
(declare-fun Prims.uu___is_Refl@tok () Term)

; </end encoding Prims.uu___is_Refl>


; <Start encoding Prims.eq2>

(declare-fun Prims.eq2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;x: a -> y: a -> Prims.logical
(declare-fun Tm_arrow_1ec40cec1da281b45a559c74dd57f3b7 () Term)
(declare-fun Prims.eq2@tok () Term)

; </end encoding Prims.eq2>


; <Start encoding Prims.b2t>

(declare-fun Prims.b2t (Term) Term)
;;;;;;;;;;;;;;;;b2t def
;;; Fact-ids: Name Prims.b2t; Namespace Prims
(assert (! 
;; def=prims.fst(159,5-159,8); use=prims.fst(159,5-159,8)
(forall ((@x0 Term))
 (! (= (Valid (Prims.b2t @x0))
(BoxBool_proj_0 @x0))
 

:pattern ((Prims.b2t @x0))
:qid b2t_def))

:named b2t_def))

; </end encoding Prims.b2t>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.pair (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.pair@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.pair@x1 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.pair@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Pair (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair_q (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Pair
(declare-fun Prims.Pair@tok () Term)
;;;;;;;;;;;;;;;;_1: p -> _2: q -> Prims.pair p q
(declare-fun Tm_arrow_e2b0096073073582c70f249d40f91c5d () Term)

; <Start encoding Prims.pair>


; <start constructor Prims.pair>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.pair ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
150)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.pair @x0
@x1))
 
;;no pats
:qid is-Prims.pair))))

; </end constructor Prims.pair>


; </end encoding Prims.pair>


; <Start encoding Prims.Pair>


; <start constructor Prims.Pair>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Pair ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
157)
(= __@x0
(Prims.Pair (Prims.Pair_p __@x0)
(Prims.Pair_q __@x0)
(Prims.Pair__1 __@x0)
(Prims.Pair__2 __@x0)))))

; </end constructor Prims.Pair>


; </end encoding Prims.Pair>


; </end encoding >


; <Start encoding Prims.uu___is_Pair>

(declare-fun Prims.uu___is_Pair (Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: Prims.pair p q -> Prims.bool
(declare-fun Tm_arrow_0a519c999e1325381ee4c9b1d93a06b2 () Term)
(declare-fun Prims.uu___is_Pair@tok () Term)

; </end encoding Prims.uu___is_Pair>


; <Start encoding Prims.__proj__Pair__item___1>

(declare-fun Prims.__proj__Pair__item___1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: Prims.pair p q -> p
(declare-fun Tm_arrow_214b45775d1504fb2699ff0d156b6857 () Term)
(declare-fun Prims.__proj__Pair__item___1@tok () Term)

; </end encoding Prims.__proj__Pair__item___1>


; <Start encoding Prims.__proj__Pair__item___2>

(declare-fun Prims.__proj__Pair__item___2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: Prims.pair p q -> q
(declare-fun Tm_arrow_1b97dbe8f5eb289f51cc2556690371e3 () Term)
(declare-fun Prims.__proj__Pair__item___2@tok () Term)

; </end encoding Prims.__proj__Pair__item___2>


; <Start encoding Prims.l_and>

(declare-fun Prims.l_and (Term Term) Term)
;;;;;;;;;;;;;;;;p: Prims.logical -> q: Prims.logical -> Prims.logical
(declare-fun Tm_arrow_289ee2cc5874944bf725b9e3db8c0fd6 () Term)
(declare-fun Prims.l_and@tok () Term)

; </end encoding Prims.l_and>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.sum (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.sum@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.sum@x1 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.sum@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Left_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Left_q (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Left_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Left
(declare-fun Prims.Left@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Right_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Right_q (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Right_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Right
(declare-fun Prims.Right@tok () Term)
;;;;;;;;;;;;;;;;v: p -> Prims.sum p q
(declare-fun Tm_arrow_4ef073c03ed003774fe6ccb4064aeebd () Term)
;;;;;;;;;;;;;;;;v: q -> Prims.sum p q
(declare-fun Tm_arrow_c537ccd7fef2183d55f1a6960ee793b0 () Term)

; <Start encoding Prims.sum>


; <start constructor Prims.sum>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.sum ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
169)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.sum @x0
@x1))
 
;;no pats
:qid is-Prims.sum))))

; </end constructor Prims.sum>


; </end encoding Prims.sum>


; <Start encoding Prims.Left>


; <start constructor Prims.Left>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Left ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
176)
(= __@x0
(Prims.Left (Prims.Left_p __@x0)
(Prims.Left_q __@x0)
(Prims.Left_v __@x0)))))

; </end constructor Prims.Left>


; </end encoding Prims.Left>


; <Start encoding Prims.Right>


; <start constructor Prims.Right>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Right ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
181)
(= __@x0
(Prims.Right (Prims.Right_p __@x0)
(Prims.Right_q __@x0)
(Prims.Right_v __@x0)))))

; </end constructor Prims.Right>


; </end encoding Prims.Right>


; </end encoding >


; <Start encoding Prims.uu___is_Left>

(declare-fun Prims.uu___is_Left (Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: Prims.sum p q -> Prims.bool
(declare-fun Tm_arrow_3c254c463840bdea2ca63f23cf7c2f0c () Term)
(declare-fun Prims.uu___is_Left@tok () Term)

; </end encoding Prims.uu___is_Left>


; <Start encoding Prims.__proj__Left__item__v>

(declare-fun Tm_refine_6140be01a70b18051829f178aaf0270b (Term Term) Term)
(declare-fun Prims.__proj__Left__item__v (Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: Prims.sum p q {Left? _} -> p
(declare-fun Tm_arrow_aaf070885513892396497eef726adce1 () Term)
(declare-fun Prims.__proj__Left__item__v@tok () Term)

; </end encoding Prims.__proj__Left__item__v>


; <Start encoding Prims.uu___is_Right>

(declare-fun Prims.uu___is_Right (Term Term Term) Term)

(declare-fun Prims.uu___is_Right@tok () Term)

; </end encoding Prims.uu___is_Right>


; <Start encoding Prims.__proj__Right__item__v>

(declare-fun Tm_refine_43ea5cf89e866ce271f97bd6ce102588 (Term Term) Term)
(declare-fun Prims.__proj__Right__item__v (Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: Prims.sum p q {Right? _} -> q
(declare-fun Tm_arrow_4ae0e7dd85e55aec7e8190dea6e3997f () Term)
(declare-fun Prims.__proj__Right__item__v@tok () Term)

; </end encoding Prims.__proj__Right__item__v>


; <Start encoding Prims.l_or>

(declare-fun Prims.l_or (Term Term) Term)

(declare-fun Prims.l_or@tok () Term)

; </end encoding Prims.l_or>


; <Start encoding Prims.l_imp>

(declare-fun Prims.l_imp (Term Term) Term)

(declare-fun Prims.l_imp@tok () Term)
;;;;;;;;;;;;;;;;_: p -> Prims.GTot q
(declare-fun Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a (Term Term) Term)

; </end encoding Prims.l_imp>


; <Start encoding Prims.l_iff>

(declare-fun Prims.l_iff (Term Term) Term)

(declare-fun Prims.l_iff@tok () Term)

; </end encoding Prims.l_iff>


; <Start encoding Prims.l_not>

(declare-fun Prims.l_not (Term) Term)
;;;;;;;;;;;;;;;;p: Prims.logical -> Prims.logical
(declare-fun Tm_arrow_8178e3b6934aa50ea45bb0ccea2d9711 () Term)
(declare-fun Prims.l_not@tok () Term)

; </end encoding Prims.l_not>


; <Skipped Prims.l_ITE/>


; <Skipped Prims.precedes/>


; <Start encoding Prims.string>

(declare-fun Prims.string () Term)

; </end encoding Prims.string>


; <Start encoding Prims.warn_on_use>

(declare-fun Prims.warn_on_use (Term) Term)
;;;;;;;;;;;;;;;;msg: Prims.string -> Prims.unit
(declare-fun Tm_arrow_2863eb88d7490a9c3cf347c16ca04740 () Term)
(declare-fun Prims.warn_on_use@tok () Term)

; </end encoding Prims.warn_on_use>


; <Start encoding Prims.deprecated>

(declare-fun Prims.deprecated (Term) Term)

(declare-fun Prims.deprecated@tok () Term)

; </end encoding Prims.deprecated>


; <Start encoding Prims.has_type>

(declare-fun Prims.has_type (Term Term Term) Term)
;;;;;;;;;;;;;;;;_: a -> _: Type -> Type
(declare-fun Tm_arrow_b5d8ed0243b8c7c893f2b329de57c62b () Term)
(declare-fun Prims.has_type@tok () Term)

; </end encoding Prims.has_type>


; <Start encoding Prims.l_Forall>

;;;;;;;;;;;;;;;;_: a -> Prims.GTot Type
(declare-fun Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da (Term) Term)
(declare-fun Prims.l_Forall (Term Term) Term)

;;;;;;;;;;;;;;;;p: (_: a -> Prims.GTot Type) -> Prims.logical
(declare-fun Tm_arrow_977ec6901669a051ac66211b8e72666a () Term)
(declare-fun Prims.l_Forall@tok () Term)

;;;;;;;;;;;;;;;;x: a -> Prims.GTot (p x)
(declare-fun Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f (Term Term) Term)

; </end encoding Prims.l_Forall>


; <Skipped />


; <Start encoding Prims.subtype_of>

(declare-fun Prims.subtype_of (Term Term) Term)
;;;;;;;;;;;;;;;;p1: Type -> p2: Type -> Prims.logical
(declare-fun Tm_arrow_28becc0427b69ebf63ea956148504d97 () Term)
(declare-fun Prims.subtype_of@tok () Term)

(declare-fun Tm_abs_2319c8dded71dc14c3f65c301c18a7ca (Term Term) Term)

; </end encoding Prims.subtype_of>


; <Skipped />


; <Start encoding Prims.prop>

(declare-fun Prims.prop () Term)
(declare-fun Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf () Term)

; </end encoding Prims.prop>


; <Start encoding Prims.pure_pre>

(declare-fun Prims.pure_pre () Term)

; </end encoding Prims.pure_pre>


; <Start encoding Prims.pure_post'>

(declare-fun Prims.pure_post_ (Term Term) Term)
;;;;;;;;;;;;;;;;a: Type -> pre: Type -> Type
(declare-fun Tm_arrow_e4cf09589736facd1137944a1f5a00a6 () Term)
(declare-fun Prims.pure_post_@tok () Term)
(declare-fun Tm_refine_8d65e998a07dd53ec478e27017d9dba5 (Term Term) Term)
;;;;;;;;;;;;;;;;_: a{pre} -> Prims.GTot Type
(declare-fun Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 (Term Term) Term)

; </end encoding Prims.pure_post'>


; <Start encoding Prims.pure_post>

(declare-fun Prims.pure_post (Term) Term)

(declare-fun Prims.pure_post@tok () Term)

; </end encoding Prims.pure_post>


; <Start encoding Prims.pure_wp'>

(declare-fun Prims.pure_wp_ (Term) Term)

(declare-fun Prims.pure_wp_@tok () Term)
;;;;;;;;;;;;;;;;_: Prims.pure_post a -> Prims.GTot Prims.pure_pre
(declare-fun Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4 (Term) Term)

; </end encoding Prims.pure_wp'>


; <Start encoding Prims.pure_wp_monotonic0>

(declare-fun Prims.pure_wp_monotonic0 (Term Term) Term)
;;;;;;;;;;;;;;;;a: Type -> wp: Prims.pure_wp' a -> Prims.logical
(declare-fun Tm_arrow_85436e2c1c64a4dd0159a737ef5b212e () Term)
(declare-fun Prims.pure_wp_monotonic0@tok () Term)

(declare-fun Tm_abs_ea1703a99385b474600aa7a3bdb045c5 (Term Term Term) Term)
;;;;;;;;;;;;;;;;q: Prims.pure_post a -> Prims.GTot Type
(declare-fun Tm_arrow_b275e247a67e3e77d7c5997d864d1247 (Term) Term)
(declare-fun Tm_abs_fd5475515272d0f1ce55fa6741fae069 (Term Term Term) Term)

(declare-fun Tm_abs_a590ae03fb5fe4509368585c8f8c00cd (Term Term) Term)

; </end encoding Prims.pure_wp_monotonic0>


; <Start encoding Prims.pure_wp_monotonic>

(declare-fun Prims.pure_wp_monotonic (Term Term) Term)

(declare-fun Prims.pure_wp_monotonic@tok () Term)

; </end encoding Prims.pure_wp_monotonic>


; <Start encoding Prims.pure_wp>

(declare-fun Prims.pure_wp (Term) Term)

(declare-fun Prims.pure_wp@tok () Term)
(declare-fun Tm_refine_15e0beb75f7033bad5fae236999feebe (Term) Term)

; </end encoding Prims.pure_wp>


; <Start encoding Prims.guard_free>

(declare-fun Prims.guard_free (Term) Term)

(declare-fun Prims.guard_free@tok () Term)

; </end encoding Prims.guard_free>


; <Skipped Prims.pure_return0/>


; <Skipped Prims.pure_bind_wp0/>


; <Skipped Prims.pure_if_then_else0/>


; <Skipped Prims.pure_ite_wp0/>


; <Skipped Prims.pure_stronger/>


; <Skipped Prims.pure_close_wp0/>


; <Skipped Prims.pure_trivial/>


; <Skipped Prims.PURE/>


; <Skipped Prims.Pure/>


; <Skipped Prims.Admit/>


; <Skipped Prims.pure_null_wp0/>


; <Skipped Prims.Tot/>


; <Start encoding Prims.pure_assert_wp0>

(declare-fun Prims.pure_assert_wp0 (Term) Term)
;;;;;;;;;;;;;;;;p: Type -> Prims.pure_wp Prims.unit
(declare-fun Tm_arrow_14bcf5e7fc38d91827ecd9d25d3b3a67 () Term)
(declare-fun Prims.pure_assert_wp0@tok () Term)

; </end encoding Prims.pure_assert_wp0>


; <Start encoding Prims.pure_assume_wp0>

(declare-fun Prims.pure_assume_wp0 (Term) Term)

(declare-fun Prims.pure_assume_wp0@tok () Term)

; </end encoding Prims.pure_assume_wp0>


; <Skipped Prims.GHOST/>


; <Skipped Prims.purewp_id/>


; <Skipped />


; <Skipped Prims.Ghost/>


; <Skipped Prims.GTot/>


; <Start encoding Prims.op_Equals_Equals_Equals>

(declare-fun Prims.op_Equals_Equals_Equals (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;x: a -> y: b -> Prims.logical
(declare-fun Tm_arrow_7fcb145b23c2ac843afd9b126c4f71a9 () Term)
(declare-fun Prims.op_Equals_Equals_Equals@tok () Term)

; </end encoding Prims.op_Equals_Equals_Equals>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.dtuple2 (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.dtuple2@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.dtuple2@x1 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.dtuple2@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Mkdtuple2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mkdtuple2
(declare-fun Prims.Mkdtuple2@tok () Term)



;;;;;;;;;;;;;;;;_1: a -> _2: b _1 -> Prims.dtuple2 a b
(declare-fun Tm_arrow_22a50f5c5c9bb74bac4384fb8999be8b () Term)

; <Start encoding Prims.dtuple2>


; <start constructor Prims.dtuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.dtuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
266)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.dtuple2 @x0
@x1))
 
;;no pats
:qid is-Prims.dtuple2))))

; </end constructor Prims.dtuple2>


; </end encoding Prims.dtuple2>


; <Start encoding Prims.Mkdtuple2>


; <start constructor Prims.Mkdtuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Mkdtuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
275)
(= __@x0
(Prims.Mkdtuple2 (Prims.Mkdtuple2_a __@x0)
(Prims.Mkdtuple2_b __@x0)
(Prims.Mkdtuple2__1 __@x0)
(Prims.Mkdtuple2__2 __@x0)))))

; </end constructor Prims.Mkdtuple2>


; </end encoding Prims.Mkdtuple2>


; </end encoding >


; <Start encoding Prims.dtuple2__uu___haseq>



; </end encoding Prims.dtuple2__uu___haseq>


; <Start encoding Prims.uu___is_Mkdtuple2>


(declare-fun Prims.uu___is_Mkdtuple2 (Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: Prims.dtuple2 a b -> Prims.bool
(declare-fun Tm_arrow_e6f9f7cb1936ec43b52469e706dcadcc () Term)
(declare-fun Prims.uu___is_Mkdtuple2@tok () Term)

; </end encoding Prims.uu___is_Mkdtuple2>


; <Skipped Prims.uu___is_Mkdtuple2/>


; <Start encoding Prims.__proj__Mkdtuple2__item___1>


(declare-fun Prims.__proj__Mkdtuple2__item___1 (Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: Prims.dtuple2 a b -> a
(declare-fun Tm_arrow_26c013ffba39d4f7eeb4bcc80d2d4e22 () Term)
(declare-fun Prims.__proj__Mkdtuple2__item___1@tok () Term)

; </end encoding Prims.__proj__Mkdtuple2__item___1>


; <Skipped Prims.__proj__Mkdtuple2__item___1/>


; <Start encoding Prims.__proj__Mkdtuple2__item___2>


(declare-fun Prims.__proj__Mkdtuple2__item___2 (Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: Prims.dtuple2 a b -> b (Mkdtuple2?._1 projectee)
(declare-fun Tm_arrow_870cc7701a0d9a8a2d6fb92427a97d66 () Term)
(declare-fun Prims.__proj__Mkdtuple2__item___2@tok () Term)

; </end encoding Prims.__proj__Mkdtuple2__item___2>


; <Skipped Prims.__proj__Mkdtuple2__item___2/>


; <Start encoding Prims.l_Exists>


(declare-fun Prims.l_Exists (Term Term) Term)


(declare-fun Prims.l_Exists@tok () Term)


(declare-fun Tm_abs_6ba36691ee58dee85cd144324b083848 (Term Term) Term)

; </end encoding Prims.l_Exists>


; <Start encoding Prims.int>

(declare-fun Prims.int () Term)
;;;;;;;;;;;;;;;;int typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Int))
 (! (HasType (BoxInt @u0)
Prims.int)
 

:pattern ((BoxInt @u0))
:qid int_typing))
:named int_typing))
;;;;;;;;;;;;;;;;int inversion
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.int)
(is-BoxInt @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.int))
:qid int_inversion))
:named int_inversion))

; </end encoding Prims.int>


; <Start encoding Prims.op_AmpAmp>

(declare-fun Prims.op_AmpAmp (Term Term) Term)
(declare-fun Prims.op_AmpAmp@tok () Term)
;;; Fact-ids: Name Prims.op_AmpAmp; Namespace Prims
(assert (! 
;; def=prims.fst(501,4-501,13); use=prims.fst(501,4-501,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_AmpAmp @x0
@x1)
(BoxBool (and (BoxBool_proj_0 @x0)
(BoxBool_proj_0 @x1))))
 

:pattern ((Prims.op_AmpAmp @x0
@x1))
:qid primitive_Prims.op_AmpAmp))

:named primitive_Prims.op_AmpAmp))

; </end encoding Prims.op_AmpAmp>


; <Start encoding Prims.op_BarBar>

(declare-fun Prims.op_BarBar (Term Term) Term)
(declare-fun Prims.op_BarBar@tok () Term)

; </end encoding Prims.op_BarBar>


; <Start encoding Prims.op_Negation>

(declare-fun Prims.op_Negation (Term) Term)
(declare-fun Prims.op_Negation@tok () Term)

; </end encoding Prims.op_Negation>


; <Start encoding Prims.op_Multiply>

(declare-fun Prims.op_Multiply (Term Term) Term)
(declare-fun Prims.op_Multiply@tok () Term)
;;; Fact-ids: Name Prims.op_Multiply; Namespace Prims
(assert (! 
;; def=prims.fst(519,4-519,15); use=prims.fst(519,4-519,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_Multiply @x0
@x1)
(BoxInt (* (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_Multiply @x0
@x1))
:qid primitive_Prims.op_Multiply))

:named primitive_Prims.op_Multiply))

; </end encoding Prims.op_Multiply>


; <Start encoding Prims.op_Subtraction>

(declare-fun Prims.op_Subtraction (Term Term) Term)
(declare-fun Prims.op_Subtraction@tok () Term)
;;; Fact-ids: Name Prims.op_Subtraction; Namespace Prims
(assert (! 
;; def=prims.fst(525,4-525,18); use=prims.fst(525,4-525,18)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_Subtraction @x0
@x1)
(BoxInt (- (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_Subtraction @x0
@x1))
:qid primitive_Prims.op_Subtraction))

:named primitive_Prims.op_Subtraction))

; </end encoding Prims.op_Subtraction>


; <Start encoding Prims.op_Addition>

(declare-fun Prims.op_Addition (Term Term) Term)
(declare-fun Prims.op_Addition@tok () Term)
;;; Fact-ids: Name Prims.op_Addition; Namespace Prims
(assert (! 
;; def=prims.fst(531,4-531,15); use=prims.fst(531,4-531,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_Addition @x0
@x1)
(BoxInt (+ (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_Addition @x0
@x1))
:qid primitive_Prims.op_Addition))

:named primitive_Prims.op_Addition))

; </end encoding Prims.op_Addition>


; <Start encoding Prims.op_Minus>

(declare-fun Prims.op_Minus (Term) Term)
(declare-fun Prims.op_Minus@tok () Term)

; </end encoding Prims.op_Minus>


; <Start encoding Prims.op_LessThanOrEqual>

(declare-fun Prims.op_LessThanOrEqual (Term Term) Term)
(declare-fun Prims.op_LessThanOrEqual@tok () Term)
;;; Fact-ids: Name Prims.op_LessThanOrEqual; Namespace Prims
(assert (! 
;; def=prims.fst(543,4-543,22); use=prims.fst(543,4-543,22)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_LessThanOrEqual @x0
@x1)
(BoxBool (<= (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_LessThanOrEqual @x0
@x1))
:qid primitive_Prims.op_LessThanOrEqual))

:named primitive_Prims.op_LessThanOrEqual))

; </end encoding Prims.op_LessThanOrEqual>


; <Start encoding Prims.op_GreaterThan>

(declare-fun Prims.op_GreaterThan (Term Term) Term)
(declare-fun Prims.op_GreaterThan@tok () Term)

; </end encoding Prims.op_GreaterThan>


; <Start encoding Prims.op_GreaterThanOrEqual>

(declare-fun Prims.op_GreaterThanOrEqual (Term Term) Term)
(declare-fun Prims.op_GreaterThanOrEqual@tok () Term)

; </end encoding Prims.op_GreaterThanOrEqual>


; <Start encoding Prims.op_LessThan>

(declare-fun Prims.op_LessThan (Term Term) Term)
(declare-fun Prims.op_LessThan@tok () Term)

; </end encoding Prims.op_LessThan>


; <Start encoding Prims.op_Equality>

(declare-fun Prims.op_Equality (Term Term Term) Term)
(declare-fun Prims.op_Equality@tok () Term)

; </end encoding Prims.op_Equality>


; <Start encoding Prims.op_disEquality>

(declare-fun Prims.op_disEquality (Term Term Term) Term)
(declare-fun Prims.op_disEquality@tok () Term)

; </end encoding Prims.op_disEquality>


; <Start encoding Prims.exn>

(declare-fun Prims.exn () Term)

; </end encoding Prims.exn>


; <Start encoding Prims.array>

(declare-fun Prims.array (Term) Term)

(declare-fun Prims.array@tok () Term)

; </end encoding Prims.array>


; <Start encoding Prims.strcat>

(declare-fun Prims.strcat (Term Term) Term)
;;;;;;;;;;;;;;;;_: Prims.string -> _: Prims.string -> Prims.string
(declare-fun Tm_arrow_b66cecec1d56111347abe61e89557dd1 () Term)
(declare-fun Prims.strcat@tok () Term)

; </end encoding Prims.strcat>


; <Skipped Prims.op_Hat/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.list (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.list@x0 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.list@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Nil (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Nil_a (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Nil
(declare-fun Prims.Nil@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Cons_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Cons_hd (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Cons_tl (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Cons
(declare-fun Prims.Cons@tok () Term)
;;;;;;;;;;;;;;;;Prims.list a
(declare-fun Tm_arrow_3864bd5fbb999b4fe4487408df9b3401 () Term)
;;;;;;;;;;;;;;;;hd: a -> tl: Prims.list a -> Prims.list a
(declare-fun Tm_arrow_02c072760cbad0f5a4706f6cffab6c94 () Term)

; <Start encoding Prims.list>


; <start constructor Prims.list>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.list ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
326)
(exists ((@x0 Term))
 (! (= __@x0
(Prims.list @x0))
 
;;no pats
:qid is-Prims.list))))

; </end constructor Prims.list>


; </end encoding Prims.list>


; <Start encoding Prims.Nil>


; <start constructor Prims.Nil>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Nil ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
333)
(= __@x0
(Prims.Nil (Prims.Nil_a __@x0)))))

; </end constructor Prims.Nil>


; </end encoding Prims.Nil>


; <Start encoding Prims.Cons>


; <start constructor Prims.Cons>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Cons ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
338)
(= __@x0
(Prims.Cons (Prims.Cons_a __@x0)
(Prims.Cons_hd __@x0)
(Prims.Cons_tl __@x0)))))

; </end constructor Prims.Cons>


; </end encoding Prims.Cons>


; </end encoding >


; <Start encoding Prims.list__uu___haseq>


; </end encoding Prims.list__uu___haseq>


; <Start encoding Prims.uu___is_Nil>

(declare-fun Prims.uu___is_Nil (Term Term) Term)
;;;;;;;;;;;;;;;;projectee: Prims.list a -> Prims.bool
(declare-fun Tm_arrow_606904b0fa72729a20285beb231f9f2e () Term)
(declare-fun Prims.uu___is_Nil@tok () Term)

; </end encoding Prims.uu___is_Nil>


; <Skipped Prims.uu___is_Nil/>


; <Start encoding Prims.uu___is_Cons>

(declare-fun Prims.uu___is_Cons (Term Term) Term)

(declare-fun Prims.uu___is_Cons@tok () Term)

; </end encoding Prims.uu___is_Cons>


; <Skipped Prims.uu___is_Cons/>


; <Start encoding Prims.__proj__Cons__item__hd>

(declare-fun Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 (Term) Term)
(declare-fun Prims.__proj__Cons__item__hd (Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: Prims.list a {Cons? _} -> a
(declare-fun Tm_arrow_27c3547831737e5a63950f3d18bf3d22 () Term)
(declare-fun Prims.__proj__Cons__item__hd@tok () Term)

; </end encoding Prims.__proj__Cons__item__hd>


; <Skipped Prims.__proj__Cons__item__hd/>


; <Start encoding Prims.__proj__Cons__item__tl>


(declare-fun Prims.__proj__Cons__item__tl (Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: Prims.list a {Cons? _} -> Prims.list a
(declare-fun Tm_arrow_4e740085106d54d8b48ffe3c6c20ef21 () Term)
(declare-fun Prims.__proj__Cons__item__tl@tok () Term)

; </end encoding Prims.__proj__Cons__item__tl>


; <Skipped Prims.__proj__Cons__item__tl/>


; <Skipped Prims.M/>


; <Start encoding Prims.returnM>

(declare-fun Prims.returnM (Term Term) Term)
;;;;;;;;;;;;;;;;a: Type -> x: a -> Prims.M a
(declare-fun Tm_arrow_99724436653747ac6f5a6a00c64ff8bc () Term)
(declare-fun Prims.returnM@tok () Term)

; </end encoding Prims.returnM>


; <Skipped Prims.as_requires/>


; <Skipped Prims.as_ensures/>


; <Start encoding Prims._assume>

(declare-fun Prims._assume (Term) Term)
(declare-fun Non_total_Tm_arrow_724d0dab46b8b51a1bb19d329f7fc4b2 () Term)
(declare-fun Prims._assume@tok () Term)

; </end encoding Prims._assume>


; <Start encoding Prims.admit>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Prims.admit (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Prims.admit@tok () Term)

; </end encoding Prims.admit>


; <Start encoding Prims.magic>

(declare-fun Prims.magic (Term Term) Term)
;;;;;;;;;;;;;;;;_: Prims.unit -> a
(declare-fun Tm_arrow_f5df98ce82fbcebbbdb844c958bee4fb () Term)
(declare-fun Prims.magic@tok () Term)

; </end encoding Prims.magic>


; <Start encoding Prims.unsafe_coerce>

(declare-fun Prims.unsafe_coerce (Term Term Term) Term)
;;;;;;;;;;;;;;;;x: a -> b
(declare-fun Tm_arrow_443ab41008720460b7a09e280558a60f () Term)
(declare-fun Prims.unsafe_coerce@tok () Term)

; </end encoding Prims.unsafe_coerce>


; <Start encoding Prims.admitP>

(declare-fun Prims.admitP (Term) Term)

(declare-fun Prims.admitP@tok () Term)

; </end encoding Prims.admitP>


; <Skipped Prims._assert/>


; <Start encoding Prims._assert>

(declare-fun Prims._assert (Term) Term)
(declare-fun Non_total_Tm_arrow_bb2d1b4bdb07c87bf5990ad3e5fd8642 () Term)
(declare-fun Prims._assert@tok () Term)

; </end encoding Prims._assert>


; <Skipped Prims.cut/>


; <Start encoding Prims.cut>

(declare-fun Prims.cut (Term) Term)

(declare-fun Prims.cut@tok () Term)

; </end encoding Prims.cut>


; <Start encoding Prims.nat>

(declare-fun Prims.nat () Term)
(declare-fun Tm_refine_542f9d4f129664613f2483a6c88bc7c2 () Term)
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! 
;; def=prims.fst(659,11-659,25); use=prims.fst(659,11-659,25)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_542f9d4f129664613f2483a6c88bc7c2)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=prims.fst(659,18-659,24); use=prims.fst(659,18-659,24)
(>= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
:qid refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))

:named refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;Equation for Prims.nat
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (= Prims.nat
Tm_refine_542f9d4f129664613f2483a6c88bc7c2)
:named equation_Prims.nat))

; </end encoding Prims.nat>


; <Start encoding Prims.pos>

(declare-fun Prims.pos () Term)
(declare-fun Tm_refine_774ba3f728d91ead8ef40be66c9802e5 () Term)
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! 
;; def=prims.fst(662,11-662,24); use=prims.fst(662,11-662,24)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_774ba3f728d91ead8ef40be66c9802e5)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=prims.fst(662,18-662,23); use=prims.fst(662,18-662,23)
(> (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
:qid refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))

:named refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;Equation for Prims.pos
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (= Prims.pos
Tm_refine_774ba3f728d91ead8ef40be66c9802e5)
:named equation_Prims.pos))

; </end encoding Prims.pos>


; <Start encoding Prims.nonzero>

(declare-fun Prims.nonzero () Term)
(declare-fun Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f () Term)

; </end encoding Prims.nonzero>


; <Start encoding Prims.op_Modulus>

(declare-fun Prims.op_Modulus (Term Term) Term)
(declare-fun Prims.op_Modulus@tok () Term)
;;; Fact-ids: Name Prims.op_Modulus; Namespace Prims
(assert (! 
;; def=prims.fst(676,4-676,14); use=prims.fst(676,4-676,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_Modulus @x0
@x1)
(BoxInt (mod (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_Modulus @x0
@x1))
:qid primitive_Prims.op_Modulus))

:named primitive_Prims.op_Modulus))

; </end encoding Prims.op_Modulus>


; <Start encoding Prims.op_Division>

(declare-fun Prims.op_Division (Term Term) Term)
(declare-fun Prims.op_Division@tok () Term)

; </end encoding Prims.op_Division>


; <Start encoding Prims.pow2>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun Prims.pow2.fuel_instrumented (Fuel Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun Prims.pow2.fuel_instrumented_token () Term)
(declare-fun Prims.pow2 (Term) Term)
(declare-fun Prims.pow2@tok () Term)
;;;;;;;;;;;;;;;;x: Prims.nat -> Prims.pos
(declare-fun Tm_arrow_c331a0e032e021e1eaa359b3983de4f2 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name Prims.pow2; Namespace Prims
(assert (! 
;; def=prims.fst(687,8-687,12); use=prims.fst(687,8-687,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (= (Prims.pow2.fuel_instrumented (SFuel @u0)
@x1)
(Prims.pow2.fuel_instrumented ZFuel
@x1))
 

:pattern ((Prims.pow2.fuel_instrumented (SFuel @u0)
@x1))
:qid @fuel_irrelevance_Prims.pow2.fuel_instrumented))

:named @fuel_irrelevance_Prims.pow2.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name Prims.pow2; Namespace Prims
(assert (! 
;; def=prims.fst(687,8-687,12); use=prims.fst(687,8-687,12)
(forall ((@x0 Term))
 (! (= (Prims.pow2 @x0)
(Prims.pow2.fuel_instrumented MaxFuel
@x0))
 

:pattern ((Prims.pow2 @x0))
:qid @fuel_correspondence_Prims.pow2.fuel_instrumented))

:named @fuel_correspondence_Prims.pow2.fuel_instrumented))

; </end encoding Prims.pow2>


; <Start encoding Prims.min>

(declare-fun Prims.min (Term Term) Term)
;;;;;;;;;;;;;;;;x: Prims.int -> y: Prims.int -> Prims.int
(declare-fun Tm_arrow_47fc285d7b44e13bcb7e420cbfc55623 () Term)
(declare-fun Prims.min@tok () Term)

; </end encoding Prims.min>


; <Start encoding Prims.abs>

(declare-fun Prims.abs (Term) Term)
;;;;;;;;;;;;;;;;x: Prims.int -> Prims.int
(declare-fun Tm_arrow_35447810753695c4fe25c93af1251992 () Term)
(declare-fun Prims.abs@tok () Term)

; </end encoding Prims.abs>


; <Start encoding Prims.string_of_bool>

(declare-fun Prims.string_of_bool (Term) Term)
;;;;;;;;;;;;;;;;_: Prims.bool -> Prims.string
(declare-fun Tm_arrow_e86b54405c2a58719f5e8112efd48c09 () Term)
(declare-fun Prims.string_of_bool@tok () Term)

; </end encoding Prims.string_of_bool>


; <Start encoding Prims.string_of_int>

(declare-fun Prims.string_of_int (Term) Term)
;;;;;;;;;;;;;;;;_: Prims.int -> Prims.string
(declare-fun Tm_arrow_2bc066ec63734c94a3c008e1e72cae2b () Term)
(declare-fun Prims.string_of_int@tok () Term)

; </end encoding Prims.string_of_int>


; <Start encoding Prims.__cache_version_number__>

(declare-fun Prims.__cache_version_number__ () Term)

; </end encoding Prims.__cache_version_number__>


; End Externals for module Prims


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End module Prims (656 decls; total size 39160)

;;; Start module FStar.Pervasives.Native

; Externals for module FStar.Pervasives.Native


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.option (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.option@x0 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.option@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.None (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.None_a (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: None
(declare-fun FStar.Pervasives.Native.None@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Some (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Some_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Some_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Some
(declare-fun FStar.Pervasives.Native.Some@tok () Term)
;;;;;;;;;;;;;;;;FStar.Pervasives.Native.option a
(declare-fun Tm_arrow_48b914114ec9f2f1caadf0f6848a9741 () Term)
;;;;;;;;;;;;;;;;v: a -> FStar.Pervasives.Native.option a
(declare-fun Tm_arrow_b93a364b5144c2a5f3e9d1ea7b881752 () Term)

; <Start encoding FStar.Pervasives.Native.option>


; <start constructor FStar.Pervasives.Native.option>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.option ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(exists ((@x0 Term))
 (! (= __@x0
(FStar.Pervasives.Native.option @x0))
 
;;no pats
:qid is-FStar.Pervasives.Native.option))))

; </end constructor FStar.Pervasives.Native.option>


; </end encoding FStar.Pervasives.Native.option>


; <Start encoding FStar.Pervasives.Native.None>


; <start constructor FStar.Pervasives.Native.None>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.None ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
108)
(= __@x0
(FStar.Pervasives.Native.None (FStar.Pervasives.Native.None_a __@x0)))))

; </end constructor FStar.Pervasives.Native.None>


; </end encoding FStar.Pervasives.Native.None>


; <Start encoding FStar.Pervasives.Native.Some>


; <start constructor FStar.Pervasives.Native.Some>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Some ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
113)
(= __@x0
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.Some_a __@x0)
(FStar.Pervasives.Native.Some_v __@x0)))))

; </end constructor FStar.Pervasives.Native.Some>


; </end encoding FStar.Pervasives.Native.Some>


; </end encoding >


; <Start encoding FStar.Pervasives.Native.option__uu___haseq>


; </end encoding FStar.Pervasives.Native.option__uu___haseq>


; <Start encoding FStar.Pervasives.Native.uu___is_None>

(declare-fun FStar.Pervasives.Native.uu___is_None (Term Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Pervasives.Native.option a -> Prims.bool
(declare-fun Tm_arrow_f1a97bcd6ba9b40d22609b756f183afa () Term)
(declare-fun FStar.Pervasives.Native.uu___is_None@tok () Term)

; </end encoding FStar.Pervasives.Native.uu___is_None>


; <Skipped FStar.Pervasives.Native.uu___is_None/>


; <Start encoding FStar.Pervasives.Native.uu___is_Some>

(declare-fun FStar.Pervasives.Native.uu___is_Some (Term Term) Term)

(declare-fun FStar.Pervasives.Native.uu___is_Some@tok () Term)

; </end encoding FStar.Pervasives.Native.uu___is_Some>


; <Skipped FStar.Pervasives.Native.uu___is_Some/>


; <Start encoding FStar.Pervasives.Native.__proj__Some__item__v>

(declare-fun Tm_refine_4d5241eb6fe198666a8101195bbd4a2a (Term) Term)
(declare-fun FStar.Pervasives.Native.__proj__Some__item__v (Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Pervasives.Native.option a {Some? _} -> a
(declare-fun Tm_arrow_1b1398c011ff53e4194fc2ec00c7b411 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Some__item__v@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Some__item__v>


; <Skipped FStar.Pervasives.Native.__proj__Some__item__v/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple2 (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple2@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple2@x1 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple2@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mktuple2
(declare-fun FStar.Pervasives.Native.Mktuple2@tok () Term)
;;;;;;;;;;;;;;;;_1: 'a -> _2: 'b -> 'a * 'b
(declare-fun Tm_arrow_4054cc0a51327db54c2ed9ba3376a093 () Term)

; <Start encoding FStar.Pervasives.Native.tuple2>


; <start constructor FStar.Pervasives.Native.tuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
125)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple2 @x0
@x1))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple2))))

; </end constructor FStar.Pervasives.Native.tuple2>


; </end encoding FStar.Pervasives.Native.tuple2>


; <Start encoding FStar.Pervasives.Native.Mktuple2>


; <start constructor FStar.Pervasives.Native.Mktuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
132)
(= __@x0
(FStar.Pervasives.Native.Mktuple2 (FStar.Pervasives.Native.Mktuple2__a __@x0)
(FStar.Pervasives.Native.Mktuple2__b __@x0)
(FStar.Pervasives.Native.Mktuple2__1 __@x0)
(FStar.Pervasives.Native.Mktuple2__2 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple2>


; </end encoding FStar.Pervasives.Native.Mktuple2>


; </end encoding >


; <Start encoding FStar.Pervasives.Native.tuple2__uu___haseq>


; </end encoding FStar.Pervasives.Native.tuple2__uu___haseq>


; <Start encoding FStar.Pervasives.Native.uu___is_Mktuple2>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ('a * 'b) -> Prims.bool
(declare-fun Tm_arrow_eff71eeee4474e017e02350f86f54756 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple2@tok () Term)

; </end encoding FStar.Pervasives.Native.uu___is_Mktuple2>


; <Skipped FStar.Pervasives.Native.uu___is_Mktuple2/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple2__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ('a * 'b) -> 'a
(declare-fun Tm_arrow_b8cce376a4a678a51298a0f3945f25ce () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___1@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple2__item___1>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple2__item___1/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple2__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ('a * 'b) -> 'b
(declare-fun Tm_arrow_d952d001575ecb20c572af535c88dd2d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___2@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple2__item___2>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple2__item___2/>


; <Start encoding FStar.Pervasives.Native.fst>

(declare-fun FStar.Pervasives.Native.fst (Term Term Term) Term)

(declare-fun FStar.Pervasives.Native.fst@tok () Term)

; </end encoding FStar.Pervasives.Native.fst>


; <Start encoding FStar.Pervasives.Native.snd>

(declare-fun FStar.Pervasives.Native.snd (Term Term Term) Term)

(declare-fun FStar.Pervasives.Native.snd@tok () Term)

; </end encoding FStar.Pervasives.Native.snd>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple3@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple3@x1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple3@x2 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple3@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple3 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__3 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mktuple3
(declare-fun FStar.Pervasives.Native.Mktuple3@tok () Term)
;;;;;;;;;;;;;;;;_1: 'a -> _2: 'b -> _3: 'c -> ('a * 'b) * 'c
(declare-fun Tm_arrow_1bedda193f13e939931cf5d46ad84216 () Term)

; <Start encoding FStar.Pervasives.Native.tuple3>


; <start constructor FStar.Pervasives.Native.tuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
146)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple3 @x0
@x1
@x2))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple3))))

; </end constructor FStar.Pervasives.Native.tuple3>


; </end encoding FStar.Pervasives.Native.tuple3>


; <Start encoding FStar.Pervasives.Native.Mktuple3>


; <start constructor FStar.Pervasives.Native.Mktuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
153)
(= __@x0
(FStar.Pervasives.Native.Mktuple3 (FStar.Pervasives.Native.Mktuple3__a __@x0)
(FStar.Pervasives.Native.Mktuple3__b __@x0)
(FStar.Pervasives.Native.Mktuple3__c __@x0)
(FStar.Pervasives.Native.Mktuple3__1 __@x0)
(FStar.Pervasives.Native.Mktuple3__2 __@x0)
(FStar.Pervasives.Native.Mktuple3__3 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple3>


; </end encoding FStar.Pervasives.Native.Mktuple3>


; </end encoding >


; <Start encoding FStar.Pervasives.Native.tuple3__uu___haseq>


; </end encoding FStar.Pervasives.Native.tuple3__uu___haseq>


; <Start encoding FStar.Pervasives.Native.uu___is_Mktuple3>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple3 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (('a * 'b) * 'c) -> Prims.bool
(declare-fun Tm_arrow_f03c6dc5b30146aaca49ed4bf6f332a7 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple3@tok () Term)

; </end encoding FStar.Pervasives.Native.uu___is_Mktuple3>


; <Skipped FStar.Pervasives.Native.uu___is_Mktuple3/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple3__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (('a * 'b) * 'c) -> 'a
(declare-fun Tm_arrow_592c45439d32a71e1933eacb9776c9ed () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___1@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple3__item___1>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple3__item___1/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple3__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (('a * 'b) * 'c) -> 'b
(declare-fun Tm_arrow_9c9b0c5ac9b0fbfc367f406af296ecab () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___2@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple3__item___2>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple3__item___2/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple3__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___3 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (('a * 'b) * 'c) -> 'c
(declare-fun Tm_arrow_08246a62c9aeca08c44c602ad80e95a4 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___3@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple3__item___3>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple3__item___3/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple4 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple4@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple4@x1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple4@x2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple4@x3 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple4@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple4 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__4 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mktuple4
(declare-fun FStar.Pervasives.Native.Mktuple4@tok () Term)
;;;;;;;;;;;;;;;;_1: 'a -> _2: 'b -> _3: 'c -> _4: 'd -> (('a * 'b) * 'c) * 'd
(declare-fun Tm_arrow_cbe72a10167439fe1ecfaf4fec8fd23f () Term)

; <Start encoding FStar.Pervasives.Native.tuple4>


; <start constructor FStar.Pervasives.Native.tuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
165)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple4 @x0
@x1
@x2
@x3))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple4))))

; </end constructor FStar.Pervasives.Native.tuple4>


; </end encoding FStar.Pervasives.Native.tuple4>


; <Start encoding FStar.Pervasives.Native.Mktuple4>


; <start constructor FStar.Pervasives.Native.Mktuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
172)
(= __@x0
(FStar.Pervasives.Native.Mktuple4 (FStar.Pervasives.Native.Mktuple4__a __@x0)
(FStar.Pervasives.Native.Mktuple4__b __@x0)
(FStar.Pervasives.Native.Mktuple4__c __@x0)
(FStar.Pervasives.Native.Mktuple4__d __@x0)
(FStar.Pervasives.Native.Mktuple4__1 __@x0)
(FStar.Pervasives.Native.Mktuple4__2 __@x0)
(FStar.Pervasives.Native.Mktuple4__3 __@x0)
(FStar.Pervasives.Native.Mktuple4__4 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple4>


; </end encoding FStar.Pervasives.Native.Mktuple4>


; </end encoding >


; <Start encoding FStar.Pervasives.Native.tuple4__uu___haseq>


; </end encoding FStar.Pervasives.Native.tuple4__uu___haseq>


; <Start encoding FStar.Pervasives.Native.uu___is_Mktuple4>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple4 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((('a * 'b) * 'c) * 'd) -> Prims.bool
(declare-fun Tm_arrow_4319694c225efa92ce9fad6e9d81f761 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple4@tok () Term)

; </end encoding FStar.Pervasives.Native.uu___is_Mktuple4>


; <Skipped FStar.Pervasives.Native.uu___is_Mktuple4/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple4__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___1 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((('a * 'b) * 'c) * 'd) -> 'a
(declare-fun Tm_arrow_382d1e9129053162252ec57e86d46f82 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___1@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple4__item___1>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple4__item___1/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple4__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___2 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((('a * 'b) * 'c) * 'd) -> 'b
(declare-fun Tm_arrow_fffd25e5325d259efa0675ef649c6864 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___2@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple4__item___2>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple4__item___2/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple4__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___3 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((('a * 'b) * 'c) * 'd) -> 'c
(declare-fun Tm_arrow_57b4005e0833f7b396e349ed7cdd1bb2 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___3@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple4__item___3>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple4__item___3/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple4__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___4 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((('a * 'b) * 'c) * 'd) -> 'd
(declare-fun Tm_arrow_9e6c1a63d63f8735645b9898955a2dca () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___4@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple4__item___4>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple4__item___4/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple5 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple5@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple5@x1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple5@x2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple5@x3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple5@x4 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple5@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple5 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__5 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mktuple5
(declare-fun FStar.Pervasives.Native.Mktuple5@tok () Term)
;;;;;;;;;;;;;;;;_1: 'a -> _2: 'b -> _3: 'c -> _4: 'd -> _5: 'e -> ((('a * 'b) * 'c) * 'd) * 'e
(declare-fun Tm_arrow_dd8a078a1b97a81b5089dc3637cc2887 () Term)

; <Start encoding FStar.Pervasives.Native.tuple5>


; <start constructor FStar.Pervasives.Native.tuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
186)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple5 @x0
@x1
@x2
@x3
@x4))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple5))))

; </end constructor FStar.Pervasives.Native.tuple5>


; </end encoding FStar.Pervasives.Native.tuple5>


; <Start encoding FStar.Pervasives.Native.Mktuple5>


; <start constructor FStar.Pervasives.Native.Mktuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
193)
(= __@x0
(FStar.Pervasives.Native.Mktuple5 (FStar.Pervasives.Native.Mktuple5__a __@x0)
(FStar.Pervasives.Native.Mktuple5__b __@x0)
(FStar.Pervasives.Native.Mktuple5__c __@x0)
(FStar.Pervasives.Native.Mktuple5__d __@x0)
(FStar.Pervasives.Native.Mktuple5__e __@x0)
(FStar.Pervasives.Native.Mktuple5__1 __@x0)
(FStar.Pervasives.Native.Mktuple5__2 __@x0)
(FStar.Pervasives.Native.Mktuple5__3 __@x0)
(FStar.Pervasives.Native.Mktuple5__4 __@x0)
(FStar.Pervasives.Native.Mktuple5__5 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple5>


; </end encoding FStar.Pervasives.Native.Mktuple5>


; </end encoding >


; <Start encoding FStar.Pervasives.Native.tuple5__uu___haseq>


; </end encoding FStar.Pervasives.Native.tuple5__uu___haseq>


; <Start encoding FStar.Pervasives.Native.uu___is_Mktuple5>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple5 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((('a * 'b) * 'c) * 'd) * 'e) -> Prims.bool
(declare-fun Tm_arrow_cfa2e2c8b8b41312889ff659c4faa5f9 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple5@tok () Term)

; </end encoding FStar.Pervasives.Native.uu___is_Mktuple5>


; <Skipped FStar.Pervasives.Native.uu___is_Mktuple5/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple5__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___1 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((('a * 'b) * 'c) * 'd) * 'e) -> 'a
(declare-fun Tm_arrow_7519f72fe101267af170e00c6ce694af () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___1@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple5__item___1>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple5__item___1/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple5__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___2 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((('a * 'b) * 'c) * 'd) * 'e) -> 'b
(declare-fun Tm_arrow_3e46329f224aa70981a337f98afbaa87 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___2@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple5__item___2>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple5__item___2/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple5__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___3 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((('a * 'b) * 'c) * 'd) * 'e) -> 'c
(declare-fun Tm_arrow_55e6dc1b736536de45fedf844003f847 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___3@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple5__item___3>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple5__item___3/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple5__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___4 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((('a * 'b) * 'c) * 'd) * 'e) -> 'd
(declare-fun Tm_arrow_3a4e86c6aee1a39b4811bdbc12405398 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___4@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple5__item___4>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple5__item___4/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple5__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___5 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((('a * 'b) * 'c) * 'd) * 'e) -> 'e
(declare-fun Tm_arrow_1a78355922fdaba3f3848932dfc0a089 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___5@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple5__item___5>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple5__item___5/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple6 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple6@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple6@x1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple6@x2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple6@x3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple6@x4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple6@x5 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple6@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple6 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__6 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mktuple6
(declare-fun FStar.Pervasives.Native.Mktuple6@tok () Term)
;;;;;;;;;;;;;;;;_1: 'a -> _2: 'b -> _3: 'c -> _4: 'd -> _5: 'e -> _6: 'f -> (((('a * 'b) * 'c) * 'd) * 'e) * 'f
(declare-fun Tm_arrow_f277ffaa7e891207f9c6bff5b88ffd67 () Term)

; <Start encoding FStar.Pervasives.Native.tuple6>


; <start constructor FStar.Pervasives.Native.tuple6>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple6 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
209)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple6 @x0
@x1
@x2
@x3
@x4
@x5))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple6))))

; </end constructor FStar.Pervasives.Native.tuple6>


; </end encoding FStar.Pervasives.Native.tuple6>


; <Start encoding FStar.Pervasives.Native.Mktuple6>


; <start constructor FStar.Pervasives.Native.Mktuple6>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple6 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
216)
(= __@x0
(FStar.Pervasives.Native.Mktuple6 (FStar.Pervasives.Native.Mktuple6__a __@x0)
(FStar.Pervasives.Native.Mktuple6__b __@x0)
(FStar.Pervasives.Native.Mktuple6__c __@x0)
(FStar.Pervasives.Native.Mktuple6__d __@x0)
(FStar.Pervasives.Native.Mktuple6__e __@x0)
(FStar.Pervasives.Native.Mktuple6__f __@x0)
(FStar.Pervasives.Native.Mktuple6__1 __@x0)
(FStar.Pervasives.Native.Mktuple6__2 __@x0)
(FStar.Pervasives.Native.Mktuple6__3 __@x0)
(FStar.Pervasives.Native.Mktuple6__4 __@x0)
(FStar.Pervasives.Native.Mktuple6__5 __@x0)
(FStar.Pervasives.Native.Mktuple6__6 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple6>


; </end encoding FStar.Pervasives.Native.Mktuple6>


; </end encoding >


; <Start encoding FStar.Pervasives.Native.tuple6__uu___haseq>


; </end encoding FStar.Pervasives.Native.tuple6__uu___haseq>


; <Start encoding FStar.Pervasives.Native.uu___is_Mktuple6>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple6 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((((('a * 'b) * 'c) * 'd) * 'e) * 'f) -> Prims.bool
(declare-fun Tm_arrow_286587a1b9d299ba75a076f54a6dad5f () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple6@tok () Term)

; </end encoding FStar.Pervasives.Native.uu___is_Mktuple6>


; <Skipped FStar.Pervasives.Native.uu___is_Mktuple6/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple6__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___1 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((((('a * 'b) * 'c) * 'd) * 'e) * 'f) -> 'a
(declare-fun Tm_arrow_5b1e145eeceab869b8e427e6927dbd63 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___1@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple6__item___1>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple6__item___1/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple6__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___2 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((((('a * 'b) * 'c) * 'd) * 'e) * 'f) -> 'b
(declare-fun Tm_arrow_3207475e225d584881d3e0a297482887 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___2@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple6__item___2>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple6__item___2/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple6__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___3 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((((('a * 'b) * 'c) * 'd) * 'e) * 'f) -> 'c
(declare-fun Tm_arrow_43e491b3b537a523a4f10de18b1915f5 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___3@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple6__item___3>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple6__item___3/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple6__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___4 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((((('a * 'b) * 'c) * 'd) * 'e) * 'f) -> 'd
(declare-fun Tm_arrow_f5747d5b721642d7ecb757b043f20880 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___4@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple6__item___4>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple6__item___4/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple6__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___5 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((((('a * 'b) * 'c) * 'd) * 'e) * 'f) -> 'e
(declare-fun Tm_arrow_d6501381a0206e157ecc43950bb31fea () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___5@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple6__item___5>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple6__item___5/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple6__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___6 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((((('a * 'b) * 'c) * 'd) * 'e) * 'f) -> 'f
(declare-fun Tm_arrow_9c342f41120d0c7aea115b09b58cefb2 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___6@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple6__item___6>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple6__item___6/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple7 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple7@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple7@x1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple7@x2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple7@x3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple7@x4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple7@x5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple7@x6 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple7@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__7 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mktuple7
(declare-fun FStar.Pervasives.Native.Mktuple7@tok () Term)
;;;;;;;;;;;;;;;;_1: 'a -> _2: 'b -> _3: 'c -> _4: 'd -> _5: 'e -> _6: 'f -> _7: 'g   -> ((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g
(declare-fun Tm_arrow_37ee9ec407a0f7bb69bf1b308f74a230 () Term)

; <Start encoding FStar.Pervasives.Native.tuple7>


; <start constructor FStar.Pervasives.Native.tuple7>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple7 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
234)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple7))))

; </end constructor FStar.Pervasives.Native.tuple7>


; </end encoding FStar.Pervasives.Native.tuple7>


; <Start encoding FStar.Pervasives.Native.Mktuple7>


; <start constructor FStar.Pervasives.Native.Mktuple7>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple7 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
241)
(= __@x0
(FStar.Pervasives.Native.Mktuple7 (FStar.Pervasives.Native.Mktuple7__a __@x0)
(FStar.Pervasives.Native.Mktuple7__b __@x0)
(FStar.Pervasives.Native.Mktuple7__c __@x0)
(FStar.Pervasives.Native.Mktuple7__d __@x0)
(FStar.Pervasives.Native.Mktuple7__e __@x0)
(FStar.Pervasives.Native.Mktuple7__f __@x0)
(FStar.Pervasives.Native.Mktuple7__g __@x0)
(FStar.Pervasives.Native.Mktuple7__1 __@x0)
(FStar.Pervasives.Native.Mktuple7__2 __@x0)
(FStar.Pervasives.Native.Mktuple7__3 __@x0)
(FStar.Pervasives.Native.Mktuple7__4 __@x0)
(FStar.Pervasives.Native.Mktuple7__5 __@x0)
(FStar.Pervasives.Native.Mktuple7__6 __@x0)
(FStar.Pervasives.Native.Mktuple7__7 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple7>


; </end encoding FStar.Pervasives.Native.Mktuple7>


; </end encoding >


; <Start encoding FStar.Pervasives.Native.tuple7__uu___haseq>


; </end encoding FStar.Pervasives.Native.tuple7__uu___haseq>


; <Start encoding FStar.Pervasives.Native.uu___is_Mktuple7>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple7 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) -> Prims.bool
(declare-fun Tm_arrow_612dde2fedb1440c5d790ba7f5015319 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple7@tok () Term)

; </end encoding FStar.Pervasives.Native.uu___is_Mktuple7>


; <Skipped FStar.Pervasives.Native.uu___is_Mktuple7/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple7__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___1 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) -> 'a
(declare-fun Tm_arrow_01c4488a68699f466c59799f5c1173ff () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___1@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple7__item___1>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple7__item___1/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple7__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___2 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) -> 'b
(declare-fun Tm_arrow_f317591858699585c67fe4ba8664e34c () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___2@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple7__item___2>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple7__item___2/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple7__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___3 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) -> 'c
(declare-fun Tm_arrow_44afce9d86f095aacc82b3ea2e0e223c () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___3@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple7__item___3>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple7__item___3/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple7__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___4 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) -> 'd
(declare-fun Tm_arrow_e857539d4cc5be0510cbcfb97cb64b35 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___4@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple7__item___4>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple7__item___4/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple7__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___5 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) -> 'e
(declare-fun Tm_arrow_a249d3d5ba06026b12d41e289bb88061 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___5@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple7__item___5>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple7__item___5/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple7__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___6 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) -> 'f
(declare-fun Tm_arrow_bf614c740d11cac9b5f8eb20b24c7d00 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___6@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple7__item___6>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple7__item___6/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple7__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___7 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) -> 'g
(declare-fun Tm_arrow_e775fbf03b08091e48143165286522f7 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___7@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple7__item___7>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple7__item___7/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple8 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple8@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple8@x1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple8@x2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple8@x3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple8@x4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple8@x5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple8@x6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple8@x7 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple8@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__8 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mktuple8
(declare-fun FStar.Pervasives.Native.Mktuple8@tok () Term)
;;;;;;;;;;;;;;;;_1: 'a -> _2: 'b -> _3: 'c -> _4: 'd -> _5: 'e -> _6: 'f -> _7: 'g -> _8: 'h   -> (((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h
(declare-fun Tm_arrow_e922a339a0aa0f375ed7113049811583 () Term)

; <Start encoding FStar.Pervasives.Native.tuple8>


; <start constructor FStar.Pervasives.Native.tuple8>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple8 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
261)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple8))))

; </end constructor FStar.Pervasives.Native.tuple8>


; </end encoding FStar.Pervasives.Native.tuple8>


; <Start encoding FStar.Pervasives.Native.Mktuple8>


; <start constructor FStar.Pervasives.Native.Mktuple8>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple8 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
268)
(= __@x0
(FStar.Pervasives.Native.Mktuple8 (FStar.Pervasives.Native.Mktuple8__a __@x0)
(FStar.Pervasives.Native.Mktuple8__b __@x0)
(FStar.Pervasives.Native.Mktuple8__c __@x0)
(FStar.Pervasives.Native.Mktuple8__d __@x0)
(FStar.Pervasives.Native.Mktuple8__e __@x0)
(FStar.Pervasives.Native.Mktuple8__f __@x0)
(FStar.Pervasives.Native.Mktuple8__g __@x0)
(FStar.Pervasives.Native.Mktuple8__h __@x0)
(FStar.Pervasives.Native.Mktuple8__1 __@x0)
(FStar.Pervasives.Native.Mktuple8__2 __@x0)
(FStar.Pervasives.Native.Mktuple8__3 __@x0)
(FStar.Pervasives.Native.Mktuple8__4 __@x0)
(FStar.Pervasives.Native.Mktuple8__5 __@x0)
(FStar.Pervasives.Native.Mktuple8__6 __@x0)
(FStar.Pervasives.Native.Mktuple8__7 __@x0)
(FStar.Pervasives.Native.Mktuple8__8 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple8>


; </end encoding FStar.Pervasives.Native.Mktuple8>


; </end encoding >


; <Start encoding FStar.Pervasives.Native.tuple8__uu___haseq>


; </end encoding FStar.Pervasives.Native.tuple8__uu___haseq>


; <Start encoding FStar.Pervasives.Native.uu___is_Mktuple8>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple8 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) -> Prims.bool
(declare-fun Tm_arrow_ee31533e24c78558f4566668a6ec027c () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple8@tok () Term)

; </end encoding FStar.Pervasives.Native.uu___is_Mktuple8>


; <Skipped FStar.Pervasives.Native.uu___is_Mktuple8/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple8__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___1 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) -> 'a
(declare-fun Tm_arrow_c971649e117e4941e7317eff508d5ea7 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___1@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple8__item___1>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple8__item___1/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple8__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___2 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) -> 'b
(declare-fun Tm_arrow_97dd51e3888c1c543d8f6c73d1808548 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___2@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple8__item___2>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple8__item___2/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple8__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___3 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) -> 'c
(declare-fun Tm_arrow_3931d1873633dc65fed4e022ee3df3ca () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___3@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple8__item___3>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple8__item___3/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple8__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___4 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) -> 'd
(declare-fun Tm_arrow_5c791e62f9472e4c351c2befb2b7a3d8 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___4@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple8__item___4>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple8__item___4/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple8__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___5 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) -> 'e
(declare-fun Tm_arrow_7ef7cac898ca0ef25893959e91d8c6ce () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___5@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple8__item___5>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple8__item___5/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple8__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___6 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) -> 'f
(declare-fun Tm_arrow_b0ae5f58a7fa002e0313b58bf5fc74cb () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___6@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple8__item___6>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple8__item___6/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple8__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___7 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) -> 'g
(declare-fun Tm_arrow_7fcd94f7549ca8acfadc26bc5b82f590 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___7@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple8__item___7>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple8__item___7/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple8__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___8 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) -> 'h
(declare-fun Tm_arrow_feaaf61fa62fef18c5ee7c39e9f86573 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___8@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple8__item___8>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple8__item___8/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple9 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple9@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple9@x1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple9@x2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple9@x3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple9@x4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple9@x5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple9@x6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple9@x7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple9@x8 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple9@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__9 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mktuple9
(declare-fun FStar.Pervasives.Native.Mktuple9@tok () Term)
;;;;;;;;;;;;;;;;_1: 'a -> _2: 'b -> _3: 'c -> _4: 'd -> _5: 'e -> _6: 'f -> _7: 'g -> _8: 'h -> _9: 'i   -> ((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i
(declare-fun Tm_arrow_0c6bc368a301d7de6e1939ebea91ee60 () Term)

; <Start encoding FStar.Pervasives.Native.tuple9>


; <start constructor FStar.Pervasives.Native.tuple9>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple9 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
290)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple9 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple9))))

; </end constructor FStar.Pervasives.Native.tuple9>


; </end encoding FStar.Pervasives.Native.tuple9>


; <Start encoding FStar.Pervasives.Native.Mktuple9>


; <start constructor FStar.Pervasives.Native.Mktuple9>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple9 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
297)
(= __@x0
(FStar.Pervasives.Native.Mktuple9 (FStar.Pervasives.Native.Mktuple9__a __@x0)
(FStar.Pervasives.Native.Mktuple9__b __@x0)
(FStar.Pervasives.Native.Mktuple9__c __@x0)
(FStar.Pervasives.Native.Mktuple9__d __@x0)
(FStar.Pervasives.Native.Mktuple9__e __@x0)
(FStar.Pervasives.Native.Mktuple9__f __@x0)
(FStar.Pervasives.Native.Mktuple9__g __@x0)
(FStar.Pervasives.Native.Mktuple9__h __@x0)
(FStar.Pervasives.Native.Mktuple9__i __@x0)
(FStar.Pervasives.Native.Mktuple9__1 __@x0)
(FStar.Pervasives.Native.Mktuple9__2 __@x0)
(FStar.Pervasives.Native.Mktuple9__3 __@x0)
(FStar.Pervasives.Native.Mktuple9__4 __@x0)
(FStar.Pervasives.Native.Mktuple9__5 __@x0)
(FStar.Pervasives.Native.Mktuple9__6 __@x0)
(FStar.Pervasives.Native.Mktuple9__7 __@x0)
(FStar.Pervasives.Native.Mktuple9__8 __@x0)
(FStar.Pervasives.Native.Mktuple9__9 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple9>


; </end encoding FStar.Pervasives.Native.Mktuple9>


; </end encoding >


; <Start encoding FStar.Pervasives.Native.tuple9__uu___haseq>


; </end encoding FStar.Pervasives.Native.tuple9__uu___haseq>


; <Start encoding FStar.Pervasives.Native.uu___is_Mktuple9>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple9 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) -> Prims.bool
(declare-fun Tm_arrow_9ac8f39c7b1df1e87db7c9bf5bc37a38 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple9@tok () Term)

; </end encoding FStar.Pervasives.Native.uu___is_Mktuple9>


; <Skipped FStar.Pervasives.Native.uu___is_Mktuple9/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple9__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___1 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) -> 'a
(declare-fun Tm_arrow_270119cc1f13c9afeb25322d78efc328 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___1@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple9__item___1>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple9__item___1/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple9__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___2 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) -> 'b
(declare-fun Tm_arrow_3c368dee2c86a1af7bd7ea91baab7613 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___2@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple9__item___2>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple9__item___2/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple9__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___3 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) -> 'c
(declare-fun Tm_arrow_e9c745e2da3dec50930b0a7e01a11cc3 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___3@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple9__item___3>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple9__item___3/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple9__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___4 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) -> 'd
(declare-fun Tm_arrow_a82ff41c5c66cd37481c83584c94a54d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___4@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple9__item___4>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple9__item___4/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple9__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___5 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) -> 'e
(declare-fun Tm_arrow_1b3b4c5e68fdf7277f64bde93e6534de () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___5@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple9__item___5>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple9__item___5/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple9__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___6 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) -> 'f
(declare-fun Tm_arrow_837f1324f6fa51bb8a0e45ee48e4e058 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___6@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple9__item___6>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple9__item___6/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple9__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___7 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) -> 'g
(declare-fun Tm_arrow_a7562220963e3431d35de76c3c9c87b9 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___7@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple9__item___7>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple9__item___7/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple9__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___8 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) -> 'h
(declare-fun Tm_arrow_861b810bc1c20bbd221cecbce824b695 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___8@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple9__item___8>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple9__item___8/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple9__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___9 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) -> 'i
(declare-fun Tm_arrow_9a54b18d8e08fdf0e20244b3f960c9dc () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___9@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple9__item___9>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple9__item___9/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple10 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple10@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple10@x1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple10@x2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple10@x3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple10@x4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple10@x5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple10@x6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple10@x7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple10@x8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple10@x9 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple10@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple10 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__10 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mktuple10
(declare-fun FStar.Pervasives.Native.Mktuple10@tok () Term)
;;;;;;;;;;;;;;;;_1: 'a -> _2: 'b -> _3: 'c -> _4: 'd -> _5: 'e -> _6: 'f -> _7: 'g -> _8: 'h -> _9: 'i -> _10: 'j   -> (((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j
(declare-fun Tm_arrow_61d31241317018093b2245d256adbcb5 () Term)

; <Start encoding FStar.Pervasives.Native.tuple10>


; <start constructor FStar.Pervasives.Native.tuple10>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple10 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
321)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple10 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple10))))

; </end constructor FStar.Pervasives.Native.tuple10>


; </end encoding FStar.Pervasives.Native.tuple10>


; <Start encoding FStar.Pervasives.Native.Mktuple10>


; <start constructor FStar.Pervasives.Native.Mktuple10>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple10 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
328)
(= __@x0
(FStar.Pervasives.Native.Mktuple10 (FStar.Pervasives.Native.Mktuple10__a __@x0)
(FStar.Pervasives.Native.Mktuple10__b __@x0)
(FStar.Pervasives.Native.Mktuple10__c __@x0)
(FStar.Pervasives.Native.Mktuple10__d __@x0)
(FStar.Pervasives.Native.Mktuple10__e __@x0)
(FStar.Pervasives.Native.Mktuple10__f __@x0)
(FStar.Pervasives.Native.Mktuple10__g __@x0)
(FStar.Pervasives.Native.Mktuple10__h __@x0)
(FStar.Pervasives.Native.Mktuple10__i __@x0)
(FStar.Pervasives.Native.Mktuple10__j __@x0)
(FStar.Pervasives.Native.Mktuple10__1 __@x0)
(FStar.Pervasives.Native.Mktuple10__2 __@x0)
(FStar.Pervasives.Native.Mktuple10__3 __@x0)
(FStar.Pervasives.Native.Mktuple10__4 __@x0)
(FStar.Pervasives.Native.Mktuple10__5 __@x0)
(FStar.Pervasives.Native.Mktuple10__6 __@x0)
(FStar.Pervasives.Native.Mktuple10__7 __@x0)
(FStar.Pervasives.Native.Mktuple10__8 __@x0)
(FStar.Pervasives.Native.Mktuple10__9 __@x0)
(FStar.Pervasives.Native.Mktuple10__10 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple10>


; </end encoding FStar.Pervasives.Native.Mktuple10>


; </end encoding >


; <Start encoding FStar.Pervasives.Native.tuple10__uu___haseq>


; </end encoding FStar.Pervasives.Native.tuple10__uu___haseq>


; <Start encoding FStar.Pervasives.Native.uu___is_Mktuple10>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple10 (Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) -> Prims.bool
(declare-fun Tm_arrow_f27282a056f525d8710bf32204d252ec () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple10@tok () Term)

; </end encoding FStar.Pervasives.Native.uu___is_Mktuple10>


; <Skipped FStar.Pervasives.Native.uu___is_Mktuple10/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple10__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___1 (Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) -> 'a
(declare-fun Tm_arrow_c581e9177cd071a1b6e057fca49ea75b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___1@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple10__item___1>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple10__item___1/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple10__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___2 (Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) -> 'b
(declare-fun Tm_arrow_ae4b2db87d7c69a8380f4d5ae20f2149 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___2@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple10__item___2>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple10__item___2/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple10__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___3 (Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) -> 'c
(declare-fun Tm_arrow_a21274cb112dc6619b2bde244e6a0f9a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___3@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple10__item___3>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple10__item___3/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple10__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___4 (Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) -> 'd
(declare-fun Tm_arrow_9a051d5cacf4367d170d590ba8bb720d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___4@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple10__item___4>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple10__item___4/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple10__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___5 (Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) -> 'e
(declare-fun Tm_arrow_bbd73769b626202d4de52d4d60cd3b75 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___5@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple10__item___5>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple10__item___5/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple10__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___6 (Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) -> 'f
(declare-fun Tm_arrow_7ceeded5a3852448c1a5406becbd990e () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___6@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple10__item___6>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple10__item___6/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple10__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___7 (Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) -> 'g
(declare-fun Tm_arrow_c68947c71d484ad43cd50646c4e1daf4 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___7@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple10__item___7>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple10__item___7/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple10__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___8 (Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) -> 'h
(declare-fun Tm_arrow_e7b9ff90289491020fe84c6ab3bc60c6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___8@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple10__item___8>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple10__item___8/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple10__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___9 (Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) -> 'i
(declare-fun Tm_arrow_6dbb3170f112f78092d1caee0b341678 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___9@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple10__item___9>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple10__item___9/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple10__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___10 (Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) -> 'j
(declare-fun Tm_arrow_45598a99c0a7fcc1bf2258b9ad4256cf () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___10@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple10__item___10>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple10__item___10/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple11 (Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple11@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple11@x1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple11@x2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple11@x3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple11@x4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple11@x5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple11@x6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple11@x7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple11@x8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple11@x9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple11@x10 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple11@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple11 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__11 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mktuple11
(declare-fun FStar.Pervasives.Native.Mktuple11@tok () Term)
;;;;;;;;;;;;;;;;_1: 'a ->     _2: 'b ->     _3: 'c ->     _4: 'd ->     _5: 'e ->     _6: 'f ->     _7: 'g ->     _8: 'h ->     _9: 'i ->     _10: 'j ->     _11: 'k   -> ((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k
(declare-fun Tm_arrow_bf9783a1a3bf19ab918f42acff1daa32 () Term)

; <Start encoding FStar.Pervasives.Native.tuple11>


; <start constructor FStar.Pervasives.Native.tuple11>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple11 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
354)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple11 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple11))))

; </end constructor FStar.Pervasives.Native.tuple11>


; </end encoding FStar.Pervasives.Native.tuple11>


; <Start encoding FStar.Pervasives.Native.Mktuple11>


; <start constructor FStar.Pervasives.Native.Mktuple11>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple11 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
361)
(= __@x0
(FStar.Pervasives.Native.Mktuple11 (FStar.Pervasives.Native.Mktuple11__a __@x0)
(FStar.Pervasives.Native.Mktuple11__b __@x0)
(FStar.Pervasives.Native.Mktuple11__c __@x0)
(FStar.Pervasives.Native.Mktuple11__d __@x0)
(FStar.Pervasives.Native.Mktuple11__e __@x0)
(FStar.Pervasives.Native.Mktuple11__f __@x0)
(FStar.Pervasives.Native.Mktuple11__g __@x0)
(FStar.Pervasives.Native.Mktuple11__h __@x0)
(FStar.Pervasives.Native.Mktuple11__i __@x0)
(FStar.Pervasives.Native.Mktuple11__j __@x0)
(FStar.Pervasives.Native.Mktuple11__k __@x0)
(FStar.Pervasives.Native.Mktuple11__1 __@x0)
(FStar.Pervasives.Native.Mktuple11__2 __@x0)
(FStar.Pervasives.Native.Mktuple11__3 __@x0)
(FStar.Pervasives.Native.Mktuple11__4 __@x0)
(FStar.Pervasives.Native.Mktuple11__5 __@x0)
(FStar.Pervasives.Native.Mktuple11__6 __@x0)
(FStar.Pervasives.Native.Mktuple11__7 __@x0)
(FStar.Pervasives.Native.Mktuple11__8 __@x0)
(FStar.Pervasives.Native.Mktuple11__9 __@x0)
(FStar.Pervasives.Native.Mktuple11__10 __@x0)
(FStar.Pervasives.Native.Mktuple11__11 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple11>


; </end encoding FStar.Pervasives.Native.Mktuple11>


; </end encoding >


; <Start encoding FStar.Pervasives.Native.tuple11__uu___haseq>


; </end encoding FStar.Pervasives.Native.tuple11__uu___haseq>


; <Start encoding FStar.Pervasives.Native.uu___is_Mktuple11>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple11 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) -> Prims.bool
(declare-fun Tm_arrow_005819ee7a23a5c47189bae72b85d85c () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple11@tok () Term)

; </end encoding FStar.Pervasives.Native.uu___is_Mktuple11>


; <Skipped FStar.Pervasives.Native.uu___is_Mktuple11/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple11__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) -> 'a
(declare-fun Tm_arrow_31968e334e9582d95281307f534992a9 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___1@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple11__item___1>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple11__item___1/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple11__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) -> 'b
(declare-fun Tm_arrow_6252dd9f4473dc54a3482810e8556404 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___2@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple11__item___2>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple11__item___2/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple11__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) -> 'c
(declare-fun Tm_arrow_ec3ce6b7406c091cd7d0961922bb5a02 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___3@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple11__item___3>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple11__item___3/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple11__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) -> 'd
(declare-fun Tm_arrow_be7571e73b0e7fc24d03efe0e003c054 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___4@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple11__item___4>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple11__item___4/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple11__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) -> 'e
(declare-fun Tm_arrow_97ae7d913e508c46c48c3b51553d4459 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___5@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple11__item___5>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple11__item___5/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple11__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) -> 'f
(declare-fun Tm_arrow_1dca311798936510e0ead61e14cf32a6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___6@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple11__item___6>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple11__item___6/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple11__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) -> 'g
(declare-fun Tm_arrow_eec431ea31093a646681ef2ceb2e2986 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___7@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple11__item___7>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple11__item___7/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple11__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) -> 'h
(declare-fun Tm_arrow_689b2f06e9fd83f7a84ce80a13d338c6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___8@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple11__item___8>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple11__item___8/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple11__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) -> 'i
(declare-fun Tm_arrow_20210a3d9498f929cb7aa68d9e8b5ebf () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___9@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple11__item___9>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple11__item___9/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple11__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) -> 'j
(declare-fun Tm_arrow_96812f2124d88760b2002bbe1502c3c9 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___10@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple11__item___10>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple11__item___10/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple11__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) -> 'k
(declare-fun Tm_arrow_abcfa2582f68905d460c5ef4a7642f2d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___11@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple11__item___11>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple11__item___11/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple12 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple12@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple12@x1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple12@x2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple12@x3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple12@x4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple12@x5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple12@x6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple12@x7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple12@x8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple12@x9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple12@x10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple12@x11 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple12@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple12 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__l (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__11 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__12 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mktuple12
(declare-fun FStar.Pervasives.Native.Mktuple12@tok () Term)
;;;;;;;;;;;;;;;;_1: 'a ->     _2: 'b ->     _3: 'c ->     _4: 'd ->     _5: 'e ->     _6: 'f ->     _7: 'g ->     _8: 'h ->     _9: 'i ->     _10: 'j ->     _11: 'k ->     _12: 'l   -> (((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l
(declare-fun Tm_arrow_4d5cd995d6f44a2ec39d0f193be0be65 () Term)

; <Start encoding FStar.Pervasives.Native.tuple12>


; <start constructor FStar.Pervasives.Native.tuple12>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple12 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
389)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple12 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple12))))

; </end constructor FStar.Pervasives.Native.tuple12>


; </end encoding FStar.Pervasives.Native.tuple12>


; <Start encoding FStar.Pervasives.Native.Mktuple12>


; <start constructor FStar.Pervasives.Native.Mktuple12>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple12 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
396)
(= __@x0
(FStar.Pervasives.Native.Mktuple12 (FStar.Pervasives.Native.Mktuple12__a __@x0)
(FStar.Pervasives.Native.Mktuple12__b __@x0)
(FStar.Pervasives.Native.Mktuple12__c __@x0)
(FStar.Pervasives.Native.Mktuple12__d __@x0)
(FStar.Pervasives.Native.Mktuple12__e __@x0)
(FStar.Pervasives.Native.Mktuple12__f __@x0)
(FStar.Pervasives.Native.Mktuple12__g __@x0)
(FStar.Pervasives.Native.Mktuple12__h __@x0)
(FStar.Pervasives.Native.Mktuple12__i __@x0)
(FStar.Pervasives.Native.Mktuple12__j __@x0)
(FStar.Pervasives.Native.Mktuple12__k __@x0)
(FStar.Pervasives.Native.Mktuple12__l __@x0)
(FStar.Pervasives.Native.Mktuple12__1 __@x0)
(FStar.Pervasives.Native.Mktuple12__2 __@x0)
(FStar.Pervasives.Native.Mktuple12__3 __@x0)
(FStar.Pervasives.Native.Mktuple12__4 __@x0)
(FStar.Pervasives.Native.Mktuple12__5 __@x0)
(FStar.Pervasives.Native.Mktuple12__6 __@x0)
(FStar.Pervasives.Native.Mktuple12__7 __@x0)
(FStar.Pervasives.Native.Mktuple12__8 __@x0)
(FStar.Pervasives.Native.Mktuple12__9 __@x0)
(FStar.Pervasives.Native.Mktuple12__10 __@x0)
(FStar.Pervasives.Native.Mktuple12__11 __@x0)
(FStar.Pervasives.Native.Mktuple12__12 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple12>


; </end encoding FStar.Pervasives.Native.Mktuple12>


; </end encoding >


; <Start encoding FStar.Pervasives.Native.tuple12__uu___haseq>


; </end encoding FStar.Pervasives.Native.tuple12__uu___haseq>


; <Start encoding FStar.Pervasives.Native.uu___is_Mktuple12>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple12 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l)   -> Prims.bool
(declare-fun Tm_arrow_5c9f47d9090f554c9826d2f65e388f20 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple12@tok () Term)

; </end encoding FStar.Pervasives.Native.uu___is_Mktuple12>


; <Skipped FStar.Pervasives.Native.uu___is_Mktuple12/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple12__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l) -> 'a
(declare-fun Tm_arrow_618941d7cf5ddbaabe15df8579b4a387 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___1@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple12__item___1>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple12__item___1/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple12__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l) -> 'b
(declare-fun Tm_arrow_84e9e2280e9bcb3233e4f33f86d66ea6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___2@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple12__item___2>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple12__item___2/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple12__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l) -> 'c
(declare-fun Tm_arrow_1fa79c5abf9f18607bd2e46a1a6967fa () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___3@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple12__item___3>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple12__item___3/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple12__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l) -> 'd
(declare-fun Tm_arrow_0f49c582489d782b08195e81221181dc () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___4@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple12__item___4>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple12__item___4/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple12__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l) -> 'e
(declare-fun Tm_arrow_29b7181ebb44f9e4a45f95c4f8478c6a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___5@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple12__item___5>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple12__item___5/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple12__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l) -> 'f
(declare-fun Tm_arrow_3cc2863a7d7f23e3916fa1e43483cb90 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___6@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple12__item___6>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple12__item___6/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple12__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l) -> 'g
(declare-fun Tm_arrow_c7deea49701ab64a73985bf522e46359 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___7@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple12__item___7>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple12__item___7/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple12__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l) -> 'h
(declare-fun Tm_arrow_380615e7761919086537a14273a02d22 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___8@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple12__item___8>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple12__item___8/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple12__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l) -> 'i
(declare-fun Tm_arrow_245250918a4432b31aea8152d056489a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___9@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple12__item___9>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple12__item___9/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple12__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l) -> 'j
(declare-fun Tm_arrow_2a967c8402c441e6d8a9336a7568e4de () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___10@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple12__item___10>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple12__item___10/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple12__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l) -> 'k
(declare-fun Tm_arrow_543c3feac0cd9e04ecb6cfd74ced8964 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___11@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple12__item___11>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple12__item___11/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple12__item___12>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___12 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: ((((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l) -> 'l
(declare-fun Tm_arrow_e91029e2320896c60e94f554727a0c41 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___12@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple12__item___12>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple12__item___12/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple13 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple13@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple13@x1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple13@x2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple13@x3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple13@x4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple13@x5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple13@x6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple13@x7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple13@x8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple13@x9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple13@x10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple13@x11 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple13@x12 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple13@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__l (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__m (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__11 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__12 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__13 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mktuple13
(declare-fun FStar.Pervasives.Native.Mktuple13@tok () Term)
;;;;;;;;;;;;;;;;_1: 'a ->     _2: 'b ->     _3: 'c ->     _4: 'd ->     _5: 'e ->     _6: 'f ->     _7: 'g ->     _8: 'h ->     _9: 'i ->     _10: 'j ->     _11: 'k ->     _12: 'l ->     _13: 'm   -> ((((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l) * 'm
(declare-fun Tm_arrow_6462785e86ca440ee74ed32e1053eae3 () Term)

; <Start encoding FStar.Pervasives.Native.tuple13>


; <start constructor FStar.Pervasives.Native.tuple13>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple13 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
426)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple13 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple13))))

; </end constructor FStar.Pervasives.Native.tuple13>


; </end encoding FStar.Pervasives.Native.tuple13>


; <Start encoding FStar.Pervasives.Native.Mktuple13>


; <start constructor FStar.Pervasives.Native.Mktuple13>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple13 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
433)
(= __@x0
(FStar.Pervasives.Native.Mktuple13 (FStar.Pervasives.Native.Mktuple13__a __@x0)
(FStar.Pervasives.Native.Mktuple13__b __@x0)
(FStar.Pervasives.Native.Mktuple13__c __@x0)
(FStar.Pervasives.Native.Mktuple13__d __@x0)
(FStar.Pervasives.Native.Mktuple13__e __@x0)
(FStar.Pervasives.Native.Mktuple13__f __@x0)
(FStar.Pervasives.Native.Mktuple13__g __@x0)
(FStar.Pervasives.Native.Mktuple13__h __@x0)
(FStar.Pervasives.Native.Mktuple13__i __@x0)
(FStar.Pervasives.Native.Mktuple13__j __@x0)
(FStar.Pervasives.Native.Mktuple13__k __@x0)
(FStar.Pervasives.Native.Mktuple13__l __@x0)
(FStar.Pervasives.Native.Mktuple13__m __@x0)
(FStar.Pervasives.Native.Mktuple13__1 __@x0)
(FStar.Pervasives.Native.Mktuple13__2 __@x0)
(FStar.Pervasives.Native.Mktuple13__3 __@x0)
(FStar.Pervasives.Native.Mktuple13__4 __@x0)
(FStar.Pervasives.Native.Mktuple13__5 __@x0)
(FStar.Pervasives.Native.Mktuple13__6 __@x0)
(FStar.Pervasives.Native.Mktuple13__7 __@x0)
(FStar.Pervasives.Native.Mktuple13__8 __@x0)
(FStar.Pervasives.Native.Mktuple13__9 __@x0)
(FStar.Pervasives.Native.Mktuple13__10 __@x0)
(FStar.Pervasives.Native.Mktuple13__11 __@x0)
(FStar.Pervasives.Native.Mktuple13__12 __@x0)
(FStar.Pervasives.Native.Mktuple13__13 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple13>


; </end encoding FStar.Pervasives.Native.Mktuple13>


; </end encoding >


; <Start encoding FStar.Pervasives.Native.tuple13__uu___haseq>


; </end encoding FStar.Pervasives.Native.tuple13__uu___haseq>


; <Start encoding FStar.Pervasives.Native.uu___is_Mktuple13>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l) * 'm)   -> Prims.bool
(declare-fun Tm_arrow_68c092e8b387730b412c4dcf592b12d3 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple13@tok () Term)

; </end encoding FStar.Pervasives.Native.uu___is_Mktuple13>


; <Skipped FStar.Pervasives.Native.uu___is_Mktuple13/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple13__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l) * 'm)   -> 'a
(declare-fun Tm_arrow_82a3dc3a5dbad615d8d4a31db238e43f () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___1@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple13__item___1>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple13__item___1/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple13__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l) * 'm)   -> 'b
(declare-fun Tm_arrow_1da976aaa65f1c6b8b256dfc45c41306 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___2@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple13__item___2>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple13__item___2/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple13__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l) * 'm)   -> 'c
(declare-fun Tm_arrow_ca5cf529c415deee29e0a34c0c5d1c9f () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___3@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple13__item___3>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple13__item___3/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple13__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l) * 'm)   -> 'd
(declare-fun Tm_arrow_94f6c578541b6cb528ca9e7dd1dacc3b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___4@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple13__item___4>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple13__item___4/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple13__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l) * 'm)   -> 'e
(declare-fun Tm_arrow_211e172b7220adc186d8a02ff17e8780 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___5@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple13__item___5>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple13__item___5/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple13__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l) * 'm)   -> 'f
(declare-fun Tm_arrow_9276a4f669d8497205e8d59f12da53ba () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___6@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple13__item___6>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple13__item___6/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple13__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l) * 'm)   -> 'g
(declare-fun Tm_arrow_8aa8f381a5ed57cbbae9dcd2405ce80f () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___7@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple13__item___7>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple13__item___7/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple13__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l) * 'm)   -> 'h
(declare-fun Tm_arrow_51814106613688cf259d7cdba9c24d93 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___8@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple13__item___8>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple13__item___8/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple13__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l) * 'm)   -> 'i
(declare-fun Tm_arrow_05fec25e6f03f974bb2933a910642d7e () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___9@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple13__item___9>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple13__item___9/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple13__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l) * 'm)   -> 'j
(declare-fun Tm_arrow_3280ee04611a7985c9d107bb1a8a330a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___10@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple13__item___10>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple13__item___10/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple13__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l) * 'm)   -> 'k
(declare-fun Tm_arrow_86c868d5d5058e8e5ec1f4d0285c7e90 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___11@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple13__item___11>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple13__item___11/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple13__item___12>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___12 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l) * 'm)   -> 'l
(declare-fun Tm_arrow_7263c1a3c4475bb4e4b41a1be4bf22da () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___12@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple13__item___12>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple13__item___12/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple13__item___13>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: (((((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l) * 'm)   -> 'm
(declare-fun Tm_arrow_338c65ae58844787891c6f47cf01c068 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___13@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple13__item___13>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple13__item___13/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple14@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple14@x1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple14@x2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple14@x3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple14@x4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple14@x5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple14@x6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple14@x7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple14@x8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple14@x9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple14@x10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple14@x11 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple14@x12 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.tuple14@x13 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple14@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__l (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__m (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__n (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__11 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__12 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__13 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__14 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mktuple14
(declare-fun FStar.Pervasives.Native.Mktuple14@tok () Term)
;;;;;;;;;;;;;;;;_1: 'a ->     _2: 'b ->     _3: 'c ->     _4: 'd ->     _5: 'e ->     _6: 'f ->     _7: 'g ->     _8: 'h ->     _9: 'i ->     _10: 'j ->     _11: 'k ->     _12: 'l ->     _13: 'm ->     _14: 'n   -> (((((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l) * 'm) * 'n
(declare-fun Tm_arrow_484e3bf88a886900f7e695d7333615e9 () Term)

; <Start encoding FStar.Pervasives.Native.tuple14>


; <start constructor FStar.Pervasives.Native.tuple14>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple14 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
465)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple14 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple14))))

; </end constructor FStar.Pervasives.Native.tuple14>


; </end encoding FStar.Pervasives.Native.tuple14>


; <Start encoding FStar.Pervasives.Native.Mktuple14>


; <start constructor FStar.Pervasives.Native.Mktuple14>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple14 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
472)
(= __@x0
(FStar.Pervasives.Native.Mktuple14 (FStar.Pervasives.Native.Mktuple14__a __@x0)
(FStar.Pervasives.Native.Mktuple14__b __@x0)
(FStar.Pervasives.Native.Mktuple14__c __@x0)
(FStar.Pervasives.Native.Mktuple14__d __@x0)
(FStar.Pervasives.Native.Mktuple14__e __@x0)
(FStar.Pervasives.Native.Mktuple14__f __@x0)
(FStar.Pervasives.Native.Mktuple14__g __@x0)
(FStar.Pervasives.Native.Mktuple14__h __@x0)
(FStar.Pervasives.Native.Mktuple14__i __@x0)
(FStar.Pervasives.Native.Mktuple14__j __@x0)
(FStar.Pervasives.Native.Mktuple14__k __@x0)
(FStar.Pervasives.Native.Mktuple14__l __@x0)
(FStar.Pervasives.Native.Mktuple14__m __@x0)
(FStar.Pervasives.Native.Mktuple14__n __@x0)
(FStar.Pervasives.Native.Mktuple14__1 __@x0)
(FStar.Pervasives.Native.Mktuple14__2 __@x0)
(FStar.Pervasives.Native.Mktuple14__3 __@x0)
(FStar.Pervasives.Native.Mktuple14__4 __@x0)
(FStar.Pervasives.Native.Mktuple14__5 __@x0)
(FStar.Pervasives.Native.Mktuple14__6 __@x0)
(FStar.Pervasives.Native.Mktuple14__7 __@x0)
(FStar.Pervasives.Native.Mktuple14__8 __@x0)
(FStar.Pervasives.Native.Mktuple14__9 __@x0)
(FStar.Pervasives.Native.Mktuple14__10 __@x0)
(FStar.Pervasives.Native.Mktuple14__11 __@x0)
(FStar.Pervasives.Native.Mktuple14__12 __@x0)
(FStar.Pervasives.Native.Mktuple14__13 __@x0)
(FStar.Pervasives.Native.Mktuple14__14 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple14>


; </end encoding FStar.Pervasives.Native.Mktuple14>


; </end encoding >


; <Start encoding FStar.Pervasives.Native.tuple14__uu___haseq>


; </end encoding FStar.Pervasives.Native.tuple14__uu___haseq>


; <Start encoding FStar.Pervasives.Native.uu___is_Mktuple14>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:       ((((((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l) * 'm) * 'n)   -> Prims.bool
(declare-fun Tm_arrow_2de133cfaca100fc23d8bf4b3421db9a () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple14@tok () Term)

; </end encoding FStar.Pervasives.Native.uu___is_Mktuple14>


; <Skipped FStar.Pervasives.Native.uu___is_Mktuple14/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple14__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:       ((((((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l) * 'm) * 'n)   -> 'a
(declare-fun Tm_arrow_2e3216cab266e138debd68d0a503c177 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___1@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple14__item___1>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple14__item___1/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple14__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:       ((((((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l) * 'm) * 'n)   -> 'b
(declare-fun Tm_arrow_958b0270e487d0bf5fe9191b9efaa127 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___2@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple14__item___2>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple14__item___2/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple14__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:       ((((((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l) * 'm) * 'n)   -> 'c
(declare-fun Tm_arrow_08349f596f8c0acf60d1587bebe8c91b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___3@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple14__item___3>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple14__item___3/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple14__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:       ((((((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l) * 'm) * 'n)   -> 'd
(declare-fun Tm_arrow_2b069168147ba0f67f117ad5b0ac078b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___4@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple14__item___4>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple14__item___4/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple14__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:       ((((((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l) * 'm) * 'n)   -> 'e
(declare-fun Tm_arrow_1e38bb16245a24a197c44a262fee7bf1 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___5@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple14__item___5>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple14__item___5/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple14__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:       ((((((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l) * 'm) * 'n)   -> 'f
(declare-fun Tm_arrow_7a148953a3884454d8a1dffddce086bb () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___6@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple14__item___6>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple14__item___6/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple14__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:       ((((((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l) * 'm) * 'n)   -> 'g
(declare-fun Tm_arrow_812eeb3fdab56dfea8e419236740acb0 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___7@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple14__item___7>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple14__item___7/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple14__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:       ((((((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l) * 'm) * 'n)   -> 'h
(declare-fun Tm_arrow_9dc932ce7cdfd6fa57f6536787fcb65b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___8@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple14__item___8>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple14__item___8/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple14__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:       ((((((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l) * 'm) * 'n)   -> 'i
(declare-fun Tm_arrow_2600722933f06bc55e28bb3fc2ce4a6a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___9@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple14__item___9>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple14__item___9/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple14__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:       ((((((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l) * 'm) * 'n)   -> 'j
(declare-fun Tm_arrow_f51203e57fd66f9e9293b8962c57edfe () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___10@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple14__item___10>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple14__item___10/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple14__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:       ((((((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l) * 'm) * 'n)   -> 'k
(declare-fun Tm_arrow_7c34e0c28edc5fc4ad24d0b749c0adb7 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___11@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple14__item___11>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple14__item___11/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple14__item___12>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___12 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:       ((((((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l) * 'm) * 'n)   -> 'l
(declare-fun Tm_arrow_8772cc50ea320af17b3f2371c273679a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___12@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple14__item___12>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple14__item___12/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple14__item___13>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:       ((((((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l) * 'm) * 'n)   -> 'm
(declare-fun Tm_arrow_039da0b9a8da1a651a1c570e55456614 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___13@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple14__item___13>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple14__item___13/>


; <Start encoding FStar.Pervasives.Native.__proj__Mktuple14__item___14>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee:       ((((((((((((('a * 'b) * 'c) * 'd) * 'e) * 'f) * 'g) * 'h) * 'i) * 'j) * 'k) * 'l) * 'm) * 'n)   -> 'n
(declare-fun Tm_arrow_579ada2eb036c15c7306dac5b648153e () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___14@tok () Term)

; </end encoding FStar.Pervasives.Native.__proj__Mktuple14__item___14>


; <Skipped FStar.Pervasives.Native.__proj__Mktuple14__item___14/>


; End Externals for module FStar.Pervasives.Native


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End module FStar.Pervasives.Native (1325 decls; total size 133439)

;;; Start interface FStar.Pervasives

; Externals for interface FStar.Pervasives


; <Start encoding FStar.Pervasives.remove_unused_type_parameters>

(declare-fun FStar.Pervasives.remove_unused_type_parameters (Term) Term)
;;;;;;;;;;;;;;;;_: Prims.list Prims.int -> Prims.unit
(declare-fun Tm_arrow_555d62757eeaf90340982fcdf25f6704 () Term)
(declare-fun FStar.Pervasives.remove_unused_type_parameters@tok () Term)

; </end encoding FStar.Pervasives.remove_unused_type_parameters>


; <Start encoding FStar.Pervasives.pattern>

(declare-fun FStar.Pervasives.pattern () Term)

; </end encoding FStar.Pervasives.pattern>


; <Start encoding FStar.Pervasives.smt_pat>

(declare-fun FStar.Pervasives.smt_pat (Term Term) Term)
;;;;;;;;;;;;;;;;x: a -> FStar.Pervasives.pattern
(declare-fun Tm_arrow_ce7b692455ad1649f97902066cf7c9aa () Term)
(declare-fun FStar.Pervasives.smt_pat@tok () Term)

; </end encoding FStar.Pervasives.smt_pat>


; <Start encoding FStar.Pervasives.smt_pat_or>

(declare-fun FStar.Pervasives.smt_pat_or (Term) Term)
;;;;;;;;;;;;;;;;x: Prims.list (Prims.list FStar.Pervasives.pattern) -> FStar.Pervasives.pattern
(declare-fun Tm_arrow_cbfaca2770c8ef7d6393b664b7ea1a41 () Term)
(declare-fun FStar.Pervasives.smt_pat_or@tok () Term)

; </end encoding FStar.Pervasives.smt_pat_or>


; <Start encoding FStar.Pervasives.eqtype_u>

(declare-fun FStar.Pervasives.eqtype_u () Term)


; </end encoding FStar.Pervasives.eqtype_u>


; <Skipped FStar.Pervasives.Lemma/>


; <Start encoding FStar.Pervasives.spinoff>

(declare-fun FStar.Pervasives.spinoff (Term) Term)

(declare-fun FStar.Pervasives.spinoff@tok () Term)

; </end encoding FStar.Pervasives.spinoff>


; <Start encoding FStar.Pervasives.assert_spinoff>

(declare-fun FStar.Pervasives.assert_spinoff (Term) Term)

;;;;;;;;;;;;;;;;p: Type -> Prims.Pure Prims.unit
(declare-fun Tm_arrow_071538fd1c72fb82c7bb7b280daddf84 () Term)
(declare-fun FStar.Pervasives.assert_spinoff@tok () Term)


; </end encoding FStar.Pervasives.assert_spinoff>


; <Start encoding FStar.Pervasives.id>

(declare-fun FStar.Pervasives.id (Term Term) Term)

(declare-fun FStar.Pervasives.id@tok () Term)

; </end encoding FStar.Pervasives.id>


; <Start encoding FStar.Pervasives.trivial_pure_post>

(declare-fun FStar.Pervasives.trivial_pure_post (Term) Term)
;;;;;;;;;;;;;;;;a: Type -> Prims.pure_post a
(declare-fun Tm_arrow_53823f439377767fbcd3e27ebcdb971b () Term)
(declare-fun FStar.Pervasives.trivial_pure_post@tok () Term)

(declare-fun Tm_abs_5e34897418ce4950a4effcc8c159cf53 (Term) Term)

; </end encoding FStar.Pervasives.trivial_pure_post>


; <Start encoding FStar.Pervasives.ambient>

(declare-fun FStar.Pervasives.ambient (Term Term) Term)
;;;;;;;;;;;;;;;;x: a -> Type
(declare-fun Tm_arrow_9e007179360e2932d75ab29019e3d7fa () Term)
(declare-fun FStar.Pervasives.ambient@tok () Term)

; </end encoding FStar.Pervasives.ambient>


; <Start encoding FStar.Pervasives.intro_ambient>

(declare-fun FStar.Pervasives.intro_ambient (Term Term) Term)
;;;;;;;;;;;;;;;;x: a -> Prims.squash (FStar.Pervasives.ambient x)
(declare-fun Tm_arrow_6fc6334d56387f3d408122a4bd045e7e () Term)
(declare-fun FStar.Pervasives.intro_ambient@tok () Term)

; </end encoding FStar.Pervasives.intro_ambient>


; <Start encoding FStar.Pervasives.normalize_term>

(declare-fun FStar.Pervasives.normalize_term (Term Term) Term)

(declare-fun FStar.Pervasives.normalize_term@tok () Term)

; </end encoding FStar.Pervasives.normalize_term>


; <Start encoding FStar.Pervasives.normalize>

(declare-fun FStar.Pervasives.normalize (Term) Term)

(declare-fun FStar.Pervasives.normalize@tok () Term)

; </end encoding FStar.Pervasives.normalize>


; <Start encoding FStar.Pervasives.norm_step>

(declare-fun FStar.Pervasives.norm_step () Term)

; </end encoding FStar.Pervasives.norm_step>


; <Start encoding FStar.Pervasives.simplify>

(declare-fun FStar.Pervasives.simplify (Dummy_sort) Term)

; </end encoding FStar.Pervasives.simplify>


; <Start encoding FStar.Pervasives.weak>

(declare-fun FStar.Pervasives.weak (Dummy_sort) Term)

; </end encoding FStar.Pervasives.weak>


; <Start encoding FStar.Pervasives.hnf>

(declare-fun FStar.Pervasives.hnf (Dummy_sort) Term)

; </end encoding FStar.Pervasives.hnf>


; <Start encoding FStar.Pervasives.primops>

(declare-fun FStar.Pervasives.primops (Dummy_sort) Term)

; </end encoding FStar.Pervasives.primops>


; <Start encoding FStar.Pervasives.delta>

(declare-fun FStar.Pervasives.delta (Dummy_sort) Term)

; </end encoding FStar.Pervasives.delta>


; <Start encoding FStar.Pervasives.zeta>

(declare-fun FStar.Pervasives.zeta (Dummy_sort) Term)

; </end encoding FStar.Pervasives.zeta>


; <Start encoding FStar.Pervasives.zeta_full>

(declare-fun FStar.Pervasives.zeta_full (Dummy_sort) Term)

; </end encoding FStar.Pervasives.zeta_full>


; <Start encoding FStar.Pervasives.iota>

(declare-fun FStar.Pervasives.iota (Dummy_sort) Term)

; </end encoding FStar.Pervasives.iota>


; <Start encoding FStar.Pervasives.nbe>

(declare-fun FStar.Pervasives.nbe (Dummy_sort) Term)

; </end encoding FStar.Pervasives.nbe>


; <Start encoding FStar.Pervasives.reify_>

(declare-fun FStar.Pervasives.reify_ (Dummy_sort) Term)

; </end encoding FStar.Pervasives.reify_>


; <Start encoding FStar.Pervasives.delta_only>

(declare-fun FStar.Pervasives.delta_only (Term) Term)
;;;;;;;;;;;;;;;;s: Prims.list Prims.string -> FStar.Pervasives.norm_step
(declare-fun Tm_arrow_f14a20345cd55ddda96b6c4cc49e05f1 () Term)
(declare-fun FStar.Pervasives.delta_only@tok () Term)

; </end encoding FStar.Pervasives.delta_only>


; <Start encoding FStar.Pervasives.delta_fully>

(declare-fun FStar.Pervasives.delta_fully (Term) Term)

(declare-fun FStar.Pervasives.delta_fully@tok () Term)

; </end encoding FStar.Pervasives.delta_fully>


; <Start encoding FStar.Pervasives.delta_attr>

(declare-fun FStar.Pervasives.delta_attr (Term) Term)

(declare-fun FStar.Pervasives.delta_attr@tok () Term)

; </end encoding FStar.Pervasives.delta_attr>


; <Start encoding FStar.Pervasives.delta_qualifier>

(declare-fun FStar.Pervasives.delta_qualifier (Term) Term)

(declare-fun FStar.Pervasives.delta_qualifier@tok () Term)

; </end encoding FStar.Pervasives.delta_qualifier>


; <Start encoding FStar.Pervasives.delta_namespace>

(declare-fun FStar.Pervasives.delta_namespace (Term) Term)

(declare-fun FStar.Pervasives.delta_namespace@tok () Term)

; </end encoding FStar.Pervasives.delta_namespace>


; <Start encoding FStar.Pervasives.unmeta>

(declare-fun FStar.Pervasives.unmeta (Dummy_sort) Term)

; </end encoding FStar.Pervasives.unmeta>


; <Start encoding FStar.Pervasives.unascribe>

(declare-fun FStar.Pervasives.unascribe (Dummy_sort) Term)

; </end encoding FStar.Pervasives.unascribe>


; <Start encoding FStar.Pervasives.norm>

(declare-fun FStar.Pervasives.norm (Term Term Term) Term)
;;;;;;;;;;;;;;;;s: Prims.list FStar.Pervasives.norm_step -> x: a -> a
(declare-fun Tm_arrow_7d92e7a4aa7eee4098b10c5f1b3d77ea () Term)
(declare-fun FStar.Pervasives.norm@tok () Term)

; </end encoding FStar.Pervasives.norm>


; <Start encoding FStar.Pervasives.assert_norm>

(declare-fun FStar.Pervasives.assert_norm (Term) Term)

;;;;;;;;;;;;;;;;p: Type -> Prims.Pure Prims.unit
(declare-fun Tm_arrow_ee24fcf624d074d3c637ee61e4a867fb () Term)
(declare-fun FStar.Pervasives.assert_norm@tok () Term)


; </end encoding FStar.Pervasives.assert_norm>


; <Start encoding FStar.Pervasives.normalize_term_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.normalize_term_spec (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.normalize_term_spec@tok () Term)

; </end encoding FStar.Pervasives.normalize_term_spec>


; <Start encoding FStar.Pervasives.normalize_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.normalize_spec (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.normalize_spec@tok () Term)

; </end encoding FStar.Pervasives.normalize_spec>


; <Start encoding FStar.Pervasives.norm_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.norm_spec (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.norm_spec@tok () Term)

; </end encoding FStar.Pervasives.norm_spec>


; <Start encoding FStar.Pervasives.reveal_opaque>

(declare-fun FStar.Pervasives.reveal_opaque (Term Term) Term)
(declare-fun Tm_refine_9cce35912d99bf51042f02fff62b6cf5 (Term Term Term) Term)
;;;;;;;;;;;;;;;;x: _   -> FStar.Pervasives.Lemma (ensures FStar.Pervasives.norm [FStar.Pervasives.delta_only [s]] x == x)
(declare-fun Tm_arrow_90324bd6d0db52152d012eefdf7852a1 (Term Term) Term)
;;;;;;;;;;;;;;;;s: Prims.string -> x: _   -> FStar.Pervasives.Lemma (ensures FStar.Pervasives.norm [FStar.Pervasives.delta_only [s]] x == x)
(declare-fun Tm_arrow_d3acaf108460ddc930424dea55f7d40f () Term)
(declare-fun FStar.Pervasives.reveal_opaque@tok () Term)


;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name FStar.Pervasives.reveal_opaque; Namespace FStar.Pervasives
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.Pervasives.norm_spec@tok))
:named @kick_partial_app_e5c933a9bc2cb06571c2abdcc101b877))

; </end encoding FStar.Pervasives.reveal_opaque>


; <Start encoding FStar.Pervasives.pure_return>

(declare-fun FStar.Pervasives.pure_return (Term Term) Term)
;;;;;;;;;;;;;;;;a: Type -> x: a -> Prims.pure_wp a
(declare-fun Tm_arrow_0dff8d294aeaf0b1d7e9cad664c9a15f () Term)
(declare-fun FStar.Pervasives.pure_return@tok () Term)

(declare-fun Tm_abs_bc5117f6a06a581c69e04141781c86d0 (Term Term Term) Term)
;;;;;;;;;;;;;;;;p: Prims.pure_post a -> Prims.logical
(declare-fun Tm_arrow_c88a29758356586fc450d481d4b685f3 (Term) Term)
(declare-fun Tm_abs_bdac9a3f32789788b83138a3a4262d0d (Term Term) Term)

; </end encoding FStar.Pervasives.pure_return>


; <Start encoding FStar.Pervasives.pure_bind_wp>

;;;;;;;;;;;;;;;;_: a -> Prims.pure_wp b
(declare-fun Tm_arrow_c05bc9331677cc1a187ad7677301a601 (Term Term) Term)
(declare-fun FStar.Pervasives.pure_bind_wp (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;a: Type -> b: Type -> wp1: Prims.pure_wp a -> wp2: (_: a -> Prims.pure_wp b) -> Prims.pure_wp b
(declare-fun Tm_arrow_f8eba41a4bcb9aca0e3c11224f695d1e () Term)
(declare-fun FStar.Pervasives.pure_bind_wp@tok () Term)


(declare-fun Tm_abs_d0f415a5361a9d7988d8e425dc193472 (Term Term Term) Term)

(declare-fun Tm_abs_72b65b71b828688dbb0ba657715a194c (Term Term Term Term) Term)

; </end encoding FStar.Pervasives.pure_bind_wp>


; <Start encoding FStar.Pervasives.pure_if_then_else>

(declare-fun FStar.Pervasives.pure_if_then_else (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;a: Type -> p: Type -> wp_then: Prims.pure_wp a -> wp_else: Prims.pure_wp a -> Prims.pure_wp a
(declare-fun Tm_arrow_5911c11ab85061b4a8acf6a6ff43aaea () Term)
(declare-fun FStar.Pervasives.pure_if_then_else@tok () Term)

(declare-fun Tm_abs_614d7ab3976dfea6b6428085a93bafcc (Term Term Term Term) Term)

; </end encoding FStar.Pervasives.pure_if_then_else>


; <Start encoding FStar.Pervasives.pure_ite_wp>

(declare-fun FStar.Pervasives.pure_ite_wp (Term Term) Term)
;;;;;;;;;;;;;;;;a: Type -> wp: Prims.pure_wp a -> Prims.pure_wp a
(declare-fun Tm_arrow_983cc9c1e881fffd3b37c61b327d54c8 () Term)
(declare-fun FStar.Pervasives.pure_ite_wp@tok () Term)




(declare-fun Tm_abs_f9993abe3e10fc5902262cf22e5f5e1c (Term Term Term) Term)

(declare-fun Tm_abs_a4d8a67e708eb0f8e41d6eefd90d8b3d (Term Term) Term)

; </end encoding FStar.Pervasives.pure_ite_wp>


; <Start encoding FStar.Pervasives.pure_close_wp>


(declare-fun FStar.Pervasives.pure_close_wp (Term Term Term) Term)

;;;;;;;;;;;;;;;;a: Type -> b: Type -> wp: (_: b -> Prims.pure_wp a) -> Prims.pure_wp a
(declare-fun Tm_arrow_6424f17922e38fc8eb3b7ad8d9107d78 () Term)
(declare-fun FStar.Pervasives.pure_close_wp@tok () Term)




(declare-fun Tm_abs_bef01cdc202d648a37f7725a1e8579fa (Term Term Term) Term)

; </end encoding FStar.Pervasives.pure_close_wp>


; <Start encoding FStar.Pervasives.pure_null_wp>

(declare-fun FStar.Pervasives.pure_null_wp (Term) Term)
;;;;;;;;;;;;;;;;a: Type -> Prims.pure_wp a
(declare-fun Tm_arrow_e02f472dad10492b4fdaf21971ae643f () Term)
(declare-fun FStar.Pervasives.pure_null_wp@tok () Term)



(declare-fun Tm_abs_c7a599bd05f6d553477b7b3a5a51d357 (Term) Term)

; </end encoding FStar.Pervasives.pure_null_wp>


; <Start encoding FStar.Pervasives.pure_assert_wp>

(declare-fun FStar.Pervasives.pure_assert_wp (Term) Term)

(declare-fun FStar.Pervasives.pure_assert_wp@tok () Term)

; </end encoding FStar.Pervasives.pure_assert_wp>


; <Start encoding FStar.Pervasives.pure_assume_wp>

(declare-fun FStar.Pervasives.pure_assume_wp (Term) Term)

(declare-fun FStar.Pervasives.pure_assume_wp@tok () Term)

; </end encoding FStar.Pervasives.pure_assume_wp>


; <Skipped FStar.Pervasives.DIV/>


; <Skipped />


; <Start encoding FStar.Pervasives.div_hoare_to_wp>

(declare-fun FStar.Pervasives.div_hoare_to_wp (Term Term Term) Term)
;;;;;;;;;;;;;;;;post: Prims.pure_post' a pre -> Prims.pure_wp a
(declare-fun Tm_arrow_e81e37f60b892c60a4b806bfecd6c240 () Term)
(declare-fun FStar.Pervasives.div_hoare_to_wp@tok () Term)




(declare-fun Tm_abs_69982e78bbdc9cbdfcc98c8c3ec276f1 (Term Term Term Term) Term)


(declare-fun Tm_abs_95829b03554cf2093d2bc29e28500b94 (Term Term Term) Term)

; </end encoding FStar.Pervasives.div_hoare_to_wp>


; <Skipped FStar.Pervasives.Div/>


; <Skipped FStar.Pervasives.Dv/>


; <Skipped FStar.Pervasives.EXT/>


; <Start encoding FStar.Pervasives.st_pre_h>

(declare-fun FStar.Pervasives.st_pre_h (Term) Term)

(declare-fun FStar.Pervasives.st_pre_h@tok () Term)


; </end encoding FStar.Pervasives.st_pre_h>


; <Start encoding FStar.Pervasives.st_post_h'>

(declare-fun FStar.Pervasives.st_post_h_ (Term Term Term) Term)
;;;;;;;;;;;;;;;;heap: Type -> a: Type -> pre: Type -> Type
(declare-fun Tm_arrow_659175ed40df3b798f91ffaee9e689bd () Term)
(declare-fun FStar.Pervasives.st_post_h_@tok () Term)

;;;;;;;;;;;;;;;;_: a -> _: heap{pre} -> Prims.GTot Type
(declare-fun Tm_arrow_14435f7112db17792f8cd33f8f7ea859 (Term Term Term) Term)

; </end encoding FStar.Pervasives.st_post_h'>


; <Start encoding FStar.Pervasives.st_post_h>

(declare-fun FStar.Pervasives.st_post_h (Term Term) Term)

(declare-fun FStar.Pervasives.st_post_h@tok () Term)

; </end encoding FStar.Pervasives.st_post_h>


; <Start encoding FStar.Pervasives.st_wp_h>

(declare-fun FStar.Pervasives.st_wp_h (Term Term) Term)

(declare-fun FStar.Pervasives.st_wp_h@tok () Term)
;;;;;;;;;;;;;;;;_: FStar.Pervasives.st_post_h heap a -> FStar.Pervasives.st_pre_h heap
(declare-fun Tm_arrow_c80b139653078194d2de90941effdc68 (Term Term) Term)

; </end encoding FStar.Pervasives.st_wp_h>


; <Start encoding FStar.Pervasives.st_return>

(declare-fun FStar.Pervasives.st_return (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;heap: Type -> a: Type -> x: a -> p: FStar.Pervasives.st_post_h heap a -> _: heap -> Prims.GTot Type
(declare-fun Tm_arrow_6bfe4bf6faf1fb53a521d575cefc35ef () Term)
(declare-fun FStar.Pervasives.st_return@tok () Term)


; </end encoding FStar.Pervasives.st_return>


; <Start encoding FStar.Pervasives.st_bind_wp>

;;;;;;;;;;;;;;;;_: a -> Prims.GTot (FStar.Pervasives.st_wp_h heap b)
(declare-fun Tm_arrow_c6e0af8c2ccbdda79db5c09d07e87e35 (Term Term Term) Term)
(declare-fun FStar.Pervasives.st_bind_wp (Term Term Term Term Term Term Term) Term)

;;;;;;;;;;;;;;;;heap: Type ->     a: Type ->     b: Type ->     wp1: FStar.Pervasives.st_wp_h heap a ->     wp2: (_: a -> Prims.GTot (FStar.Pervasives.st_wp_h heap b)) ->     p: FStar.Pervasives.st_post_h heap b ->     h0: heap   -> Type
(declare-fun Tm_arrow_0eca50df2f29485bdbf578799f16b4a6 () Term)
(declare-fun FStar.Pervasives.st_bind_wp@tok () Term)

;;;;;;;;;;;;;;;;a: a -> h1: heap -> Prims.GTot Type
(declare-fun Tm_arrow_eb9b1a038524b37579c152a3f169145e (Term Term) Term)
(declare-fun Tm_abs_0f3b5ee9eaa8de8cacad7d3dcacb4558 (Term Term Term Term) Term)

; </end encoding FStar.Pervasives.st_bind_wp>


; <Start encoding FStar.Pervasives.st_if_then_else>

(declare-fun FStar.Pervasives.st_if_then_else (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;heap: Type ->     a: Type ->     p: Type ->     wp_then: FStar.Pervasives.st_wp_h heap a ->     wp_else: FStar.Pervasives.st_wp_h heap a ->     post: FStar.Pervasives.st_post_h heap a ->     h0: heap   -> Prims.logical
(declare-fun Tm_arrow_6e48361e1a1c92df6ec1ff87e622ddad () Term)
(declare-fun FStar.Pervasives.st_if_then_else@tok () Term)

; </end encoding FStar.Pervasives.st_if_then_else>


; <Start encoding FStar.Pervasives.st_ite_wp>

(declare-fun FStar.Pervasives.st_ite_wp (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;heap: Type ->     a: Type ->     wp: FStar.Pervasives.st_wp_h heap a ->     post: FStar.Pervasives.st_post_h heap a ->     h0: heap   -> Prims.logical
(declare-fun Tm_arrow_eaad896c6afdcb7ade2e80b5a6a930af () Term)
(declare-fun FStar.Pervasives.st_ite_wp@tok () Term)

(declare-fun Tm_abs_13c1fbac4d566537e0d0aac54993e867 (Term Term Term Term) Term)

(declare-fun Tm_abs_8fca386860b07bf7135ad6a5ed4b8699 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;k: FStar.Pervasives.st_post_h heap a -> Prims.GTot Type
(declare-fun Tm_arrow_8be317cd0e95382d209163cbcd734f9d (Term Term) Term)
(declare-fun Tm_abs_72e7071059c05ac5aef1b1a6a8b5e8f4 (Term Term Term Term Term) Term)

; </end encoding FStar.Pervasives.st_ite_wp>


; <Start encoding FStar.Pervasives.st_stronger>

(declare-fun FStar.Pervasives.st_stronger (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;heap: Type ->     a: Type ->     wp1: FStar.Pervasives.st_wp_h heap a ->     wp2: FStar.Pervasives.st_wp_h heap a   -> Prims.logical
(declare-fun Tm_arrow_ae4d7f489de84317e0022bf89d45dd95 () Term)
(declare-fun FStar.Pervasives.st_stronger@tok () Term)



(declare-fun Tm_abs_01fd99084e2163543709c497ff1c256b (Term Term Term Term) Term)

; </end encoding FStar.Pervasives.st_stronger>


; <Start encoding FStar.Pervasives.st_close_wp>


(declare-fun FStar.Pervasives.st_close_wp (Term Term Term Term Term Term) Term)

;;;;;;;;;;;;;;;;heap: Type ->     a: Type ->     b: Type ->     wp: (_: b -> Prims.GTot (FStar.Pervasives.st_wp_h heap a)) ->     p: FStar.Pervasives.st_post_h heap a ->     h: heap   -> Prims.logical
(declare-fun Tm_arrow_de6d3045642382698e9e38d41acfd7cc () Term)
(declare-fun FStar.Pervasives.st_close_wp@tok () Term)


(declare-fun Tm_abs_bd152fc5c12cc6aa125ccf543aa53813 (Term Term Term Term) Term)

; </end encoding FStar.Pervasives.st_close_wp>


; <Start encoding FStar.Pervasives.st_trivial>

(declare-fun FStar.Pervasives.st_trivial (Term Term Term) Term)
;;;;;;;;;;;;;;;;heap: Type -> a: Type -> wp: FStar.Pervasives.st_wp_h heap a -> Prims.logical
(declare-fun Tm_arrow_f145e04ff3c7033bdfc718f7f5bb1df0 () Term)
(declare-fun FStar.Pervasives.st_trivial@tok () Term)

(declare-fun Tm_abs_89b21c42be5bc00d63e29f63ae20d4e2 (Term Term) Term)

(declare-fun Tm_abs_59c4fa07f408d911e59025309cce9942 (Term Term Term) Term)





; </end encoding FStar.Pervasives.st_trivial>


; <Skipped FStar.Pervasives.STATE_h/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.result (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.result@x0 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.result@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.V (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.V_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.V_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: V
(declare-fun FStar.Pervasives.V@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.E (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.E_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.E_e (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: E
(declare-fun FStar.Pervasives.E@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Err (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Err_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Err_msg (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Err
(declare-fun FStar.Pervasives.Err@tok () Term)
;;;;;;;;;;;;;;;;v: a -> FStar.Pervasives.result a
(declare-fun Tm_arrow_30908143640041985b9200e2fb38a259 () Term)
;;;;;;;;;;;;;;;;e: Prims.exn -> FStar.Pervasives.result a
(declare-fun Tm_arrow_f8bb10130fea772e0f786d78a188c381 () Term)
;;;;;;;;;;;;;;;;msg: Prims.string -> FStar.Pervasives.result a
(declare-fun Tm_arrow_93661c87034b0b64c4714dafbe2b02e6 () Term)

; <Start encoding FStar.Pervasives.result>


; <start constructor FStar.Pervasives.result>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.result ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
281)
(exists ((@x0 Term))
 (! (= __@x0
(FStar.Pervasives.result @x0))
 
;;no pats
:qid is-FStar.Pervasives.result))))

; </end constructor FStar.Pervasives.result>


; </end encoding FStar.Pervasives.result>


; <Start encoding FStar.Pervasives.V>


; <start constructor FStar.Pervasives.V>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.V ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
288)
(= __@x0
(FStar.Pervasives.V (FStar.Pervasives.V_a __@x0)
(FStar.Pervasives.V_v __@x0)))))

; </end constructor FStar.Pervasives.V>


; </end encoding FStar.Pervasives.V>


; <Start encoding FStar.Pervasives.E>


; <start constructor FStar.Pervasives.E>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.E ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
293)
(= __@x0
(FStar.Pervasives.E (FStar.Pervasives.E_a __@x0)
(FStar.Pervasives.E_e __@x0)))))

; </end constructor FStar.Pervasives.E>


; </end encoding FStar.Pervasives.E>


; <Start encoding FStar.Pervasives.Err>


; <start constructor FStar.Pervasives.Err>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Err ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
298)
(= __@x0
(FStar.Pervasives.Err (FStar.Pervasives.Err_a __@x0)
(FStar.Pervasives.Err_msg __@x0)))))

; </end constructor FStar.Pervasives.Err>


; </end encoding FStar.Pervasives.Err>


; </end encoding >


; <Start encoding FStar.Pervasives.uu___is_V>

(declare-fun FStar.Pervasives.uu___is_V (Term Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Pervasives.result a -> Prims.bool
(declare-fun Tm_arrow_5cd1d0722a6a986faf6f8e557186fe24 () Term)
(declare-fun FStar.Pervasives.uu___is_V@tok () Term)

; </end encoding FStar.Pervasives.uu___is_V>


; <Skipped FStar.Pervasives.uu___is_V/>


; <Start encoding FStar.Pervasives.__proj__V__item__v>

(declare-fun Tm_refine_9db520b26a7f39c5a01493a3f375290d (Term) Term)
(declare-fun FStar.Pervasives.__proj__V__item__v (Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Pervasives.result a {V? _} -> a
(declare-fun Tm_arrow_1ea119bf213c016916a7095486e28467 () Term)
(declare-fun FStar.Pervasives.__proj__V__item__v@tok () Term)

; </end encoding FStar.Pervasives.__proj__V__item__v>


; <Skipped FStar.Pervasives.__proj__V__item__v/>


; <Start encoding FStar.Pervasives.uu___is_E>

(declare-fun FStar.Pervasives.uu___is_E (Term Term) Term)

(declare-fun FStar.Pervasives.uu___is_E@tok () Term)

; </end encoding FStar.Pervasives.uu___is_E>


; <Skipped FStar.Pervasives.uu___is_E/>


; <Start encoding FStar.Pervasives.__proj__E__item__e>

(declare-fun Tm_refine_95e1e2ee29104754cc3740f5575fc6e5 (Term) Term)
(declare-fun FStar.Pervasives.__proj__E__item__e (Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Pervasives.result a {E? _} -> Prims.exn
(declare-fun Tm_arrow_19e73c373dbf3f9945c6fcfce8a07661 () Term)
(declare-fun FStar.Pervasives.__proj__E__item__e@tok () Term)

; </end encoding FStar.Pervasives.__proj__E__item__e>


; <Skipped FStar.Pervasives.__proj__E__item__e/>


; <Start encoding FStar.Pervasives.uu___is_Err>

(declare-fun FStar.Pervasives.uu___is_Err (Term Term) Term)

(declare-fun FStar.Pervasives.uu___is_Err@tok () Term)

; </end encoding FStar.Pervasives.uu___is_Err>


; <Skipped FStar.Pervasives.uu___is_Err/>


; <Start encoding FStar.Pervasives.__proj__Err__item__msg>

(declare-fun Tm_refine_22fb403854eba07427f92e79848f9d9f (Term) Term)
(declare-fun FStar.Pervasives.__proj__Err__item__msg (Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Pervasives.result a {Err? _} -> Prims.string
(declare-fun Tm_arrow_f7e3debb858e412c9497460c5187d5cd () Term)
(declare-fun FStar.Pervasives.__proj__Err__item__msg@tok () Term)

; </end encoding FStar.Pervasives.__proj__Err__item__msg>


; <Skipped FStar.Pervasives.__proj__Err__item__msg/>


; <Start encoding FStar.Pervasives.ex_pre>

(declare-fun FStar.Pervasives.ex_pre () Term)

; </end encoding FStar.Pervasives.ex_pre>


; <Start encoding FStar.Pervasives.ex_post'>

(declare-fun FStar.Pervasives.ex_post_ (Term Term) Term)

(declare-fun FStar.Pervasives.ex_post_@tok () Term)
(declare-fun Tm_refine_a4dcdeeacbcb04d05a6720f786918fd6 (Term Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Pervasives.result a {pre} -> Prims.GTot Type
(declare-fun Tm_arrow_68b66d987e8a7bdf825af8b370553e65 (Term Term) Term)

; </end encoding FStar.Pervasives.ex_post'>


; <Start encoding FStar.Pervasives.ex_post>

(declare-fun FStar.Pervasives.ex_post (Term) Term)

(declare-fun FStar.Pervasives.ex_post@tok () Term)

; </end encoding FStar.Pervasives.ex_post>


; <Start encoding FStar.Pervasives.ex_wp>

(declare-fun FStar.Pervasives.ex_wp (Term) Term)

(declare-fun FStar.Pervasives.ex_wp@tok () Term)
;;;;;;;;;;;;;;;;_: FStar.Pervasives.ex_post a -> Prims.GTot FStar.Pervasives.ex_pre
(declare-fun Tm_arrow_58168e52ae0908fefec42cac825ecc69 (Term) Term)

; </end encoding FStar.Pervasives.ex_wp>


; <Start encoding FStar.Pervasives.ex_return>

(declare-fun FStar.Pervasives.ex_return (Term Term Term) Term)
;;;;;;;;;;;;;;;;a: Type -> x: a -> p: FStar.Pervasives.ex_post a -> Prims.GTot Type
(declare-fun Tm_arrow_375264f6f19b4e37d33ffba9f6b1c7d2 () Term)
(declare-fun FStar.Pervasives.ex_return@tok () Term)

; </end encoding FStar.Pervasives.ex_return>


; <Start encoding FStar.Pervasives.ex_bind_wp>

;;;;;;;;;;;;;;;;_: a -> Prims.GTot (FStar.Pervasives.ex_wp b)
(declare-fun Tm_arrow_3eb2992a529511f5b0ff2fef4e4594ad (Term Term) Term)
(declare-fun FStar.Pervasives.ex_bind_wp (Term Term Term Term Term) Term)

;;;;;;;;;;;;;;;;a: Type ->     b: Type ->     wp1: FStar.Pervasives.ex_wp a ->     wp2: (_: a -> Prims.GTot (FStar.Pervasives.ex_wp b)) ->     p: FStar.Pervasives.ex_post b   -> Prims.GTot Type
(declare-fun Tm_arrow_1da2056f1a2fe3dc8db7decf5cbd5885 () Term)
(declare-fun FStar.Pervasives.ex_bind_wp@tok () Term)

;;;;;;;;;;;;;;;;rb: FStar.Pervasives.result b -> Prims.GTot Type
(declare-fun Tm_arrow_ca5db633696caf7e0cd44c11654eed8b (Term) Term)
(declare-fun Tm_abs_8074df73d1580fbbdc3470addabaf08b (Term Term Term) Term)

(declare-fun Tm_abs_c1d9037a5cc10cc07ba9b6a7a58728db (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;k: FStar.Pervasives.ex_post b -> Prims.GTot Type
(declare-fun Tm_arrow_9ea71f7f2fb13f04805b20355b90ad43 (Term) Term)
(declare-fun Tm_abs_f22410a64e648d873bed4822ca022bb4 (Term Term Term Term Term) Term)





; </end encoding FStar.Pervasives.ex_bind_wp>


; <Start encoding FStar.Pervasives.ex_if_then_else>

(declare-fun FStar.Pervasives.ex_if_then_else (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;a: Type ->     p: Type ->     wp_then: FStar.Pervasives.ex_wp a ->     wp_else: FStar.Pervasives.ex_wp a ->     post: FStar.Pervasives.ex_post a   -> Prims.logical
(declare-fun Tm_arrow_08bd7ce530cc6e8b4a3f8dadbd0806b0 () Term)
(declare-fun FStar.Pervasives.ex_if_then_else@tok () Term)

; </end encoding FStar.Pervasives.ex_if_then_else>


; <Start encoding FStar.Pervasives.ex_ite_wp>

(declare-fun FStar.Pervasives.ex_ite_wp (Term Term Term) Term)
;;;;;;;;;;;;;;;;a: Type -> wp: FStar.Pervasives.ex_wp a -> post: FStar.Pervasives.ex_post a -> Prims.logical
(declare-fun Tm_arrow_c2a8c761b16a75376b24262cd8c50369 () Term)
(declare-fun FStar.Pervasives.ex_ite_wp@tok () Term)




(declare-fun Tm_abs_a7cc1da09b297d88bb79b1fa0b467b00 (Term Term Term) Term)

; </end encoding FStar.Pervasives.ex_ite_wp>


; <Start encoding FStar.Pervasives.ex_stronger>

(declare-fun FStar.Pervasives.ex_stronger (Term Term Term) Term)
;;;;;;;;;;;;;;;;a: Type -> wp1: FStar.Pervasives.ex_wp a -> wp2: FStar.Pervasives.ex_wp a -> Prims.logical
(declare-fun Tm_arrow_1376d97b5d43e7d77d56729e2a3e04af () Term)
(declare-fun FStar.Pervasives.ex_stronger@tok () Term)

(declare-fun Tm_abs_1518a3cc57d7490d55df77581752827a (Term Term Term) Term)

; </end encoding FStar.Pervasives.ex_stronger>


; <Start encoding FStar.Pervasives.ex_close_wp>


(declare-fun FStar.Pervasives.ex_close_wp (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;a: Type ->     b: Type ->     wp: (_: b -> Prims.GTot (FStar.Pervasives.ex_wp a)) ->     p: FStar.Pervasives.ex_post a   -> Prims.logical
(declare-fun Tm_arrow_814af0adff92aa08c5b8b0951bcb1959 () Term)
(declare-fun FStar.Pervasives.ex_close_wp@tok () Term)





; </end encoding FStar.Pervasives.ex_close_wp>


; <Start encoding FStar.Pervasives.ex_trivial>

(declare-fun FStar.Pervasives.ex_trivial (Term Term) Term)
;;;;;;;;;;;;;;;;a: Type -> wp: FStar.Pervasives.ex_wp a -> FStar.Pervasives.ex_pre
(declare-fun Tm_arrow_ee4a787765920b0cb4357a47a0d3ac5c () Term)
(declare-fun FStar.Pervasives.ex_trivial@tok () Term)

(declare-fun Tm_abs_5cc223716d095f4545f0dcc745acad5d (Term) Term)

; </end encoding FStar.Pervasives.ex_trivial>


; <Skipped FStar.Pervasives.EXN/>


; <Skipped FStar.Pervasives.Exn/>


; <Start encoding FStar.Pervasives.lift_div_exn>

(declare-fun FStar.Pervasives.lift_div_exn (Term Term Term) Term)
;;;;;;;;;;;;;;;;a: Type -> wp: Prims.pure_wp a -> p: FStar.Pervasives.ex_post a -> Prims.pure_pre
(declare-fun Tm_arrow_8196682216f286f6fe3a7dffb3de7d02 () Term)
(declare-fun FStar.Pervasives.lift_div_exn@tok () Term)

(declare-fun Tm_abs_c2b605ddd5d1991642baf5762d2b1dc5 (Term Term) Term)

; </end encoding FStar.Pervasives.lift_div_exn>


; <Skipped />


; <Skipped FStar.Pervasives.Ex/>


; <Start encoding FStar.Pervasives.all_pre_h>

(declare-fun FStar.Pervasives.all_pre_h (Term) Term)

(declare-fun FStar.Pervasives.all_pre_h@tok () Term)


; </end encoding FStar.Pervasives.all_pre_h>


; <Start encoding FStar.Pervasives.all_post_h'>

(declare-fun FStar.Pervasives.all_post_h_ (Term Term Term) Term)

(declare-fun FStar.Pervasives.all_post_h_@tok () Term)

;;;;;;;;;;;;;;;;_: FStar.Pervasives.result a -> _: h{pre} -> Prims.GTot Type
(declare-fun Tm_arrow_fc269489cb2e24a10c7710a1f7f9d269 (Term Term Term) Term)

; </end encoding FStar.Pervasives.all_post_h'>


; <Start encoding FStar.Pervasives.all_post_h>

(declare-fun FStar.Pervasives.all_post_h (Term Term) Term)

(declare-fun FStar.Pervasives.all_post_h@tok () Term)

; </end encoding FStar.Pervasives.all_post_h>


; <Start encoding FStar.Pervasives.all_wp_h>

(declare-fun FStar.Pervasives.all_wp_h (Term Term) Term)

(declare-fun FStar.Pervasives.all_wp_h@tok () Term)
;;;;;;;;;;;;;;;;_: FStar.Pervasives.all_post_h h a -> FStar.Pervasives.all_pre_h h
(declare-fun Tm_arrow_1cd90c71d90a216d9fb0ba0321a1d3b5 (Term Term) Term)

; </end encoding FStar.Pervasives.all_wp_h>


; <Start encoding FStar.Pervasives.all_return>

(declare-fun FStar.Pervasives.all_return (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;heap: Type -> a: Type -> x: a -> p: FStar.Pervasives.all_post_h heap a -> _: heap -> Prims.GTot Type
(declare-fun Tm_arrow_3f61557667800fb54cc62e48a5201f9d () Term)
(declare-fun FStar.Pervasives.all_return@tok () Term)


; </end encoding FStar.Pervasives.all_return>


; <Start encoding FStar.Pervasives.all_bind_wp>

;;;;;;;;;;;;;;;;_: a -> Prims.GTot (FStar.Pervasives.all_wp_h heap b)
(declare-fun Tm_arrow_b567b509414635f00096b9b1c3e30b57 (Term Term Term) Term)
(declare-fun FStar.Pervasives.all_bind_wp (Term Term Term Term Term Term Term) Term)

;;;;;;;;;;;;;;;;heap: Type ->     a: Type ->     b: Type ->     wp1: FStar.Pervasives.all_wp_h heap a ->     wp2: (_: a -> Prims.GTot (FStar.Pervasives.all_wp_h heap b)) ->     p: FStar.Pervasives.all_post_h heap b ->     h0: heap   -> Prims.GTot Type
(declare-fun Tm_arrow_6ac18e25eb49f55ae0ce9c14679ecc22 () Term)
(declare-fun FStar.Pervasives.all_bind_wp@tok () Term)

;;;;;;;;;;;;;;;;ra: FStar.Pervasives.result a -> h1: heap -> Prims.GTot Type
(declare-fun Tm_arrow_59cac8a9b1ae3aa9511b8a867f8e934e (Term Term) Term)
(declare-fun Tm_abs_35ddc99cefc0079215f6f6ab3c58856d (Term Term Term Term Term) Term)

; </end encoding FStar.Pervasives.all_bind_wp>


; <Start encoding FStar.Pervasives.all_if_then_else>

(declare-fun FStar.Pervasives.all_if_then_else (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;heap: Type ->     a: Type ->     p: Type ->     wp_then: FStar.Pervasives.all_wp_h heap a ->     wp_else: FStar.Pervasives.all_wp_h heap a ->     post: FStar.Pervasives.all_post_h heap a ->     h0: heap   -> Prims.logical
(declare-fun Tm_arrow_491eee2c8dc4eab4d420326a8285d2c4 () Term)
(declare-fun FStar.Pervasives.all_if_then_else@tok () Term)

; </end encoding FStar.Pervasives.all_if_then_else>


; <Start encoding FStar.Pervasives.all_ite_wp>

(declare-fun FStar.Pervasives.all_ite_wp (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;heap: Type ->     a: Type ->     wp: FStar.Pervasives.all_wp_h heap a ->     post: FStar.Pervasives.all_post_h heap a ->     h0: heap   -> Prims.logical
(declare-fun Tm_arrow_20fdb4e6d0c32f949f55e39a059913a7 () Term)
(declare-fun FStar.Pervasives.all_ite_wp@tok () Term)



(declare-fun Tm_abs_b4b0cf2e42901b42be235caa84bfc7f4 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;k: FStar.Pervasives.all_post_h heap a -> Prims.GTot Type
(declare-fun Tm_arrow_f7466eb55fd31463cdfb5b4251fe1912 (Term Term) Term)
(declare-fun Tm_abs_aa90876ffd60a4411fdca7eeeb8f6130 (Term Term Term Term Term) Term)

; </end encoding FStar.Pervasives.all_ite_wp>


; <Start encoding FStar.Pervasives.all_stronger>

(declare-fun FStar.Pervasives.all_stronger (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;heap: Type ->     a: Type ->     wp1: FStar.Pervasives.all_wp_h heap a ->     wp2: FStar.Pervasives.all_wp_h heap a   -> Prims.logical
(declare-fun Tm_arrow_073b21d0ec8edf2dda32907b45ec5f68 () Term)
(declare-fun FStar.Pervasives.all_stronger@tok () Term)



(declare-fun Tm_abs_61b202c6a5250875acb8de09e14bb21a (Term Term Term Term) Term)

; </end encoding FStar.Pervasives.all_stronger>


; <Start encoding FStar.Pervasives.all_close_wp>


(declare-fun FStar.Pervasives.all_close_wp (Term Term Term Term Term Term) Term)

;;;;;;;;;;;;;;;;heap: Type ->     a: Type ->     b: Type ->     wp: (_: b -> Prims.GTot (FStar.Pervasives.all_wp_h heap a)) ->     p: FStar.Pervasives.all_post_h heap a ->     h: heap   -> Prims.logical
(declare-fun Tm_arrow_803d195802308e8beadf04438d3a6508 () Term)
(declare-fun FStar.Pervasives.all_close_wp@tok () Term)





; </end encoding FStar.Pervasives.all_close_wp>


; <Start encoding FStar.Pervasives.all_trivial>

(declare-fun FStar.Pervasives.all_trivial (Term Term Term) Term)
;;;;;;;;;;;;;;;;heap: Type -> a: Type -> wp: FStar.Pervasives.all_wp_h heap a -> Prims.logical
(declare-fun Tm_arrow_957927b0d25001784693eee8b2182308 () Term)
(declare-fun FStar.Pervasives.all_trivial@tok () Term)

(declare-fun Tm_abs_22e463dbd987016e31d6bc67025a7cd9 (Term Term) Term)

(declare-fun Tm_abs_c7ae205604ad646e5515eb4bea93d3f2 (Term Term Term) Term)





; </end encoding FStar.Pervasives.all_trivial>


; <Skipped FStar.Pervasives.ALL_h/>


; <Start encoding FStar.Pervasives.inversion>

(declare-fun FStar.Pervasives.inversion (Term) Term)

(declare-fun FStar.Pervasives.inversion@tok () Term)

; </end encoding FStar.Pervasives.inversion>


; <Start encoding FStar.Pervasives.allow_inversion>

(declare-fun FStar.Pervasives.allow_inversion (Term) Term)
(declare-fun Tm_refine_363615bee79fae5066b7c8bd06c286d0 (Term) Term)
;;;;;;;;;;;;;;;;a: Type -> Prims.Pure Prims.unit
(declare-fun Tm_arrow_bcab9cce464ec0f76562bc48c17ba410 () Term)
(declare-fun FStar.Pervasives.allow_inversion@tok () Term)


; </end encoding FStar.Pervasives.allow_inversion>


; <Start encoding FStar.Pervasives.invertOption>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.invertOption (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.invertOption@tok () Term)

; </end encoding FStar.Pervasives.invertOption>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.either (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.either@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.either@x1 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.either@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Inl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inl_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inl_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inl_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Inl
(declare-fun FStar.Pervasives.Inl@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Inr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inr_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inr_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inr_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Inr
(declare-fun FStar.Pervasives.Inr@tok () Term)
;;;;;;;;;;;;;;;;v: a -> FStar.Pervasives.either a b
(declare-fun Tm_arrow_065da0adeba0c4ae0da1476ececee84c () Term)
;;;;;;;;;;;;;;;;v: b -> FStar.Pervasives.either a b
(declare-fun Tm_arrow_c883938642e6d97d79c975d8d94b4aac () Term)

; <Start encoding FStar.Pervasives.either>


; <start constructor FStar.Pervasives.either>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.either ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
454)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(FStar.Pervasives.either @x0
@x1))
 
;;no pats
:qid is-FStar.Pervasives.either))))

; </end constructor FStar.Pervasives.either>


; </end encoding FStar.Pervasives.either>


; <Start encoding FStar.Pervasives.Inl>


; <start constructor FStar.Pervasives.Inl>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Inl ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
461)
(= __@x0
(FStar.Pervasives.Inl (FStar.Pervasives.Inl_a __@x0)
(FStar.Pervasives.Inl_b __@x0)
(FStar.Pervasives.Inl_v __@x0)))))

; </end constructor FStar.Pervasives.Inl>


; </end encoding FStar.Pervasives.Inl>


; <Start encoding FStar.Pervasives.Inr>


; <start constructor FStar.Pervasives.Inr>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Inr ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
466)
(= __@x0
(FStar.Pervasives.Inr (FStar.Pervasives.Inr_a __@x0)
(FStar.Pervasives.Inr_b __@x0)
(FStar.Pervasives.Inr_v __@x0)))))

; </end constructor FStar.Pervasives.Inr>


; </end encoding FStar.Pervasives.Inr>


; </end encoding >


; <Start encoding FStar.Pervasives.either__uu___haseq>


; </end encoding FStar.Pervasives.either__uu___haseq>


; <Start encoding FStar.Pervasives.uu___is_Inl>

(declare-fun FStar.Pervasives.uu___is_Inl (Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Pervasives.either a b -> Prims.bool
(declare-fun Tm_arrow_af0c68f1e39d4d6020c0873b16730c7d () Term)
(declare-fun FStar.Pervasives.uu___is_Inl@tok () Term)

; </end encoding FStar.Pervasives.uu___is_Inl>


; <Skipped FStar.Pervasives.uu___is_Inl/>


; <Start encoding FStar.Pervasives.__proj__Inl__item__v>

(declare-fun Tm_refine_85e0cc884f8457202f90cd77f23733ba (Term Term) Term)
(declare-fun FStar.Pervasives.__proj__Inl__item__v (Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Pervasives.either a b {Inl? _} -> a
(declare-fun Tm_arrow_a80e0750277867ba1a434ad3bba8702d () Term)
(declare-fun FStar.Pervasives.__proj__Inl__item__v@tok () Term)

; </end encoding FStar.Pervasives.__proj__Inl__item__v>


; <Skipped FStar.Pervasives.__proj__Inl__item__v/>


; <Start encoding FStar.Pervasives.uu___is_Inr>

(declare-fun FStar.Pervasives.uu___is_Inr (Term Term Term) Term)

(declare-fun FStar.Pervasives.uu___is_Inr@tok () Term)

; </end encoding FStar.Pervasives.uu___is_Inr>


; <Skipped FStar.Pervasives.uu___is_Inr/>


; <Start encoding FStar.Pervasives.__proj__Inr__item__v>

(declare-fun Tm_refine_8f1f5f564dae90240db429de2eb41517 (Term Term) Term)
(declare-fun FStar.Pervasives.__proj__Inr__item__v (Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Pervasives.either a b {Inr? _} -> b
(declare-fun Tm_arrow_df618db6b42762940f198036c8a56200 () Term)
(declare-fun FStar.Pervasives.__proj__Inr__item__v@tok () Term)

; </end encoding FStar.Pervasives.__proj__Inr__item__v>


; <Skipped FStar.Pervasives.__proj__Inr__item__v/>


; <Start encoding FStar.Pervasives.dfst>


(declare-fun FStar.Pervasives.dfst (Term Term Term) Term)


(declare-fun FStar.Pervasives.dfst@tok () Term)


; </end encoding FStar.Pervasives.dfst>


; <Start encoding FStar.Pervasives.dsnd>


(declare-fun FStar.Pervasives.dsnd (Term Term Term) Term)


(declare-fun FStar.Pervasives.dsnd@tok () Term)


; </end encoding FStar.Pervasives.dsnd>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.dtuple3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.dtuple3@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.dtuple3@x1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.dtuple3@x2 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.dtuple3@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Mkdtuple3 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3__3 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mkdtuple3
(declare-fun FStar.Pervasives.Mkdtuple3@tok () Term)

;;;;;;;;;;;;;;;;x: a -> _: b x -> Prims.GTot Type
(declare-fun Tm_arrow_0b6559e6ff3addf84b0c2880affbb335 (Term Term) Term)




;;;;;;;;;;;;;;;;_1: a -> _2: b _1 -> _3: c _1 _2 -> FStar.Pervasives.dtuple3 a b c
(declare-fun Tm_arrow_8423f67df62f9e824c55756f9e26058d () Term)

; <Start encoding FStar.Pervasives.dtuple3>


; <start constructor FStar.Pervasives.dtuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.dtuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
502)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(FStar.Pervasives.dtuple3 @x0
@x1
@x2))
 
;;no pats
:qid is-FStar.Pervasives.dtuple3))))

; </end constructor FStar.Pervasives.dtuple3>


; </end encoding FStar.Pervasives.dtuple3>


; <Start encoding FStar.Pervasives.Mkdtuple3>


; <start constructor FStar.Pervasives.Mkdtuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Mkdtuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
513)
(= __@x0
(FStar.Pervasives.Mkdtuple3 (FStar.Pervasives.Mkdtuple3_a __@x0)
(FStar.Pervasives.Mkdtuple3_b __@x0)
(FStar.Pervasives.Mkdtuple3_c __@x0)
(FStar.Pervasives.Mkdtuple3__1 __@x0)
(FStar.Pervasives.Mkdtuple3__2 __@x0)
(FStar.Pervasives.Mkdtuple3__3 __@x0)))))

; </end constructor FStar.Pervasives.Mkdtuple3>


; </end encoding FStar.Pervasives.Mkdtuple3>


; </end encoding >


; <Start encoding FStar.Pervasives.dtuple3__uu___haseq>




; </end encoding FStar.Pervasives.dtuple3__uu___haseq>


; <Start encoding FStar.Pervasives.uu___is_Mkdtuple3>



(declare-fun FStar.Pervasives.uu___is_Mkdtuple3 (Term Term Term Term) Term)


;;;;;;;;;;;;;;;;projectee: FStar.Pervasives.dtuple3 a b c -> Prims.bool
(declare-fun Tm_arrow_70452cb82cd0a282ca9a2dbeb54c1b04 () Term)
(declare-fun FStar.Pervasives.uu___is_Mkdtuple3@tok () Term)

; </end encoding FStar.Pervasives.uu___is_Mkdtuple3>


; <Skipped FStar.Pervasives.uu___is_Mkdtuple3/>


; <Start encoding FStar.Pervasives.__proj__Mkdtuple3__item___1>



(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___1 (Term Term Term Term) Term)


;;;;;;;;;;;;;;;;projectee: FStar.Pervasives.dtuple3 a b c -> a
(declare-fun Tm_arrow_255f0cfe499b1d2e9836e157bce1dba3 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___1@tok () Term)

; </end encoding FStar.Pervasives.__proj__Mkdtuple3__item___1>


; <Skipped FStar.Pervasives.__proj__Mkdtuple3__item___1/>


; <Start encoding FStar.Pervasives.__proj__Mkdtuple3__item___2>



(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___2 (Term Term Term Term) Term)


;;;;;;;;;;;;;;;;projectee: FStar.Pervasives.dtuple3 a b c -> b (Mkdtuple3?._1 projectee)
(declare-fun Tm_arrow_ea1ded11f7d194a26e812f407333a011 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___2@tok () Term)

; </end encoding FStar.Pervasives.__proj__Mkdtuple3__item___2>


; <Skipped FStar.Pervasives.__proj__Mkdtuple3__item___2/>


; <Start encoding FStar.Pervasives.__proj__Mkdtuple3__item___3>



(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___3 (Term Term Term Term) Term)


;;;;;;;;;;;;;;;;projectee: FStar.Pervasives.dtuple3 a b c -> c (Mkdtuple3?._1 projectee) (Mkdtuple3?._2 projectee)
(declare-fun Tm_arrow_1d7ad5cfa0fff643640e3f74466d283e () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___3@tok () Term)

; </end encoding FStar.Pervasives.__proj__Mkdtuple3__item___3>


; <Skipped FStar.Pervasives.__proj__Mkdtuple3__item___3/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.dtuple4 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.dtuple4@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.dtuple4@x1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.dtuple4@x2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.dtuple4@x3 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.dtuple4@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Mkdtuple4 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__4 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mkdtuple4
(declare-fun FStar.Pervasives.Mkdtuple4@tok () Term)


;;;;;;;;;;;;;;;;x: a -> y: b x -> z: c x y -> Prims.GTot Type
(declare-fun Tm_arrow_af8eda99ba3685403be22a88669dcb35 (Term Term Term) Term)






;;;;;;;;;;;;;;;;_1: a -> _2: b _1 -> _3: c _1 _2 -> _4: d _1 _2 _3 -> FStar.Pervasives.dtuple4 a b c d
(declare-fun Tm_arrow_cef44a6056754f192c2446237c4c1408 () Term)

; <Start encoding FStar.Pervasives.dtuple4>


; <start constructor FStar.Pervasives.dtuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.dtuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
571)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= __@x0
(FStar.Pervasives.dtuple4 @x0
@x1
@x2
@x3))
 
;;no pats
:qid is-FStar.Pervasives.dtuple4))))

; </end constructor FStar.Pervasives.dtuple4>


; </end encoding FStar.Pervasives.dtuple4>


; <Start encoding FStar.Pervasives.Mkdtuple4>


; <start constructor FStar.Pervasives.Mkdtuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Mkdtuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
584)
(= __@x0
(FStar.Pervasives.Mkdtuple4 (FStar.Pervasives.Mkdtuple4_a __@x0)
(FStar.Pervasives.Mkdtuple4_b __@x0)
(FStar.Pervasives.Mkdtuple4_c __@x0)
(FStar.Pervasives.Mkdtuple4_d __@x0)
(FStar.Pervasives.Mkdtuple4__1 __@x0)
(FStar.Pervasives.Mkdtuple4__2 __@x0)
(FStar.Pervasives.Mkdtuple4__3 __@x0)
(FStar.Pervasives.Mkdtuple4__4 __@x0)))))

; </end constructor FStar.Pervasives.Mkdtuple4>


; </end encoding FStar.Pervasives.Mkdtuple4>


; </end encoding >


; <Start encoding FStar.Pervasives.dtuple4__uu___haseq>





; </end encoding FStar.Pervasives.dtuple4__uu___haseq>


; <Start encoding FStar.Pervasives.uu___is_Mkdtuple4>




(declare-fun FStar.Pervasives.uu___is_Mkdtuple4 (Term Term Term Term Term) Term)



;;;;;;;;;;;;;;;;projectee: FStar.Pervasives.dtuple4 a b c d -> Prims.bool
(declare-fun Tm_arrow_76a226dc2cea2ddd4e4258637fc95e5b () Term)
(declare-fun FStar.Pervasives.uu___is_Mkdtuple4@tok () Term)

; </end encoding FStar.Pervasives.uu___is_Mkdtuple4>


; <Skipped FStar.Pervasives.uu___is_Mkdtuple4/>


; <Start encoding FStar.Pervasives.__proj__Mkdtuple4__item___1>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___1 (Term Term Term Term Term) Term)



;;;;;;;;;;;;;;;;projectee: FStar.Pervasives.dtuple4 a b c d -> a
(declare-fun Tm_arrow_1da4d60ab69f411b912e76cc25e77965 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___1@tok () Term)

; </end encoding FStar.Pervasives.__proj__Mkdtuple4__item___1>


; <Skipped FStar.Pervasives.__proj__Mkdtuple4__item___1/>


; <Start encoding FStar.Pervasives.__proj__Mkdtuple4__item___2>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___2 (Term Term Term Term Term) Term)



;;;;;;;;;;;;;;;;projectee: FStar.Pervasives.dtuple4 a b c d -> b (Mkdtuple4?._1 projectee)
(declare-fun Tm_arrow_a86867091548f3d7d3ca1cb8b0458b9f () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___2@tok () Term)

; </end encoding FStar.Pervasives.__proj__Mkdtuple4__item___2>


; <Skipped FStar.Pervasives.__proj__Mkdtuple4__item___2/>


; <Start encoding FStar.Pervasives.__proj__Mkdtuple4__item___3>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___3 (Term Term Term Term Term) Term)



;;;;;;;;;;;;;;;;projectee: FStar.Pervasives.dtuple4 a b c d -> c (Mkdtuple4?._1 projectee) (Mkdtuple4?._2 projectee)
(declare-fun Tm_arrow_ee72552fcc293405aa0e854ba26f27ac () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___3@tok () Term)

; </end encoding FStar.Pervasives.__proj__Mkdtuple4__item___3>


; <Skipped FStar.Pervasives.__proj__Mkdtuple4__item___3/>


; <Start encoding FStar.Pervasives.__proj__Mkdtuple4__item___4>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___4 (Term Term Term Term Term) Term)



;;;;;;;;;;;;;;;;projectee: FStar.Pervasives.dtuple4 a b c d   -> d (Mkdtuple4?._1 projectee) (Mkdtuple4?._2 projectee) (Mkdtuple4?._3 projectee)
(declare-fun Tm_arrow_6c79def96aa5d5d9eb9555c48dd9ebb6 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___4@tok () Term)

; </end encoding FStar.Pervasives.__proj__Mkdtuple4__item___4>


; <Skipped FStar.Pervasives.__proj__Mkdtuple4__item___4/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.dtuple5 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.dtuple5@x0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.dtuple5@x1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.dtuple5@x2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.dtuple5@x3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.dtuple5@x4 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.dtuple5@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Mkdtuple5 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__5 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mkdtuple5
(declare-fun FStar.Pervasives.Mkdtuple5@tok () Term)



;;;;;;;;;;;;;;;;x: a -> y: b x -> z: c x y -> w: d x y z -> Prims.GTot Type
(declare-fun Tm_arrow_e2051b23ee191036cd2c8f08b57577cc (Term Term Term Term) Term)








;;;;;;;;;;;;;;;;_1: a -> _2: b _1 -> _3: c _1 _2 -> _4: d _1 _2 _3 -> _5: e _1 _2 _3 _4   -> FStar.Pervasives.dtuple5 a b c d e
(declare-fun Tm_arrow_7c47a0b67fa3d6e69e51a1ade2982e74 () Term)

; <Start encoding FStar.Pervasives.dtuple5>


; <start constructor FStar.Pervasives.dtuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.dtuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
678)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= __@x0
(FStar.Pervasives.dtuple5 @x0
@x1
@x2
@x3
@x4))
 
;;no pats
:qid is-FStar.Pervasives.dtuple5))))

; </end constructor FStar.Pervasives.dtuple5>


; </end encoding FStar.Pervasives.dtuple5>


; <Start encoding FStar.Pervasives.Mkdtuple5>


; <start constructor FStar.Pervasives.Mkdtuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Mkdtuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
693)
(= __@x0
(FStar.Pervasives.Mkdtuple5 (FStar.Pervasives.Mkdtuple5_a __@x0)
(FStar.Pervasives.Mkdtuple5_b __@x0)
(FStar.Pervasives.Mkdtuple5_c __@x0)
(FStar.Pervasives.Mkdtuple5_d __@x0)
(FStar.Pervasives.Mkdtuple5_e __@x0)
(FStar.Pervasives.Mkdtuple5__1 __@x0)
(FStar.Pervasives.Mkdtuple5__2 __@x0)
(FStar.Pervasives.Mkdtuple5__3 __@x0)
(FStar.Pervasives.Mkdtuple5__4 __@x0)
(FStar.Pervasives.Mkdtuple5__5 __@x0)))))

; </end constructor FStar.Pervasives.Mkdtuple5>


; </end encoding FStar.Pervasives.Mkdtuple5>


; </end encoding >


; <Start encoding FStar.Pervasives.dtuple5__uu___haseq>






; </end encoding FStar.Pervasives.dtuple5__uu___haseq>


; <Start encoding FStar.Pervasives.uu___is_Mkdtuple5>





(declare-fun FStar.Pervasives.uu___is_Mkdtuple5 (Term Term Term Term Term Term) Term)




;;;;;;;;;;;;;;;;projectee: FStar.Pervasives.dtuple5 a b c d e -> Prims.bool
(declare-fun Tm_arrow_790317d9d2afaf2417875fd8f65cee9f () Term)
(declare-fun FStar.Pervasives.uu___is_Mkdtuple5@tok () Term)

; </end encoding FStar.Pervasives.uu___is_Mkdtuple5>


; <Skipped FStar.Pervasives.uu___is_Mkdtuple5/>


; <Start encoding FStar.Pervasives.__proj__Mkdtuple5__item___1>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___1 (Term Term Term Term Term Term) Term)




;;;;;;;;;;;;;;;;projectee: FStar.Pervasives.dtuple5 a b c d e -> a
(declare-fun Tm_arrow_855676d3a54fc2cdf0dfa3ac2f15fdad () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___1@tok () Term)

; </end encoding FStar.Pervasives.__proj__Mkdtuple5__item___1>


; <Skipped FStar.Pervasives.__proj__Mkdtuple5__item___1/>


; <Start encoding FStar.Pervasives.__proj__Mkdtuple5__item___2>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___2 (Term Term Term Term Term Term) Term)




;;;;;;;;;;;;;;;;projectee: FStar.Pervasives.dtuple5 a b c d e -> b (Mkdtuple5?._1 projectee)
(declare-fun Tm_arrow_3c181aa1af161d84af20412908ff5981 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___2@tok () Term)

; </end encoding FStar.Pervasives.__proj__Mkdtuple5__item___2>


; <Skipped FStar.Pervasives.__proj__Mkdtuple5__item___2/>


; <Start encoding FStar.Pervasives.__proj__Mkdtuple5__item___3>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___3 (Term Term Term Term Term Term) Term)




;;;;;;;;;;;;;;;;projectee: FStar.Pervasives.dtuple5 a b c d e   -> c (Mkdtuple5?._1 projectee) (Mkdtuple5?._2 projectee)
(declare-fun Tm_arrow_cc152ea4c314cfd6854de94e70041031 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___3@tok () Term)

; </end encoding FStar.Pervasives.__proj__Mkdtuple5__item___3>


; <Skipped FStar.Pervasives.__proj__Mkdtuple5__item___3/>


; <Start encoding FStar.Pervasives.__proj__Mkdtuple5__item___4>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___4 (Term Term Term Term Term Term) Term)




;;;;;;;;;;;;;;;;projectee: FStar.Pervasives.dtuple5 a b c d e   -> d (Mkdtuple5?._1 projectee) (Mkdtuple5?._2 projectee) (Mkdtuple5?._3 projectee)
(declare-fun Tm_arrow_6a05465acf4f8d1b8f43fd30077a772a () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___4@tok () Term)

; </end encoding FStar.Pervasives.__proj__Mkdtuple5__item___4>


; <Skipped FStar.Pervasives.__proj__Mkdtuple5__item___4/>


; <Start encoding FStar.Pervasives.__proj__Mkdtuple5__item___5>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___5 (Term Term Term Term Term Term) Term)




;;;;;;;;;;;;;;;;projectee: FStar.Pervasives.dtuple5 a b c d e   -> e (Mkdtuple5?._1 projectee)       (Mkdtuple5?._2 projectee)       (Mkdtuple5?._3 projectee)       (Mkdtuple5?._4 projectee)
(declare-fun Tm_arrow_d5d61b48d54646c5c411627b3a20c98f () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___5@tok () Term)

; </end encoding FStar.Pervasives.__proj__Mkdtuple5__item___5>


; <Skipped FStar.Pervasives.__proj__Mkdtuple5__item___5/>


; <Start encoding FStar.Pervasives.ignore>

(declare-fun FStar.Pervasives.ignore (Term Term) Term)
;;;;;;;;;;;;;;;;x: a -> Prims.unit
(declare-fun Tm_arrow_962476a7eea46a6ffc9b658c6d8fbc71 () Term)
(declare-fun FStar.Pervasives.ignore@tok () Term)

; </end encoding FStar.Pervasives.ignore>


; <Start encoding FStar.Pervasives.false_elim>

(declare-fun Tm_refine_f1ecc6ab6882a651504f328937700647 () Term)
(declare-fun FStar.Pervasives.false_elim (Term Term) Term)

;;;;;;;;;;;;;;;;u55780: u55781: Prims.unit{Prims.l_False} -> a
(declare-fun Tm_arrow_7636fbfab5cd88ba06f60c10ea8caef2 () Term)
(declare-fun FStar.Pervasives.false_elim@tok () Term)

; </end encoding FStar.Pervasives.false_elim>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.__internal_ocaml_attributes () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.PpxDerivingShow () Term)
;;;;;;;;;;;;;;;;data constructor proxy: PpxDerivingShow
(declare-fun FStar.Pervasives.PpxDerivingShow@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.PpxDerivingShowConstant (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.PpxDerivingShowConstant__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: PpxDerivingShowConstant
(declare-fun FStar.Pervasives.PpxDerivingShowConstant@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.PpxDerivingYoJson () Term)
;;;;;;;;;;;;;;;;data constructor proxy: PpxDerivingYoJson
(declare-fun FStar.Pervasives.PpxDerivingYoJson@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CInline () Term)
;;;;;;;;;;;;;;;;data constructor proxy: CInline
(declare-fun FStar.Pervasives.CInline@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Substitute () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Substitute
(declare-fun FStar.Pervasives.Substitute@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Gc () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Gc
(declare-fun FStar.Pervasives.Gc@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Comment (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Comment__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Comment
(declare-fun FStar.Pervasives.Comment@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CPrologue (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CPrologue__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: CPrologue
(declare-fun FStar.Pervasives.CPrologue@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CEpilogue (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CEpilogue__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: CEpilogue
(declare-fun FStar.Pervasives.CEpilogue@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CConst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CConst__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: CConst
(declare-fun FStar.Pervasives.CConst@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CCConv (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CCConv__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: CCConv
(declare-fun FStar.Pervasives.CCConv@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CAbstractStruct () Term)
;;;;;;;;;;;;;;;;data constructor proxy: CAbstractStruct
(declare-fun FStar.Pervasives.CAbstractStruct@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CIfDef () Term)
;;;;;;;;;;;;;;;;data constructor proxy: CIfDef
(declare-fun FStar.Pervasives.CIfDef@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CMacro () Term)
;;;;;;;;;;;;;;;;data constructor proxy: CMacro
(declare-fun FStar.Pervasives.CMacro@tok () Term)
;;;;;;;;;;;;;;;;_0: Prims.string -> FStar.Pervasives.__internal_ocaml_attributes
(declare-fun Tm_arrow_a25c6dbdd7c43412e925069991c0ef48 () Term)






; <Start encoding FStar.Pervasives.__internal_ocaml_attributes>


; <start constructor FStar.Pervasives.__internal_ocaml_attributes>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.__internal_ocaml_attributes ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
827)
(= __@x0
FStar.Pervasives.__internal_ocaml_attributes)))

; </end constructor FStar.Pervasives.__internal_ocaml_attributes>


; </end encoding FStar.Pervasives.__internal_ocaml_attributes>


; <Start encoding FStar.Pervasives.PpxDerivingShow>


; <start constructor FStar.Pervasives.PpxDerivingShow>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.PpxDerivingShow ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
833)
(= __@x0
FStar.Pervasives.PpxDerivingShow)))

; </end constructor FStar.Pervasives.PpxDerivingShow>


; </end encoding FStar.Pervasives.PpxDerivingShow>


; <Start encoding FStar.Pervasives.PpxDerivingShowConstant>


; <start constructor FStar.Pervasives.PpxDerivingShowConstant>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.PpxDerivingShowConstant ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
835)
(= __@x0
(FStar.Pervasives.PpxDerivingShowConstant (FStar.Pervasives.PpxDerivingShowConstant__0 __@x0)))))

; </end constructor FStar.Pervasives.PpxDerivingShowConstant>


; </end encoding FStar.Pervasives.PpxDerivingShowConstant>


; <Start encoding FStar.Pervasives.PpxDerivingYoJson>


; <start constructor FStar.Pervasives.PpxDerivingYoJson>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.PpxDerivingYoJson ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
840)
(= __@x0
FStar.Pervasives.PpxDerivingYoJson)))

; </end constructor FStar.Pervasives.PpxDerivingYoJson>


; </end encoding FStar.Pervasives.PpxDerivingYoJson>


; <Start encoding FStar.Pervasives.CInline>


; <start constructor FStar.Pervasives.CInline>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CInline ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
842)
(= __@x0
FStar.Pervasives.CInline)))

; </end constructor FStar.Pervasives.CInline>


; </end encoding FStar.Pervasives.CInline>


; <Start encoding FStar.Pervasives.Substitute>


; <start constructor FStar.Pervasives.Substitute>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Substitute ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
844)
(= __@x0
FStar.Pervasives.Substitute)))

; </end constructor FStar.Pervasives.Substitute>


; </end encoding FStar.Pervasives.Substitute>


; <Start encoding FStar.Pervasives.Gc>


; <start constructor FStar.Pervasives.Gc>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Gc ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
846)
(= __@x0
FStar.Pervasives.Gc)))

; </end constructor FStar.Pervasives.Gc>


; </end encoding FStar.Pervasives.Gc>


; <Start encoding FStar.Pervasives.Comment>


; <start constructor FStar.Pervasives.Comment>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Comment ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
848)
(= __@x0
(FStar.Pervasives.Comment (FStar.Pervasives.Comment__0 __@x0)))))

; </end constructor FStar.Pervasives.Comment>


; </end encoding FStar.Pervasives.Comment>


; <Start encoding FStar.Pervasives.CPrologue>


; <start constructor FStar.Pervasives.CPrologue>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CPrologue ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
853)
(= __@x0
(FStar.Pervasives.CPrologue (FStar.Pervasives.CPrologue__0 __@x0)))))

; </end constructor FStar.Pervasives.CPrologue>


; </end encoding FStar.Pervasives.CPrologue>


; <Start encoding FStar.Pervasives.CEpilogue>


; <start constructor FStar.Pervasives.CEpilogue>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CEpilogue ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
858)
(= __@x0
(FStar.Pervasives.CEpilogue (FStar.Pervasives.CEpilogue__0 __@x0)))))

; </end constructor FStar.Pervasives.CEpilogue>


; </end encoding FStar.Pervasives.CEpilogue>


; <Start encoding FStar.Pervasives.CConst>


; <start constructor FStar.Pervasives.CConst>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CConst ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
863)
(= __@x0
(FStar.Pervasives.CConst (FStar.Pervasives.CConst__0 __@x0)))))

; </end constructor FStar.Pervasives.CConst>


; </end encoding FStar.Pervasives.CConst>


; <Start encoding FStar.Pervasives.CCConv>


; <start constructor FStar.Pervasives.CCConv>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CCConv ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
868)
(= __@x0
(FStar.Pervasives.CCConv (FStar.Pervasives.CCConv__0 __@x0)))))

; </end constructor FStar.Pervasives.CCConv>


; </end encoding FStar.Pervasives.CCConv>


; <Start encoding FStar.Pervasives.CAbstractStruct>


; <start constructor FStar.Pervasives.CAbstractStruct>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CAbstractStruct ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
873)
(= __@x0
FStar.Pervasives.CAbstractStruct)))

; </end constructor FStar.Pervasives.CAbstractStruct>


; </end encoding FStar.Pervasives.CAbstractStruct>


; <Start encoding FStar.Pervasives.CIfDef>


; <start constructor FStar.Pervasives.CIfDef>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CIfDef ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
875)
(= __@x0
FStar.Pervasives.CIfDef)))

; </end constructor FStar.Pervasives.CIfDef>


; </end encoding FStar.Pervasives.CIfDef>


; <Start encoding FStar.Pervasives.CMacro>


; <start constructor FStar.Pervasives.CMacro>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CMacro ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
877)
(= __@x0
FStar.Pervasives.CMacro)))

; </end constructor FStar.Pervasives.CMacro>


; </end encoding FStar.Pervasives.CMacro>


; </end encoding >


; <Start encoding FStar.Pervasives.__internal_ocaml_attributes__uu___haseq>


; </end encoding FStar.Pervasives.__internal_ocaml_attributes__uu___haseq>


; <Start encoding FStar.Pervasives.uu___is_PpxDerivingShow>

(declare-fun FStar.Pervasives.uu___is_PpxDerivingShow (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Pervasives.__internal_ocaml_attributes -> Prims.bool
(declare-fun Tm_arrow_89dc0c243f5e74d4fefc48cfe123db41 () Term)
(declare-fun FStar.Pervasives.uu___is_PpxDerivingShow@tok () Term)

; </end encoding FStar.Pervasives.uu___is_PpxDerivingShow>


; <Skipped FStar.Pervasives.uu___is_PpxDerivingShow/>


; <Start encoding FStar.Pervasives.uu___is_PpxDerivingShowConstant>

(declare-fun FStar.Pervasives.uu___is_PpxDerivingShowConstant (Term) Term)

(declare-fun FStar.Pervasives.uu___is_PpxDerivingShowConstant@tok () Term)

; </end encoding FStar.Pervasives.uu___is_PpxDerivingShowConstant>


; <Skipped FStar.Pervasives.uu___is_PpxDerivingShowConstant/>


; <Start encoding FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0>

(declare-fun Tm_refine_564db2f0aa0878b4d96c60508be3dd36 () Term)
(declare-fun FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Pervasives.__internal_ocaml_attributes {PpxDerivingShowConstant? _}   -> Prims.string
(declare-fun Tm_arrow_dbb84ef8131159481071b6d6a41b7f31 () Term)
(declare-fun FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0@tok () Term)

; </end encoding FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0>


; <Skipped FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0/>


; <Start encoding FStar.Pervasives.uu___is_PpxDerivingYoJson>

(declare-fun FStar.Pervasives.uu___is_PpxDerivingYoJson (Term) Term)

(declare-fun FStar.Pervasives.uu___is_PpxDerivingYoJson@tok () Term)

; </end encoding FStar.Pervasives.uu___is_PpxDerivingYoJson>


; <Skipped FStar.Pervasives.uu___is_PpxDerivingYoJson/>


; <Start encoding FStar.Pervasives.uu___is_CInline>

(declare-fun FStar.Pervasives.uu___is_CInline (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CInline@tok () Term)

; </end encoding FStar.Pervasives.uu___is_CInline>


; <Skipped FStar.Pervasives.uu___is_CInline/>


; <Start encoding FStar.Pervasives.uu___is_Substitute>

(declare-fun FStar.Pervasives.uu___is_Substitute (Term) Term)

(declare-fun FStar.Pervasives.uu___is_Substitute@tok () Term)

; </end encoding FStar.Pervasives.uu___is_Substitute>


; <Skipped FStar.Pervasives.uu___is_Substitute/>


; <Start encoding FStar.Pervasives.uu___is_Gc>

(declare-fun FStar.Pervasives.uu___is_Gc (Term) Term)

(declare-fun FStar.Pervasives.uu___is_Gc@tok () Term)

; </end encoding FStar.Pervasives.uu___is_Gc>


; <Skipped FStar.Pervasives.uu___is_Gc/>


; <Start encoding FStar.Pervasives.uu___is_Comment>

(declare-fun FStar.Pervasives.uu___is_Comment (Term) Term)

(declare-fun FStar.Pervasives.uu___is_Comment@tok () Term)

; </end encoding FStar.Pervasives.uu___is_Comment>


; <Skipped FStar.Pervasives.uu___is_Comment/>


; <Start encoding FStar.Pervasives.__proj__Comment__item___0>

(declare-fun Tm_refine_c53089e2d20d1b0f5a267296ac8e45f0 () Term)
(declare-fun FStar.Pervasives.__proj__Comment__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Pervasives.__internal_ocaml_attributes {Comment? _} -> Prims.string
(declare-fun Tm_arrow_d4c2bbf4fb852b3f4b9961c7cbc2f3a2 () Term)
(declare-fun FStar.Pervasives.__proj__Comment__item___0@tok () Term)

; </end encoding FStar.Pervasives.__proj__Comment__item___0>


; <Skipped FStar.Pervasives.__proj__Comment__item___0/>


; <Start encoding FStar.Pervasives.uu___is_CPrologue>

(declare-fun FStar.Pervasives.uu___is_CPrologue (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CPrologue@tok () Term)

; </end encoding FStar.Pervasives.uu___is_CPrologue>


; <Skipped FStar.Pervasives.uu___is_CPrologue/>


; <Start encoding FStar.Pervasives.__proj__CPrologue__item___0>

(declare-fun Tm_refine_ac46c1a2a06ce46a180e0eda48004c47 () Term)
(declare-fun FStar.Pervasives.__proj__CPrologue__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Pervasives.__internal_ocaml_attributes {CPrologue? _} -> Prims.string
(declare-fun Tm_arrow_929b9daa0a2a2e99e3571b146c52feaf () Term)
(declare-fun FStar.Pervasives.__proj__CPrologue__item___0@tok () Term)

; </end encoding FStar.Pervasives.__proj__CPrologue__item___0>


; <Skipped FStar.Pervasives.__proj__CPrologue__item___0/>


; <Start encoding FStar.Pervasives.uu___is_CEpilogue>

(declare-fun FStar.Pervasives.uu___is_CEpilogue (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CEpilogue@tok () Term)

; </end encoding FStar.Pervasives.uu___is_CEpilogue>


; <Skipped FStar.Pervasives.uu___is_CEpilogue/>


; <Start encoding FStar.Pervasives.__proj__CEpilogue__item___0>

(declare-fun Tm_refine_47384bef739d1f0729fd782d351dc9a5 () Term)
(declare-fun FStar.Pervasives.__proj__CEpilogue__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Pervasives.__internal_ocaml_attributes {CEpilogue? _} -> Prims.string
(declare-fun Tm_arrow_e37361b66babb46a30183ad1ff072689 () Term)
(declare-fun FStar.Pervasives.__proj__CEpilogue__item___0@tok () Term)

; </end encoding FStar.Pervasives.__proj__CEpilogue__item___0>


; <Skipped FStar.Pervasives.__proj__CEpilogue__item___0/>


; <Start encoding FStar.Pervasives.uu___is_CConst>

(declare-fun FStar.Pervasives.uu___is_CConst (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CConst@tok () Term)

; </end encoding FStar.Pervasives.uu___is_CConst>


; <Skipped FStar.Pervasives.uu___is_CConst/>


; <Start encoding FStar.Pervasives.__proj__CConst__item___0>

(declare-fun Tm_refine_5036c6b2983454bc3afeffcba3f00f50 () Term)
(declare-fun FStar.Pervasives.__proj__CConst__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Pervasives.__internal_ocaml_attributes {CConst? _} -> Prims.string
(declare-fun Tm_arrow_2d0b7639551b88b0df758d7b36c8f77a () Term)
(declare-fun FStar.Pervasives.__proj__CConst__item___0@tok () Term)

; </end encoding FStar.Pervasives.__proj__CConst__item___0>


; <Skipped FStar.Pervasives.__proj__CConst__item___0/>


; <Start encoding FStar.Pervasives.uu___is_CCConv>

(declare-fun FStar.Pervasives.uu___is_CCConv (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CCConv@tok () Term)

; </end encoding FStar.Pervasives.uu___is_CCConv>


; <Skipped FStar.Pervasives.uu___is_CCConv/>


; <Start encoding FStar.Pervasives.__proj__CCConv__item___0>

(declare-fun Tm_refine_2c4510f48649a66c3dca1fc9e3a2d320 () Term)
(declare-fun FStar.Pervasives.__proj__CCConv__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Pervasives.__internal_ocaml_attributes {CCConv? _} -> Prims.string
(declare-fun Tm_arrow_b7e884ec94708f2b05c42d4d8834eac6 () Term)
(declare-fun FStar.Pervasives.__proj__CCConv__item___0@tok () Term)

; </end encoding FStar.Pervasives.__proj__CCConv__item___0>


; <Skipped FStar.Pervasives.__proj__CCConv__item___0/>


; <Start encoding FStar.Pervasives.uu___is_CAbstractStruct>

(declare-fun FStar.Pervasives.uu___is_CAbstractStruct (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CAbstractStruct@tok () Term)

; </end encoding FStar.Pervasives.uu___is_CAbstractStruct>


; <Skipped FStar.Pervasives.uu___is_CAbstractStruct/>


; <Start encoding FStar.Pervasives.uu___is_CIfDef>

(declare-fun FStar.Pervasives.uu___is_CIfDef (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CIfDef@tok () Term)

; </end encoding FStar.Pervasives.uu___is_CIfDef>


; <Skipped FStar.Pervasives.uu___is_CIfDef/>


; <Start encoding FStar.Pervasives.uu___is_CMacro>

(declare-fun FStar.Pervasives.uu___is_CMacro (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CMacro@tok () Term)

; </end encoding FStar.Pervasives.uu___is_CMacro>


; <Skipped FStar.Pervasives.uu___is_CMacro/>


; <Start encoding FStar.Pervasives.inline_let>

(declare-fun FStar.Pervasives.inline_let (Dummy_sort) Term)

; </end encoding FStar.Pervasives.inline_let>


; <Start encoding FStar.Pervasives.rename_let>

(declare-fun FStar.Pervasives.rename_let (Term) Term)

(declare-fun FStar.Pervasives.rename_let@tok () Term)

; </end encoding FStar.Pervasives.rename_let>


; <Start encoding FStar.Pervasives.plugin>

(declare-fun FStar.Pervasives.plugin (Term) Term)
;;;;;;;;;;;;;;;;x: Prims.int -> Prims.unit
(declare-fun Tm_arrow_f12575a0ee171a8be16a63e3359708f8 () Term)
(declare-fun FStar.Pervasives.plugin@tok () Term)

; </end encoding FStar.Pervasives.plugin>


; <Start encoding FStar.Pervasives.tcnorm>

(declare-fun FStar.Pervasives.tcnorm (Dummy_sort) Term)

; </end encoding FStar.Pervasives.tcnorm>


; <Start encoding FStar.Pervasives.must_erase_for_extraction>

(declare-fun FStar.Pervasives.must_erase_for_extraction (Dummy_sort) Term)

; </end encoding FStar.Pervasives.must_erase_for_extraction>


; <Start encoding FStar.Pervasives.dm4f_bind_range>

(declare-fun FStar.Pervasives.dm4f_bind_range (Dummy_sort) Term)

; </end encoding FStar.Pervasives.dm4f_bind_range>


; <Start encoding FStar.Pervasives.expect_failure>

(declare-fun FStar.Pervasives.expect_failure (Term) Term)

(declare-fun FStar.Pervasives.expect_failure@tok () Term)

; </end encoding FStar.Pervasives.expect_failure>


; <Start encoding FStar.Pervasives.expect_lax_failure>

(declare-fun FStar.Pervasives.expect_lax_failure (Term) Term)

(declare-fun FStar.Pervasives.expect_lax_failure@tok () Term)

; </end encoding FStar.Pervasives.expect_lax_failure>


; <Start encoding FStar.Pervasives.tcdecltime>

(declare-fun FStar.Pervasives.tcdecltime (Dummy_sort) Term)

; </end encoding FStar.Pervasives.tcdecltime>


; <Start encoding FStar.Pervasives.unifier_hint_injective>

(declare-fun FStar.Pervasives.unifier_hint_injective (Dummy_sort) Term)

; </end encoding FStar.Pervasives.unifier_hint_injective>


; <Start encoding FStar.Pervasives.strict_on_arguments>

(declare-fun FStar.Pervasives.strict_on_arguments (Term) Term)

(declare-fun FStar.Pervasives.strict_on_arguments@tok () Term)

; </end encoding FStar.Pervasives.strict_on_arguments>


; <Start encoding FStar.Pervasives.resolve_implicits>

(declare-fun FStar.Pervasives.resolve_implicits (Dummy_sort) Term)

; </end encoding FStar.Pervasives.resolve_implicits>


; <Start encoding FStar.Pervasives.override_resolve_implicits_handler>

(declare-fun FStar.Pervasives.override_resolve_implicits_handler (Term Term Term) Term)
;;;;;;;;;;;;;;;;_: a -> _: Prims.list Prims.string -> Prims.unit
(declare-fun Tm_arrow_93e6548cfc250f7cc25301579d62a018 () Term)
(declare-fun FStar.Pervasives.override_resolve_implicits_handler@tok () Term)

; </end encoding FStar.Pervasives.override_resolve_implicits_handler>


; <Start encoding FStar.Pervasives.handle_smt_goals>

(declare-fun FStar.Pervasives.handle_smt_goals (Dummy_sort) Term)

; </end encoding FStar.Pervasives.handle_smt_goals>


; <Start encoding FStar.Pervasives.erasable>

(declare-fun FStar.Pervasives.erasable (Dummy_sort) Term)

; </end encoding FStar.Pervasives.erasable>


; <Start encoding FStar.Pervasives.commute_nested_matches>

(declare-fun FStar.Pervasives.commute_nested_matches (Dummy_sort) Term)

; </end encoding FStar.Pervasives.commute_nested_matches>


; <Start encoding FStar.Pervasives.noextract_to>

(declare-fun FStar.Pervasives.noextract_to (Term) Term)

(declare-fun FStar.Pervasives.noextract_to@tok () Term)

; </end encoding FStar.Pervasives.noextract_to>


; <Start encoding FStar.Pervasives.normalize_for_extraction>

(declare-fun FStar.Pervasives.normalize_for_extraction (Term) Term)
;;;;;;;;;;;;;;;;steps: Prims.list FStar.Pervasives.norm_step -> Prims.unit
(declare-fun Tm_arrow_5a371649389ebd695db0478470787cef () Term)
(declare-fun FStar.Pervasives.normalize_for_extraction@tok () Term)

; </end encoding FStar.Pervasives.normalize_for_extraction>


; <Start encoding FStar.Pervasives.ite_soundness_by>

(declare-fun FStar.Pervasives.ite_soundness_by (Term) Term)
;;;;;;;;;;;;;;;;attribute: Prims.unit -> Prims.unit
(declare-fun Tm_arrow_0c55530a575bf8e94add46ffb548393c () Term)
(declare-fun FStar.Pervasives.ite_soundness_by@tok () Term)

; </end encoding FStar.Pervasives.ite_soundness_by>


; <Start encoding FStar.Pervasives.default_effect>

(declare-fun FStar.Pervasives.default_effect (Term) Term)

(declare-fun FStar.Pervasives.default_effect@tok () Term)

; </end encoding FStar.Pervasives.default_effect>


; <Start encoding FStar.Pervasives.top_level_effect>

(declare-fun FStar.Pervasives.top_level_effect (Term) Term)

(declare-fun FStar.Pervasives.top_level_effect@tok () Term)

; </end encoding FStar.Pervasives.top_level_effect>


; <Start encoding FStar.Pervasives.effect_param>

(declare-fun FStar.Pervasives.effect_param (Dummy_sort) Term)

; </end encoding FStar.Pervasives.effect_param>


; <Start encoding FStar.Pervasives.bind_has_range_args>

(declare-fun FStar.Pervasives.bind_has_range_args (Dummy_sort) Term)

; </end encoding FStar.Pervasives.bind_has_range_args>


; <Start encoding FStar.Pervasives.primitive_extraction>

(declare-fun FStar.Pervasives.primitive_extraction (Dummy_sort) Term)

; </end encoding FStar.Pervasives.primitive_extraction>


; <Start encoding FStar.Pervasives.strictly_positive>

(declare-fun FStar.Pervasives.strictly_positive (Dummy_sort) Term)

; </end encoding FStar.Pervasives.strictly_positive>


; <Start encoding FStar.Pervasives.unused>

(declare-fun FStar.Pervasives.unused (Dummy_sort) Term)

; </end encoding FStar.Pervasives.unused>


; <Start encoding FStar.Pervasives.no_auto_projectors>

(declare-fun FStar.Pervasives.no_auto_projectors (Dummy_sort) Term)

; </end encoding FStar.Pervasives.no_auto_projectors>


; <Start encoding FStar.Pervasives.no_subtyping>

(declare-fun FStar.Pervasives.no_subtyping (Dummy_sort) Term)

; </end encoding FStar.Pervasives.no_subtyping>


; <Start encoding FStar.Pervasives.admit_termination>

(declare-fun FStar.Pervasives.admit_termination (Dummy_sort) Term)

; </end encoding FStar.Pervasives.admit_termination>


; <Start encoding FStar.Pervasives.singleton>

(declare-fun FStar.Pervasives.singleton (Term Term) Term)
(declare-fun Tm_refine_2fbd657fe85bcb2423f9c7e5f9b3bcb5 (Term Term) Term)
;;;;;;;;;;;;;;;;x: a -> y: a{y == x}
(declare-fun Tm_arrow_9cdb4ebd85da757e86217b6fb07ef9fc () Term)
(declare-fun FStar.Pervasives.singleton@tok () Term)


; </end encoding FStar.Pervasives.singleton>


; <Start encoding FStar.Pervasives.eqtype_as_type>

(declare-fun FStar.Pervasives.eqtype_as_type (Term) Term)
;;;;;;;;;;;;;;;;a: Prims.eqtype -> Type
(declare-fun Tm_arrow_7e9afc6da5407011473323ad80ff51bf () Term)
(declare-fun FStar.Pervasives.eqtype_as_type@tok () Term)

; </end encoding FStar.Pervasives.eqtype_as_type>


; <Start encoding FStar.Pervasives.coerce_eq>

(declare-fun Tm_refine_0dee8cb03258a67c2f7ec66427696212 (Term Term) Term)
(declare-fun FStar.Pervasives.coerce_eq (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;_: Prims.squash (a == b) -> x: a -> b
(declare-fun Tm_arrow_f44173fb14fa6046eedce5f32cb8aae8 () Term)
(declare-fun FStar.Pervasives.coerce_eq@tok () Term)


; </end encoding FStar.Pervasives.coerce_eq>


; <Start encoding FStar.Pervasives.coercion>

(declare-fun FStar.Pervasives.coercion (Dummy_sort) Term)

; </end encoding FStar.Pervasives.coercion>


; End Externals for interface FStar.Pervasives


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End interface FStar.Pervasives (1419 decls; total size 84729)

;;; Start interface FStar.Classical

; Externals for interface FStar.Classical


; <Start encoding FStar.Classical.give_witness>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.give_witness (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.give_witness@tok () Term)

; </end encoding FStar.Classical.give_witness>


; <Start encoding FStar.Classical.give_witness_from_squash>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.give_witness_from_squash (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.give_witness_from_squash@tok () Term)

; </end encoding FStar.Classical.give_witness_from_squash>


; <Start encoding FStar.Classical.lemma_to_squash_gtot>


(declare-fun Tm_refine_839524df17f415c122f40f00685d3fe6 (Term Term) Term)
;;;;;;;;;;;;;;;;x: a -> FStar.Pervasives.Lemma (ensures p x)
(declare-fun Tm_arrow_9a028cfcf6111a85dd3c28d61b4efdfd (Term Term) Term)
(declare-fun FStar.Classical.lemma_to_squash_gtot (Term Term Term Term) Term)



;;;;;;;;;;;;;;;;$_: (x: a -> FStar.Pervasives.Lemma (ensures p x)) -> x: a -> Prims.GTot (Prims.squash (p x))
(declare-fun Tm_arrow_6f9100982820dfbce0fb9c6dae0cee11 () Term)
(declare-fun FStar.Classical.lemma_to_squash_gtot@tok () Term)

; </end encoding FStar.Classical.lemma_to_squash_gtot>


; <Start encoding FStar.Classical.get_equality>

(declare-fun FStar.Classical.get_equality (Term Term Term) Term)
(declare-fun Tm_refine_7c805cbd5439f1b21f6463c70e57d0f1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;a: t -> b: t -> Prims.Pure (a == b)
(declare-fun Tm_arrow_158af926c0cd4bc1ff513e80f99f4b49 () Term)
(declare-fun FStar.Classical.get_equality@tok () Term)


; </end encoding FStar.Classical.get_equality>


; <Start encoding FStar.Classical.impl_to_arrow>

(declare-fun FStar.Classical.impl_to_arrow (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;_: (a ==> b) -> _: Prims.squash a -> Prims.squash b
(declare-fun Tm_arrow_156c500bdf0e99cc45ffd26a33a603a8 () Term)
(declare-fun FStar.Classical.impl_to_arrow@tok () Term)

; </end encoding FStar.Classical.impl_to_arrow>


; <Start encoding FStar.Classical.arrow_to_impl>

;;;;;;;;;;;;;;;;_: Prims.squash a -> Prims.GTot (Prims.squash b)
(declare-fun Tm_arrow_9d84457d1c8d2a3cb1cecf47a390b833 (Term Term) Term)
(declare-fun FStar.Classical.arrow_to_impl (Term Term Term) Term)

;;;;;;;;;;;;;;;;_: (_: Prims.squash a -> Prims.GTot (Prims.squash b)) -> Prims.GTot (a ==> b)
(declare-fun Tm_arrow_78d787b8a2633e2185ded4267a81cc32 () Term)
(declare-fun FStar.Classical.arrow_to_impl@tok () Term)

; </end encoding FStar.Classical.arrow_to_impl>


; <Start encoding FStar.Classical.impl_intro_gtot>


(declare-fun FStar.Classical.impl_intro_gtot (Term Term Term) Term)

;;;;;;;;;;;;;;;;$_: (_: p -> Prims.GTot q) -> Prims.GTot (p ==> q)
(declare-fun Tm_arrow_d2cdd2f18b92810e3048c35d07f1c9ea () Term)
(declare-fun FStar.Classical.impl_intro_gtot@tok () Term)

; </end encoding FStar.Classical.impl_intro_gtot>


; <Start encoding FStar.Classical.impl_intro_tot>

;;;;;;;;;;;;;;;;_: p -> q
(declare-fun Tm_arrow_6980332764c4493a7b0df5c02f7aefbe (Term Term) Term)
(declare-fun FStar.Classical.impl_intro_tot (Term Term Term) Term)

;;;;;;;;;;;;;;;;$_: (_: p -> q) -> (p ==> q)
(declare-fun Tm_arrow_91aadb43edc4c2c0c091af8dbe745057 () Term)
(declare-fun FStar.Classical.impl_intro_tot@tok () Term)

; </end encoding FStar.Classical.impl_intro_tot>


; <Start encoding FStar.Classical.impl_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.impl_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.impl_intro@tok () Term)

; </end encoding FStar.Classical.impl_intro>


; <Start encoding FStar.Classical.move_requires>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.move_requires (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.move_requires@tok () Term)

; </end encoding FStar.Classical.move_requires>


; <Start encoding FStar.Classical.move_requires_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.move_requires_2 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.move_requires_2@tok () Term)

; </end encoding FStar.Classical.move_requires_2>


; <Start encoding FStar.Classical.move_requires_3>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.move_requires_3 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.move_requires_3@tok () Term)

; </end encoding FStar.Classical.move_requires_3>


; <Start encoding FStar.Classical.impl_intro_gen>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.impl_intro_gen (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.impl_intro_gen@tok () Term)

; </end encoding FStar.Classical.impl_intro_gen>


; <Start encoding FStar.Classical.get_forall>


(declare-fun FStar.Classical.get_forall (Term Term) Term)




(declare-fun Tm_refine_7a68552470cd0b3e3b5038c890f62a82 (Term Term) Term)
;;;;;;;;;;;;;;;;p: (_: a -> Prims.GTot Type) -> Prims.Pure (forall (x: a). p x)
(declare-fun Tm_arrow_44be7520ed79d38d96b60844cf5c3637 () Term)
(declare-fun FStar.Classical.get_forall@tok () Term)





; </end encoding FStar.Classical.get_forall>


; <Start encoding FStar.Classical.forall_intro_gtot>



(declare-fun FStar.Classical.forall_intro_gtot (Term Term Term) Term)


(declare-fun Tm_refine_eee646ed2c0261b2e37307734e5990b8 (Term Term) Term)
;;;;;;;;;;;;;;;;$_: (x: a -> Prims.GTot (p x)) -> Prims.squash (forall (x: a). p x)
(declare-fun Tm_arrow_0d81b083331cc2ca8277c22c2c6ed09c () Term)
(declare-fun FStar.Classical.forall_intro_gtot@tok () Term)


; </end encoding FStar.Classical.forall_intro_gtot>


; <Start encoding FStar.Classical.lemma_forall_intro_gtot>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.lemma_forall_intro_gtot (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.lemma_forall_intro_gtot@tok () Term)

; </end encoding FStar.Classical.lemma_forall_intro_gtot>


; <Start encoding FStar.Classical.gtot_to_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.gtot_to_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.gtot_to_lemma@tok () Term)

; </end encoding FStar.Classical.gtot_to_lemma>


; <Start encoding FStar.Classical.forall_intro_squash_gtot>


;;;;;;;;;;;;;;;;x: a -> Prims.GTot (Prims.squash (p x))
(declare-fun Tm_arrow_e44b1a1960e76c65248b9976ee453bf1 (Term Term) Term)
(declare-fun FStar.Classical.forall_intro_squash_gtot (Term Term Term) Term)



;;;;;;;;;;;;;;;;$_: (x: a -> Prims.GTot (Prims.squash (p x))) -> Prims.squash (forall (x: a). p x)
(declare-fun Tm_arrow_810fc5a930eab84e2e1c9bc10e65f526 () Term)
(declare-fun FStar.Classical.forall_intro_squash_gtot@tok () Term)


; </end encoding FStar.Classical.forall_intro_squash_gtot>


; <Start encoding FStar.Classical.forall_intro_squash_gtot_join>



(declare-fun FStar.Classical.forall_intro_squash_gtot_join (Term Term Term) Term)





;;;;;;;;;;;;;;;;$_: (x: a -> Prims.GTot (Prims.squash (p x))) -> (forall (x: a). p x)
(declare-fun Tm_arrow_cd9381a0f782f3a2a2b6ba363e2e0508 () Term)
(declare-fun FStar.Classical.forall_intro_squash_gtot_join@tok () Term)




; </end encoding FStar.Classical.forall_intro_squash_gtot_join>


; <Start encoding FStar.Classical.forall_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro@tok () Term)

; </end encoding FStar.Classical.forall_intro>


; <Start encoding FStar.Classical.forall_intro_with_pat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_with_pat (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_with_pat@tok () Term)

; </end encoding FStar.Classical.forall_intro_with_pat>


; <Start encoding FStar.Classical.forall_intro_sub>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_sub (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_sub@tok () Term)

; </end encoding FStar.Classical.forall_intro_sub>


; <Start encoding FStar.Classical.forall_intro_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_2@tok () Term)

; </end encoding FStar.Classical.forall_intro_2>


; <Start encoding FStar.Classical.forall_intro_2_with_pat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_2_with_pat (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_2_with_pat@tok () Term)

; </end encoding FStar.Classical.forall_intro_2_with_pat>


; <Start encoding FStar.Classical.forall_intro_3>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_3 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_3@tok () Term)

; </end encoding FStar.Classical.forall_intro_3>


; <Start encoding FStar.Classical.forall_intro_3_with_pat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_3_with_pat (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_3_with_pat@tok () Term)

; </end encoding FStar.Classical.forall_intro_3_with_pat>


; <Start encoding FStar.Classical.forall_intro_4>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_intro_4 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_intro_4@tok () Term)

; </end encoding FStar.Classical.forall_intro_4>


; <Start encoding FStar.Classical.forall_impl_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_impl_intro (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_impl_intro@tok () Term)

; </end encoding FStar.Classical.forall_impl_intro>


; <Start encoding FStar.Classical.ghost_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.ghost_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.ghost_lemma@tok () Term)

; </end encoding FStar.Classical.ghost_lemma>


; <Start encoding FStar.Classical.exists_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.exists_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.exists_intro@tok () Term)

; </end encoding FStar.Classical.exists_intro>


; <Start encoding FStar.Classical.exists_intro_not_all_not>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.exists_intro_not_all_not (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.exists_intro_not_all_not@tok () Term)

; </end encoding FStar.Classical.exists_intro_not_all_not>


; <Start encoding FStar.Classical.forall_to_exists>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_to_exists (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_to_exists@tok () Term)

; </end encoding FStar.Classical.forall_to_exists>


; <Start encoding FStar.Classical.forall_to_exists_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.forall_to_exists_2 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.forall_to_exists_2@tok () Term)

; </end encoding FStar.Classical.forall_to_exists_2>


; <Start encoding FStar.Classical.exists_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.exists_elim (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.exists_elim@tok () Term)

; </end encoding FStar.Classical.exists_elim>


; <Start encoding FStar.Classical.or_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.or_elim (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.or_elim@tok () Term)

; </end encoding FStar.Classical.or_elim>


; <Start encoding FStar.Classical.excluded_middle>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Classical.excluded_middle (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Classical.excluded_middle@tok () Term)

; </end encoding FStar.Classical.excluded_middle>


; End Externals for interface FStar.Classical


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End interface FStar.Classical (203 decls; total size 15195)

;;; Start module FStar.StrongExcludedMiddle

; Externals for module FStar.StrongExcludedMiddle


; <Start encoding FStar.StrongExcludedMiddle.strong_excluded_middle>

(declare-fun FStar.StrongExcludedMiddle.strong_excluded_middle (Term) Term)
(declare-fun Tm_refine_2c7ecebd8a41d0890aab4251b61d6458 (Term) Term)
;;;;;;;;;;;;;;;;p: Type -> Prims.GTot (b: Prims.bool{b = true <==> p})
(declare-fun Tm_ghost_arrow_13b822d9f45311e725609e40f68f39a1 () Term)
(declare-fun FStar.StrongExcludedMiddle.strong_excluded_middle@tok () Term)


; </end encoding FStar.StrongExcludedMiddle.strong_excluded_middle>


; End Externals for module FStar.StrongExcludedMiddle


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End module FStar.StrongExcludedMiddle (10 decls; total size 1678)

;;; Start interface FStar.Classical.Sugar

; Externals for interface FStar.Classical.Sugar


; <Start encoding FStar.Classical.Sugar.forall_elim>



(declare-fun FStar.Classical.Sugar.forall_elim (Term Term Term Term) Term)


;;;;;;;;;;;;;;;;v: a -> f: Prims.squash (forall (x: a). p x) -> Prims.squash (p v)
(declare-fun Tm_arrow_6fad81cdc8376c5921e448133045a0b5 () Term)
(declare-fun FStar.Classical.Sugar.forall_elim@tok () Term)

; </end encoding FStar.Classical.Sugar.forall_elim>


; <Start encoding FStar.Classical.Sugar.exists_elim>


(declare-fun Tm_refine_df2d65c00128265e81a98d1694fa32db (Term Term) Term)
;;;;;;;;;;;;;;;;x: t -> _: Prims.squash (p x) -> Prims.squash q
(declare-fun Tm_arrow_757abf2ff34845ceba7272f2bf4c779d (Term Term Term) Term)
(declare-fun FStar.Classical.Sugar.exists_elim (Term Term Term Term Term) Term)



;;;;;;;;;;;;;;;;$s_ex_p: Prims.squash (exists (x: t). p x) -> f: (x: t -> _: Prims.squash (p x) -> Prims.squash q)   -> Prims.squash q
(declare-fun Tm_arrow_8a831fa0f832c0a8df6d5207189d1bd6 () Term)
(declare-fun FStar.Classical.Sugar.exists_elim@tok () Term)

; </end encoding FStar.Classical.Sugar.exists_elim>


; <Start encoding FStar.Classical.Sugar.implies_elim>

(declare-fun Tm_refine_913239c2cf9dc8a14e1f047e0206138d (Term Term) Term)
;;;;;;;;;;;;;;;;_: Prims.unit -> Prims.squash p
(declare-fun Tm_arrow_e5bf96e6b202d44baf035cb07df2da84 (Term) Term)
(declare-fun FStar.Classical.Sugar.implies_elim (Term Term Term Term) Term)


;;;;;;;;;;;;;;;;p: Type -> q: Type -> _: Prims.squash (p ==> q) -> f: (_: Prims.unit -> Prims.squash p)   -> Prims.squash q
(declare-fun Tm_arrow_08b9f1333754078ddc08d25d2c8efab0 () Term)
(declare-fun FStar.Classical.Sugar.implies_elim@tok () Term)



; </end encoding FStar.Classical.Sugar.implies_elim>


; <Start encoding FStar.Classical.Sugar.or_elim>

(declare-fun Tm_refine_953a6e4e702e848a7213bd619baaa22d (Term) Term)
;;;;;;;;;;;;;;;;_: Prims.squash (~p) -> Type
(declare-fun Tm_arrow_0e4b9f46020ce2f098f1971a515a22d9 (Term) Term)
(declare-fun Tm_refine_044452ce08fa2077b813992baef379a7 (Term Term) Term)


;;;;;;;;;;;;;;;;_: Prims.squash (~p) -> _: Prims.squash (q ()) -> Prims.squash r
(declare-fun Tm_arrow_3cd50b91a1a8ff7ae2a33f725c49ca25 (Term Term Term) Term)
(declare-fun FStar.Classical.Sugar.or_elim (Term Term Term Term Term Term) Term)






;;;;;;;;;;;;;;;;p: Type ->     q: (_: Prims.squash (~p) -> Type) ->     r: Type ->     p_or: Prims.squash (p \/ q ()) ->     left: (_: Prims.squash p -> Prims.squash r) ->     right: (_: Prims.squash (~p) -> _: Prims.squash (q ()) -> Prims.squash r)   -> Prims.squash r
(declare-fun Tm_arrow_cd3704184434b709df08ad54743b9ddc () Term)
(declare-fun FStar.Classical.Sugar.or_elim@tok () Term)

; </end encoding FStar.Classical.Sugar.or_elim>


; <Start encoding FStar.Classical.Sugar.and_elim>

;;;;;;;;;;;;;;;;_: Prims.squash p -> Type
(declare-fun Tm_arrow_e617226e5c485cfca90836a8d37dc422 (Term) Term)
(declare-fun Tm_refine_0e6764ea7cf9747bf338120e46774802 (Term Term) Term)
;;;;;;;;;;;;;;;;_: Prims.squash p -> _: Prims.squash (q ()) -> Prims.squash r
(declare-fun Tm_arrow_9cf3fa74bead5ce84576f320b610d107 (Term Term Term) Term)
(declare-fun FStar.Classical.Sugar.and_elim (Term Term Term Term Term) Term)



;;;;;;;;;;;;;;;;p: Type ->     q: (_: Prims.squash p -> Type) ->     r: Type ->     _: Prims.squash (p /\ q ()) ->     f: (_: Prims.squash p -> _: Prims.squash (q ()) -> Prims.squash r)   -> Prims.squash r
(declare-fun Tm_arrow_46e93521f3e2b84feb3b4c45d4b82427 () Term)
(declare-fun FStar.Classical.Sugar.and_elim@tok () Term)

; </end encoding FStar.Classical.Sugar.and_elim>


; <Start encoding FStar.Classical.Sugar.forall_intro>



(declare-fun FStar.Classical.Sugar.forall_intro (Term Term Term) Term)




(declare-fun FStar.Classical.Sugar.forall_intro@tok () Term)


; </end encoding FStar.Classical.Sugar.forall_intro>


; <Start encoding FStar.Classical.Sugar.exists_intro>


;;;;;;;;;;;;;;;;_: Prims.unit -> Prims.squash (p v)
(declare-fun Tm_arrow_1f559753133c819dcbab21eb87f04504 (Term Term) Term)
(declare-fun FStar.Classical.Sugar.exists_intro (Term Term Term Term) Term)



;;;;;;;;;;;;;;;;a: Type -> p: (_: a -> Type) -> v: a -> x: (_: Prims.unit -> Prims.squash (p v))   -> Prims.squash (exists (x: a). p x)
(declare-fun Tm_arrow_98a6ce57193d862f12aa770d807de2d6 () Term)
(declare-fun FStar.Classical.Sugar.exists_intro@tok () Term)


; </end encoding FStar.Classical.Sugar.exists_intro>


; <Start encoding FStar.Classical.Sugar.implies_intro>


;;;;;;;;;;;;;;;;_: Prims.squash p -> Prims.squash (q ())
(declare-fun Tm_arrow_8cc28639983f141a2c2b513a3b9f2226 (Term Term) Term)
(declare-fun FStar.Classical.Sugar.implies_intro (Term Term Term) Term)


(declare-fun Tm_refine_210741fcd012f6981d2132fb47059ae4 (Term Term) Term)
;;;;;;;;;;;;;;;;p: Type -> q: (_: Prims.squash p -> Type) -> f: (_: Prims.squash p -> Prims.squash (q ()))   -> Prims.squash (p ==> q ())
(declare-fun Tm_arrow_16ed35ee40b45e5834d942fa129fc7a5 () Term)
(declare-fun FStar.Classical.Sugar.implies_intro@tok () Term)


; </end encoding FStar.Classical.Sugar.implies_intro>


; <Start encoding FStar.Classical.Sugar.or_intro_left>




(declare-fun FStar.Classical.Sugar.or_intro_left (Term Term Term) Term)




;;;;;;;;;;;;;;;;p: Type -> q: (_: Prims.squash (~p) -> Type) -> f: (_: Prims.unit -> Prims.squash p)   -> Prims.squash (p \/ q ())
(declare-fun Tm_arrow_ba201b0aaffa8c92349bb033309546c6 () Term)
(declare-fun FStar.Classical.Sugar.or_intro_left@tok () Term)


; </end encoding FStar.Classical.Sugar.or_intro_left>


; <Start encoding FStar.Classical.Sugar.or_intro_right>




;;;;;;;;;;;;;;;;_: Prims.squash (~p) -> Prims.squash (q ())
(declare-fun Tm_arrow_c1f46761cba190a64ceda9e0b423d73a (Term Term) Term)
(declare-fun FStar.Classical.Sugar.or_intro_right (Term Term Term) Term)





;;;;;;;;;;;;;;;;p: Type -> q: (_: Prims.squash (~p) -> Type) -> f: (_: Prims.squash (~p) -> Prims.squash (q ()))   -> Prims.squash (p \/ q ())
(declare-fun Tm_arrow_820ce98d2bc904183444162411ef4873 () Term)
(declare-fun FStar.Classical.Sugar.or_intro_right@tok () Term)


; </end encoding FStar.Classical.Sugar.or_intro_right>


; <Start encoding FStar.Classical.Sugar.and_intro>




(declare-fun FStar.Classical.Sugar.and_intro (Term Term Term Term) Term)




;;;;;;;;;;;;;;;;p: Type ->     q: (_: Prims.squash p -> Type) ->     left: (_: Prims.unit -> Prims.squash p) ->     right: (_: Prims.squash p -> Prims.squash (q ()))   -> Prims.squash (p /\ q ())
(declare-fun Tm_arrow_74dd2a70fe5b8eefc42b899233f1e113 () Term)
(declare-fun FStar.Classical.Sugar.and_intro@tok () Term)


; </end encoding FStar.Classical.Sugar.and_intro>


; End Externals for interface FStar.Classical.Sugar


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End interface FStar.Classical.Sugar (136 decls; total size 7747)

;;; Start module FStar.List.Tot.Base

; Externals for module FStar.List.Tot.Base


; <Skipped FStar.List.Tot.Base.isEmpty/>


; <Start encoding FStar.List.Tot.Base.isEmpty>

(declare-fun FStar.List.Tot.Base.isEmpty (Term Term) Term)

(declare-fun FStar.List.Tot.Base.isEmpty@tok () Term)

; </end encoding FStar.List.Tot.Base.isEmpty>


; <Skipped FStar.List.Tot.Base.hd/>


; <Start encoding FStar.List.Tot.Base.hd>


(declare-fun FStar.List.Tot.Base.hd (Term Term) Term)


(declare-fun FStar.List.Tot.Base.hd@tok () Term)


; </end encoding FStar.List.Tot.Base.hd>


; <Skipped FStar.List.Tot.Base.tail/>


; <Start encoding FStar.List.Tot.Base.tail>


(declare-fun FStar.List.Tot.Base.tail (Term Term) Term)


(declare-fun FStar.List.Tot.Base.tail@tok () Term)


; </end encoding FStar.List.Tot.Base.tail>


; <Skipped FStar.List.Tot.Base.tl/>


; <Start encoding FStar.List.Tot.Base.tl>


(declare-fun FStar.List.Tot.Base.tl (Term Term) Term)


(declare-fun FStar.List.Tot.Base.tl@tok () Term)


; </end encoding FStar.List.Tot.Base.tl>


; <Skipped FStar.List.Tot.Base.last/>


; <Start encoding FStar.List.Tot.Base.last>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.last.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.last.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.last (Term Term) Term)
(declare-fun FStar.List.Tot.Base.last@tok () Term)




;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.last; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(59,8-59,12); use=FStar.List.Tot.Base.fst(59,8-59,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.last.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.List.Tot.Base.last.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.last.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.List.Tot.Base.last.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.last.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.last; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(59,8-59,12); use=FStar.List.Tot.Base.fst(59,8-59,12)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.List.Tot.Base.last @x0
@x1)
(FStar.List.Tot.Base.last.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.List.Tot.Base.last @x0
@x1))
:qid @fuel_correspondence_FStar.List.Tot.Base.last.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.last.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.last>


; <Skipped FStar.List.Tot.Base.init/>


; <Start encoding FStar.List.Tot.Base.init>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.init.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.init.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.init (Term Term) Term)
(declare-fun FStar.List.Tot.Base.init@tok () Term)




;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.init; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(67,8-67,12); use=FStar.List.Tot.Base.fst(67,8-67,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.init.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.List.Tot.Base.init.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.init.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.List.Tot.Base.init.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.init.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.init; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(67,8-67,12); use=FStar.List.Tot.Base.fst(67,8-67,12)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.List.Tot.Base.init @x0
@x1)
(FStar.List.Tot.Base.init.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.List.Tot.Base.init @x0
@x1))
:qid @fuel_correspondence_FStar.List.Tot.Base.init.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.init.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.init>


; <Skipped FStar.List.Tot.Base.length/>


; <Start encoding FStar.List.Tot.Base.length>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.length.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.length.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.length (Term Term) Term)
(declare-fun FStar.List.Tot.Base.length@tok () Term)
;;;;;;;;;;;;;;;;_: Prims.list 'a -> Prims.nat
(declare-fun Tm_arrow_5adbd6bc13eabd8f92e79f380e1498f0 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.length; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(74,8-74,14); use=FStar.List.Tot.Base.fst(74,8-74,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.length.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.List.Tot.Base.length.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.length.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.List.Tot.Base.length.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.length.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.length; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(74,8-74,14); use=FStar.List.Tot.Base.fst(74,8-74,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.List.Tot.Base.length @x0
@x1)
(FStar.List.Tot.Base.length.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.List.Tot.Base.length @x0
@x1))
:qid @fuel_correspondence_FStar.List.Tot.Base.length.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.length.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.length>


; <Skipped FStar.List.Tot.Base.nth/>


; <Start encoding FStar.List.Tot.Base.nth>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.nth.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.nth.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.nth (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.nth@tok () Term)
;;;;;;;;;;;;;;;;l: Prims.list 'a -> n: Prims.nat -> FStar.Pervasives.Native.option 'a
(declare-fun Tm_arrow_c96efec76dd44fb4c1c29ca8a004927d () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.nth; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(82,8-82,11); use=FStar.List.Tot.Base.fst(82,8-82,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.nth.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.nth.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.nth.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.nth.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.nth.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.nth; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(82,8-82,11); use=FStar.List.Tot.Base.fst(82,8-82,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.nth @x0
@x1
@x2)
(FStar.List.Tot.Base.nth.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.nth @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.nth.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.nth.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.nth>


; <Skipped FStar.List.Tot.Base.index/>


; <Start encoding FStar.List.Tot.Base.index>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.index.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.index.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.index (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.index@tok () Term)
(declare-fun Tm_refine_c86aba5c6243e6b7f9a4b0ad41b4e9a0 (Term Term) Term)


;;;;;;;;;;;;;;;;l: Prims.list a -> i: Prims.nat{i < FStar.List.Tot.Base.length l} -> a
(declare-fun Tm_arrow_87330224a075c52374b0ca2b4b909772 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.index; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(90,8-90,13); use=FStar.List.Tot.Base.fst(90,8-90,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.index.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.index.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.index.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.index.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.index.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.index; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(90,8-90,13); use=FStar.List.Tot.Base.fst(90,8-90,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.index @x0
@x1
@x2)
(FStar.List.Tot.Base.index.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.index @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.index.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.index.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.index>


; <Skipped FStar.List.Tot.Base.count/>


; <Start encoding FStar.List.Tot.Base.count>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.count.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.count.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.count (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.count@tok () Term)
;;;;;;;;;;;;;;;;x: a -> _: Prims.list a -> Prims.nat
(declare-fun Tm_arrow_d7494a533e0c3edea69ad484d93aa0e5 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.count; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(100,8-100,13); use=FStar.List.Tot.Base.fst(100,8-100,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.count.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.count.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.count.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.count.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.count.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.count; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(100,8-100,13); use=FStar.List.Tot.Base.fst(100,8-100,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.count @x0
@x1
@x2)
(FStar.List.Tot.Base.count.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.count @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.count.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.count.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.count>


; <Skipped FStar.List.Tot.Base.rev_acc/>


; <Start encoding FStar.List.Tot.Base.rev_acc>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.rev_acc.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.rev_acc.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.rev_acc (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.rev_acc@tok () Term)
;;;;;;;;;;;;;;;;l: Prims.list 'a -> acc: Prims.list 'a -> Prims.list 'a
(declare-fun Tm_arrow_54e38bdd456bab4cdb32b5d540c2274c () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.rev_acc; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(108,8-108,15); use=FStar.List.Tot.Base.fst(108,8-108,15)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.rev_acc.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.rev_acc.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.rev_acc.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.rev_acc.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.rev_acc.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.rev_acc; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(108,8-108,15); use=FStar.List.Tot.Base.fst(108,8-108,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.rev_acc @x0
@x1
@x2)
(FStar.List.Tot.Base.rev_acc.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.rev_acc @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.rev_acc.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.rev_acc.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.rev_acc>


; <Skipped FStar.List.Tot.Base.rev/>


; <Start encoding FStar.List.Tot.Base.rev>

(declare-fun FStar.List.Tot.Base.rev (Term Term) Term)
;;;;;;;;;;;;;;;;l: Prims.list 'a -> Prims.list 'a
(declare-fun Tm_arrow_f9ba16c6212a483d195bbb8ceec3eef1 () Term)
(declare-fun FStar.List.Tot.Base.rev@tok () Term)

; </end encoding FStar.List.Tot.Base.rev>


; <Skipped FStar.List.Tot.Base.append/>


; <Start encoding FStar.List.Tot.Base.append>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.append.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.append.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.append (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.append@tok () Term)

;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.append; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(119,8-119,14); use=FStar.List.Tot.Base.fst(119,8-119,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.append.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.append.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.append.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.append.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.append.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.append; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(119,8-119,14); use=FStar.List.Tot.Base.fst(119,8-119,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.append @x0
@x1
@x2)
(FStar.List.Tot.Base.append.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.append @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.append.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.append.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.append>


; <Start encoding FStar.List.Tot.Base.op_At>

(declare-fun FStar.List.Tot.Base.op_At (Term Term Term) Term)

(declare-fun FStar.List.Tot.Base.op_At@tok () Term)

; </end encoding FStar.List.Tot.Base.op_At>


; <Skipped FStar.List.Tot.Base.snoc/>


; <Start encoding FStar.List.Tot.Base.snoc>

(declare-fun FStar.List.Tot.Base.snoc (Term Term) Term)
;;;;;;;;;;;;;;;;_: (Prims.list 'a * 'a) -> Prims.list 'a
(declare-fun Tm_arrow_07ff48a1c7b541b0963ce508064e29fb () Term)
(declare-fun FStar.List.Tot.Base.snoc@tok () Term)

; </end encoding FStar.List.Tot.Base.snoc>


; <Skipped FStar.List.Tot.Base.flatten/>


; <Start encoding FStar.List.Tot.Base.flatten>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.flatten.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.flatten.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.flatten (Term Term) Term)
(declare-fun FStar.List.Tot.Base.flatten@tok () Term)
;;;;;;;;;;;;;;;;l: Prims.list (Prims.list 'a) -> Prims.list 'a
(declare-fun Tm_arrow_7e18fd6b36805c1f1c9a77e024fdec2e () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.flatten; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(143,8-143,15); use=FStar.List.Tot.Base.fst(143,8-143,15)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.flatten.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.List.Tot.Base.flatten.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.flatten.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.List.Tot.Base.flatten.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.flatten.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.flatten; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(143,8-143,15); use=FStar.List.Tot.Base.fst(143,8-143,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.List.Tot.Base.flatten @x0
@x1)
(FStar.List.Tot.Base.flatten.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.List.Tot.Base.flatten @x0
@x1))
:qid @fuel_correspondence_FStar.List.Tot.Base.flatten.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.flatten.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.flatten>


; <Skipped FStar.List.Tot.Base.map/>


; <Start encoding FStar.List.Tot.Base.map>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.map.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.map.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.map (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.map@tok () Term)



;;;;;;;;;;;;;;;;f: (_: 'a -> 'b) -> x: Prims.list 'a -> Prims.list 'b
(declare-fun Tm_arrow_28431dcf5044bcdd56dbe625f9e3df4e () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.map; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(151,8-151,11); use=FStar.List.Tot.Base.fst(151,8-151,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.List.Tot.Base.map.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4)
(FStar.List.Tot.Base.map.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4))
 

:pattern ((FStar.List.Tot.Base.map.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4))
:qid @fuel_irrelevance_FStar.List.Tot.Base.map.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.map.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.map; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(151,8-151,11); use=FStar.List.Tot.Base.fst(151,8-151,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.map @x0
@x1
@x2
@x3)
(FStar.List.Tot.Base.map.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.map @x0
@x1
@x2
@x3))
:qid @fuel_correspondence_FStar.List.Tot.Base.map.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.map.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.map>


; <Skipped FStar.List.Tot.Base.mapi_init/>


; <Start encoding FStar.List.Tot.Base.mapi_init>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.mapi_init.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.mapi_init.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.mapi_init (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.mapi_init@tok () Term)
;;;;;;;;;;;;;;;;_: Prims.int -> _: 'a -> 'b
(declare-fun Tm_arrow_010f318679809a99aeced42f5ba95505 (Term Term) Term)


;;;;;;;;;;;;;;;;f: (_: Prims.int -> _: 'a -> 'b) -> l: Prims.list 'a -> i: Prims.int -> Prims.list 'b
(declare-fun Tm_arrow_9a89e146e4bb6b361bc4526b891ed1f1 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.mapi_init; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(160,8-160,17); use=FStar.List.Tot.Base.fst(160,8-160,17)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.List.Tot.Base.mapi_init.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5)
(FStar.List.Tot.Base.mapi_init.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4
@x5))
 

:pattern ((FStar.List.Tot.Base.mapi_init.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5))
:qid @fuel_irrelevance_FStar.List.Tot.Base.mapi_init.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.mapi_init.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.mapi_init; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(160,8-160,17); use=FStar.List.Tot.Base.fst(160,8-160,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.List.Tot.Base.mapi_init @x0
@x1
@x2
@x3
@x4)
(FStar.List.Tot.Base.mapi_init.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3
@x4))
 

:pattern ((FStar.List.Tot.Base.mapi_init @x0
@x1
@x2
@x3
@x4))
:qid @fuel_correspondence_FStar.List.Tot.Base.mapi_init.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.mapi_init.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.mapi_init>


; <Skipped FStar.List.Tot.Base.mapi/>


; <Start encoding FStar.List.Tot.Base.mapi>


(declare-fun FStar.List.Tot.Base.mapi (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;f: (_: Prims.int -> _: 'a -> 'b) -> l: Prims.list 'a -> Prims.list 'b
(declare-fun Tm_arrow_b2a07f422fceebd0f3ee3abd5e4aeed2 () Term)
(declare-fun FStar.List.Tot.Base.mapi@tok () Term)


; </end encoding FStar.List.Tot.Base.mapi>


; <Skipped FStar.List.Tot.Base.concatMap/>


; <Start encoding FStar.List.Tot.Base.concatMap>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.concatMap.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.concatMap.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.concatMap (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.concatMap@tok () Term)
;;;;;;;;;;;;;;;;_: 'a -> Prims.list 'b
(declare-fun Tm_arrow_121fa5bc200f7b3946a5e35040f266b9 (Term Term) Term)


;;;;;;;;;;;;;;;;f: (_: 'a -> Prims.list 'b) -> _: Prims.list 'a -> Prims.list 'b
(declare-fun Tm_arrow_c35dd4e5f8c08f94183bf93963fac92f () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.concatMap; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(176,8-176,17); use=FStar.List.Tot.Base.fst(176,8-176,17)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.List.Tot.Base.concatMap.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4)
(FStar.List.Tot.Base.concatMap.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4))
 

:pattern ((FStar.List.Tot.Base.concatMap.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4))
:qid @fuel_irrelevance_FStar.List.Tot.Base.concatMap.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.concatMap.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.concatMap; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(176,8-176,17); use=FStar.List.Tot.Base.fst(176,8-176,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.concatMap @x0
@x1
@x2
@x3)
(FStar.List.Tot.Base.concatMap.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.concatMap @x0
@x1
@x2
@x3))
:qid @fuel_correspondence_FStar.List.Tot.Base.concatMap.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.concatMap.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.concatMap>


; <Skipped FStar.List.Tot.Base.fold_left/>


; <Start encoding FStar.List.Tot.Base.fold_left>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_left.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_left.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_left (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_left@tok () Term)
;;;;;;;;;;;;;;;;_: 'a -> _: 'b -> 'a
(declare-fun Tm_arrow_f0225aaf6b987d44876e7f498390aa39 (Term Term) Term)


;;;;;;;;;;;;;;;;f: (_: 'a -> _: 'b -> 'a) -> x: 'a -> l: Prims.list 'b -> Prims.Tot 'a
(declare-fun Tm_arrow_230697841c1116c0d5f3958097856e6e () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.fold_left; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(187,8-187,17); use=FStar.List.Tot.Base.fst(187,8-187,17)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.List.Tot.Base.fold_left.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5)
(FStar.List.Tot.Base.fold_left.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4
@x5))
 

:pattern ((FStar.List.Tot.Base.fold_left.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5))
:qid @fuel_irrelevance_FStar.List.Tot.Base.fold_left.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.fold_left.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.fold_left; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(187,8-187,17); use=FStar.List.Tot.Base.fst(187,8-187,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.List.Tot.Base.fold_left @x0
@x1
@x2
@x3
@x4)
(FStar.List.Tot.Base.fold_left.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3
@x4))
 

:pattern ((FStar.List.Tot.Base.fold_left @x0
@x1
@x2
@x3
@x4))
:qid @fuel_correspondence_FStar.List.Tot.Base.fold_left.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.fold_left.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.fold_left>


; <Skipped FStar.List.Tot.Base.fold_right/>


; <Start encoding FStar.List.Tot.Base.fold_right>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_right.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_right.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_right (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_right@tok () Term)
;;;;;;;;;;;;;;;;_: 'a -> _: 'b -> 'b
(declare-fun Tm_arrow_3c1d21b8f6dcc5e202b4ff1cafbaba81 (Term Term) Term)


;;;;;;;;;;;;;;;;f: (_: 'a -> _: 'b -> 'b) -> l: Prims.list 'a -> x: 'b -> 'b
(declare-fun Tm_arrow_105b39eeae3a464c82e64975ac399cdb () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.fold_right; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(195,8-195,18); use=FStar.List.Tot.Base.fst(195,8-195,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.List.Tot.Base.fold_right.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5)
(FStar.List.Tot.Base.fold_right.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4
@x5))
 

:pattern ((FStar.List.Tot.Base.fold_right.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5))
:qid @fuel_irrelevance_FStar.List.Tot.Base.fold_right.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.fold_right.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.fold_right; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(195,8-195,18); use=FStar.List.Tot.Base.fst(195,8-195,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.List.Tot.Base.fold_right @x0
@x1
@x2
@x3
@x4)
(FStar.List.Tot.Base.fold_right.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3
@x4))
 

:pattern ((FStar.List.Tot.Base.fold_right @x0
@x1
@x2
@x3
@x4))
:qid @fuel_correspondence_FStar.List.Tot.Base.fold_right.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.fold_right.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.fold_right>


; <Start encoding FStar.List.Tot.Base.fold_right_gtot>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_right_gtot.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_right_gtot.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_right_gtot (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_right_gtot@tok () Term)
;;;;;;;;;;;;;;;;_: a -> _: b -> Prims.GTot b
(declare-fun Tm_ghost_arrow_d7e9834b8fd0407a723f5f3f4b012fdd (Term Term) Term)


;;;;;;;;;;;;;;;;l: Prims.list a -> f: (_: a -> _: b -> Prims.GTot b) -> x: b -> Prims.GTot b
(declare-fun Tm_ghost_arrow_fab043b8cdd2296e8d98a06066e4b2d2 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.fold_right_gtot; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(201,8-201,23); use=FStar.List.Tot.Base.fst(201,8-201,23)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.List.Tot.Base.fold_right_gtot.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5)
(FStar.List.Tot.Base.fold_right_gtot.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4
@x5))
 

:pattern ((FStar.List.Tot.Base.fold_right_gtot.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5))
:qid @fuel_irrelevance_FStar.List.Tot.Base.fold_right_gtot.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.fold_right_gtot.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.fold_right_gtot; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(201,8-201,23); use=FStar.List.Tot.Base.fst(201,8-201,23)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.List.Tot.Base.fold_right_gtot @x0
@x1
@x2
@x3
@x4)
(FStar.List.Tot.Base.fold_right_gtot.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3
@x4))
 

:pattern ((FStar.List.Tot.Base.fold_right_gtot @x0
@x1
@x2
@x3
@x4))
:qid @fuel_correspondence_FStar.List.Tot.Base.fold_right_gtot.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.fold_right_gtot.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.fold_right_gtot>


; <Start encoding FStar.List.Tot.Base.map_gtot>


(declare-fun FStar.List.Tot.Base.map_gtot (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;f: (_: a -> Prims.GTot b) -> x: Prims.list a -> Prims.GTot (Prims.list b)
(declare-fun Tm_ghost_arrow_d0c7be07105bf8d5ad60b7f603c725f3 () Term)
(declare-fun FStar.List.Tot.Base.map_gtot@tok () Term)

;;;;;;;;;;;;;;;;x: a -> tl: Prims.list b -> Prims.GTot (Prims.list b)
(declare-fun Tm_ghost_arrow_21583233c98863da294c5e5d657cf78a (Term Term) Term)
(declare-fun Tm_abs_469cd3853c3ff3e8cd408b5521fdbd9d (Term Term Term) Term)

; </end encoding FStar.List.Tot.Base.map_gtot>


; <Skipped FStar.List.Tot.Base.fold_left2/>


; <Start encoding FStar.List.Tot.Base.fold_left2>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_left2.fuel_instrumented (Fuel Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_left2.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_left2 (Term Term Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_left2@tok () Term)
;;;;;;;;;;;;;;;;_: 'a -> _: 'b -> _: 'c -> 'a
(declare-fun Tm_arrow_40dd30796dd695d143ec6ed01d322177 (Term Term Term) Term)
(declare-fun Tm_refine_c16bc1b61f58b349bf6fc1c94dcaf83b (Term) Term)



;;;;;;;;;;;;;;;;f: (_: 'a -> _: 'b -> _: 'c -> 'a) -> accu: 'a -> l1: Prims.list 'b -> l2: Prims.list 'c   -> Prims.Pure 'a
(declare-fun Tm_arrow_3f28d1abbd43ddded682cbec516ea7bb () Term)

;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.fold_left2; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(218,8-218,18); use=FStar.List.Tot.Base.fst(218,8-218,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (FStar.List.Tot.Base.fold_left2.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
(FStar.List.Tot.Base.fold_left2.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
 

:pattern ((FStar.List.Tot.Base.fold_left2.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid @fuel_irrelevance_FStar.List.Tot.Base.fold_left2.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.fold_left2.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.fold_left2; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(218,8-218,18); use=FStar.List.Tot.Base.fst(218,8-218,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (FStar.List.Tot.Base.fold_left2 @x0
@x1
@x2
@x3
@x4
@x5
@x6)
(FStar.List.Tot.Base.fold_left2.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3
@x4
@x5
@x6))
 

:pattern ((FStar.List.Tot.Base.fold_left2 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid @fuel_correspondence_FStar.List.Tot.Base.fold_left2.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.fold_left2.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.fold_left2>


; <Start encoding FStar.List.Tot.Base.memP>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.memP.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.memP.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.memP (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.memP@tok () Term)
;;;;;;;;;;;;;;;;x: a -> l: Prims.list a -> Type
(declare-fun Tm_arrow_9a5de17321abf8ec257671c9a474c08a () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.memP; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(228,8-228,12); use=FStar.List.Tot.Base.fst(228,8-228,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.memP.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.memP.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.memP.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.memP.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.memP.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.memP; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(228,8-228,12); use=FStar.List.Tot.Base.fst(228,8-228,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.memP @x0
@x1
@x2)
(FStar.List.Tot.Base.memP.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.memP @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.memP.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.memP.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.memP>


; <Skipped FStar.List.Tot.Base.mem/>


; <Start encoding FStar.List.Tot.Base.mem>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.mem.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.mem.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.mem (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.mem@tok () Term)
;;;;;;;;;;;;;;;;x: a -> _: Prims.list a -> Prims.bool
(declare-fun Tm_arrow_8b16b79a9f8fab7cb6911016a8022992 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.mem; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(240,8-240,11); use=FStar.List.Tot.Base.fst(240,8-240,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.mem.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.mem.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.mem.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.mem.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.mem.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.mem; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(240,8-240,11); use=FStar.List.Tot.Base.fst(240,8-240,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.mem @x0
@x1
@x2)
(FStar.List.Tot.Base.mem.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.mem @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.mem.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.mem.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.mem>


; <Start encoding FStar.List.Tot.Base.contains>

(declare-fun FStar.List.Tot.Base.contains (Term Term Term) Term)

(declare-fun FStar.List.Tot.Base.contains@tok () Term)

; </end encoding FStar.List.Tot.Base.contains>


; <Skipped FStar.List.Tot.Base.existsb/>


; <Start encoding FStar.List.Tot.Base.existsb>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.existsb.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.existsb.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.existsb (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.existsb@tok () Term)
;;;;;;;;;;;;;;;;_: a -> Prims.bool
(declare-fun Tm_arrow_84543425b818e2d10a976186b8e8c250 (Term) Term)


;;;;;;;;;;;;;;;;f: (_: a -> Prims.bool) -> l: Prims.list a -> Prims.bool
(declare-fun Tm_arrow_98dbecc64760e6a41f037a6881cd5df8 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.existsb; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(256,8-256,15); use=FStar.List.Tot.Base.fst(256,8-256,15)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.existsb.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.existsb.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.existsb.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.existsb.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.existsb.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.existsb; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(256,8-256,15); use=FStar.List.Tot.Base.fst(256,8-256,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.existsb @x0
@x1
@x2)
(FStar.List.Tot.Base.existsb.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.existsb @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.existsb.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.existsb.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.existsb>


; <Skipped FStar.List.Tot.Base.find/>


; <Start encoding FStar.List.Tot.Base.find>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.find.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.find.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.find (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.find@tok () Term)

(declare-fun Tm_refine_3b1cb9ec3355fed185c658f53954b3fa (Term Term) Term)





;;;;;;;;;;;;;;;;f: (_: a -> Prims.bool) -> l: Prims.list a -> FStar.Pervasives.Native.option (x: a{f x})
(declare-fun Tm_arrow_286c509b12b9a2bb9bf1025c6fd97451 () Term)

;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.find; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(266,8-266,12); use=FStar.List.Tot.Base.fst(266,8-266,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.find.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.find.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.find.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.find.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.find.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.find; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(266,8-266,12); use=FStar.List.Tot.Base.fst(266,8-266,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.find @x0
@x1
@x2)
(FStar.List.Tot.Base.find.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.find @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.find.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.find.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.find>


; <Skipped FStar.List.Tot.Base.filter/>


; <Start encoding FStar.List.Tot.Base.filter>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.filter.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.filter.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.filter (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.filter@tok () Term)

(declare-fun Tm_refine_5c77e54d118aa26696ff018c647e0d2c (Term Term) Term)



;;;;;;;;;;;;;;;;f: (_: a -> Prims.bool) -> l: Prims.list a   -> m: Prims.list a {forall (x: a). FStar.List.Tot.Base.memP x m ==> f x}
(declare-fun Tm_arrow_26bc30ca5e980f52cef77fa4ff2b8923 () Term)

;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.filter; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(277,8-277,14); use=FStar.List.Tot.Base.fst(277,8-277,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.filter.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.filter.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.filter.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.filter.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.filter.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.filter; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(277,8-277,14); use=FStar.List.Tot.Base.fst(277,8-277,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.filter @x0
@x1
@x2)
(FStar.List.Tot.Base.filter.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.filter @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.filter.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.filter.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.filter>


; <Skipped FStar.List.Tot.Base.mem_filter/>


; <Start encoding FStar.List.Tot.Base.mem_filter>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.mem_filter (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.mem_filter@tok () Term)

; </end encoding FStar.List.Tot.Base.mem_filter>


; <Skipped FStar.List.Tot.Base.mem_filter_forall/>


; <Start encoding FStar.List.Tot.Base.mem_filter_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.mem_filter_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.mem_filter_forall@tok () Term)


; </end encoding FStar.List.Tot.Base.mem_filter_forall>


; <Skipped FStar.List.Tot.Base.for_all/>


; <Start encoding FStar.List.Tot.Base.for_all>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.for_all.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.for_all.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.for_all (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.for_all@tok () Term)




;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.for_all; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(303,8-303,15); use=FStar.List.Tot.Base.fst(303,8-303,15)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.for_all.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.for_all.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.for_all.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.for_all.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.for_all.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.for_all; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(303,8-303,15); use=FStar.List.Tot.Base.fst(303,8-303,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.for_all @x0
@x1
@x2)
(FStar.List.Tot.Base.for_all.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.for_all @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.for_all.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.for_all.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.for_all>


; <Start encoding FStar.List.Tot.Base.for_all_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.for_all_mem (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.for_all_mem@tok () Term)

; </end encoding FStar.List.Tot.Base.for_all_mem>


; <Skipped FStar.List.Tot.Base.collect/>


; <Start encoding FStar.List.Tot.Base.collect>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.collect.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.collect.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.collect (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.collect@tok () Term)




;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.collect; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(324,8-324,15); use=FStar.List.Tot.Base.fst(324,8-324,15)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.List.Tot.Base.collect.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4)
(FStar.List.Tot.Base.collect.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4))
 

:pattern ((FStar.List.Tot.Base.collect.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4))
:qid @fuel_irrelevance_FStar.List.Tot.Base.collect.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.collect.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.collect; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(324,8-324,15); use=FStar.List.Tot.Base.fst(324,8-324,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.collect @x0
@x1
@x2
@x3)
(FStar.List.Tot.Base.collect.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.collect @x0
@x1
@x2
@x3))
:qid @fuel_correspondence_FStar.List.Tot.Base.collect.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.collect.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.collect>


; <Skipped FStar.List.Tot.Base.tryFind/>


; <Start encoding FStar.List.Tot.Base.tryFind>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.tryFind.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.tryFind.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.tryFind (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.tryFind@tok () Term)



;;;;;;;;;;;;;;;;p: (_: 'a -> Prims.bool) -> l: Prims.list 'a -> FStar.Pervasives.Native.option 'a
(declare-fun Tm_arrow_4ae6bca87a611585312b8b0d0d66fefe () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.tryFind; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(334,8-334,15); use=FStar.List.Tot.Base.fst(334,8-334,15)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.tryFind.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.tryFind.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.tryFind.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.tryFind.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.tryFind.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.tryFind; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(334,8-334,15); use=FStar.List.Tot.Base.fst(334,8-334,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.tryFind @x0
@x1
@x2)
(FStar.List.Tot.Base.tryFind.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.tryFind @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.tryFind.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.tryFind.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.tryFind>


; <Skipped FStar.List.Tot.Base.tryPick/>


; <Start encoding FStar.List.Tot.Base.tryPick>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.tryPick.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.tryPick.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.tryPick (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.tryPick@tok () Term)
;;;;;;;;;;;;;;;;_: 'a -> FStar.Pervasives.Native.option 'b
(declare-fun Tm_arrow_4b0c7cc34485afa5854ebe5c95023d4c (Term Term) Term)


;;;;;;;;;;;;;;;;f: (_: 'a -> FStar.Pervasives.Native.option 'b) -> l: Prims.list 'a   -> FStar.Pervasives.Native.option 'b
(declare-fun Tm_arrow_7fbbe8a710b97b9ed9c0d2dfb00b1641 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.tryPick; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(343,8-343,15); use=FStar.List.Tot.Base.fst(343,8-343,15)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.List.Tot.Base.tryPick.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4)
(FStar.List.Tot.Base.tryPick.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4))
 

:pattern ((FStar.List.Tot.Base.tryPick.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4))
:qid @fuel_irrelevance_FStar.List.Tot.Base.tryPick.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.tryPick.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.tryPick; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(343,8-343,15); use=FStar.List.Tot.Base.fst(343,8-343,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.tryPick @x0
@x1
@x2
@x3)
(FStar.List.Tot.Base.tryPick.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.tryPick @x0
@x1
@x2
@x3))
:qid @fuel_correspondence_FStar.List.Tot.Base.tryPick.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.tryPick.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.tryPick>


; <Skipped FStar.List.Tot.Base.choose/>


; <Start encoding FStar.List.Tot.Base.choose>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.choose.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.choose.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.choose (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.choose@tok () Term)



;;;;;;;;;;;;;;;;f: (_: 'a -> FStar.Pervasives.Native.option 'b) -> l: Prims.list 'a -> Prims.list 'b
(declare-fun Tm_arrow_ee03a7411b6d8975b285ea6c772c4d89 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.choose; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(354,8-354,14); use=FStar.List.Tot.Base.fst(354,8-354,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.List.Tot.Base.choose.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4)
(FStar.List.Tot.Base.choose.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4))
 

:pattern ((FStar.List.Tot.Base.choose.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4))
:qid @fuel_irrelevance_FStar.List.Tot.Base.choose.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.choose.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.choose; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(354,8-354,14); use=FStar.List.Tot.Base.fst(354,8-354,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.choose @x0
@x1
@x2
@x3)
(FStar.List.Tot.Base.choose.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.choose @x0
@x1
@x2
@x3))
:qid @fuel_correspondence_FStar.List.Tot.Base.choose.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.choose.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.choose>


; <Skipped FStar.List.Tot.Base.partition/>


; <Start encoding FStar.List.Tot.Base.partition>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.partition.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.partition.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.partition (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.partition@tok () Term)



;;;;;;;;;;;;;;;;f: (_: 'a -> Prims.bool) -> _: Prims.list 'a -> Prims.list 'a * Prims.list 'a
(declare-fun Tm_arrow_706f575815ce8a3bbd962da035d8aa14 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.partition; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(367,8-367,17); use=FStar.List.Tot.Base.fst(367,8-367,17)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.partition.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.partition.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.partition.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.partition.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.partition.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.partition; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(367,8-367,17); use=FStar.List.Tot.Base.fst(367,8-367,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.partition @x0
@x1
@x2)
(FStar.List.Tot.Base.partition.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.partition @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.partition.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.partition.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.partition>


; <Skipped FStar.List.Tot.Base.subset/>


; <Start encoding FStar.List.Tot.Base.subset>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.subset.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.subset.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.subset (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.subset@tok () Term)
;;;;;;;;;;;;;;;;la: Prims.list a -> lb: Prims.list a -> Prims.bool
(declare-fun Tm_arrow_8d819a995fc33b4cb6aa699af88e8d32 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.subset; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(379,8-379,14); use=FStar.List.Tot.Base.fst(379,8-379,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.subset.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.subset.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.subset.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.subset.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.subset.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.subset; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(379,8-379,14); use=FStar.List.Tot.Base.fst(379,8-379,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.subset @x0
@x1
@x2)
(FStar.List.Tot.Base.subset.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.subset @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.subset.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.subset.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.subset>


; <Skipped FStar.List.Tot.Base.noRepeats/>


; <Start encoding FStar.List.Tot.Base.noRepeats>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.noRepeats.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.noRepeats.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.noRepeats (Term Term) Term)
(declare-fun FStar.List.Tot.Base.noRepeats@tok () Term)
;;;;;;;;;;;;;;;;la: Prims.list a -> Prims.bool
(declare-fun Tm_arrow_0dd285b24907a2f8b15dedffef61afa6 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.noRepeats; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(388,8-388,17); use=FStar.List.Tot.Base.fst(388,8-388,17)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.noRepeats.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.List.Tot.Base.noRepeats.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.noRepeats.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.List.Tot.Base.noRepeats.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.noRepeats.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.noRepeats; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(388,8-388,17); use=FStar.List.Tot.Base.fst(388,8-388,17)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.List.Tot.Base.noRepeats @x0
@x1)
(FStar.List.Tot.Base.noRepeats.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.List.Tot.Base.noRepeats @x0
@x1))
:qid @fuel_correspondence_FStar.List.Tot.Base.noRepeats.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.noRepeats.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.noRepeats>


; <Skipped FStar.List.Tot.Base.no_repeats_p/>


; <Start encoding FStar.List.Tot.Base.no_repeats_p>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.no_repeats_p.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.no_repeats_p.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.no_repeats_p (Term Term) Term)
(declare-fun FStar.List.Tot.Base.no_repeats_p@tok () Term)
;;;;;;;;;;;;;;;;la: Prims.list a -> Prims.prop
(declare-fun Tm_arrow_79c2442eab9e49d1108d2b7a240dc76e () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.no_repeats_p; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(397,8-397,20); use=FStar.List.Tot.Base.fst(397,8-397,20)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.no_repeats_p.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.List.Tot.Base.no_repeats_p.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.no_repeats_p.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.List.Tot.Base.no_repeats_p.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.no_repeats_p.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.no_repeats_p; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(397,8-397,20); use=FStar.List.Tot.Base.fst(397,8-397,20)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.List.Tot.Base.no_repeats_p @x0
@x1)
(FStar.List.Tot.Base.no_repeats_p.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.List.Tot.Base.no_repeats_p @x0
@x1))
:qid @fuel_correspondence_FStar.List.Tot.Base.no_repeats_p.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.no_repeats_p.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.no_repeats_p>


; <Skipped FStar.List.Tot.Base.assoc/>


; <Start encoding FStar.List.Tot.Base.assoc>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.assoc.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.assoc.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.assoc (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.assoc@tok () Term)
;;;;;;;;;;;;;;;;x: a -> _: Prims.list (a * b) -> FStar.Pervasives.Native.option b
(declare-fun Tm_arrow_d77cf796c5b72d2c2316c0fcdad1dd79 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.assoc; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(409,8-409,13); use=FStar.List.Tot.Base.fst(409,8-409,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.List.Tot.Base.assoc.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4)
(FStar.List.Tot.Base.assoc.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4))
 

:pattern ((FStar.List.Tot.Base.assoc.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4))
:qid @fuel_irrelevance_FStar.List.Tot.Base.assoc.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.assoc.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.assoc; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(409,8-409,13); use=FStar.List.Tot.Base.fst(409,8-409,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.assoc @x0
@x1
@x2
@x3)
(FStar.List.Tot.Base.assoc.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.assoc @x0
@x1
@x2
@x3))
:qid @fuel_correspondence_FStar.List.Tot.Base.assoc.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.assoc.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.assoc>


; <Skipped FStar.List.Tot.Base.split/>


; <Start encoding FStar.List.Tot.Base.split>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.split.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.split.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.split (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.split@tok () Term)
;;;;;;;;;;;;;;;;l: Prims.list ('a * 'b) -> Prims.list 'a * Prims.list 'b
(declare-fun Tm_arrow_1c3cb31b4ffa47bc6454f5b8a25e2407 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.split; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(417,8-417,13); use=FStar.List.Tot.Base.fst(417,8-417,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.split.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.split.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.split.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.split.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.split.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.split; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(417,8-417,13); use=FStar.List.Tot.Base.fst(417,8-417,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.split @x0
@x1
@x2)
(FStar.List.Tot.Base.split.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.split @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.split.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.split.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.split>


; <Start encoding FStar.List.Tot.Base.unzip>

(declare-fun FStar.List.Tot.Base.unzip (Term Term Term) Term)

(declare-fun FStar.List.Tot.Base.unzip@tok () Term)

; </end encoding FStar.List.Tot.Base.unzip>


; <Skipped FStar.List.Tot.Base.unzip3/>


; <Start encoding FStar.List.Tot.Base.unzip3>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.unzip3.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.unzip3.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.unzip3 (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.unzip3@tok () Term)
;;;;;;;;;;;;;;;;l: Prims.list (('a * 'b) * 'c) -> (Prims.list 'a * Prims.list 'b) * Prims.list 'c
(declare-fun Tm_arrow_d40be6b496fedb6f7a46205c5824b732 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.unzip3; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(432,8-432,14); use=FStar.List.Tot.Base.fst(432,8-432,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.List.Tot.Base.unzip3.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4)
(FStar.List.Tot.Base.unzip3.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4))
 

:pattern ((FStar.List.Tot.Base.unzip3.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4))
:qid @fuel_irrelevance_FStar.List.Tot.Base.unzip3.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.unzip3.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.unzip3; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(432,8-432,14); use=FStar.List.Tot.Base.fst(432,8-432,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.unzip3 @x0
@x1
@x2
@x3)
(FStar.List.Tot.Base.unzip3.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.unzip3 @x0
@x1
@x2
@x3))
:qid @fuel_correspondence_FStar.List.Tot.Base.unzip3.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.unzip3.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.unzip3>


; <Start encoding FStar.List.Tot.Base.splitAt>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.splitAt.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.splitAt.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.splitAt (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.splitAt@tok () Term)
;;;;;;;;;;;;;;;;n: Prims.nat -> l: Prims.list a -> Prims.list a * Prims.list a
(declare-fun Tm_arrow_e36bd078e08c2ac2f1324fef6e0a4a22 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.splitAt; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(443,8-443,15); use=FStar.List.Tot.Base.fst(443,8-443,15)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.splitAt.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.splitAt.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.splitAt.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.splitAt.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.splitAt.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.splitAt; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(443,8-443,15); use=FStar.List.Tot.Base.fst(443,8-443,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.splitAt @x0
@x1
@x2)
(FStar.List.Tot.Base.splitAt.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.splitAt @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.splitAt.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.splitAt.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.splitAt>


; <Start encoding FStar.List.Tot.Base.lemma_splitAt_snd_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.lemma_splitAt_snd_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.lemma_splitAt_snd_length@tok () Term)

; </end encoding FStar.List.Tot.Base.lemma_splitAt_snd_length>


; <Skipped FStar.List.Tot.Base.unsnoc/>


; <Start encoding FStar.List.Tot.Base.unsnoc>

(declare-fun Tm_refine_3f6b38b2852708f36615f9b4db0f9ff1 (Term) Term)
(declare-fun FStar.List.Tot.Base.unsnoc (Term Term) Term)

;;;;;;;;;;;;;;;;l: Prims.list a {FStar.List.Tot.Base.length l > 0} -> Prims.list a * a
(declare-fun Tm_arrow_f4bc61622db0c39a751170734a140783 () Term)
(declare-fun FStar.List.Tot.Base.unsnoc@tok () Term)


; </end encoding FStar.List.Tot.Base.unsnoc>


; <Skipped FStar.List.Tot.Base.split3/>


; <Start encoding FStar.List.Tot.Base.split3>


(declare-fun FStar.List.Tot.Base.split3 (Term Term Term) Term)

;;;;;;;;;;;;;;;;l: Prims.list a -> i: Prims.nat{i < FStar.List.Tot.Base.length l}   -> (Prims.list a * a) * Prims.list a
(declare-fun Tm_arrow_07dcb44faa0fb6172673970868e7ecff () Term)
(declare-fun FStar.List.Tot.Base.split3@tok () Term)


; </end encoding FStar.List.Tot.Base.split3>


; <Skipped FStar.List.Tot.Base.partition_length/>


; <Start encoding FStar.List.Tot.Base.partition_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.partition_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.partition_length@tok () Term)

; </end encoding FStar.List.Tot.Base.partition_length>


; <Skipped FStar.List.Tot.Base.bool_of_compare/>


; <Start encoding FStar.List.Tot.Base.bool_of_compare>

;;;;;;;;;;;;;;;;_: a -> _: a -> Prims.int
(declare-fun Tm_arrow_9877f854fbaabbcfda94f6c19b32ae3f (Term) Term)
(declare-fun FStar.List.Tot.Base.bool_of_compare (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;f: (_: a -> _: a -> Prims.int) -> x: a -> y: a -> Prims.bool
(declare-fun Tm_arrow_a2f219461d35e20b7bc771538ca96429 () Term)
(declare-fun FStar.List.Tot.Base.bool_of_compare@tok () Term)


; </end encoding FStar.List.Tot.Base.bool_of_compare>


; <Skipped FStar.List.Tot.Base.compare_of_bool/>


; <Start encoding FStar.List.Tot.Base.compare_of_bool>

;;;;;;;;;;;;;;;;_: a -> _: a -> Prims.bool
(declare-fun Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e (Term) Term)
(declare-fun FStar.List.Tot.Base.compare_of_bool (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;rel: (_: a -> _: a -> Prims.bool) -> x: a -> y: a -> Prims.int
(declare-fun Tm_arrow_8b54d4820d055c327440d0d4811d3a33 () Term)
(declare-fun FStar.List.Tot.Base.compare_of_bool@tok () Term)


; </end encoding FStar.List.Tot.Base.compare_of_bool>


; <Start encoding FStar.List.Tot.Base.compare_of_bool_of_compare>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.compare_of_bool_of_compare (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.compare_of_bool_of_compare@tok () Term)

; </end encoding FStar.List.Tot.Base.compare_of_bool_of_compare>


; <Skipped FStar.List.Tot.Base.sortWith/>


; <Start encoding FStar.List.Tot.Base.sortWith>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.sortWith.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.sortWith.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.sortWith (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.sortWith@tok () Term)



;;;;;;;;;;;;;;;;f: (_: 'a -> _: 'a -> Prims.int) -> l: Prims.list 'a -> Prims.Tot (Prims.list 'a)
(declare-fun Tm_arrow_d29fb5884447b657cb725f9be68c5ba6 () Term)
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name FStar.List.Tot.Base.sortWith; Namespace FStar.List.Tot.Base
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.List.Tot.Base.bool_of_compare@tok))
:named @kick_partial_app_6123e8040f356c82d11b245dda0e1ccc))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.sortWith; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(523,8-523,16); use=FStar.List.Tot.Base.fst(523,8-523,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.sortWith.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.sortWith.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.sortWith.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.sortWith.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.sortWith.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.sortWith; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(523,8-523,16); use=FStar.List.Tot.Base.fst(523,8-523,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.sortWith @x0
@x1
@x2)
(FStar.List.Tot.Base.sortWith.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.sortWith @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.sortWith.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.sortWith.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.sortWith>


; <Start encoding FStar.List.Tot.Base.strict_suffix_of>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.strict_suffix_of.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.strict_suffix_of.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.strict_suffix_of (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.strict_suffix_of@tok () Term)
(declare-fun Tm_refine_da3062322c9bea8d5b2058386775b91a () Term)

;;;;;;;;;;;;;;;;l1: Prims.list a -> l2: Prims.list a -> Prims.Pure Type
(declare-fun Tm_arrow_1d91178a138c1826d6a199b1613394f1 () Term)

;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(531,8-531,24); use=FStar.List.Tot.Base.fst(531,8-531,24)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.strict_suffix_of.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.strict_suffix_of.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.strict_suffix_of.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.strict_suffix_of.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.strict_suffix_of.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(531,8-531,24); use=FStar.List.Tot.Base.fst(531,8-531,24)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.strict_suffix_of @x0
@x1
@x2)
(FStar.List.Tot.Base.strict_suffix_of.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.strict_suffix_of @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.strict_suffix_of.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.strict_suffix_of.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.strict_suffix_of>


; <Start encoding FStar.List.Tot.Base.strict_prefix_of>

(declare-fun FStar.List.Tot.Base.strict_prefix_of (Term) Term)

;;;;;;;;;;;;;;;;l1: Prims.list _ -> l2: Prims.list _ -> Prims.Pure Type
(declare-fun Tm_arrow_0dd65914dd84642f7849df5d67086aa0 (Term) Term)
;;;;;;;;;;;;;;;;l1: Prims.list _ -> l2: Prims.list _ -> Prims.Pure Type
(declare-fun Tm_arrow_25d975ae357f14f725a8d52a81f8be72 () Term)
(declare-fun FStar.List.Tot.Base.strict_prefix_of@tok () Term)


;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name FStar.List.Tot.Base.strict_prefix_of; Namespace FStar.List.Tot.Base
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.List.Tot.Base.strict_suffix_of@tok))
:named @kick_partial_app_a83d9836dd5fde61849337e3aeefb108))

; </end encoding FStar.List.Tot.Base.strict_prefix_of>


; <Skipped FStar.List.Tot.Base.list_unref/>


; <Start encoding FStar.List.Tot.Base.list_unref>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.list_unref.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.list_unref.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.list_unref (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.list_unref@tok () Term)

(declare-fun Tm_refine_9f8cb5a84b67f50c9d5f87a914037545 (Term Term) Term)




;;;;;;;;;;;;;;;;l: Prims.list (x: a{p x}) -> Prims.list a
(declare-fun Tm_arrow_6b3a7706fc085133138f00ee506ef176 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.list_unref; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(544,8-544,18); use=FStar.List.Tot.Base.fst(544,8-544,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.list_unref.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.list_unref.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.list_unref.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.list_unref.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.list_unref.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.list_unref; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(544,8-544,18); use=FStar.List.Tot.Base.fst(544,8-544,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.list_unref @x0
@x1
@x2)
(FStar.List.Tot.Base.list_unref.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.list_unref @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.list_unref.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.list_unref.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.list_unref>


; <Skipped FStar.List.Tot.Base.list_refb/>


; <Start encoding FStar.List.Tot.Base.list_refb>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.list_refb.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.list_refb.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.list_refb (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.list_refb@tok () Term)

(declare-fun Tm_refine_3dfaece5a1f8e27ecb1367ff50145048 (Term Term) Term)





(declare-fun Tm_refine_b3daba88e15ae8a9be9dd341522270b2 (Term Term Term Term) Term)

(declare-fun Tm_refine_1d1ddbacd892e41ad4ba585e87296d2e (Term Term Term) Term)










;;;;;;;;;;;;;;;;l: Prims.list a {FStar.List.Tot.Base.for_all p l}   -> l':     Prims.list (x: a{p x})       { FStar.List.Tot.Base.length l = FStar.List.Tot.Base.length l' /\         (forall (i:             Prims.nat{i < FStar.List.Tot.Base.length l /\ i < FStar.List.Tot.Base.length l'}).             {:pattern FStar.List.Tot.Base.index l i}             FStar.List.Tot.Base.index l i = FStar.List.Tot.Base.index l' i) }
(declare-fun Tm_arrow_73c684a5823f2875fcceead4ce671ea8 () Term)






;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.list_refb; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(554,8-554,17); use=FStar.List.Tot.Base.fst(554,8-554,17)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.list_refb.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.list_refb.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.list_refb.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.list_refb.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.list_refb.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.list_refb; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(554,8-554,17); use=FStar.List.Tot.Base.fst(554,8-554,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.list_refb @x0
@x1
@x2)
(FStar.List.Tot.Base.list_refb.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.list_refb @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.list_refb.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.list_refb.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.list_refb>


; <Skipped FStar.List.Tot.Base.list_ref/>


; <Start encoding FStar.List.Tot.Base.list_ref>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.list_ref.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.list_ref.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.list_ref (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.list_ref@tok () Term)
;;;;;;;;;;;;;;;;_: a -> Prims.prop
(declare-fun Tm_arrow_81e65de2755319ee661cc1adc7d951e3 (Term) Term)
(declare-fun Tm_refine_751cc4d3e845537c495f9d7e1deb8aa9 (Term Term) Term)





(declare-fun Tm_refine_f61b92c00df29b87346e52dcf7670926 (Term Term Term Term) Term)

(declare-fun Tm_refine_16f0c42812e28aba7e30bc8c275306fb (Term Term Term) Term)










;;;;;;;;;;;;;;;;l:       Prims.list a         {forall (x: a). {:pattern FStar.List.Tot.Base.mem x l} FStar.List.Tot.Base.mem x l ==> p x}   -> l':     Prims.list (x: a{p x})       { FStar.List.Tot.Base.length l = FStar.List.Tot.Base.length l' /\         (forall (i:             Prims.nat{i < FStar.List.Tot.Base.length l /\ i < FStar.List.Tot.Base.length l'}).             {:pattern FStar.List.Tot.Base.index l i}             FStar.List.Tot.Base.index l i = FStar.List.Tot.Base.index l' i) }
(declare-fun Tm_arrow_73f29356f974e35d230fb85375ad3965 () Term)






;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Base.list_ref; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(564,8-564,16); use=FStar.List.Tot.Base.fst(564,8-564,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Base.list_ref.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Base.list_ref.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Base.list_ref.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Base.list_ref.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Base.list_ref.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Base.list_ref; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(564,8-564,16); use=FStar.List.Tot.Base.fst(564,8-564,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Base.list_ref @x0
@x1
@x2)
(FStar.List.Tot.Base.list_ref.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Base.list_ref @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Base.list_ref.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Base.list_ref.fuel_instrumented))

; </end encoding FStar.List.Tot.Base.list_ref>


; End Externals for module FStar.List.Tot.Base


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End module FStar.List.Tot.Base (675 decls; total size 88421)

;;; Start module FStar.List.Tot.Properties

; Externals for module FStar.List.Tot.Properties


; <Start encoding FStar.List.Tot.Properties.llist>

(declare-fun FStar.List.Tot.Properties.llist (Term Term) Term)
;;;;;;;;;;;;;;;;a: Type -> n: Prims.nat -> Type
(declare-fun Tm_arrow_67c7b2626869cb316f118144000415b9 () Term)
(declare-fun FStar.List.Tot.Properties.llist@tok () Term)
(declare-fun Tm_refine_fbb3412f12fd58a91571022d7c9fa36d (Term Term) Term)

; </end encoding FStar.List.Tot.Properties.llist>


; <Start encoding FStar.List.Tot.Properties.mem_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_memP (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_memP@tok () Term)

; </end encoding FStar.List.Tot.Properties.mem_memP>


; <Start encoding FStar.List.Tot.Properties.lemma_index_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_index_memP (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_index_memP@tok () Term)
(declare-fun Tm_refine_bf2fa1226f2c9a0f6671df3e80ddcb8e (Term Term) Term)

; </end encoding FStar.List.Tot.Properties.lemma_index_memP>


; <Skipped FStar.List.Tot.Properties.memP_empty/>


; <Start encoding FStar.List.Tot.Properties.memP_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_empty@tok () Term)

; </end encoding FStar.List.Tot.Properties.memP_empty>


; <Skipped FStar.List.Tot.Properties.memP_existsb/>


; <Start encoding FStar.List.Tot.Properties.memP_existsb>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_existsb (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_existsb@tok () Term)

; </end encoding FStar.List.Tot.Properties.memP_existsb>


; <Start encoding FStar.List.Tot.Properties.memP_map_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_intro (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_intro@tok () Term)

; </end encoding FStar.List.Tot.Properties.memP_map_intro>


; <Start encoding FStar.List.Tot.Properties.memP_map_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_elim (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_elim@tok () Term)

; </end encoding FStar.List.Tot.Properties.memP_map_elim>


; <Skipped FStar.List.Tot.Properties.mem_empty/>


; <Start encoding FStar.List.Tot.Properties.mem_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_empty@tok () Term)

; </end encoding FStar.List.Tot.Properties.mem_empty>


; <Skipped FStar.List.Tot.Properties.mem_existsb/>


; <Start encoding FStar.List.Tot.Properties.mem_existsb>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_existsb (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_existsb@tok () Term)

; </end encoding FStar.List.Tot.Properties.mem_existsb>


; <Start encoding FStar.List.Tot.Properties.mem_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_count (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_count@tok () Term)

; </end encoding FStar.List.Tot.Properties.mem_count>


; <Skipped FStar.List.Tot.Properties.rev_acc_length/>


; <Start encoding FStar.List.Tot.Properties.rev_acc_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_length@tok () Term)

; </end encoding FStar.List.Tot.Properties.rev_acc_length>


; <Skipped FStar.List.Tot.Properties.rev_length/>


; <Start encoding FStar.List.Tot.Properties.rev_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_length@tok () Term)

; </end encoding FStar.List.Tot.Properties.rev_length>


; <Skipped FStar.List.Tot.Properties.rev_acc_memP/>


; <Start encoding FStar.List.Tot.Properties.rev_acc_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_memP (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_memP@tok () Term)

; </end encoding FStar.List.Tot.Properties.rev_acc_memP>


; <Skipped FStar.List.Tot.Properties.rev_memP/>


; <Start encoding FStar.List.Tot.Properties.rev_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_memP (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_memP@tok () Term)

; </end encoding FStar.List.Tot.Properties.rev_memP>


; <Skipped FStar.List.Tot.Properties.rev_mem/>


; <Start encoding FStar.List.Tot.Properties.rev_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_mem (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_mem@tok () Term)

; </end encoding FStar.List.Tot.Properties.rev_mem>


; <Skipped FStar.List.Tot.Properties.append_nil_l/>


; <Start encoding FStar.List.Tot.Properties.append_nil_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_nil_l (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_nil_l@tok () Term)

; </end encoding FStar.List.Tot.Properties.append_nil_l>


; <Skipped FStar.List.Tot.Properties.append_l_nil/>


; <Start encoding FStar.List.Tot.Properties.append_l_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_l_nil (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_l_nil@tok () Term)

; </end encoding FStar.List.Tot.Properties.append_l_nil>


; <Skipped FStar.List.Tot.Properties.append_cons_l/>


; <Start encoding FStar.List.Tot.Properties.append_cons_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_cons_l (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_cons_l@tok () Term)

; </end encoding FStar.List.Tot.Properties.append_cons_l>


; <Skipped FStar.List.Tot.Properties.append_l_cons/>


; <Start encoding FStar.List.Tot.Properties.append_l_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_l_cons (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_l_cons@tok () Term)

; </end encoding FStar.List.Tot.Properties.append_l_cons>


; <Skipped FStar.List.Tot.Properties.append_assoc/>


; <Start encoding FStar.List.Tot.Properties.append_assoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_assoc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_assoc@tok () Term)

; </end encoding FStar.List.Tot.Properties.append_assoc>


; <Skipped FStar.List.Tot.Properties.append_length/>


; <Start encoding FStar.List.Tot.Properties.append_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_length@tok () Term)

; </end encoding FStar.List.Tot.Properties.append_length>


; <Skipped FStar.List.Tot.Properties.append_mem/>


; <Start encoding FStar.List.Tot.Properties.append_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_mem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_mem@tok () Term)

; </end encoding FStar.List.Tot.Properties.append_mem>


; <Skipped FStar.List.Tot.Properties.append_mem_forall/>


; <Start encoding FStar.List.Tot.Properties.append_mem_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_mem_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_mem_forall@tok () Term)

; </end encoding FStar.List.Tot.Properties.append_mem_forall>


; <Skipped FStar.List.Tot.Properties.append_count/>


; <Start encoding FStar.List.Tot.Properties.append_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_count (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_count@tok () Term)

; </end encoding FStar.List.Tot.Properties.append_count>


; <Skipped FStar.List.Tot.Properties.append_count_forall/>


; <Start encoding FStar.List.Tot.Properties.append_count_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_count_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_count_forall@tok () Term)

; </end encoding FStar.List.Tot.Properties.append_count_forall>


; <Skipped FStar.List.Tot.Properties.append_eq_nil/>


; <Start encoding FStar.List.Tot.Properties.append_eq_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_nil (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_nil@tok () Term)

; </end encoding FStar.List.Tot.Properties.append_eq_nil>


; <Skipped FStar.List.Tot.Properties.append_eq_singl/>


; <Start encoding FStar.List.Tot.Properties.append_eq_singl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_singl (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_singl@tok () Term)

; </end encoding FStar.List.Tot.Properties.append_eq_singl>


; <Skipped FStar.List.Tot.Properties.append_inv_head/>


; <Start encoding FStar.List.Tot.Properties.append_inv_head>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_head (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_head@tok () Term)

; </end encoding FStar.List.Tot.Properties.append_inv_head>


; <Skipped FStar.List.Tot.Properties.append_inv_tail/>


; <Start encoding FStar.List.Tot.Properties.append_inv_tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_tail (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_tail@tok () Term)

; </end encoding FStar.List.Tot.Properties.append_inv_tail>


; <Start encoding FStar.List.Tot.Properties.append_length_inv_head>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_head (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_head@tok () Term)

; </end encoding FStar.List.Tot.Properties.append_length_inv_head>


; <Start encoding FStar.List.Tot.Properties.append_length_inv_tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_tail (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_tail@tok () Term)

; </end encoding FStar.List.Tot.Properties.append_length_inv_tail>


; <Start encoding FStar.List.Tot.Properties.append_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_injective (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_injective@tok () Term)

; </end encoding FStar.List.Tot.Properties.append_injective>


; <Start encoding FStar.List.Tot.Properties.lemma_append_last>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_append_last (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_append_last@tok () Term)

; </end encoding FStar.List.Tot.Properties.lemma_append_last>


; <Skipped FStar.List.Tot.Properties.rev'/>


; <Start encoding FStar.List.Tot.Properties.rev'>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.rev_.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.rev_.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.rev_ (Term Term) Term)
(declare-fun FStar.List.Tot.Properties.rev_@tok () Term)

;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Properties.rev'; Namespace FStar.List.Tot.Properties
(assert (! 
;; def=FStar.List.Tot.Properties.fst(316,8-316,12); use=FStar.List.Tot.Properties.fst(316,8-316,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Properties.rev_.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.List.Tot.Properties.rev_.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.List.Tot.Properties.rev_.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.List.Tot.Properties.rev_.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Properties.rev_.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Properties.rev'; Namespace FStar.List.Tot.Properties
(assert (! 
;; def=FStar.List.Tot.Properties.fst(316,8-316,12); use=FStar.List.Tot.Properties.fst(316,8-316,12)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.List.Tot.Properties.rev_ @x0
@x1)
(FStar.List.Tot.Properties.rev_.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.List.Tot.Properties.rev_ @x0
@x1))
:qid @fuel_correspondence_FStar.List.Tot.Properties.rev_.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Properties.rev_.fuel_instrumented))

; </end encoding FStar.List.Tot.Properties.rev'>


; <Start encoding FStar.List.Tot.Properties.rev'T>

(declare-fun FStar.List.Tot.Properties.rev_T (Term) Term)
;;;;;;;;;;;;;;;;_: Prims.list _ -> Prims.list _
(declare-fun Tm_arrow_f34ce2ad5441b4bd300fa100b397737d (Term) Term)
;;;;;;;;;;;;;;;;_: Prims.list _ -> Prims.list _
(declare-fun Tm_arrow_42c6b27a859866d5307ff94c9f459cb1 () Term)
(declare-fun FStar.List.Tot.Properties.rev_T@tok () Term)

;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name FStar.List.Tot.Properties.rev'T; Namespace FStar.List.Tot.Properties
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.List.Tot.Properties.rev_@tok))
:named @kick_partial_app_6780e2e9ce16d5330b5fda76b7bde9c5))

; </end encoding FStar.List.Tot.Properties.rev'T>


; <Skipped FStar.List.Tot.Properties.rev_acc_rev'/>


; <Start encoding FStar.List.Tot.Properties.rev_acc_rev'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_rev_ (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_rev_@tok () Term)

; </end encoding FStar.List.Tot.Properties.rev_acc_rev'>


; <Skipped FStar.List.Tot.Properties.rev_rev'/>


; <Start encoding FStar.List.Tot.Properties.rev_rev'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_rev_ (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_rev_@tok () Term)

; </end encoding FStar.List.Tot.Properties.rev_rev'>


; <Skipped FStar.List.Tot.Properties.rev'_append/>


; <Start encoding FStar.List.Tot.Properties.rev'_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev__append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev__append@tok () Term)

; </end encoding FStar.List.Tot.Properties.rev'_append>


; <Skipped FStar.List.Tot.Properties.rev_append/>


; <Start encoding FStar.List.Tot.Properties.rev_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_append@tok () Term)

; </end encoding FStar.List.Tot.Properties.rev_append>


; <Skipped FStar.List.Tot.Properties.rev'_involutive/>


; <Start encoding FStar.List.Tot.Properties.rev'_involutive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev__involutive (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev__involutive@tok () Term)

; </end encoding FStar.List.Tot.Properties.rev'_involutive>


; <Skipped FStar.List.Tot.Properties.rev_involutive/>


; <Start encoding FStar.List.Tot.Properties.rev_involutive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_involutive (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_involutive@tok () Term)

; </end encoding FStar.List.Tot.Properties.rev_involutive>


; <Skipped FStar.List.Tot.Properties.lemma_snoc_length/>


; <Start encoding FStar.List.Tot.Properties.lemma_snoc_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_length@tok () Term)

; </end encoding FStar.List.Tot.Properties.lemma_snoc_length>


; <Skipped FStar.List.Tot.Properties.rev'_list_ind/>


; <Start encoding FStar.List.Tot.Properties.rev'_list_ind>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev__list_ind (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev__list_ind@tok () Term)

; </end encoding FStar.List.Tot.Properties.rev'_list_ind>


; <Skipped FStar.List.Tot.Properties.rev_ind/>


; <Start encoding FStar.List.Tot.Properties.rev_ind>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_ind (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_ind@tok () Term)

; </end encoding FStar.List.Tot.Properties.rev_ind>


; <Skipped FStar.List.Tot.Properties.map_lemma/>


; <Start encoding FStar.List.Tot.Properties.map_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.map_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.map_lemma@tok () Term)


; </end encoding FStar.List.Tot.Properties.map_lemma>


; <Skipped FStar.List.Tot.Properties.lemma_unsnoc_snoc/>


; <Start encoding FStar.List.Tot.Properties.lemma_unsnoc_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_snoc (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_snoc@tok () Term)
(declare-fun Tm_refine_e88aba6d4c79a5625ab4330932edf7ed (Term) Term)

; </end encoding FStar.List.Tot.Properties.lemma_unsnoc_snoc>


; <Skipped FStar.List.Tot.Properties.lemma_snoc_unsnoc/>


; <Start encoding FStar.List.Tot.Properties.lemma_snoc_unsnoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_unsnoc (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_unsnoc@tok () Term)

; </end encoding FStar.List.Tot.Properties.lemma_snoc_unsnoc>


; <Skipped FStar.List.Tot.Properties.lemma_unsnoc_length/>


; <Start encoding FStar.List.Tot.Properties.lemma_unsnoc_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_length@tok () Term)

; </end encoding FStar.List.Tot.Properties.lemma_unsnoc_length>


; <Start encoding FStar.List.Tot.Properties.lemma_unsnoc_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_append@tok () Term)

; </end encoding FStar.List.Tot.Properties.lemma_unsnoc_append>


; <Start encoding FStar.List.Tot.Properties.lemma_unsnoc_is_last>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_is_last (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_is_last@tok () Term)

; </end encoding FStar.List.Tot.Properties.lemma_unsnoc_is_last>


; <Start encoding FStar.List.Tot.Properties.lemma_unsnoc_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_index@tok () Term)

; </end encoding FStar.List.Tot.Properties.lemma_unsnoc_index>


; <Start encoding FStar.List.Tot.Properties.split_using>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.split_using.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.split_using.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.split_using (Term Term Term) Term)
(declare-fun FStar.List.Tot.Properties.split_using@tok () Term)
(declare-fun Tm_refine_ca5b6dc4e0a851997703798a1ffc5f70 (Term Term) Term)


;;;;;;;;;;;;;;;;l: Prims.list t -> x: t{FStar.List.Tot.Base.memP x l} -> Prims.GTot (Prims.list t * Prims.list t)
(declare-fun Tm_ghost_arrow_583c096a402961cd40d8b718fb07bacc () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Properties.split_using; Namespace FStar.List.Tot.Properties
(assert (! 
;; def=FStar.List.Tot.Properties.fst(466,8-466,19); use=FStar.List.Tot.Properties.fst(466,8-466,19)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Properties.split_using.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Properties.split_using.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Properties.split_using.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Properties.split_using.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Properties.split_using.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Properties.split_using; Namespace FStar.List.Tot.Properties
(assert (! 
;; def=FStar.List.Tot.Properties.fst(466,8-466,19); use=FStar.List.Tot.Properties.fst(466,8-466,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Properties.split_using @x0
@x1
@x2)
(FStar.List.Tot.Properties.split_using.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Properties.split_using @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Properties.split_using.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Properties.split_using.fuel_instrumented))

; </end encoding FStar.List.Tot.Properties.split_using>


; <Start encoding FStar.List.Tot.Properties.lemma_split_using>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_split_using (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_split_using@tok () Term)

; </end encoding FStar.List.Tot.Properties.lemma_split_using>


; <Start encoding FStar.List.Tot.Properties.index_of>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.index_of.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.index_of.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.index_of (Term Term Term) Term)
(declare-fun FStar.List.Tot.Properties.index_of@tok () Term)

(declare-fun Tm_refine_cd45ecc9daf74409c394004efbaa3338 (Term Term Term) Term)



;;;;;;;;;;;;;;;;l: Prims.list t -> x: t{FStar.List.Tot.Base.memP x l}   -> Prims.GTot     (i: Prims.nat{i < FStar.List.Tot.Base.length l /\ FStar.List.Tot.Base.index l i == x})
(declare-fun Tm_ghost_arrow_d9cd5e48f458f8c211c59f9048af3929 () Term)

;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Properties.index_of; Namespace FStar.List.Tot.Properties
(assert (! 
;; def=FStar.List.Tot.Properties.fst(507,8-507,16); use=FStar.List.Tot.Properties.fst(507,8-507,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Properties.index_of.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Properties.index_of.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Properties.index_of.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Properties.index_of.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Properties.index_of.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Properties.index_of; Namespace FStar.List.Tot.Properties
(assert (! 
;; def=FStar.List.Tot.Properties.fst(507,8-507,16); use=FStar.List.Tot.Properties.fst(507,8-507,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Properties.index_of @x0
@x1
@x2)
(FStar.List.Tot.Properties.index_of.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Properties.index_of @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Properties.index_of.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Properties.index_of.fuel_instrumented))

; </end encoding FStar.List.Tot.Properties.index_of>


; <Skipped FStar.List.Tot.Properties.partition_mem/>


; <Start encoding FStar.List.Tot.Properties.partition_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem@tok () Term)

; </end encoding FStar.List.Tot.Properties.partition_mem>


; <Skipped FStar.List.Tot.Properties.partition_mem_forall/>


; <Start encoding FStar.List.Tot.Properties.partition_mem_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_forall@tok () Term)

; </end encoding FStar.List.Tot.Properties.partition_mem_forall>


; <Skipped FStar.List.Tot.Properties.partition_mem_p_forall/>


; <Start encoding FStar.List.Tot.Properties.partition_mem_p_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_p_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_p_forall@tok () Term)

; </end encoding FStar.List.Tot.Properties.partition_mem_p_forall>


; <Skipped FStar.List.Tot.Properties.partition_count/>


; <Start encoding FStar.List.Tot.Properties.partition_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_count (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_count@tok () Term)

; </end encoding FStar.List.Tot.Properties.partition_count>


; <Skipped FStar.List.Tot.Properties.partition_count_forall/>


; <Start encoding FStar.List.Tot.Properties.partition_count_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_count_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_count_forall@tok () Term)

; </end encoding FStar.List.Tot.Properties.partition_count_forall>


; <Skipped FStar.List.Tot.Properties.sortWith_permutation/>


; <Start encoding FStar.List.Tot.Properties.sortWith_permutation>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_permutation (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_permutation@tok () Term)

; </end encoding FStar.List.Tot.Properties.sortWith_permutation>


; <Skipped FStar.List.Tot.Properties.sorted/>


; <Start encoding FStar.List.Tot.Properties.sorted>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.sorted.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.sorted.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.sorted (Term Term Term) Term)
(declare-fun FStar.List.Tot.Properties.sorted@tok () Term)



;;;;;;;;;;;;;;;;f: (_: 'a -> _: 'a -> Prims.bool) -> _: Prims.list 'a -> Prims.bool
(declare-fun Tm_arrow_3ceaaa0abe084cc4615eb380e8d5e0cc () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.List.Tot.Properties.sorted; Namespace FStar.List.Tot.Properties
(assert (! 
;; def=FStar.List.Tot.Properties.fst(599,8-599,14); use=FStar.List.Tot.Properties.fst(599,8-599,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.List.Tot.Properties.sorted.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.List.Tot.Properties.sorted.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.List.Tot.Properties.sorted.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.List.Tot.Properties.sorted.fuel_instrumented))

:named @fuel_irrelevance_FStar.List.Tot.Properties.sorted.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.List.Tot.Properties.sorted; Namespace FStar.List.Tot.Properties
(assert (! 
;; def=FStar.List.Tot.Properties.fst(599,8-599,14); use=FStar.List.Tot.Properties.fst(599,8-599,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.List.Tot.Properties.sorted @x0
@x1
@x2)
(FStar.List.Tot.Properties.sorted.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.List.Tot.Properties.sorted @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.List.Tot.Properties.sorted.fuel_instrumented))

:named @fuel_correspondence_FStar.List.Tot.Properties.sorted.fuel_instrumented))

; </end encoding FStar.List.Tot.Properties.sorted>


; <Start encoding FStar.List.Tot.Properties.total_order>


(declare-fun FStar.List.Tot.Properties.total_order (Term Term) Term)

;;;;;;;;;;;;;;;;f: (_: a -> _: a -> Prims.bool) -> Prims.logical
(declare-fun Tm_arrow_92649d42e4d7df07b51f92b06355903e () Term)
(declare-fun FStar.List.Tot.Properties.total_order@tok () Term)


(declare-fun Tm_abs_155da43c8f196a519f1d932a1ab4c672 (Term Term) Term)

(declare-fun Tm_abs_04fa90dc867a5ed8e0397827a7571ed5 (Term Term Term) Term)

(declare-fun Tm_abs_fe2be3b4afbe66f9150ee17cf4940baf (Term Term) Term)

(declare-fun Tm_abs_2c9f14a824739c9038583213daad5a5e (Term Term Term Term) Term)

(declare-fun Tm_abs_2d2122604cffa731ca36b55576591613 (Term Term Term) Term)

(declare-fun Tm_abs_b229429e9a9f69e9e2fad0e7209d52f8 (Term Term) Term)

(declare-fun Tm_abs_8c0710121fff62e4b75dbdb8d8081c34 (Term Term Term) Term)

(declare-fun Tm_abs_cc30b17d49d0d8b0d5dad0fc1fc8c31f (Term Term) Term)

; </end encoding FStar.List.Tot.Properties.total_order>


; <Skipped FStar.List.Tot.Properties.append_sorted/>


; <Start encoding FStar.List.Tot.Properties.append_sorted>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_sorted (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_sorted@tok () Term)

(declare-fun Tm_refine_828abd88abe59cf052738363f3952d7b (Term Term) Term)


; </end encoding FStar.List.Tot.Properties.append_sorted>


; <Skipped FStar.List.Tot.Properties.sortWith_sorted/>


; <Start encoding FStar.List.Tot.Properties.sortWith_sorted>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_sorted (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_sorted@tok () Term)

; </end encoding FStar.List.Tot.Properties.sortWith_sorted>


; <Start encoding FStar.List.Tot.Properties.noRepeats_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_nil (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_nil@tok () Term)

; </end encoding FStar.List.Tot.Properties.noRepeats_nil>


; <Start encoding FStar.List.Tot.Properties.noRepeats_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_cons@tok () Term)

; </end encoding FStar.List.Tot.Properties.noRepeats_cons>


; <Start encoding FStar.List.Tot.Properties.noRepeats_append_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_elim@tok () Term)

; </end encoding FStar.List.Tot.Properties.noRepeats_append_elim>


; <Start encoding FStar.List.Tot.Properties.noRepeats_append_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_intro@tok () Term)

; </end encoding FStar.List.Tot.Properties.noRepeats_append_intro>


; <Start encoding FStar.List.Tot.Properties.assoc_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_nil (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_nil@tok () Term)

; </end encoding FStar.List.Tot.Properties.assoc_nil>


; <Start encoding FStar.List.Tot.Properties.assoc_cons_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_eq (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_eq@tok () Term)

; </end encoding FStar.List.Tot.Properties.assoc_cons_eq>


; <Start encoding FStar.List.Tot.Properties.assoc_cons_not_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_not_eq (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_not_eq@tok () Term)

; </end encoding FStar.List.Tot.Properties.assoc_cons_not_eq>


; <Start encoding FStar.List.Tot.Properties.assoc_append_elim_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_r (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_r@tok () Term)

; </end encoding FStar.List.Tot.Properties.assoc_append_elim_r>


; <Start encoding FStar.List.Tot.Properties.assoc_append_elim_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_l (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_l@tok () Term)

; </end encoding FStar.List.Tot.Properties.assoc_append_elim_l>


; <Start encoding FStar.List.Tot.Properties.assoc_memP_some>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_some (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_some@tok () Term)

; </end encoding FStar.List.Tot.Properties.assoc_memP_some>


; <Start encoding FStar.List.Tot.Properties.assoc_memP_none>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_none (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_none@tok () Term)

; </end encoding FStar.List.Tot.Properties.assoc_memP_none>


; <Start encoding FStar.List.Tot.Properties.assoc_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_mem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_mem@tok () Term)

; </end encoding FStar.List.Tot.Properties.assoc_mem>


; <Start encoding FStar.List.Tot.Properties.fold_left_invar>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_invar (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_invar@tok () Term)

; </end encoding FStar.List.Tot.Properties.fold_left_invar>


; <Start encoding FStar.List.Tot.Properties.fold_left_map>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_map (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_map@tok () Term)

; </end encoding FStar.List.Tot.Properties.fold_left_map>


; <Start encoding FStar.List.Tot.Properties.map_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.map_append (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.map_append@tok () Term)

; </end encoding FStar.List.Tot.Properties.map_append>


; <Start encoding FStar.List.Tot.Properties.fold_left_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append@tok () Term)

; </end encoding FStar.List.Tot.Properties.fold_left_append>


; <Start encoding FStar.List.Tot.Properties.fold_left_monoid>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_monoid (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_monoid@tok () Term)

; </end encoding FStar.List.Tot.Properties.fold_left_monoid>


; <Start encoding FStar.List.Tot.Properties.fold_left_append_monoid>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append_monoid (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append_monoid@tok () Term)

; </end encoding FStar.List.Tot.Properties.fold_left_append_monoid>


; <Start encoding FStar.List.Tot.Properties.index_extensionality_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.index_extensionality_aux (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.index_extensionality_aux@tok () Term)

; </end encoding FStar.List.Tot.Properties.index_extensionality_aux>


; <Start encoding FStar.List.Tot.Properties.index_extensionality>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.index_extensionality (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.index_extensionality@tok () Term)

; </end encoding FStar.List.Tot.Properties.index_extensionality>


; <Start encoding FStar.List.Tot.Properties.strict_suffix_of_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_nil (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_nil@tok () Term)

; </end encoding FStar.List.Tot.Properties.strict_suffix_of_nil>


; <Start encoding FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil@tok () Term)

; </end encoding FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil>


; <Start encoding FStar.List.Tot.Properties.strict_suffix_of_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_cons@tok () Term)

; </end encoding FStar.List.Tot.Properties.strict_suffix_of_cons>


; <Start encoding FStar.List.Tot.Properties.strict_suffix_of_trans>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_trans (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_trans@tok () Term)

; </end encoding FStar.List.Tot.Properties.strict_suffix_of_trans>


; <Start encoding FStar.List.Tot.Properties.strict_suffix_of_correct>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_correct (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_correct@tok () Term)

; </end encoding FStar.List.Tot.Properties.strict_suffix_of_correct>


; <Start encoding FStar.List.Tot.Properties.map_strict_suffix_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.map_strict_suffix_of (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.map_strict_suffix_of@tok () Term)

; </end encoding FStar.List.Tot.Properties.map_strict_suffix_of>


; <Start encoding FStar.List.Tot.Properties.mem_strict_suffix_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_strict_suffix_of (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_strict_suffix_of@tok () Term)

; </end encoding FStar.List.Tot.Properties.mem_strict_suffix_of>


; <Start encoding FStar.List.Tot.Properties.strict_suffix_of_exists_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_exists_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_exists_append@tok () Term)

; </end encoding FStar.List.Tot.Properties.strict_suffix_of_exists_append>


; <Start encoding FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append@tok () Term)

; </end encoding FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append>


; <Start encoding FStar.List.Tot.Properties.precedes_tl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.precedes_tl (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.precedes_tl@tok () Term)

; </end encoding FStar.List.Tot.Properties.precedes_tl>


; <Start encoding FStar.List.Tot.Properties.precedes_append_cons_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_r (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_r@tok () Term)

; </end encoding FStar.List.Tot.Properties.precedes_append_cons_r>


; <Start encoding FStar.List.Tot.Properties.precedes_append_cons_prod_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_prod_r (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_prod_r@tok () Term)

; </end encoding FStar.List.Tot.Properties.precedes_append_cons_prod_r>


; <Start encoding FStar.List.Tot.Properties.memP_precedes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_precedes (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_precedes@tok () Term)

; </end encoding FStar.List.Tot.Properties.memP_precedes>


; <Start encoding FStar.List.Tot.Properties.assoc_precedes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_precedes (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_precedes@tok () Term)

; </end encoding FStar.List.Tot.Properties.assoc_precedes>


; <Start encoding FStar.List.Tot.Properties.find_none>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.find_none (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.find_none@tok () Term)

; </end encoding FStar.List.Tot.Properties.find_none>


; <Start encoding FStar.List.Tot.Properties.append_init_last>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_init_last (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_init_last@tok () Term)

; </end encoding FStar.List.Tot.Properties.append_init_last>


; <Start encoding FStar.List.Tot.Properties.init_last_def>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.init_last_def (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.init_last_def@tok () Term)

; </end encoding FStar.List.Tot.Properties.init_last_def>


; <Start encoding FStar.List.Tot.Properties.init_last_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.init_last_inj (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.init_last_inj@tok () Term)

; </end encoding FStar.List.Tot.Properties.init_last_inj>


; <Skipped />


; <Start encoding FStar.List.Tot.Properties.for_all_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.for_all_append (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.for_all_append@tok () Term)

; </end encoding FStar.List.Tot.Properties.for_all_append>


; <Skipped />


; End Externals for module FStar.List.Tot.Properties


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End module FStar.List.Tot.Properties (527 decls; total size 52457)

;;; Start module FStar.List.Tot

; Externals for module FStar.List.Tot


; End Externals for module FStar.List.Tot


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End module FStar.List.Tot (3 decls; total size 1150)

;;; Start interface FStar.Seq.Base

; Externals for interface FStar.Seq.Base


; <Start encoding FStar.Seq.Base.seq>

(declare-fun FStar.Seq.Base.seq (Term) Term)

(declare-fun FStar.Seq.Base.seq@tok () Term)

; </end encoding FStar.Seq.Base.seq>


; <Start encoding FStar.Seq.Base.length>

(declare-fun FStar.Seq.Base.length (Term Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Seq.Base.seq a -> Prims.nat
(declare-fun Tm_arrow_d2c01593e1ccf972aadc4bced72f8166 () Term)
(declare-fun FStar.Seq.Base.length@tok () Term)

; </end encoding FStar.Seq.Base.length>


; <Start encoding FStar.Seq.Base.index>

(declare-fun Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55 (Term Term) Term)
(declare-fun FStar.Seq.Base.index (Term Term Term) Term)

;;;;;;;;;;;;;;;;s: FStar.Seq.Base.seq a -> i: Prims.nat{i < FStar.Seq.Base.length s} -> a
(declare-fun Tm_arrow_1910ef5262f2ee8e712b6609a232b1ea () Term)
(declare-fun FStar.Seq.Base.index@tok () Term)

; </end encoding FStar.Seq.Base.index>


; <Start encoding FStar.Seq.Base.create>

(declare-fun FStar.Seq.Base.create (Term Term Term) Term)
;;;;;;;;;;;;;;;;_: Prims.nat -> _: a -> FStar.Seq.Base.seq a
(declare-fun Tm_arrow_b5b3d4fcc48eb666a8878550e50df9fb () Term)
(declare-fun FStar.Seq.Base.create@tok () Term)

; </end encoding FStar.Seq.Base.create>


; <Start encoding FStar.Seq.Base.init_aux>

(declare-fun Tm_refine_c1424615841f28cac7fc34e92b7ff33c (Term) Term)

;;;;;;;;;;;;;;;;i: Prims.nat{i < len} -> a
(declare-fun Tm_arrow_44bb45ed5c2534b346e0f58ea5033251 (Term Term) Term)
(declare-fun FStar.Seq.Base.init_aux (Term Term Term Term) Term)



;;;;;;;;;;;;;;;;len: Prims.nat -> k: Prims.nat{k < len} -> contents: (i: Prims.nat{i < len} -> a)   -> FStar.Seq.Base.seq a
(declare-fun Tm_arrow_da6bbab10714c064205223f9990745bd () Term)
(declare-fun FStar.Seq.Base.init_aux@tok () Term)

; </end encoding FStar.Seq.Base.init_aux>


; <Start encoding FStar.Seq.Base.init>



(declare-fun FStar.Seq.Base.init (Term Term Term) Term)


;;;;;;;;;;;;;;;;len: Prims.nat -> contents: (i: Prims.nat{i < len} -> a) -> FStar.Seq.Base.seq a
(declare-fun Tm_arrow_d638d84259a58eff38c91944355ac313 () Term)
(declare-fun FStar.Seq.Base.init@tok () Term)

; </end encoding FStar.Seq.Base.init>


; <Start encoding FStar.Seq.Base.init_aux_ghost>



;;;;;;;;;;;;;;;;i: Prims.nat{i < len} -> Prims.GTot a
(declare-fun Tm_ghost_arrow_b7c239afcc620812134a759b53cafcc7 (Term Term) Term)
(declare-fun FStar.Seq.Base.init_aux_ghost (Term Term Term Term) Term)



;;;;;;;;;;;;;;;;len: Prims.nat -> k: Prims.nat{k < len} -> contents: (i: Prims.nat{i < len} -> Prims.GTot a)   -> Prims.GTot (FStar.Seq.Base.seq a)
(declare-fun Tm_ghost_arrow_90c084cce85ad5fa9b6789a83ba7b9d5 () Term)
(declare-fun FStar.Seq.Base.init_aux_ghost@tok () Term)

; </end encoding FStar.Seq.Base.init_aux_ghost>


; <Start encoding FStar.Seq.Base.init_ghost>



(declare-fun FStar.Seq.Base.init_ghost (Term Term Term) Term)


;;;;;;;;;;;;;;;;len: Prims.nat -> contents: (i: Prims.nat{i < len} -> Prims.GTot a)   -> Prims.GTot (FStar.Seq.Base.seq a)
(declare-fun Tm_ghost_arrow_dc3e2497ae3914facc1bb3cecddbafe4 () Term)
(declare-fun FStar.Seq.Base.init_ghost@tok () Term)

; </end encoding FStar.Seq.Base.init_ghost>


; <Start encoding FStar.Seq.Base.empty>

(declare-fun FStar.Seq.Base.empty (Term) Term)
(declare-fun Tm_refine_b913a3f691ca99086652e0a655e72f17 (Term) Term)
;;;;;;;;;;;;;;;;s: FStar.Seq.Base.seq a {FStar.Seq.Base.length s = 0}
(declare-fun Tm_arrow_c39fb4e3e203a822394c714f70ec2d2c () Term)
(declare-fun FStar.Seq.Base.empty@tok () Term)


; </end encoding FStar.Seq.Base.empty>


; <Start encoding FStar.Seq.Base.createEmpty>

(declare-fun FStar.Seq.Base.createEmpty (Term) Term)


(declare-fun FStar.Seq.Base.createEmpty@tok () Term)


; </end encoding FStar.Seq.Base.createEmpty>


; <Start encoding FStar.Seq.Base.lemma_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_empty@tok () Term)

; </end encoding FStar.Seq.Base.lemma_empty>


; <Start encoding FStar.Seq.Base.upd>


(declare-fun FStar.Seq.Base.upd (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;s: FStar.Seq.Base.seq a -> n: Prims.nat{n < FStar.Seq.Base.length s} -> _: a -> FStar.Seq.Base.seq a
(declare-fun Tm_arrow_12766e98f50c8b91e296bbc369061265 () Term)
(declare-fun FStar.Seq.Base.upd@tok () Term)

; </end encoding FStar.Seq.Base.upd>


; <Start encoding FStar.Seq.Base.append>

(declare-fun FStar.Seq.Base.append (Term Term Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Seq.Base.seq a -> _: FStar.Seq.Base.seq a -> FStar.Seq.Base.seq a
(declare-fun Tm_arrow_22c1b165cc91e8aafbceb8b36244be8e () Term)
(declare-fun FStar.Seq.Base.append@tok () Term)

; </end encoding FStar.Seq.Base.append>


; <Start encoding FStar.Seq.Base.op_At_Bar>

(declare-fun FStar.Seq.Base.op_At_Bar (Term Term Term) Term)

(declare-fun FStar.Seq.Base.op_At_Bar@tok () Term)

; </end encoding FStar.Seq.Base.op_At_Bar>


; <Start encoding FStar.Seq.Base.slice>

(declare-fun Tm_refine_81407705a0828c2c1b1976675443f647 (Term Term Term) Term)
(declare-fun FStar.Seq.Base.slice (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;s: FStar.Seq.Base.seq a -> i: Prims.nat -> j: Prims.nat{i <= j && j <= FStar.Seq.Base.length s}   -> FStar.Seq.Base.seq a
(declare-fun Tm_arrow_f59809c98fadf275c00ce819f5868628 () Term)
(declare-fun FStar.Seq.Base.slice@tok () Term)

; </end encoding FStar.Seq.Base.slice>


; <Start encoding FStar.Seq.Base.lemma_create_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_create_len (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_create_len@tok () Term)

; </end encoding FStar.Seq.Base.lemma_create_len>


; <Start encoding FStar.Seq.Base.lemma_init_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_init_len (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_init_len@tok () Term)



; </end encoding FStar.Seq.Base.lemma_init_len>


; <Start encoding FStar.Seq.Base.lemma_init_aux_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_init_aux_len (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_init_aux_len@tok () Term)




; </end encoding FStar.Seq.Base.lemma_init_aux_len>


; <Start encoding FStar.Seq.Base.lemma_init_ghost_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_init_ghost_len (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_init_ghost_len@tok () Term)



; </end encoding FStar.Seq.Base.lemma_init_ghost_len>


; <Start encoding FStar.Seq.Base.lemma_init_ghost_aux_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_init_ghost_aux_len (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_init_ghost_aux_len@tok () Term)




; </end encoding FStar.Seq.Base.lemma_init_ghost_aux_len>


; <Start encoding FStar.Seq.Base.lemma_len_upd>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_len_upd (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_len_upd@tok () Term)
(declare-fun Tm_refine_2ca062977a42c36634b89c1c4f193f79 (Term Term) Term)

; </end encoding FStar.Seq.Base.lemma_len_upd>


; <Start encoding FStar.Seq.Base.lemma_len_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_len_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_len_append@tok () Term)

; </end encoding FStar.Seq.Base.lemma_len_append>


; <Start encoding FStar.Seq.Base.lemma_len_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_len_slice (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_len_slice@tok () Term)


; </end encoding FStar.Seq.Base.lemma_len_slice>


; <Start encoding FStar.Seq.Base.lemma_index_create>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_create (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_create@tok () Term)


; </end encoding FStar.Seq.Base.lemma_index_create>


; <Start encoding FStar.Seq.Base.lemma_index_upd1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_upd1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_upd1@tok () Term)


; </end encoding FStar.Seq.Base.lemma_index_upd1>


; <Start encoding FStar.Seq.Base.lemma_index_upd2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_upd2 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_upd2@tok () Term)

(declare-fun Tm_refine_df81b3f17797c6f405c1dbb191651292 (Term Term Term) Term)

; </end encoding FStar.Seq.Base.lemma_index_upd2>


; <Start encoding FStar.Seq.Base.lemma_index_app1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_app1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_app1@tok () Term)


; </end encoding FStar.Seq.Base.lemma_index_app1>


; <Start encoding FStar.Seq.Base.lemma_index_app2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_app2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_app2@tok () Term)
(declare-fun Tm_refine_ac201cf927190d39c033967b63cb957b (Term Term Term) Term)

; </end encoding FStar.Seq.Base.lemma_index_app2>


; <Start encoding FStar.Seq.Base.lemma_index_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_slice (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_slice@tok () Term)
(declare-fun Tm_refine_d3d07693cd71377864ef84dc97d10ec1 (Term Term Term) Term)
(declare-fun Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8 (Term Term) Term)

; </end encoding FStar.Seq.Base.lemma_index_slice>


; <Start encoding FStar.Seq.Base.hasEq_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.hasEq_lemma (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.hasEq_lemma@tok () Term)

; </end encoding FStar.Seq.Base.hasEq_lemma>


; <Start encoding FStar.Seq.Base.equal>

(declare-fun FStar.Seq.Base.equal (Term Term Term) Term)
;;;;;;;;;;;;;;;;s1: FStar.Seq.Base.seq a -> s2: FStar.Seq.Base.seq a -> Prims.prop
(declare-fun Tm_arrow_c2c0a5f39eee7a5a92db8bac6fe4fb3b () Term)
(declare-fun FStar.Seq.Base.equal@tok () Term)

; </end encoding FStar.Seq.Base.equal>


; <Start encoding FStar.Seq.Base.eq_i>

(declare-fun Tm_refine_4639d389381bee5cf8cf77b7a6585074 (Term Term) Term)
(declare-fun Tm_refine_b361ba8089a6e963921008d537e799a1 (Term Term) Term)
(declare-fun FStar.Seq.Base.eq_i (Term Term Term Term) Term)


(declare-fun Tm_refine_331c14d442c5ee89a4fce6ea305c920f (Term Term Term) Term)
(declare-fun Tm_refine_51f956555266662f5f0ed4aac81d10bc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;s1: FStar.Seq.Base.seq a ->     s2: FStar.Seq.Base.seq a {FStar.Seq.Base.length s1 = FStar.Seq.Base.length s2} ->     i: Prims.nat{i <= FStar.Seq.Base.length s1}   -> r:     Prims.bool       { r <==>         (forall (j:             i:             Prims.int               {i >= 0 /\ i < FStar.Seq.Base.length s2 /\ (i >= 0) /\ (i < FStar.Seq.Base.length s1)})           .             j >= i /\ j < FStar.Seq.Base.length s1 ==>             FStar.Seq.Base.index s1 j = FStar.Seq.Base.index s2 j) }
(declare-fun Tm_arrow_e5286e13b5c071949ebc5146fbef7d7f () Term)
(declare-fun FStar.Seq.Base.eq_i@tok () Term)



; </end encoding FStar.Seq.Base.eq_i>


; <Start encoding FStar.Seq.Base.eq>

(declare-fun FStar.Seq.Base.eq (Term Term Term) Term)
(declare-fun Tm_refine_1c0effbdef48f9b00a1efb7b571fbb69 (Term Term Term) Term)
;;;;;;;;;;;;;;;;s1: FStar.Seq.Base.seq a -> s2: FStar.Seq.Base.seq a   -> r: Prims.bool{r <==> FStar.Seq.Base.equal s1 s2}
(declare-fun Tm_arrow_70ef1e4b9388d8aa6e0d17c5aeed02a7 () Term)
(declare-fun FStar.Seq.Base.eq@tok () Term)


; </end encoding FStar.Seq.Base.eq>


; <Start encoding FStar.Seq.Base.lemma_eq_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_eq_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_eq_intro@tok () Term)


; </end encoding FStar.Seq.Base.lemma_eq_intro>


; <Start encoding FStar.Seq.Base.lemma_eq_refl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_eq_refl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_eq_refl@tok () Term)

; </end encoding FStar.Seq.Base.lemma_eq_refl>


; <Start encoding FStar.Seq.Base.lemma_eq_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_eq_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_eq_elim@tok () Term)

; </end encoding FStar.Seq.Base.lemma_eq_elim>


; <Start encoding FStar.Seq.Base.append_assoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.append_assoc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.append_assoc@tok () Term)

; </end encoding FStar.Seq.Base.append_assoc>


; <Start encoding FStar.Seq.Base.append_empty_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.append_empty_l (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.append_empty_l@tok () Term)

; </end encoding FStar.Seq.Base.append_empty_l>


; <Start encoding FStar.Seq.Base.append_empty_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.append_empty_r (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.append_empty_r@tok () Term)

; </end encoding FStar.Seq.Base.append_empty_r>


; <Start encoding FStar.Seq.Base.init_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.init_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.init_index@tok () Term)

; </end encoding FStar.Seq.Base.init_index>


; <Start encoding FStar.Seq.Base.init_index_>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.init_index_ (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.init_index_@tok () Term)



; </end encoding FStar.Seq.Base.init_index_>


; <Start encoding FStar.Seq.Base.init_ghost_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.init_ghost_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.init_ghost_index@tok () Term)

; </end encoding FStar.Seq.Base.init_ghost_index>


; <Start encoding FStar.Seq.Base.init_ghost_index_>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.init_ghost_index_ (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.init_ghost_index_@tok () Term)



; </end encoding FStar.Seq.Base.init_ghost_index_>


; <Start encoding FStar.Seq.Base.lemma_equal_instances_implies_equal_types>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_equal_instances_implies_equal_types (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_equal_instances_implies_equal_types@tok () Term)

; </end encoding FStar.Seq.Base.lemma_equal_instances_implies_equal_types>


; End Externals for interface FStar.Seq.Base


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End interface FStar.Seq.Base (261 decls; total size 18057)

;;; Start interface FStar.Seq.Properties

; Externals for interface FStar.Seq.Properties


; <Start encoding FStar.Seq.Properties.lseq>

(declare-fun FStar.Seq.Properties.lseq (Term Term) Term)

(declare-fun FStar.Seq.Properties.lseq@tok () Term)
(declare-fun Tm_refine_a0cd7d06c5da6444b6b51b319febde8e (Term Term) Term)

; </end encoding FStar.Seq.Properties.lseq>


; <Start encoding FStar.Seq.Properties.indexable>

(declare-fun FStar.Seq.Properties.indexable (Term Term Term) Term)
;;;;;;;;;;;;;;;;s: FStar.Seq.Base.seq a -> j: Prims.int -> Prims.logical
(declare-fun Tm_arrow_2c0367dd991d12c77178c7fe63f076c5 () Term)
(declare-fun FStar.Seq.Properties.indexable@tok () Term)

; </end encoding FStar.Seq.Properties.indexable>


; <Start encoding FStar.Seq.Properties.lemma_append_inj_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_append_inj_l (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_append_inj_l@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_append_inj_l>


; <Start encoding FStar.Seq.Properties.lemma_append_inj_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_append_inj_r (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_append_inj_r@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_append_inj_r>


; <Start encoding FStar.Seq.Properties.lemma_append_len_disj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_append_len_disj (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_append_len_disj@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_append_len_disj>


; <Start encoding FStar.Seq.Properties.lemma_append_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_append_inj (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_append_inj@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_append_inj>


; <Start encoding FStar.Seq.Properties.head>

(declare-fun Tm_refine_167ef714932ec832fb671890fc3eee6c (Term) Term)
(declare-fun FStar.Seq.Properties.head (Term Term) Term)

;;;;;;;;;;;;;;;;s: FStar.Seq.Base.seq a {FStar.Seq.Base.length s > 0} -> a
(declare-fun Tm_arrow_fde6b9111cb8aaf87a1b6689af62ed69 () Term)
(declare-fun FStar.Seq.Properties.head@tok () Term)


; </end encoding FStar.Seq.Properties.head>


; <Start encoding FStar.Seq.Properties.tail>


(declare-fun FStar.Seq.Properties.tail (Term Term) Term)

;;;;;;;;;;;;;;;;s: FStar.Seq.Base.seq a {FStar.Seq.Base.length s > 0} -> FStar.Seq.Base.seq a
(declare-fun Tm_arrow_3db93b3d63ab329f9ab58ee76fda4c87 () Term)
(declare-fun FStar.Seq.Properties.tail@tok () Term)


; </end encoding FStar.Seq.Properties.tail>


; <Start encoding FStar.Seq.Properties.lemma_head_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_head_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_head_append@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_head_append>


; <Start encoding FStar.Seq.Properties.lemma_tail_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_tail_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_tail_append@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_tail_append>


; <Start encoding FStar.Seq.Properties.last>


(declare-fun FStar.Seq.Properties.last (Term Term) Term)


(declare-fun FStar.Seq.Properties.last@tok () Term)


; </end encoding FStar.Seq.Properties.last>


; <Start encoding FStar.Seq.Properties.cons>

(declare-fun FStar.Seq.Properties.cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;x: a -> s: FStar.Seq.Base.seq a -> FStar.Seq.Base.seq a
(declare-fun Tm_arrow_62ad6018b578ef7ed3c0e74bdebff729 () Term)
(declare-fun FStar.Seq.Properties.cons@tok () Term)

; </end encoding FStar.Seq.Properties.cons>


; <Start encoding FStar.Seq.Properties.lemma_cons_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_cons_inj (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_cons_inj@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_cons_inj>


; <Start encoding FStar.Seq.Properties.split>

(declare-fun Tm_refine_17631fa6304dcc08d028bd475a6dd078 (Term Term) Term)
(declare-fun FStar.Seq.Properties.split (Term Term Term) Term)

;;;;;;;;;;;;;;;;s: FStar.Seq.Base.seq a -> i: Prims.nat{0 <= i /\ i <= FStar.Seq.Base.length s}   -> FStar.Seq.Base.seq a * FStar.Seq.Base.seq a
(declare-fun Tm_arrow_e8094a245058e1a3364fcb54e52c4b61 () Term)
(declare-fun FStar.Seq.Properties.split@tok () Term)


; </end encoding FStar.Seq.Properties.split>


; <Start encoding FStar.Seq.Properties.lemma_split>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_split (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_split@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_split>


; <Start encoding FStar.Seq.Properties.split_eq>


(declare-fun FStar.Seq.Properties.split_eq (Term Term Term) Term)

(declare-fun Tm_refine_78d42c5dbba01ee594272daa6bb0579c (Term Term) Term)
;;;;;;;;;;;;;;;;s: FStar.Seq.Base.seq a -> i: Prims.nat{0 <= i /\ i <= FStar.Seq.Base.length s}   -> Prims.Pure (FStar.Seq.Base.seq a * FStar.Seq.Base.seq a)
(declare-fun Tm_arrow_b88932abf1506cfe956c7a113bc65f4b () Term)
(declare-fun FStar.Seq.Properties.split_eq@tok () Term)



; </end encoding FStar.Seq.Properties.split_eq>


; <Start encoding FStar.Seq.Properties.count>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.count.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.count.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.count (Term Term Term) Term)
(declare-fun FStar.Seq.Properties.count@tok () Term)
;;;;;;;;;;;;;;;;x: a -> s: FStar.Seq.Base.seq a -> Prims.Tot Prims.nat
(declare-fun Tm_arrow_b68daf91c98458f9ea85290d85674a2e () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Seq.Properties.count; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(73,8-73,13); use=FStar.Seq.Properties.fsti(73,8-73,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Seq.Properties.count.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.Seq.Properties.count.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.Seq.Properties.count.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.Seq.Properties.count.fuel_instrumented))

:named @fuel_irrelevance_FStar.Seq.Properties.count.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Seq.Properties.count; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(73,8-73,13); use=FStar.Seq.Properties.fsti(73,8-73,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Seq.Properties.count @x0
@x1
@x2)
(FStar.Seq.Properties.count.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.Seq.Properties.count @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.Seq.Properties.count.fuel_instrumented))

:named @fuel_correspondence_FStar.Seq.Properties.count.fuel_instrumented))

; </end encoding FStar.Seq.Properties.count>


; <Start encoding FStar.Seq.Properties.mem>

(declare-fun FStar.Seq.Properties.mem (Term Term Term) Term)
;;;;;;;;;;;;;;;;x: a -> l: FStar.Seq.Base.seq a -> Prims.bool
(declare-fun Tm_arrow_8b9021eb78c56c0f1820182c3a3e44b5 () Term)
(declare-fun FStar.Seq.Properties.mem@tok () Term)

; </end encoding FStar.Seq.Properties.mem>


; <Start encoding FStar.Seq.Properties.mem_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.mem_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.mem_index@tok () Term)

; </end encoding FStar.Seq.Properties.mem_index>


; <Start encoding FStar.Seq.Properties.index_mem>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.index_mem.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.index_mem.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.index_mem (Term Term Term) Term)
(declare-fun FStar.Seq.Properties.index_mem@tok () Term)
(declare-fun Tm_refine_7c92df3cf71635bc41483532e738d828 (Term Term Term) Term)

;;;;;;;;;;;;;;;;x: a -> s: FStar.Seq.Base.seq a -> Prims.Pure Prims.nat
(declare-fun Tm_arrow_12def5646e9a05cc547dd67c2eeaec45 () Term)

;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Seq.Properties.index_mem; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(88,8-88,17); use=FStar.Seq.Properties.fsti(88,8-88,17)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Seq.Properties.index_mem.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.Seq.Properties.index_mem.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.Seq.Properties.index_mem.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.Seq.Properties.index_mem.fuel_instrumented))

:named @fuel_irrelevance_FStar.Seq.Properties.index_mem.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Seq.Properties.index_mem; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(88,8-88,17); use=FStar.Seq.Properties.fsti(88,8-88,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Seq.Properties.index_mem @x0
@x1
@x2)
(FStar.Seq.Properties.index_mem.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.Seq.Properties.index_mem @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.Seq.Properties.index_mem.fuel_instrumented))

:named @fuel_correspondence_FStar.Seq.Properties.index_mem.fuel_instrumented))

; </end encoding FStar.Seq.Properties.index_mem>


; <Start encoding FStar.Seq.Properties.swap>



(declare-fun FStar.Seq.Properties.swap (Term Term Term Term) Term)


;;;;;;;;;;;;;;;;s: FStar.Seq.Base.seq a ->     i: Prims.nat{i < FStar.Seq.Base.length s} ->     j: Prims.nat{j < FStar.Seq.Base.length s}   -> FStar.Seq.Base.seq a
(declare-fun Tm_arrow_ed5530d89236443143d2d084ddc97069 () Term)
(declare-fun FStar.Seq.Properties.swap@tok () Term)



; </end encoding FStar.Seq.Properties.swap>


; <Start encoding FStar.Seq.Properties.lemma_slice_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_slice_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_slice_append@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_slice_append>


; <Start encoding FStar.Seq.Properties.lemma_slice_first_in_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_slice_first_in_append (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_slice_first_in_append@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_slice_first_in_append>


; <Start encoding FStar.Seq.Properties.slice_upd>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.slice_upd (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.slice_upd@tok () Term)



; </end encoding FStar.Seq.Properties.slice_upd>


; <Start encoding FStar.Seq.Properties.upd_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.upd_slice (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.upd_slice@tok () Term)



; </end encoding FStar.Seq.Properties.upd_slice>


; <Start encoding FStar.Seq.Properties.lemma_append_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_append_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_append_cons@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_append_cons>


; <Start encoding FStar.Seq.Properties.lemma_tl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_tl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_tl@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_tl>


; <Start encoding FStar.Seq.Properties.sorted>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.sorted.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.sorted.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.sorted (Term Term Term) Term)
(declare-fun FStar.Seq.Properties.sorted@tok () Term)



;;;;;;;;;;;;;;;;f: (_: a -> _: a -> Prims.bool) -> s: FStar.Seq.Base.seq a -> Prims.Tot Prims.bool
(declare-fun Tm_arrow_28685b742721099a6ab3847e4434a96d () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Seq.Properties.sorted; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(125,8-125,14); use=FStar.Seq.Properties.fsti(125,8-125,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Seq.Properties.sorted.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.Seq.Properties.sorted.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.Seq.Properties.sorted.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.Seq.Properties.sorted.fuel_instrumented))

:named @fuel_irrelevance_FStar.Seq.Properties.sorted.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Seq.Properties.sorted; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(125,8-125,14); use=FStar.Seq.Properties.fsti(125,8-125,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Seq.Properties.sorted @x0
@x1
@x2)
(FStar.Seq.Properties.sorted.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.Seq.Properties.sorted @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.Seq.Properties.sorted.fuel_instrumented))

:named @fuel_correspondence_FStar.Seq.Properties.sorted.fuel_instrumented))

; </end encoding FStar.Seq.Properties.sorted>


; <Start encoding FStar.Seq.Properties.sorted_feq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.sorted_feq (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.sorted_feq@tok () Term)

; </end encoding FStar.Seq.Properties.sorted_feq>


; <Start encoding FStar.Seq.Properties.lemma_append_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_append_count (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_append_count@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_append_count>


; <Start encoding FStar.Seq.Properties.lemma_append_count_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_append_count_aux (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_append_count_aux@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_append_count_aux>


; <Start encoding FStar.Seq.Properties.lemma_mem_inversion>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_mem_inversion (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_mem_inversion@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_mem_inversion>


; <Start encoding FStar.Seq.Properties.lemma_mem_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_mem_count (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_mem_count@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_mem_count>


; <Start encoding FStar.Seq.Properties.lemma_count_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_count_slice (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_count_slice@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_count_slice>


; <Start encoding FStar.Seq.Properties.total_order>


(declare-fun FStar.Seq.Properties.total_order (Term Term) Term)

;;;;;;;;;;;;;;;;a: Prims.eqtype -> f: (_: a -> _: a -> Prims.bool) -> Prims.logical
(declare-fun Tm_arrow_1118b25cace7451b1e5dfdfe482dbb64 () Term)
(declare-fun FStar.Seq.Properties.total_order@tok () Term)





(declare-fun Tm_abs_01f32e6aaf7ac0d0cc4b683776152cee (Term Term Term) Term)

(declare-fun Tm_abs_cbb67fe00406c5e25c3d7764e9189af1 (Term Term) Term)








; </end encoding FStar.Seq.Properties.total_order>


; <Start encoding FStar.Seq.Properties.tot_ord>

(declare-fun FStar.Seq.Properties.tot_ord (Term) Term)

(declare-fun FStar.Seq.Properties.tot_ord@tok () Term)

(declare-fun Tm_refine_a01e88865b4bbd2f0a4bcb261b6760a8 (Term) Term)

; </end encoding FStar.Seq.Properties.tot_ord>


; <Start encoding FStar.Seq.Properties.sorted_concat_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.sorted_concat_lemma (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.sorted_concat_lemma@tok () Term)

; </end encoding FStar.Seq.Properties.sorted_concat_lemma>


; <Start encoding FStar.Seq.Properties.split_5>

(declare-fun Tm_refine_55108d29d63192475ca95f591039cc18 (Term Term Term) Term)
(declare-fun FStar.Seq.Properties.split_5 (Term Term Term Term) Term)

(declare-fun Tm_refine_03fdfb031367b218884098aa9d386676 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;s: FStar.Seq.Base.seq a -> i: Prims.nat -> j: Prims.nat{i < j && j < FStar.Seq.Base.length s}   -> Prims.Pure (FStar.Seq.Base.seq (FStar.Seq.Base.seq a))
(declare-fun Tm_arrow_1ab34f107de5525c681399e3c671c330 () Term)
(declare-fun FStar.Seq.Properties.split_5@tok () Term)


; </end encoding FStar.Seq.Properties.split_5>


; <Start encoding FStar.Seq.Properties.lemma_swap_permutes_aux_frag_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_permutes_aux_frag_eq (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_permutes_aux_frag_eq@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_swap_permutes_aux_frag_eq>


; <Start encoding FStar.Seq.Properties.lemma_swap_permutes_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_permutes_aux (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_permutes_aux@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_swap_permutes_aux>


; <Start encoding FStar.Seq.Properties.permutation>

(declare-fun FStar.Seq.Properties.permutation (Term Term Term) Term)
;;;;;;;;;;;;;;;;a: Prims.eqtype -> s1: FStar.Seq.Base.seq a -> s2: FStar.Seq.Base.seq a -> Prims.logical
(declare-fun Tm_arrow_05517904f5779069bb79d90a352f1386 () Term)
(declare-fun FStar.Seq.Properties.permutation@tok () Term)

(declare-fun Tm_abs_0de6cd599146a4faa203cbf0596fd5e3 (Term Term Term) Term)

; </end encoding FStar.Seq.Properties.permutation>


; <Start encoding FStar.Seq.Properties.lemma_swap_permutes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_permutes (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_permutes@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_swap_permutes>


; <Start encoding FStar.Seq.Properties.perm_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.perm_len (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.perm_len@tok () Term)

; </end encoding FStar.Seq.Properties.perm_len>


; <Start encoding FStar.Seq.Properties.cons_perm>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.cons_perm (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.cons_perm@tok () Term)

; </end encoding FStar.Seq.Properties.cons_perm>


; <Start encoding FStar.Seq.Properties.lemma_mem_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_mem_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_mem_append@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_mem_append>


; <Start encoding FStar.Seq.Properties.lemma_slice_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_slice_cons (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_slice_cons@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_slice_cons>


; <Start encoding FStar.Seq.Properties.lemma_slice_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_slice_snoc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_slice_snoc@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_slice_snoc>


; <Start encoding FStar.Seq.Properties.lemma_ordering_lo_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_ordering_lo_snoc (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_ordering_lo_snoc@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_ordering_lo_snoc>


; <Start encoding FStar.Seq.Properties.lemma_ordering_hi_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_ordering_hi_cons (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_ordering_hi_cons@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_ordering_hi_cons>


; <Start encoding FStar.Seq.Properties.swap_frame_lo>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.swap_frame_lo (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.swap_frame_lo@tok () Term)

; </end encoding FStar.Seq.Properties.swap_frame_lo>


; <Start encoding FStar.Seq.Properties.swap_frame_lo'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.swap_frame_lo_ (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.swap_frame_lo_@tok () Term)

; </end encoding FStar.Seq.Properties.swap_frame_lo'>


; <Start encoding FStar.Seq.Properties.swap_frame_hi>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.swap_frame_hi (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.swap_frame_hi@tok () Term)

; </end encoding FStar.Seq.Properties.swap_frame_hi>


; <Start encoding FStar.Seq.Properties.lemma_swap_slice_commute>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_slice_commute (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_slice_commute@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_swap_slice_commute>


; <Start encoding FStar.Seq.Properties.lemma_swap_permutes_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_permutes_slice (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_permutes_slice@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_swap_permutes_slice>


; <Start encoding FStar.Seq.Properties.splice>



(declare-fun FStar.Seq.Properties.splice (Term Term Term Term Term) Term)


;;;;;;;;;;;;;;;;s1: FStar.Seq.Base.seq a ->     i: Prims.nat ->     s2: FStar.Seq.Base.seq a {FStar.Seq.Base.length s1 = FStar.Seq.Base.length s2} ->     j: Prims.nat{i <= j /\ j <= FStar.Seq.Base.length s2}   -> FStar.Seq.Base.seq a
(declare-fun Tm_arrow_c43a25ef505b9db21532cdb95f3c9f68 () Term)
(declare-fun FStar.Seq.Properties.splice@tok () Term)



; </end encoding FStar.Seq.Properties.splice>


; <Start encoding FStar.Seq.Properties.replace_subseq>


(declare-fun Tm_refine_5542011d20872a6178aad9a072f1b686 (Term Term Term) Term)
(declare-fun FStar.Seq.Properties.replace_subseq (Term Term Term Term Term) Term)


;;;;;;;;;;;;;;;;s: FStar.Seq.Base.seq a ->     i: Prims.nat ->     j: Prims.nat{i <= j /\ j <= FStar.Seq.Base.length s} ->     sub: FStar.Seq.Base.seq a {FStar.Seq.Base.length sub == j - i}   -> FStar.Seq.Base.seq a
(declare-fun Tm_arrow_9fa775abc8f8f9c4e6df626212cddc6a () Term)
(declare-fun FStar.Seq.Properties.replace_subseq@tok () Term)



; </end encoding FStar.Seq.Properties.replace_subseq>


; <Start encoding FStar.Seq.Properties.splice_refl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.splice_refl (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.splice_refl@tok () Term)

; </end encoding FStar.Seq.Properties.splice_refl>


; <Start encoding FStar.Seq.Properties.lemma_swap_splice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_splice (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_swap_splice@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_swap_splice>


; <Start encoding FStar.Seq.Properties.lemma_seq_frame_hi>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_frame_hi (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_frame_hi@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_seq_frame_hi>


; <Start encoding FStar.Seq.Properties.lemma_seq_frame_lo>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_frame_lo (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_frame_lo@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_seq_frame_lo>


; <Start encoding FStar.Seq.Properties.lemma_tail_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_tail_slice (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_tail_slice@tok () Term)
(declare-fun Tm_refine_b138bd5848d4184f7632587e6e4bcf9f (Term Term Term) Term)

; </end encoding FStar.Seq.Properties.lemma_tail_slice>


; <Start encoding FStar.Seq.Properties.lemma_weaken_frame_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_weaken_frame_right (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_weaken_frame_right@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_weaken_frame_right>


; <Start encoding FStar.Seq.Properties.lemma_weaken_frame_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_weaken_frame_left (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_weaken_frame_left@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_weaken_frame_left>


; <Start encoding FStar.Seq.Properties.lemma_trans_frame>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_trans_frame (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_trans_frame@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_trans_frame>


; <Start encoding FStar.Seq.Properties.lemma_weaken_perm_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_weaken_perm_left (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_weaken_perm_left@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_weaken_perm_left>


; <Start encoding FStar.Seq.Properties.lemma_weaken_perm_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_weaken_perm_right (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_weaken_perm_right@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_weaken_perm_right>


; <Start encoding FStar.Seq.Properties.lemma_trans_perm>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_trans_perm (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_trans_perm@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_trans_perm>


; <Start encoding FStar.Seq.Properties.snoc>

(declare-fun FStar.Seq.Properties.snoc (Term Term Term) Term)
;;;;;;;;;;;;;;;;s: FStar.Seq.Base.seq a -> x: a -> FStar.Seq.Base.seq a
(declare-fun Tm_arrow_f9b27de7c4505538c6110afe14403cc8 () Term)
(declare-fun FStar.Seq.Properties.snoc@tok () Term)

; </end encoding FStar.Seq.Properties.snoc>


; <Start encoding FStar.Seq.Properties.lemma_cons_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_cons_snoc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_cons_snoc@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_cons_snoc>


; <Start encoding FStar.Seq.Properties.lemma_tail_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_tail_snoc (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_tail_snoc@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_tail_snoc>


; <Start encoding FStar.Seq.Properties.lemma_snoc_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_snoc_inj (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_snoc_inj@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_snoc_inj>


; <Start encoding FStar.Seq.Properties.lemma_mem_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_mem_snoc (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_mem_snoc@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_mem_snoc>


; <Start encoding FStar.Seq.Properties.find_l>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.find_l.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.find_l.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.find_l (Term Term Term) Term)
(declare-fun FStar.Seq.Properties.find_l@tok () Term)

(declare-fun Tm_refine_aba7638072c8f1ba6a01b95ec6f9a485 (Term Term) Term)



;;;;;;;;;;;;;;;;f: (_: a -> Prims.bool) -> l: FStar.Seq.Base.seq a   -> Prims.Tot (o: FStar.Pervasives.Native.option a {Some? o ==> f (Some?.v o)})
(declare-fun Tm_arrow_fd183dc9552028fd54abfbe4a84f515a () Term)

;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Seq.Properties.find_l; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(330,8-330,14); use=FStar.Seq.Properties.fsti(330,8-330,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Seq.Properties.find_l.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.Seq.Properties.find_l.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.Seq.Properties.find_l.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.Seq.Properties.find_l.fuel_instrumented))

:named @fuel_irrelevance_FStar.Seq.Properties.find_l.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Seq.Properties.find_l; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(330,8-330,14); use=FStar.Seq.Properties.fsti(330,8-330,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Seq.Properties.find_l @x0
@x1
@x2)
(FStar.Seq.Properties.find_l.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.Seq.Properties.find_l @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.Seq.Properties.find_l.fuel_instrumented))

:named @fuel_correspondence_FStar.Seq.Properties.find_l.fuel_instrumented))

; </end encoding FStar.Seq.Properties.find_l>


; <Start encoding FStar.Seq.Properties.ghost_find_l>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.ghost_find_l.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.ghost_find_l.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.ghost_find_l (Term Term Term) Term)
(declare-fun FStar.Seq.Properties.ghost_find_l@tok () Term)
;;;;;;;;;;;;;;;;_: a -> Prims.GTot Prims.bool
(declare-fun Tm_ghost_arrow_9a34a9deaac3ca72ad48c3ec79b6656c (Term) Term)




;;;;;;;;;;;;;;;;f: (_: a -> Prims.GTot Prims.bool) -> l: FStar.Seq.Base.seq a   -> Prims.GTot (o: FStar.Pervasives.Native.option a {Some? o ==> f (Some?.v o)})
(declare-fun Tm_ghost_arrow_3f8a537d0d54200d690f80a370cf9031 () Term)

;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Seq.Properties.ghost_find_l; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(337,8-337,20); use=FStar.Seq.Properties.fsti(337,8-337,20)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Seq.Properties.ghost_find_l.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.Seq.Properties.ghost_find_l.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.Seq.Properties.ghost_find_l.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.Seq.Properties.ghost_find_l.fuel_instrumented))

:named @fuel_irrelevance_FStar.Seq.Properties.ghost_find_l.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Seq.Properties.ghost_find_l; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(337,8-337,20); use=FStar.Seq.Properties.fsti(337,8-337,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Seq.Properties.ghost_find_l @x0
@x1
@x2)
(FStar.Seq.Properties.ghost_find_l.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.Seq.Properties.ghost_find_l @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.Seq.Properties.ghost_find_l.fuel_instrumented))

:named @fuel_correspondence_FStar.Seq.Properties.ghost_find_l.fuel_instrumented))

; </end encoding FStar.Seq.Properties.ghost_find_l>


; <Start encoding FStar.Seq.Properties.find_append_some>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.find_append_some (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.find_append_some@tok () Term)

; </end encoding FStar.Seq.Properties.find_append_some>


; <Start encoding FStar.Seq.Properties.find_append_none>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.find_append_none (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.find_append_none@tok () Term)

; </end encoding FStar.Seq.Properties.find_append_none>


; <Start encoding FStar.Seq.Properties.find_append_none_s2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.find_append_none_s2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.find_append_none_s2@tok () Term)

; </end encoding FStar.Seq.Properties.find_append_none_s2>


; <Start encoding FStar.Seq.Properties.find_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.find_snoc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.find_snoc@tok () Term)

; </end encoding FStar.Seq.Properties.find_snoc>


; <Start encoding FStar.Seq.Properties.un_snoc>

(declare-fun Tm_refine_5739deb21d8cba89243fec27b35b7ef0 (Term) Term)
(declare-fun FStar.Seq.Properties.un_snoc (Term Term) Term)

(declare-fun Tm_refine_16326afaeb5f4d93ab294cc4a965de3e (Term Term) Term)
;;;;;;;;;;;;;;;;s: FStar.Seq.Base.seq a {FStar.Seq.Base.length s <> 0}   -> r:     (FStar.Seq.Base.seq a * a)       { s ==         FStar.Seq.Properties.snoc (FStar.Pervasives.Native.fst r) (FStar.Pervasives.Native.snd r) }
(declare-fun Tm_arrow_30c2910b2510bbce2598a79ba00a0209 () Term)
(declare-fun FStar.Seq.Properties.un_snoc@tok () Term)



; </end encoding FStar.Seq.Properties.un_snoc>


; <Start encoding FStar.Seq.Properties.un_snoc_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.un_snoc_snoc (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.un_snoc_snoc@tok () Term)

; </end encoding FStar.Seq.Properties.un_snoc_snoc>


; <Start encoding FStar.Seq.Properties.find_r>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.find_r.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.find_r.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.find_r (Term Term Term) Term)
(declare-fun FStar.Seq.Properties.find_r@tok () Term)







;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Seq.Properties.find_r; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(369,8-369,14); use=FStar.Seq.Properties.fsti(369,8-369,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Seq.Properties.find_r.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.Seq.Properties.find_r.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.Seq.Properties.find_r.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.Seq.Properties.find_r.fuel_instrumented))

:named @fuel_irrelevance_FStar.Seq.Properties.find_r.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Seq.Properties.find_r; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(369,8-369,14); use=FStar.Seq.Properties.fsti(369,8-369,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Seq.Properties.find_r @x0
@x1
@x2)
(FStar.Seq.Properties.find_r.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.Seq.Properties.find_r @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.Seq.Properties.find_r.fuel_instrumented))

:named @fuel_correspondence_FStar.Seq.Properties.find_r.fuel_instrumented))

; </end encoding FStar.Seq.Properties.find_r>


; <Start encoding FStar.Seq.Properties.found>

(declare-fun FStar.Seq.Properties.found (Term) Term)
;;;;;;;;;;;;;;;;i: Prims.nat -> Prims.logical
(declare-fun Tm_arrow_591bcdc53dc583ecc77b1bc5436f9a59 () Term)
(declare-fun FStar.Seq.Properties.found@tok () Term)

; </end encoding FStar.Seq.Properties.found>


; <Start encoding FStar.Seq.Properties.seq_find_aux>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.seq_find_aux.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.seq_find_aux.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.seq_find_aux (Term Term Term Term) Term)
(declare-fun FStar.Seq.Properties.seq_find_aux@tok () Term)


(declare-fun Tm_refine_564e05c43cb7c1f4e1de1a4fb2fd28c8 (Term Term Term) Term)


(declare-fun Tm_refine_5e8ab89510578a938a38bd5dfb813b93 (Term Term Term) Term)









;;;;;;;;;;;;;;;;f: (_: a -> Prims.bool) -> l: FStar.Seq.Base.seq a -> ctr: Prims.nat{ctr <= FStar.Seq.Base.length l}   -> Prims.Pure (FStar.Pervasives.Native.option a)
(declare-fun Tm_arrow_c2dc7826f3281f473541797eb2d714b7 () Term)



;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Seq.Properties.seq_find_aux; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(379,8-379,20); use=FStar.Seq.Properties.fsti(379,8-379,20)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Seq.Properties.seq_find_aux.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4)
(FStar.Seq.Properties.seq_find_aux.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4))
 

:pattern ((FStar.Seq.Properties.seq_find_aux.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4))
:qid @fuel_irrelevance_FStar.Seq.Properties.seq_find_aux.fuel_instrumented))

:named @fuel_irrelevance_FStar.Seq.Properties.seq_find_aux.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Seq.Properties.seq_find_aux; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(379,8-379,20); use=FStar.Seq.Properties.fsti(379,8-379,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Seq.Properties.seq_find_aux @x0
@x1
@x2
@x3)
(FStar.Seq.Properties.seq_find_aux.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3))
 

:pattern ((FStar.Seq.Properties.seq_find_aux @x0
@x1
@x2
@x3))
:qid @fuel_correspondence_FStar.Seq.Properties.seq_find_aux.fuel_instrumented))

:named @fuel_correspondence_FStar.Seq.Properties.seq_find_aux.fuel_instrumented))

; </end encoding FStar.Seq.Properties.seq_find_aux>


; <Start encoding FStar.Seq.Properties.seq_find>


(declare-fun FStar.Seq.Properties.seq_find (Term Term Term) Term)




;;;;;;;;;;;;;;;;f: (_: a -> Prims.bool) -> l: FStar.Seq.Base.seq a -> Prims.Pure (FStar.Pervasives.Native.option a)
(declare-fun Tm_arrow_fa1508f34cdf614c6772d290f5ddf827 () Term)
(declare-fun FStar.Seq.Properties.seq_find@tok () Term)





; </end encoding FStar.Seq.Properties.seq_find>


; <Start encoding FStar.Seq.Properties.find_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.find_mem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.find_mem@tok () Term)

; </end encoding FStar.Seq.Properties.find_mem>


; <Start encoding FStar.Seq.Properties.for_all>


(declare-fun FStar.Seq.Properties.for_all (Term Term Term) Term)


(declare-fun Tm_refine_307fd373d8b3749096cf164b41cf1984 (Term Term Term) Term)
;;;;;;;;;;;;;;;;f: (_: a -> Prims.bool) -> l: FStar.Seq.Base.seq a -> Prims.Pure Prims.bool
(declare-fun Tm_arrow_098d0ddce18f722cb743337c9d7dd0b9 () Term)
(declare-fun FStar.Seq.Properties.for_all@tok () Term)




(declare-fun Tm_abs_e818836335067047224d0c19c4cabb2d (Term Term) Term)

; </end encoding FStar.Seq.Properties.for_all>


; <Start encoding FStar.Seq.Properties.seq_mem_k>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.seq_mem_k (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.seq_mem_k@tok () Term)


; </end encoding FStar.Seq.Properties.seq_mem_k>


; <Start encoding FStar.Seq.Properties.seq_to_list>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.seq_to_list.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.seq_to_list.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.seq_to_list (Term Term) Term)
(declare-fun FStar.Seq.Properties.seq_to_list@tok () Term)
(declare-fun Tm_refine_c4e3a92f9bd1d01a07e4fb66c5de2e7e (Term Term) Term)

;;;;;;;;;;;;;;;;s: FStar.Seq.Base.seq a   -> Prims.Tot (l: Prims.list a {FStar.List.Tot.Base.length l = FStar.Seq.Base.length s})
(declare-fun Tm_arrow_7d1aeb9cf9244f8c50e0ad901486a03b () Term)

;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Seq.Properties.seq_to_list; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(425,8-425,19); use=FStar.Seq.Properties.fsti(425,8-425,19)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.Seq.Properties.seq_to_list.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.Seq.Properties.seq_to_list.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.Seq.Properties.seq_to_list.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.Seq.Properties.seq_to_list.fuel_instrumented))

:named @fuel_irrelevance_FStar.Seq.Properties.seq_to_list.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Seq.Properties.seq_to_list; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(425,8-425,19); use=FStar.Seq.Properties.fsti(425,8-425,19)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Seq.Properties.seq_to_list @x0
@x1)
(FStar.Seq.Properties.seq_to_list.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.Seq.Properties.seq_to_list @x0
@x1))
:qid @fuel_correspondence_FStar.Seq.Properties.seq_to_list.fuel_instrumented))

:named @fuel_correspondence_FStar.Seq.Properties.seq_to_list.fuel_instrumented))

; </end encoding FStar.Seq.Properties.seq_to_list>


; <Start encoding FStar.Seq.Properties.seq_of_list>

(declare-fun FStar.Seq.Properties.seq_of_list (Term Term) Term)
(declare-fun Tm_refine_d2d1ea66f2b3a92c2deb42edcbb784ce (Term Term) Term)
;;;;;;;;;;;;;;;;l: Prims.list a -> s: FStar.Seq.Base.seq a {FStar.List.Tot.Base.length l = FStar.Seq.Base.length s}
(declare-fun Tm_arrow_4966fa2986a35d9c0803c863a2768cbd () Term)
(declare-fun FStar.Seq.Properties.seq_of_list@tok () Term)


; </end encoding FStar.Seq.Properties.seq_of_list>


; <Start encoding FStar.Seq.Properties.lemma_seq_of_list_induction>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_of_list_induction (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_of_list_induction@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_seq_of_list_induction>


; <Start encoding FStar.Seq.Properties.lemma_seq_list_bij>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_list_bij (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_list_bij@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_seq_list_bij>


; <Start encoding FStar.Seq.Properties.lemma_list_seq_bij>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_list_seq_bij (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_list_seq_bij@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_list_seq_bij>


; <Start encoding FStar.Seq.Properties.createL_post>

(declare-fun FStar.Seq.Properties.createL_post (Term Term Term) Term)
;;;;;;;;;;;;;;;;l: Prims.list a -> s: FStar.Seq.Base.seq a -> Prims.GTot Type
(declare-fun Tm_arrow_befeea9093c61a572da65bfe7ce35cff () Term)
(declare-fun FStar.Seq.Properties.createL_post@tok () Term)
(declare-fun Tm_refine_1780a0fddfda88c43d203b562c6d3f5b () Term)
(declare-fun Tm_refine_8c2e524fd0f5ac690c4c816ad7d8a461 (Term Term Term) Term)


; </end encoding FStar.Seq.Properties.createL_post>


; <Start encoding FStar.Seq.Properties.createL>

(declare-fun FStar.Seq.Properties.createL (Term Term) Term)

(declare-fun Tm_refine_29f54a8a92d732b7f4111928d707db68 (Term Term) Term)
;;;;;;;;;;;;;;;;l: Prims.list a -> Prims.Pure (FStar.Seq.Base.seq a)
(declare-fun Tm_arrow_6a7bb2ee242e4d89b8744d9965334de3 () Term)
(declare-fun FStar.Seq.Properties.createL@tok () Term)



; </end encoding FStar.Seq.Properties.createL>


; <Start encoding FStar.Seq.Properties.lemma_index_is_nth>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_index_is_nth (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_index_is_nth@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_index_is_nth>


; <Start encoding FStar.Seq.Properties.contains>

(declare-fun FStar.Seq.Properties.contains (Term Term Term) Term)
;;;;;;;;;;;;;;;;s: FStar.Seq.Base.seq a -> x: a -> Type
(declare-fun Tm_arrow_65d0102b1211a5d233193433129106a1 () Term)
(declare-fun FStar.Seq.Properties.contains@tok () Term)

; </end encoding FStar.Seq.Properties.contains>


; <Start encoding FStar.Seq.Properties.contains_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.contains_intro (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.contains_intro@tok () Term)

; </end encoding FStar.Seq.Properties.contains_intro>


; <Start encoding FStar.Seq.Properties.contains_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.contains_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.contains_elim@tok () Term)

; </end encoding FStar.Seq.Properties.contains_elim>


; <Start encoding FStar.Seq.Properties.lemma_contains_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_contains_empty (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_contains_empty@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_contains_empty>


; <Start encoding FStar.Seq.Properties.lemma_contains_singleton>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_contains_singleton (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_contains_singleton@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_contains_singleton>


; <Start encoding FStar.Seq.Properties.append_contains_equiv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.append_contains_equiv (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.append_contains_equiv@tok () Term)

; </end encoding FStar.Seq.Properties.append_contains_equiv>


; <Start encoding FStar.Seq.Properties.contains_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.contains_snoc (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.contains_snoc@tok () Term)

; </end encoding FStar.Seq.Properties.contains_snoc>


; <Start encoding FStar.Seq.Properties.lemma_find_l_contains>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_find_l_contains (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_find_l_contains@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_find_l_contains>


; <Start encoding FStar.Seq.Properties.contains_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.contains_cons (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.contains_cons@tok () Term)

; </end encoding FStar.Seq.Properties.contains_cons>


; <Start encoding FStar.Seq.Properties.append_cons_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.append_cons_snoc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.append_cons_snoc@tok () Term)

; </end encoding FStar.Seq.Properties.append_cons_snoc>


; <Start encoding FStar.Seq.Properties.append_slices>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.append_slices (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.append_slices@tok () Term)

; </end encoding FStar.Seq.Properties.append_slices>


; <Start encoding FStar.Seq.Properties.find_l_none_no_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.find_l_none_no_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.find_l_none_no_index@tok () Term)

; </end encoding FStar.Seq.Properties.find_l_none_no_index>


; <Start encoding FStar.Seq.Properties.suffix_of>

(declare-fun FStar.Seq.Properties.suffix_of (Term Term Term) Term)
;;;;;;;;;;;;;;;;s_suff: FStar.Seq.Base.seq a -> s: FStar.Seq.Base.seq a -> Prims.logical
(declare-fun Tm_arrow_2ed6082b86d605508c94c4b8a46966f5 () Term)
(declare-fun FStar.Seq.Properties.suffix_of@tok () Term)
;;;;;;;;;;;;;;;;s_pref: FStar.Seq.Base.seq a -> Prims.GTot Type
(declare-fun Tm_arrow_1b131a144041a50a604cc69ec18e173a (Term) Term)
(declare-fun Tm_abs_1a72f90f7650698378a85f71c4dab2bc (Term Term Term) Term)

; </end encoding FStar.Seq.Properties.suffix_of>


; <Start encoding FStar.Seq.Properties.cons_head_tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.cons_head_tail (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.cons_head_tail@tok () Term)


; </end encoding FStar.Seq.Properties.cons_head_tail>


; <Start encoding FStar.Seq.Properties.head_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.head_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.head_cons@tok () Term)

; </end encoding FStar.Seq.Properties.head_cons>


; <Start encoding FStar.Seq.Properties.suffix_of_tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.suffix_of_tail (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.suffix_of_tail@tok () Term)


; </end encoding FStar.Seq.Properties.suffix_of_tail>


; <Start encoding FStar.Seq.Properties.index_cons_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.index_cons_l (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.index_cons_l@tok () Term)

; </end encoding FStar.Seq.Properties.index_cons_l>


; <Start encoding FStar.Seq.Properties.index_cons_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.index_cons_r (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.index_cons_r@tok () Term)

; </end encoding FStar.Seq.Properties.index_cons_r>


; <Start encoding FStar.Seq.Properties.append_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.append_cons (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.append_cons@tok () Term)

; </end encoding FStar.Seq.Properties.append_cons>


; <Start encoding FStar.Seq.Properties.index_tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.index_tail (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.index_tail@tok () Term)

; </end encoding FStar.Seq.Properties.index_tail>


; <Start encoding FStar.Seq.Properties.mem_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.mem_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.mem_cons@tok () Term)

; </end encoding FStar.Seq.Properties.mem_cons>


; <Start encoding FStar.Seq.Properties.snoc_slice_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.snoc_slice_index (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.snoc_slice_index@tok () Term)
(declare-fun Tm_refine_095c5722edf0f79bcd7dce7bd084c7b5 (Term Term Term) Term)

; </end encoding FStar.Seq.Properties.snoc_slice_index>


; <Start encoding FStar.Seq.Properties.cons_index_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.cons_index_slice (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.cons_index_slice@tok () Term)
(declare-fun Tm_refine_09d2e9ab3b9c121b24316d151747e281 (Term Term Term) Term)
(declare-fun Tm_refine_ddd44b85040d1947cca83550b7e21966 (Term) Term)

; </end encoding FStar.Seq.Properties.cons_index_slice>


; <Start encoding FStar.Seq.Properties.slice_is_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.slice_is_empty (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.slice_is_empty@tok () Term)


; </end encoding FStar.Seq.Properties.slice_is_empty>


; <Start encoding FStar.Seq.Properties.slice_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.slice_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.slice_length@tok () Term)

; </end encoding FStar.Seq.Properties.slice_length>


; <Start encoding FStar.Seq.Properties.slice_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.slice_slice (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.slice_slice@tok () Term)

(declare-fun Tm_refine_1ba8fd8bb363097813064c67740b2de5 (Term Term Term) Term)

; </end encoding FStar.Seq.Properties.slice_slice>


; <Start encoding FStar.Seq.Properties.lemma_seq_of_list_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_of_list_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_of_list_index@tok () Term)


; </end encoding FStar.Seq.Properties.lemma_seq_of_list_index>


; <Start encoding FStar.Seq.Properties.of_list>

(declare-fun FStar.Seq.Properties.of_list (Term Term) Term)
;;;;;;;;;;;;;;;;l: Prims.list a -> FStar.Seq.Base.seq a
(declare-fun Tm_arrow_474463878fff5c7c9c02e4f0b8b84aa8 () Term)
(declare-fun FStar.Seq.Properties.of_list@tok () Term)

; </end encoding FStar.Seq.Properties.of_list>


; <Start encoding FStar.Seq.Properties.seq_of_list_tl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.seq_of_list_tl (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.seq_of_list_tl@tok () Term)

; </end encoding FStar.Seq.Properties.seq_of_list_tl>


; <Start encoding FStar.Seq.Properties.mem_seq_of_list>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.mem_seq_of_list (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.mem_seq_of_list@tok () Term)

; </end encoding FStar.Seq.Properties.mem_seq_of_list>


; <Start encoding FStar.Seq.Properties.explode_and>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.explode_and.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.explode_and.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.explode_and (Term Term Term Term) Term)
(declare-fun FStar.Seq.Properties.explode_and@tok () Term)
(declare-fun Tm_refine_5885c715bf599d471c43c6b7dcb2413b (Term Term) Term)
(declare-fun Tm_refine_c731267dd71b747abfd9fc75f6f2da81 (Term Term Term) Term)




;;;;;;;;;;;;;;;;i: Prims.nat ->     s: FStar.Seq.Base.seq a {i <= FStar.Seq.Base.length s} ->     l: Prims.list a {FStar.List.Tot.Base.length l + i = FStar.Seq.Base.length s}   -> Prims.Tot Type
(declare-fun Tm_arrow_62bce6f622c5bc90fd46048dee6dae55 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Seq.Properties.explode_and; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(667,8-667,19); use=FStar.Seq.Properties.fsti(667,8-667,19)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Seq.Properties.explode_and.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4)
(FStar.Seq.Properties.explode_and.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4))
 

:pattern ((FStar.Seq.Properties.explode_and.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4))
:qid @fuel_irrelevance_FStar.Seq.Properties.explode_and.fuel_instrumented))

:named @fuel_irrelevance_FStar.Seq.Properties.explode_and.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Seq.Properties.explode_and; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(667,8-667,19); use=FStar.Seq.Properties.fsti(667,8-667,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Seq.Properties.explode_and @x0
@x1
@x2
@x3)
(FStar.Seq.Properties.explode_and.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3))
 

:pattern ((FStar.Seq.Properties.explode_and @x0
@x1
@x2
@x3))
:qid @fuel_correspondence_FStar.Seq.Properties.explode_and.fuel_instrumented))

:named @fuel_correspondence_FStar.Seq.Properties.explode_and.fuel_instrumented))

; </end encoding FStar.Seq.Properties.explode_and>


; <Start encoding FStar.Seq.Properties.pointwise_and>

(declare-fun Tm_refine_9f068c7f6ce275579028a195ac18485b (Term) Term)
(declare-fun Tm_refine_1ad818e6438a897337e89a3053cb2002 (Term Term) Term)
(declare-fun FStar.Seq.Properties.pointwise_and (Term Term Term) Term)


;;;;;;;;;;;;;;;;s: FStar.Seq.Base.seq _ {0 <= FStar.Seq.Base.length s} ->     l: Prims.list _ {FStar.List.Tot.Base.length l + 0 = FStar.Seq.Base.length s}   -> Type
(declare-fun Tm_arrow_1d69c34f503e87805d9fa1b40bc9b696 () Term)
(declare-fun FStar.Seq.Properties.pointwise_and@tok () Term)



; </end encoding FStar.Seq.Properties.pointwise_and>


; <Start encoding FStar.Seq.Properties.intro_of_list'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.intro_of_list_ (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.intro_of_list_@tok () Term)

; </end encoding FStar.Seq.Properties.intro_of_list'>


; <Start encoding FStar.Seq.Properties.intro_of_list>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.intro_of_list (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.intro_of_list@tok () Term)

; </end encoding FStar.Seq.Properties.intro_of_list>


; <Start encoding FStar.Seq.Properties.elim_of_list'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.elim_of_list_ (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.elim_of_list_@tok () Term)

; </end encoding FStar.Seq.Properties.elim_of_list'>


; <Start encoding FStar.Seq.Properties.elim_of_list>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.elim_of_list (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.elim_of_list@tok () Term)

; </end encoding FStar.Seq.Properties.elim_of_list>


; <Start encoding FStar.Seq.Properties.sortWith>


(declare-fun FStar.Seq.Properties.sortWith (Term Term Term) Term)

;;;;;;;;;;;;;;;;f: (_: a -> _: a -> Prims.int) -> s: FStar.Seq.Base.seq a -> FStar.Seq.Base.seq a
(declare-fun Tm_arrow_783d577ed6adadfd234f2ce68178463f () Term)
(declare-fun FStar.Seq.Properties.sortWith@tok () Term)


; </end encoding FStar.Seq.Properties.sortWith>


; <Start encoding FStar.Seq.Properties.lemma_seq_to_list_permutation>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_to_list_permutation (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_to_list_permutation@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_seq_to_list_permutation>


; <Start encoding FStar.Seq.Properties.lemma_seq_of_list_permutation>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_of_list_permutation (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_of_list_permutation@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_seq_of_list_permutation>


; <Start encoding FStar.Seq.Properties.lemma_seq_of_list_sorted>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_of_list_sorted (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_of_list_sorted@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_seq_of_list_sorted>


; <Start encoding FStar.Seq.Properties.lemma_seq_sortwith_correctness>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_sortwith_correctness (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.lemma_seq_sortwith_correctness@tok () Term)

; </end encoding FStar.Seq.Properties.lemma_seq_sortwith_correctness>


; <Start encoding FStar.Seq.Properties.sort_lseq>

(declare-fun FStar.Seq.Properties.sort_lseq (Term Term Term Term) Term)
(declare-fun Tm_refine_896d0573468d5c87de125067e75d7d47 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;f: FStar.Seq.Properties.tot_ord a -> s: FStar.Seq.Properties.lseq a n   -> s':     FStar.Seq.Properties.lseq a n       {FStar.Seq.Properties.sorted f s' /\ FStar.Seq.Properties.permutation a s s'}
(declare-fun Tm_arrow_3fb7de3746e0ee65d4a1a51ab385c639 () Term)
(declare-fun FStar.Seq.Properties.sort_lseq@tok () Term)

;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name FStar.Seq.Properties.sort_lseq; Namespace FStar.Seq.Properties
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.List.Tot.Base.compare_of_bool@tok))
:named @kick_partial_app_168a5a7933bf2aec40b9569f3322d078))

; </end encoding FStar.Seq.Properties.sort_lseq>


; <Start encoding FStar.Seq.Properties.foldr>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.foldr.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.foldr.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.foldr (Term Term Term Term Term) Term)
(declare-fun FStar.Seq.Properties.foldr@tok () Term)



;;;;;;;;;;;;;;;;f: (_: b -> _: a -> a) -> s: FStar.Seq.Base.seq b -> init: a -> Prims.Tot a
(declare-fun Tm_arrow_d44e7807ff692a4b5f624a4c31f6a34b () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Seq.Properties.foldr; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(748,8-748,13); use=FStar.Seq.Properties.fsti(748,8-748,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Seq.Properties.foldr.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5)
(FStar.Seq.Properties.foldr.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4
@x5))
 

:pattern ((FStar.Seq.Properties.foldr.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5))
:qid @fuel_irrelevance_FStar.Seq.Properties.foldr.fuel_instrumented))

:named @fuel_irrelevance_FStar.Seq.Properties.foldr.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Seq.Properties.foldr; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(748,8-748,13); use=FStar.Seq.Properties.fsti(748,8-748,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Seq.Properties.foldr @x0
@x1
@x2
@x3
@x4)
(FStar.Seq.Properties.foldr.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3
@x4))
 

:pattern ((FStar.Seq.Properties.foldr @x0
@x1
@x2
@x3
@x4))
:qid @fuel_correspondence_FStar.Seq.Properties.foldr.fuel_instrumented))

:named @fuel_correspondence_FStar.Seq.Properties.foldr.fuel_instrumented))

; </end encoding FStar.Seq.Properties.foldr>


; <Start encoding FStar.Seq.Properties.foldr_snoc>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Seq.Properties.foldr_snoc.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Seq.Properties.foldr_snoc.fuel_instrumented_token () Term)
(declare-fun FStar.Seq.Properties.foldr_snoc (Term Term Term Term Term) Term)
(declare-fun FStar.Seq.Properties.foldr_snoc@tok () Term)




;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Seq.Properties.foldr_snoc; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(753,8-753,18); use=FStar.Seq.Properties.fsti(753,8-753,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Seq.Properties.foldr_snoc.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5)
(FStar.Seq.Properties.foldr_snoc.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4
@x5))
 

:pattern ((FStar.Seq.Properties.foldr_snoc.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4
@x5))
:qid @fuel_irrelevance_FStar.Seq.Properties.foldr_snoc.fuel_instrumented))

:named @fuel_irrelevance_FStar.Seq.Properties.foldr_snoc.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Seq.Properties.foldr_snoc; Namespace FStar.Seq.Properties
(assert (! 
;; def=FStar.Seq.Properties.fsti(753,8-753,18); use=FStar.Seq.Properties.fsti(753,8-753,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Seq.Properties.foldr_snoc @x0
@x1
@x2
@x3
@x4)
(FStar.Seq.Properties.foldr_snoc.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3
@x4))
 

:pattern ((FStar.Seq.Properties.foldr_snoc @x0
@x1
@x2
@x3
@x4))
:qid @fuel_correspondence_FStar.Seq.Properties.foldr_snoc.fuel_instrumented))

:named @fuel_correspondence_FStar.Seq.Properties.foldr_snoc.fuel_instrumented))

; </end encoding FStar.Seq.Properties.foldr_snoc>


; <Start encoding FStar.Seq.Properties.map_seq>


(declare-fun FStar.Seq.Properties.map_seq (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;f: (_: a -> b) -> s: FStar.Seq.Base.seq a -> FStar.Seq.Base.seq b
(declare-fun Tm_arrow_5f9288474a8f301ac883b79bab9ed39c () Term)
(declare-fun FStar.Seq.Properties.map_seq@tok () Term)

; </end encoding FStar.Seq.Properties.map_seq>


; <Start encoding FStar.Seq.Properties.map_seq_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.map_seq_len (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.map_seq_len@tok () Term)

; </end encoding FStar.Seq.Properties.map_seq_len>


; <Start encoding FStar.Seq.Properties.map_seq_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.map_seq_index (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.map_seq_index@tok () Term)

; </end encoding FStar.Seq.Properties.map_seq_index>


; <Start encoding FStar.Seq.Properties.map_seq_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Properties.map_seq_append (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Properties.map_seq_append@tok () Term)

; </end encoding FStar.Seq.Properties.map_seq_append>


; End Externals for interface FStar.Seq.Properties


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End interface FStar.Seq.Properties (842 decls; total size 76758)

;;; Start module FStar.Seq

; Externals for module FStar.Seq


; End Externals for module FStar.Seq


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End module FStar.Seq (3 decls; total size 1140)

;;; Start interface FStar.Sealed

; Externals for interface FStar.Sealed


; <Start encoding FStar.Sealed.sealed>

(declare-fun FStar.Sealed.sealed (Term) Term)

(declare-fun FStar.Sealed.sealed@tok () Term)

; </end encoding FStar.Sealed.sealed>


; <Start encoding FStar.Sealed.sealed_singl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Sealed.sealed_singl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Sealed.sealed_singl@tok () Term)

; </end encoding FStar.Sealed.sealed_singl>


; <Start encoding FStar.Sealed.seal>

(declare-fun FStar.Sealed.seal (Term Term) Term)
;;;;;;;;;;;;;;;;x: a -> FStar.Sealed.sealed a
(declare-fun Tm_arrow_202c0385508095b22536f7b176783182 () Term)
(declare-fun FStar.Sealed.seal@tok () Term)

; </end encoding FStar.Sealed.seal>


; End Externals for interface FStar.Sealed


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End interface FStar.Sealed (17 decls; total size 1934)

;;; Start interface FStar.Range

; Externals for interface FStar.Range


; <Start encoding FStar.Range.__range>

(declare-fun FStar.Range.__range () Term)

; </end encoding FStar.Range.__range>


; <Start encoding FStar.Range.range>

(declare-fun FStar.Range.range () Term)

; </end encoding FStar.Range.range>


; <Start encoding FStar.Range.range_0>

(declare-fun FStar.Range.range_0 (Dummy_sort) Term)

; </end encoding FStar.Range.range_0>


; <Start encoding FStar.Range.mk_range>

(declare-fun FStar.Range.mk_range (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;file: Prims.string ->     from_line: Prims.int ->     from_col: Prims.int ->     to_line: Prims.int ->     to_col: Prims.int   -> FStar.Range.range
(declare-fun Tm_arrow_2d3d853349c0a35c0e0c8d13086384ea () Term)
(declare-fun FStar.Range.mk_range@tok () Term)

; </end encoding FStar.Range.mk_range>


; <Start encoding FStar.Range.labeled>

(declare-fun FStar.Range.labeled (Term Term Term) Term)
;;;;;;;;;;;;;;;;r: FStar.Range.range -> msg: Prims.string -> b: Type -> Type
(declare-fun Tm_arrow_ab5899212fc4c148181589be7fd78af1 () Term)
(declare-fun FStar.Range.labeled@tok () Term)

; </end encoding FStar.Range.labeled>


; End Externals for interface FStar.Range


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End interface FStar.Range (22 decls; total size 2272)

;;; Start module FStar.Preorder

; Externals for module FStar.Preorder


; <Start encoding FStar.Preorder.relation>

(declare-fun FStar.Preorder.relation (Term) Term)

(declare-fun FStar.Preorder.relation@tok () Term)
;;;;;;;;;;;;;;;;_: a -> _: a -> Type
(declare-fun Tm_arrow_a19f9d49348d4e0038f0ded87d87802f (Term) Term)

; </end encoding FStar.Preorder.relation>


; <Start encoding FStar.Preorder.predicate>

(declare-fun FStar.Preorder.predicate (Term) Term)

(declare-fun FStar.Preorder.predicate@tok () Term)


; </end encoding FStar.Preorder.predicate>


; <Start encoding FStar.Preorder.reflexive>

(declare-fun FStar.Preorder.reflexive (Term Term) Term)
;;;;;;;;;;;;;;;;rel: FStar.Preorder.relation a -> Prims.logical
(declare-fun Tm_arrow_8e677a33afbeb812aa3779b7bdd0131c () Term)
(declare-fun FStar.Preorder.reflexive@tok () Term)

(declare-fun Tm_abs_041ca30bb30651295f49214aabfc20e1 (Term Term) Term)

; </end encoding FStar.Preorder.reflexive>


; <Start encoding FStar.Preorder.transitive>

(declare-fun FStar.Preorder.transitive (Term Term) Term)

(declare-fun FStar.Preorder.transitive@tok () Term)

(declare-fun Tm_abs_525ac99f317c80c2a25889a544a8753a (Term Term Term Term) Term)

(declare-fun Tm_abs_20d4094a6595eea2d6f8dba526584b13 (Term Term Term) Term)

(declare-fun Tm_abs_fe51396746e5c4e834cef57991c4de56 (Term Term) Term)

; </end encoding FStar.Preorder.transitive>


; <Start encoding FStar.Preorder.preorder_rel>

(declare-fun FStar.Preorder.preorder_rel (Term Term) Term)

(declare-fun FStar.Preorder.preorder_rel@tok () Term)

; </end encoding FStar.Preorder.preorder_rel>


; <Start encoding FStar.Preorder.preorder>

(declare-fun FStar.Preorder.preorder (Term) Term)

(declare-fun FStar.Preorder.preorder@tok () Term)
(declare-fun Tm_refine_bd10f09297e0e7dc08314f7d9211801c (Term) Term)

; </end encoding FStar.Preorder.preorder>


; <Start encoding FStar.Preorder.stable>


(declare-fun FStar.Preorder.stable (Term Term Term) Term)

;;;;;;;;;;;;;;;;p: FStar.Preorder.predicate a -> rel: FStar.Preorder.relation a {FStar.Preorder.preorder_rel rel}   -> Prims.logical
(declare-fun Tm_arrow_88036d0811eee3361efd6229bae2556d () Term)
(declare-fun FStar.Preorder.stable@tok () Term)


(declare-fun Tm_abs_cd75e79d2823f61d656a9d90e99d6551 (Term Term Term Term) Term)

(declare-fun Tm_abs_c6795a80dc788b30d6c7864438942482 (Term Term Term) Term)

; </end encoding FStar.Preorder.stable>


; End Externals for module FStar.Preorder


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End module FStar.Preorder (56 decls; total size 3492)

;;; Start interface FStar.Calc

; Externals for interface FStar.Calc


; <Start encoding FStar.Calc.calc_chain>

(declare-fun FStar.Calc.calc_chain (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;rs: Prims.list (FStar.Preorder.relation a) -> x: a -> y: a -> Type
(declare-fun Tm_arrow_10ae2c328e1918eb5ddde4274ac6d32a () Term)
(declare-fun FStar.Calc.calc_chain@tok () Term)

; </end encoding FStar.Calc.calc_chain>


; <Start encoding FStar.Calc.calc_chain_related>

(declare-fun FStar.Calc.calc_chain_related (Term Term Term Term) Term)

(declare-fun FStar.Calc.calc_chain_related@tok () Term)

; </end encoding FStar.Calc.calc_chain_related>


; <Start encoding FStar.Calc.calc_chain_compatible>

(declare-fun FStar.Calc.calc_chain_compatible (Term Term Term) Term)
;;;;;;;;;;;;;;;;rs: Prims.list (FStar.Preorder.relation t) -> p: FStar.Preorder.relation t -> Type
(declare-fun Tm_arrow_5d25af94b872513cc464e94bbc6a8348 () Term)
(declare-fun FStar.Calc.calc_chain_compatible@tok () Term)

; </end encoding FStar.Calc.calc_chain_compatible>


; <Start encoding FStar.Calc.calc_pack>

(declare-fun FStar.Calc.calc_pack (Term Term Term Term) Term)

(declare-fun FStar.Calc.calc_pack@tok () Term)

; </end encoding FStar.Calc.calc_pack>


; <Start encoding FStar.Calc.calc_init>

(declare-fun FStar.Calc.calc_init (Term Term) Term)
;;;;;;;;;;;;;;;;x: a -> FStar.Calc.calc_pack [] x x
(declare-fun Tm_arrow_f5787f683bb2167ab433229a103fa97e () Term)
(declare-fun FStar.Calc.calc_init@tok () Term)

; </end encoding FStar.Calc.calc_init>


; <Start encoding FStar.Calc.calc_step>

;;;;;;;;;;;;;;;;_: Prims.unit -> FStar.Calc.calc_pack rs x y
(declare-fun Tm_arrow_cfbfcb3d713af6cfef9741902fbd7eae (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;_: Prims.unit -> Prims.squash (p y z)
(declare-fun Tm_arrow_924fe8a596e8d1052263cdb50ea0b3f9 (Term Term Term) Term)
(declare-fun FStar.Calc.calc_step (Term Term Term Term Term Term Term Term) Term)


;;;;;;;;;;;;;;;;p: FStar.Preorder.relation a ->     z: a ->     pf: (_: Prims.unit -> FStar.Calc.calc_pack rs x y) ->     j: (_: Prims.unit -> Prims.squash (p y z))   -> FStar.Calc.calc_pack (p :: rs) x z
(declare-fun Tm_arrow_c19042f2eb54c518b0ae4e8fbbb1b795 () Term)
(declare-fun FStar.Calc.calc_step@tok () Term)

; </end encoding FStar.Calc.calc_step>


; <Start encoding FStar.Calc.calc_finish>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Calc.calc_finish (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Calc.calc_finish@tok () Term)

; </end encoding FStar.Calc.calc_finish>


; <Start encoding FStar.Calc.calc_push_impl>


(declare-fun FStar.Calc.calc_push_impl (Term Term Term) Term)


;;;;;;;;;;;;;;;;f: (_: Prims.squash p -> Prims.GTot (Prims.squash q)) -> Prims.squash (p ==> q)
(declare-fun Tm_arrow_8e288ee6e01162bc0e93f91b1d4ccf81 () Term)
(declare-fun FStar.Calc.calc_push_impl@tok () Term)


; </end encoding FStar.Calc.calc_push_impl>


; End Externals for interface FStar.Calc


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End interface FStar.Calc (50 decls; total size 4070)

;;; Start module FStar.Mul

; Externals for module FStar.Mul


; <Start encoding FStar.Mul.op_Star>

(declare-fun FStar.Mul.op_Star (Term Term) Term)

(declare-fun FStar.Mul.op_Star@tok () Term)

; </end encoding FStar.Mul.op_Star>


; End Externals for module FStar.Mul


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End module FStar.Mul (8 decls; total size 1311)

;;; Start module FStar.Math.Lib

; Externals for module FStar.Math.Lib


; <Skipped FStar.Math.Lib.lemma_div_def/>


; <Start encoding FStar.Math.Lib.lemma_div_def>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lib.lemma_div_def (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lib.lemma_div_def@tok () Term)

; </end encoding FStar.Math.Lib.lemma_div_def>


; <Start encoding FStar.Math.Lib.mul_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lib.mul_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lib.mul_lemma@tok () Term)

; </end encoding FStar.Math.Lib.mul_lemma>


; <Start encoding FStar.Math.Lib.mul_lemma'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lib.mul_lemma_ (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lib.mul_lemma_@tok () Term)

; </end encoding FStar.Math.Lib.mul_lemma'>


; <Start encoding FStar.Math.Lib.mul_div_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lib.mul_div_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lib.mul_div_lemma@tok () Term)

; </end encoding FStar.Math.Lib.mul_div_lemma>


; <Skipped FStar.Math.Lib.slash_decr_axiom/>


; <Start encoding FStar.Math.Lib.slash_decr_axiom>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lib.slash_decr_axiom (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lib.slash_decr_axiom@tok () Term)

; </end encoding FStar.Math.Lib.slash_decr_axiom>


; <Start encoding FStar.Math.Lib.lemma_mul_minus_distr_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lib.lemma_mul_minus_distr_l (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lib.lemma_mul_minus_distr_l@tok () Term)

; </end encoding FStar.Math.Lib.lemma_mul_minus_distr_l>


; <Skipped />


; <Skipped FStar.Math.Lib.slash_star_axiom/>


; <Start encoding FStar.Math.Lib.slash_star_axiom>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lib.slash_star_axiom (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lib.slash_star_axiom@tok () Term)

; </end encoding FStar.Math.Lib.slash_star_axiom>


; <Skipped />


; <Skipped FStar.Math.Lib.log_2/>


; <Start encoding FStar.Math.Lib.log_2>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Math.Lib.log_2.fuel_instrumented (Fuel Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Math.Lib.log_2.fuel_instrumented_token () Term)
(declare-fun FStar.Math.Lib.log_2 (Term) Term)
(declare-fun FStar.Math.Lib.log_2@tok () Term)
;;;;;;;;;;;;;;;;x: Prims.pos -> Prims.nat
(declare-fun Tm_arrow_195a91d0390990c5da9b9b2c7b2e9a5f () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Math.Lib.log_2; Namespace FStar.Math.Lib
(assert (! 
;; def=FStar.Math.Lib.fst(54,8-54,13); use=FStar.Math.Lib.fst(54,8-54,13)
(forall ((@u0 Fuel) (@x1 Term))
 (! (= (FStar.Math.Lib.log_2.fuel_instrumented (SFuel @u0)
@x1)
(FStar.Math.Lib.log_2.fuel_instrumented ZFuel
@x1))
 

:pattern ((FStar.Math.Lib.log_2.fuel_instrumented (SFuel @u0)
@x1))
:qid @fuel_irrelevance_FStar.Math.Lib.log_2.fuel_instrumented))

:named @fuel_irrelevance_FStar.Math.Lib.log_2.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Math.Lib.log_2; Namespace FStar.Math.Lib
(assert (! 
;; def=FStar.Math.Lib.fst(54,8-54,13); use=FStar.Math.Lib.fst(54,8-54,13)
(forall ((@x0 Term))
 (! (= (FStar.Math.Lib.log_2 @x0)
(FStar.Math.Lib.log_2.fuel_instrumented MaxFuel
@x0))
 

:pattern ((FStar.Math.Lib.log_2 @x0))
:qid @fuel_correspondence_FStar.Math.Lib.log_2.fuel_instrumented))

:named @fuel_correspondence_FStar.Math.Lib.log_2.fuel_instrumented))

; </end encoding FStar.Math.Lib.log_2>


; <Skipped FStar.Math.Lib.powx/>


; <Start encoding FStar.Math.Lib.powx>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Math.Lib.powx.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Math.Lib.powx.fuel_instrumented_token () Term)
(declare-fun FStar.Math.Lib.powx (Term Term) Term)
(declare-fun FStar.Math.Lib.powx@tok () Term)
;;;;;;;;;;;;;;;;x: Prims.int -> n: Prims.nat -> Prims.int
(declare-fun Tm_arrow_97e79e8898be25d1baac7492eb8157a8 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Math.Lib.powx; Namespace FStar.Math.Lib
(assert (! 
;; def=FStar.Math.Lib.fst(59,8-59,12); use=FStar.Math.Lib.fst(59,8-59,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.Math.Lib.powx.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.Math.Lib.powx.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.Math.Lib.powx.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.Math.Lib.powx.fuel_instrumented))

:named @fuel_irrelevance_FStar.Math.Lib.powx.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Math.Lib.powx; Namespace FStar.Math.Lib
(assert (! 
;; def=FStar.Math.Lib.fst(59,8-59,12); use=FStar.Math.Lib.fst(59,8-59,12)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Math.Lib.powx @x0
@x1)
(FStar.Math.Lib.powx.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.Math.Lib.powx @x0
@x1))
:qid @fuel_correspondence_FStar.Math.Lib.powx.fuel_instrumented))

:named @fuel_correspondence_FStar.Math.Lib.powx.fuel_instrumented))

; </end encoding FStar.Math.Lib.powx>


; <Skipped FStar.Math.Lib.abs/>


; <Start encoding FStar.Math.Lib.abs>

(declare-fun FStar.Math.Lib.abs (Term) Term)
(declare-fun Tm_refine_5b706f1316bc4c0722dc2171363a324f (Term) Term)
;;;;;;;;;;;;;;;;x: Prims.int -> y: Prims.int{(x >= 0 ==> y = x) /\ (x < 0 ==> y = - x)}
(declare-fun Tm_arrow_485462bf1365ac4f0407149110b772cd () Term)
(declare-fun FStar.Math.Lib.abs@tok () Term)


; </end encoding FStar.Math.Lib.abs>


; <Skipped FStar.Math.Lib.max/>


; <Start encoding FStar.Math.Lib.max>

(declare-fun FStar.Math.Lib.max (Term Term) Term)
(declare-fun Tm_refine_3b1de445e68d5a7cbfc9e637b6d5fe5c (Term Term) Term)
;;;;;;;;;;;;;;;;x: Prims.int -> y: Prims.int -> z: Prims.int{(x >= y ==> z = x) /\ (x < y ==> z = y)}
(declare-fun Tm_arrow_6cac7a49c19aab6d14a44dce4ddd50d7 () Term)
(declare-fun FStar.Math.Lib.max@tok () Term)


; </end encoding FStar.Math.Lib.max>


; <Skipped FStar.Math.Lib.min/>


; <Start encoding FStar.Math.Lib.min>

(declare-fun FStar.Math.Lib.min (Term Term) Term)
(declare-fun Tm_refine_75a39246caf92bd7ba0c54b533ac97ba (Term Term) Term)
;;;;;;;;;;;;;;;;x: Prims.int -> y: Prims.int -> z: Prims.int{(x >= y ==> z = y) /\ (x < y ==> z = x)}
(declare-fun Tm_arrow_f1c63d0f3ff3d4c0a4e173563f61a3ec () Term)
(declare-fun FStar.Math.Lib.min@tok () Term)


; </end encoding FStar.Math.Lib.min>


; <Skipped FStar.Math.Lib.div/>


; <Start encoding FStar.Math.Lib.div>

(declare-fun FStar.Math.Lib.div (Term Term) Term)
(declare-fun Tm_refine_2a75ac9e9041407930877285ccf479d9 (Term) Term)
;;;;;;;;;;;;;;;;a: Prims.int -> b: Prims.pos -> c: Prims.int{(a < 0 ==> c < 0) /\ (a >= 0 ==> c >= 0)}
(declare-fun Tm_arrow_bb819be7118d7bfb2cedbf3c6477c362 () Term)
(declare-fun FStar.Math.Lib.div@tok () Term)


; </end encoding FStar.Math.Lib.div>


; <Skipped FStar.Math.Lib.div_non_eucl/>


; <Start encoding FStar.Math.Lib.div_non_eucl>

(declare-fun FStar.Math.Lib.div_non_eucl (Term Term) Term)
(declare-fun Tm_refine_0ffeb4b35eb66c9dc7f43d49d6f24837 (Term Term) Term)
;;;;;;;;;;;;;;;;a: Prims.int -> b: Prims.pos -> q: Prims.int{(a >= 0 ==> q = a / b) /\ (a < 0 ==> q = - (- a) / b)}
(declare-fun Tm_arrow_7c4dc753d10246d9d92341a1295260f4 () Term)
(declare-fun FStar.Math.Lib.div_non_eucl@tok () Term)


; </end encoding FStar.Math.Lib.div_non_eucl>


; <Skipped FStar.Math.Lib.shift_left/>


; <Start encoding FStar.Math.Lib.shift_left>

(declare-fun FStar.Math.Lib.shift_left (Term Term) Term)
(declare-fun Tm_refine_180a7ec928fc00449a9ff97fd83eb9f7 (Term Term) Term)
;;;;;;;;;;;;;;;;v: Prims.int -> i: Prims.nat -> res: Prims.int{res = v * Prims.pow2 i}
(declare-fun Tm_arrow_ebb8ce92eba15a16c00c7e434e88c84b () Term)
(declare-fun FStar.Math.Lib.shift_left@tok () Term)


; </end encoding FStar.Math.Lib.shift_left>


; <Skipped FStar.Math.Lib.arithmetic_shift_right/>


; <Start encoding FStar.Math.Lib.arithmetic_shift_right>

(declare-fun FStar.Math.Lib.arithmetic_shift_right (Term Term) Term)
(declare-fun Tm_refine_1b8188dd620bafffed7e311591823814 (Term Term) Term)
;;;;;;;;;;;;;;;;v: Prims.int -> i: Prims.nat -> res: Prims.int{res = FStar.Math.Lib.div v (Prims.pow2 i)}
(declare-fun Tm_arrow_0d2ab070c39795db6825f9a2ab12fa9a () Term)
(declare-fun FStar.Math.Lib.arithmetic_shift_right@tok () Term)


; </end encoding FStar.Math.Lib.arithmetic_shift_right>


; <Skipped FStar.Math.Lib.signed_modulo/>


; <Start encoding FStar.Math.Lib.signed_modulo>

(declare-fun FStar.Math.Lib.signed_modulo (Term Term) Term)
(declare-fun Tm_refine_7f910f581ef6c422e545ac01d1c8b2f5 (Term Term) Term)
;;;;;;;;;;;;;;;;v: Prims.int -> p: Prims.pos -> res: Prims.int{res = v - FStar.Math.Lib.div_non_eucl v p * p}
(declare-fun Tm_arrow_735d78cef45a99c351b2596c50444f63 () Term)
(declare-fun FStar.Math.Lib.signed_modulo@tok () Term)


; </end encoding FStar.Math.Lib.signed_modulo>


; <Skipped FStar.Math.Lib.op_Plus_Percent/>


; <Start encoding FStar.Math.Lib.op_Plus_Percent>

(declare-fun FStar.Math.Lib.op_Plus_Percent (Term Term) Term)
(declare-fun Tm_refine_d653f98e8ce399d5b7ea191c117fe516 (Term Term) Term)
;;;;;;;;;;;;;;;;a: Prims.int -> p: Prims.pos   -> res: Prims.int{(a >= 0 ==> res = a % p) /\ (a < 0 ==> res = - (- a) % p)}
(declare-fun Tm_arrow_47a9b4ba9fff686aea1b155fa584e4a2 () Term)
(declare-fun FStar.Math.Lib.op_Plus_Percent@tok () Term)


; </end encoding FStar.Math.Lib.op_Plus_Percent>


; <Skipped FStar.Math.Lib.powx_lemma1/>


; <Start encoding FStar.Math.Lib.powx_lemma1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lib.powx_lemma1 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lib.powx_lemma1@tok () Term)

; </end encoding FStar.Math.Lib.powx_lemma1>


; <Skipped FStar.Math.Lib.powx_lemma2/>


; <Start encoding FStar.Math.Lib.powx_lemma2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lib.powx_lemma2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lib.powx_lemma2@tok () Term)

; </end encoding FStar.Math.Lib.powx_lemma2>


; <Skipped FStar.Math.Lib.abs_mul_lemma/>


; <Start encoding FStar.Math.Lib.abs_mul_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lib.abs_mul_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lib.abs_mul_lemma@tok () Term)

; </end encoding FStar.Math.Lib.abs_mul_lemma>


; <Skipped FStar.Math.Lib.signed_modulo_property/>


; <Start encoding FStar.Math.Lib.signed_modulo_property>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lib.signed_modulo_property (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lib.signed_modulo_property@tok () Term)

; </end encoding FStar.Math.Lib.signed_modulo_property>


; <Skipped FStar.Math.Lib.div_non_eucl_decr_lemma/>


; <Start encoding FStar.Math.Lib.div_non_eucl_decr_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lib.div_non_eucl_decr_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lib.div_non_eucl_decr_lemma@tok () Term)

; </end encoding FStar.Math.Lib.div_non_eucl_decr_lemma>


; <Skipped FStar.Math.Lib.div_non_eucl_bigger_denom_lemma/>


; <Start encoding FStar.Math.Lib.div_non_eucl_bigger_denom_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lib.div_non_eucl_bigger_denom_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lib.div_non_eucl_bigger_denom_lemma@tok () Term)

; </end encoding FStar.Math.Lib.div_non_eucl_bigger_denom_lemma>


; End Externals for module FStar.Math.Lib


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End module FStar.Math.Lib (158 decls; total size 13784)

;;; Start module FStar.Math.Lemmas

; Externals for module FStar.Math.Lemmas


; <Skipped />


; <Skipped FStar.Math.Lemmas.euclidean_div_axiom/>


; <Start encoding FStar.Math.Lemmas.euclidean_div_axiom>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.euclidean_div_axiom (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.euclidean_div_axiom@tok () Term)

; </end encoding FStar.Math.Lemmas.euclidean_div_axiom>


; <Skipped FStar.Math.Lemmas.lemma_eucl_div_bound/>


; <Start encoding FStar.Math.Lemmas.lemma_eucl_div_bound>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_eucl_div_bound (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_eucl_div_bound@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_eucl_div_bound>


; <Skipped FStar.Math.Lemmas.lemma_mult_le_left/>


; <Start encoding FStar.Math.Lemmas.lemma_mult_le_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_le_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_le_left@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mult_le_left>


; <Skipped FStar.Math.Lemmas.lemma_mult_le_right/>


; <Start encoding FStar.Math.Lemmas.lemma_mult_le_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_le_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_le_right@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mult_le_right>


; <Skipped FStar.Math.Lemmas.lemma_mult_lt_left/>


; <Start encoding FStar.Math.Lemmas.lemma_mult_lt_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_left@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mult_lt_left>


; <Skipped FStar.Math.Lemmas.lemma_mult_lt_right/>


; <Start encoding FStar.Math.Lemmas.lemma_mult_lt_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_right@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mult_lt_right>


; <Start encoding FStar.Math.Lemmas.lemma_mult_lt_sqr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_sqr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_sqr@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mult_lt_sqr>


; <Skipped FStar.Math.Lemmas.swap_mul/>


; <Start encoding FStar.Math.Lemmas.swap_mul>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.swap_mul (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.swap_mul@tok () Term)

; </end encoding FStar.Math.Lemmas.swap_mul>


; <Skipped FStar.Math.Lemmas.lemma_cancel_mul/>


; <Start encoding FStar.Math.Lemmas.lemma_cancel_mul>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_cancel_mul (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_cancel_mul@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_cancel_mul>


; <Skipped FStar.Math.Lemmas.distributivity_add_left/>


; <Start encoding FStar.Math.Lemmas.distributivity_add_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.distributivity_add_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.distributivity_add_left@tok () Term)

; </end encoding FStar.Math.Lemmas.distributivity_add_left>


; <Skipped FStar.Math.Lemmas.distributivity_add_right/>


; <Start encoding FStar.Math.Lemmas.distributivity_add_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.distributivity_add_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.distributivity_add_right@tok () Term)

; </end encoding FStar.Math.Lemmas.distributivity_add_right>


; <Skipped FStar.Math.Lemmas.paren_mul_left/>


; <Start encoding FStar.Math.Lemmas.paren_mul_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.paren_mul_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.paren_mul_left@tok () Term)

; </end encoding FStar.Math.Lemmas.paren_mul_left>


; <Skipped FStar.Math.Lemmas.paren_mul_right/>


; <Start encoding FStar.Math.Lemmas.paren_mul_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.paren_mul_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.paren_mul_right@tok () Term)

; </end encoding FStar.Math.Lemmas.paren_mul_right>


; <Skipped FStar.Math.Lemmas.paren_add_left/>


; <Start encoding FStar.Math.Lemmas.paren_add_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.paren_add_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.paren_add_left@tok () Term)

; </end encoding FStar.Math.Lemmas.paren_add_left>


; <Skipped FStar.Math.Lemmas.paren_add_right/>


; <Start encoding FStar.Math.Lemmas.paren_add_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.paren_add_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.paren_add_right@tok () Term)

; </end encoding FStar.Math.Lemmas.paren_add_right>


; <Skipped FStar.Math.Lemmas.addition_is_associative/>


; <Start encoding FStar.Math.Lemmas.addition_is_associative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.addition_is_associative (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.addition_is_associative@tok () Term)

; </end encoding FStar.Math.Lemmas.addition_is_associative>


; <Skipped FStar.Math.Lemmas.subtraction_is_distributive/>


; <Start encoding FStar.Math.Lemmas.subtraction_is_distributive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.subtraction_is_distributive (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.subtraction_is_distributive@tok () Term)

; </end encoding FStar.Math.Lemmas.subtraction_is_distributive>


; <Skipped FStar.Math.Lemmas.swap_add_plus_minus/>


; <Start encoding FStar.Math.Lemmas.swap_add_plus_minus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.swap_add_plus_minus (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.swap_add_plus_minus@tok () Term)

; </end encoding FStar.Math.Lemmas.swap_add_plus_minus>


; <Skipped FStar.Math.Lemmas.neg_mul_left/>


; <Start encoding FStar.Math.Lemmas.neg_mul_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.neg_mul_left (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.neg_mul_left@tok () Term)

; </end encoding FStar.Math.Lemmas.neg_mul_left>


; <Skipped FStar.Math.Lemmas.neg_mul_right/>


; <Start encoding FStar.Math.Lemmas.neg_mul_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.neg_mul_right (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.neg_mul_right@tok () Term)

; </end encoding FStar.Math.Lemmas.neg_mul_right>


; <Skipped FStar.Math.Lemmas.swap_neg_mul/>


; <Start encoding FStar.Math.Lemmas.swap_neg_mul>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.swap_neg_mul (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.swap_neg_mul@tok () Term)

; </end encoding FStar.Math.Lemmas.swap_neg_mul>


; <Skipped FStar.Math.Lemmas.distributivity_sub_left/>


; <Start encoding FStar.Math.Lemmas.distributivity_sub_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.distributivity_sub_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.distributivity_sub_left@tok () Term)

; </end encoding FStar.Math.Lemmas.distributivity_sub_left>


; <Skipped FStar.Math.Lemmas.distributivity_sub_right/>


; <Start encoding FStar.Math.Lemmas.distributivity_sub_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.distributivity_sub_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.distributivity_sub_right@tok () Term)

; </end encoding FStar.Math.Lemmas.distributivity_sub_right>


; <Skipped FStar.Math.Lemmas.mul_binds_tighter/>


; <Start encoding FStar.Math.Lemmas.mul_binds_tighter>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_binds_tighter (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_binds_tighter@tok () Term)

; </end encoding FStar.Math.Lemmas.mul_binds_tighter>


; <Skipped FStar.Math.Lemmas.lemma_abs_mul/>


; <Start encoding FStar.Math.Lemmas.lemma_abs_mul>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_abs_mul (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_abs_mul@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_abs_mul>


; <Skipped FStar.Math.Lemmas.lemma_abs_bound/>


; <Start encoding FStar.Math.Lemmas.lemma_abs_bound>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_abs_bound (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_abs_bound@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_abs_bound>


; <Skipped FStar.Math.Lemmas.mul_ineq1/>


; <Start encoding FStar.Math.Lemmas.mul_ineq1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_ineq1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_ineq1@tok () Term)

; </end encoding FStar.Math.Lemmas.mul_ineq1>


; <Start encoding FStar.Math.Lemmas.add_zero_left_is_same>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.add_zero_left_is_same (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.add_zero_left_is_same@tok () Term)

; </end encoding FStar.Math.Lemmas.add_zero_left_is_same>


; <Start encoding FStar.Math.Lemmas.add_zero_right_is_same>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.add_zero_right_is_same (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.add_zero_right_is_same@tok () Term)

; </end encoding FStar.Math.Lemmas.add_zero_right_is_same>


; <Start encoding FStar.Math.Lemmas.mul_one_left_is_same>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_one_left_is_same (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_one_left_is_same@tok () Term)

; </end encoding FStar.Math.Lemmas.mul_one_left_is_same>


; <Start encoding FStar.Math.Lemmas.mul_one_right_is_same>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_one_right_is_same (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_one_right_is_same@tok () Term)

; </end encoding FStar.Math.Lemmas.mul_one_right_is_same>


; <Start encoding FStar.Math.Lemmas.mul_zero_left_is_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_zero_left_is_zero (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_zero_left_is_zero@tok () Term)

; </end encoding FStar.Math.Lemmas.mul_zero_left_is_zero>


; <Start encoding FStar.Math.Lemmas.mul_zero_right_is_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_zero_right_is_zero (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_zero_right_is_zero@tok () Term)

; </end encoding FStar.Math.Lemmas.mul_zero_right_is_zero>


; <Skipped FStar.Math.Lemmas.nat_times_nat_is_nat/>


; <Start encoding FStar.Math.Lemmas.nat_times_nat_is_nat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.nat_times_nat_is_nat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.nat_times_nat_is_nat@tok () Term)

; </end encoding FStar.Math.Lemmas.nat_times_nat_is_nat>


; <Skipped FStar.Math.Lemmas.pos_times_pos_is_pos/>


; <Start encoding FStar.Math.Lemmas.pos_times_pos_is_pos>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pos_times_pos_is_pos (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pos_times_pos_is_pos@tok () Term)

; </end encoding FStar.Math.Lemmas.pos_times_pos_is_pos>


; <Skipped FStar.Math.Lemmas.nat_over_pos_is_nat/>


; <Start encoding FStar.Math.Lemmas.nat_over_pos_is_nat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.nat_over_pos_is_nat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.nat_over_pos_is_nat@tok () Term)

; </end encoding FStar.Math.Lemmas.nat_over_pos_is_nat>


; <Skipped FStar.Math.Lemmas.nat_plus_nat_equal_zero_lemma/>


; <Start encoding FStar.Math.Lemmas.nat_plus_nat_equal_zero_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.nat_plus_nat_equal_zero_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.nat_plus_nat_equal_zero_lemma@tok () Term)

; </end encoding FStar.Math.Lemmas.nat_plus_nat_equal_zero_lemma>


; <Skipped FStar.Math.Lemmas.int_times_int_equal_zero_lemma/>


; <Start encoding FStar.Math.Lemmas.int_times_int_equal_zero_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.int_times_int_equal_zero_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.int_times_int_equal_zero_lemma@tok () Term)

; </end encoding FStar.Math.Lemmas.int_times_int_equal_zero_lemma>


; <Skipped />


; <Skipped FStar.Math.Lemmas.pow2_double_sum/>


; <Start encoding FStar.Math.Lemmas.pow2_double_sum>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_double_sum (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_double_sum@tok () Term)

; </end encoding FStar.Math.Lemmas.pow2_double_sum>


; <Skipped FStar.Math.Lemmas.pow2_double_mult/>


; <Start encoding FStar.Math.Lemmas.pow2_double_mult>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_double_mult (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_double_mult@tok () Term)

; </end encoding FStar.Math.Lemmas.pow2_double_mult>


; <Skipped FStar.Math.Lemmas.pow2_lt_compat/>


; <Start encoding FStar.Math.Lemmas.pow2_lt_compat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_lt_compat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_lt_compat@tok () Term)

; </end encoding FStar.Math.Lemmas.pow2_lt_compat>


; <Skipped />


; <Skipped FStar.Math.Lemmas.pow2_le_compat/>


; <Start encoding FStar.Math.Lemmas.pow2_le_compat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_le_compat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_le_compat@tok () Term)

; </end encoding FStar.Math.Lemmas.pow2_le_compat>


; <Skipped />


; <Skipped FStar.Math.Lemmas.pow2_plus/>


; <Start encoding FStar.Math.Lemmas.pow2_plus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_plus (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_plus@tok () Term)

; </end encoding FStar.Math.Lemmas.pow2_plus>


; <Skipped />


; <Skipped FStar.Math.Lemmas.pow2_minus/>


; <Start encoding FStar.Math.Lemmas.pow2_minus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_minus (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_minus@tok () Term)

; </end encoding FStar.Math.Lemmas.pow2_minus>


; <Skipped FStar.Math.Lemmas.multiply_fractions/>


; <Start encoding FStar.Math.Lemmas.multiply_fractions>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.multiply_fractions (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.multiply_fractions@tok () Term)

; </end encoding FStar.Math.Lemmas.multiply_fractions>


; <Skipped FStar.Math.Lemmas.modulo_lemma/>


; <Start encoding FStar.Math.Lemmas.modulo_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_lemma@tok () Term)

; </end encoding FStar.Math.Lemmas.modulo_lemma>


; <Skipped FStar.Math.Lemmas.lemma_div_mod/>


; <Start encoding FStar.Math.Lemmas.lemma_div_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_mod@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_div_mod>


; <Skipped FStar.Math.Lemmas.lemma_mod_lt/>


; <Start encoding FStar.Math.Lemmas.lemma_mod_lt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_lt (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_lt@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mod_lt>


; <Skipped FStar.Math.Lemmas.lemma_div_lt_nat/>


; <Start encoding FStar.Math.Lemmas.lemma_div_lt_nat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_lt_nat (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_lt_nat@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_div_lt_nat>


; <Skipped FStar.Math.Lemmas.lemma_div_lt/>


; <Start encoding FStar.Math.Lemmas.lemma_div_lt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_lt (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_lt@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_div_lt>


; <Skipped FStar.Math.Lemmas.bounded_multiple_is_zero/>


; <Start encoding FStar.Math.Lemmas.bounded_multiple_is_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.bounded_multiple_is_zero (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.bounded_multiple_is_zero@tok () Term)

; </end encoding FStar.Math.Lemmas.bounded_multiple_is_zero>


; <Skipped FStar.Math.Lemmas.small_div/>


; <Start encoding FStar.Math.Lemmas.small_div>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_div (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_div@tok () Term)

; </end encoding FStar.Math.Lemmas.small_div>


; <Skipped FStar.Math.Lemmas.small_mod/>


; <Start encoding FStar.Math.Lemmas.small_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_mod@tok () Term)

; </end encoding FStar.Math.Lemmas.small_mod>


; <Skipped FStar.Math.Lemmas.lt_multiple_is_equal/>


; <Start encoding FStar.Math.Lemmas.lt_multiple_is_equal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lt_multiple_is_equal (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lt_multiple_is_equal@tok () Term)

; </end encoding FStar.Math.Lemmas.lt_multiple_is_equal>


; <Skipped FStar.Math.Lemmas.lemma_mod_plus/>


; <Start encoding FStar.Math.Lemmas.lemma_mod_plus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mod_plus>


; <Skipped FStar.Math.Lemmas.lemma_div_plus/>


; <Start encoding FStar.Math.Lemmas.lemma_div_plus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_plus (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_plus@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_div_plus>


; <Start encoding FStar.Math.Lemmas.lemma_div_mod_plus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_mod_plus (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_mod_plus@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_div_mod_plus>


; <Skipped FStar.Math.Lemmas.add_div_mod_1/>


; <Start encoding FStar.Math.Lemmas.add_div_mod_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.add_div_mod_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.add_div_mod_1@tok () Term)

; </end encoding FStar.Math.Lemmas.add_div_mod_1>


; <Skipped FStar.Math.Lemmas.sub_div_mod_1/>


; <Start encoding FStar.Math.Lemmas.sub_div_mod_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.sub_div_mod_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.sub_div_mod_1@tok () Term)

; </end encoding FStar.Math.Lemmas.sub_div_mod_1>


; <Skipped />


; <Skipped FStar.Math.Lemmas.cancel_mul_div/>


; <Start encoding FStar.Math.Lemmas.cancel_mul_div>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.cancel_mul_div (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.cancel_mul_div@tok () Term)

; </end encoding FStar.Math.Lemmas.cancel_mul_div>


; <Skipped />


; <Skipped FStar.Math.Lemmas.cancel_mul_mod/>


; <Start encoding FStar.Math.Lemmas.cancel_mul_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.cancel_mul_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.cancel_mul_mod@tok () Term)

; </end encoding FStar.Math.Lemmas.cancel_mul_mod>


; <Skipped FStar.Math.Lemmas.lemma_mod_add_distr/>


; <Start encoding FStar.Math.Lemmas.lemma_mod_add_distr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_add_distr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_add_distr@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mod_add_distr>


; <Skipped FStar.Math.Lemmas.lemma_mod_sub_distr/>


; <Start encoding FStar.Math.Lemmas.lemma_mod_sub_distr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_distr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_distr@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mod_sub_distr>


; <Skipped FStar.Math.Lemmas.lemma_mod_sub_0/>


; <Start encoding FStar.Math.Lemmas.lemma_mod_sub_0>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_0 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_0@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mod_sub_0>


; <Skipped FStar.Math.Lemmas.lemma_mod_sub_1/>


; <Start encoding FStar.Math.Lemmas.lemma_mod_sub_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_1@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mod_sub_1>


; <Skipped FStar.Math.Lemmas.lemma_mod_mul_distr_l/>


; <Start encoding FStar.Math.Lemmas.lemma_mod_mul_distr_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mul_distr_l (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mul_distr_l@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mod_mul_distr_l>


; <Skipped FStar.Math.Lemmas.lemma_mod_mul_distr_r/>


; <Start encoding FStar.Math.Lemmas.lemma_mod_mul_distr_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mul_distr_r (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mul_distr_r@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mod_mul_distr_r>


; <Skipped FStar.Math.Lemmas.lemma_mod_injective/>


; <Start encoding FStar.Math.Lemmas.lemma_mod_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_injective (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_injective@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mod_injective>


; <Skipped FStar.Math.Lemmas.lemma_mul_sub_distr/>


; <Start encoding FStar.Math.Lemmas.lemma_mul_sub_distr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_sub_distr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_sub_distr@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mul_sub_distr>


; <Skipped FStar.Math.Lemmas.lemma_div_exact/>


; <Start encoding FStar.Math.Lemmas.lemma_div_exact>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_exact (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_exact@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_div_exact>


; <Skipped FStar.Math.Lemmas.div_exact_r/>


; <Start encoding FStar.Math.Lemmas.div_exact_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.div_exact_r (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.div_exact_r@tok () Term)

; </end encoding FStar.Math.Lemmas.div_exact_r>


; <Skipped FStar.Math.Lemmas.lemma_mod_spec/>


; <Start encoding FStar.Math.Lemmas.lemma_mod_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_spec (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_spec@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mod_spec>


; <Skipped FStar.Math.Lemmas.lemma_mod_spec2/>


; <Start encoding FStar.Math.Lemmas.lemma_mod_spec2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_spec2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_spec2@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mod_spec2>


; <Skipped FStar.Math.Lemmas.lemma_mod_plus_distr_l/>


; <Start encoding FStar.Math.Lemmas.lemma_mod_plus_distr_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_distr_l (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_distr_l@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mod_plus_distr_l>


; <Skipped FStar.Math.Lemmas.lemma_mod_plus_distr_r/>


; <Start encoding FStar.Math.Lemmas.lemma_mod_plus_distr_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_distr_r (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_distr_r@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mod_plus_distr_r>


; <Skipped FStar.Math.Lemmas.lemma_mod_mod/>


; <Start encoding FStar.Math.Lemmas.lemma_mod_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mod (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mod@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mod_mod>


; <Skipped FStar.Math.Lemmas.euclidean_division_definition/>


; <Start encoding FStar.Math.Lemmas.euclidean_division_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.euclidean_division_definition (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.euclidean_division_definition@tok () Term)

; </end encoding FStar.Math.Lemmas.euclidean_division_definition>


; <Skipped FStar.Math.Lemmas.modulo_range_lemma/>


; <Start encoding FStar.Math.Lemmas.modulo_range_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_range_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_range_lemma@tok () Term)

; </end encoding FStar.Math.Lemmas.modulo_range_lemma>


; <Skipped FStar.Math.Lemmas.small_modulo_lemma_1/>


; <Start encoding FStar.Math.Lemmas.small_modulo_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_modulo_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_modulo_lemma_1@tok () Term)

; </end encoding FStar.Math.Lemmas.small_modulo_lemma_1>


; <Skipped FStar.Math.Lemmas.small_modulo_lemma_2/>


; <Start encoding FStar.Math.Lemmas.small_modulo_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_modulo_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_modulo_lemma_2@tok () Term)

; </end encoding FStar.Math.Lemmas.small_modulo_lemma_2>


; <Skipped FStar.Math.Lemmas.small_division_lemma_1/>


; <Start encoding FStar.Math.Lemmas.small_division_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_division_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_division_lemma_1@tok () Term)

; </end encoding FStar.Math.Lemmas.small_division_lemma_1>


; <Skipped FStar.Math.Lemmas.small_division_lemma_2/>


; <Start encoding FStar.Math.Lemmas.small_division_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_division_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_division_lemma_2@tok () Term)

; </end encoding FStar.Math.Lemmas.small_division_lemma_2>


; <Skipped FStar.Math.Lemmas.multiplication_order_lemma/>


; <Start encoding FStar.Math.Lemmas.multiplication_order_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.multiplication_order_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.multiplication_order_lemma@tok () Term)

; </end encoding FStar.Math.Lemmas.multiplication_order_lemma>


; <Skipped FStar.Math.Lemmas.division_propriety/>


; <Start encoding FStar.Math.Lemmas.division_propriety>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_propriety (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_propriety@tok () Term)

; </end encoding FStar.Math.Lemmas.division_propriety>


; <Skipped FStar.Math.Lemmas.division_definition_lemma_1/>


; <Start encoding FStar.Math.Lemmas.division_definition_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_definition_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_definition_lemma_1@tok () Term)

; </end encoding FStar.Math.Lemmas.division_definition_lemma_1>


; <Skipped FStar.Math.Lemmas.division_definition_lemma_2/>


; <Start encoding FStar.Math.Lemmas.division_definition_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_definition_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_definition_lemma_2@tok () Term)

; </end encoding FStar.Math.Lemmas.division_definition_lemma_2>


; <Skipped FStar.Math.Lemmas.division_definition/>


; <Start encoding FStar.Math.Lemmas.division_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_definition (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_definition@tok () Term)

; </end encoding FStar.Math.Lemmas.division_definition>


; <Skipped FStar.Math.Lemmas.multiple_division_lemma/>


; <Start encoding FStar.Math.Lemmas.multiple_division_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.multiple_division_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.multiple_division_lemma@tok () Term)

; </end encoding FStar.Math.Lemmas.multiple_division_lemma>


; <Skipped FStar.Math.Lemmas.multiple_modulo_lemma/>


; <Start encoding FStar.Math.Lemmas.multiple_modulo_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.multiple_modulo_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.multiple_modulo_lemma@tok () Term)

; </end encoding FStar.Math.Lemmas.multiple_modulo_lemma>


; <Skipped FStar.Math.Lemmas.division_addition_lemma/>


; <Start encoding FStar.Math.Lemmas.division_addition_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_addition_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_addition_lemma@tok () Term)

; </end encoding FStar.Math.Lemmas.division_addition_lemma>


; <Skipped FStar.Math.Lemmas.modulo_distributivity/>


; <Start encoding FStar.Math.Lemmas.modulo_distributivity>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_distributivity (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_distributivity@tok () Term)

; </end encoding FStar.Math.Lemmas.modulo_distributivity>


; <Skipped FStar.Math.Lemmas.lemma_div_le/>


; <Start encoding FStar.Math.Lemmas.lemma_div_le>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_le (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_le@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_div_le>


; <Skipped FStar.Math.Lemmas.division_sub_lemma/>


; <Start encoding FStar.Math.Lemmas.division_sub_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_sub_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_sub_lemma@tok () Term)

; </end encoding FStar.Math.Lemmas.division_sub_lemma>


; <Skipped FStar.Math.Lemmas.lemma_mod_plus_mul_distr/>


; <Start encoding FStar.Math.Lemmas.lemma_mod_plus_mul_distr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_mul_distr (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_mul_distr@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mod_plus_mul_distr>


; <Skipped FStar.Math.Lemmas.modulo_addition_lemma/>


; <Start encoding FStar.Math.Lemmas.modulo_addition_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_addition_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_addition_lemma@tok () Term)

; </end encoding FStar.Math.Lemmas.modulo_addition_lemma>


; <Skipped FStar.Math.Lemmas.lemma_mod_sub/>


; <Start encoding FStar.Math.Lemmas.lemma_mod_sub>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mod_sub>


; <Skipped FStar.Math.Lemmas.mod_mult_exact/>


; <Start encoding FStar.Math.Lemmas.mod_mult_exact>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mod_mult_exact (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mod_mult_exact@tok () Term)

; </end encoding FStar.Math.Lemmas.mod_mult_exact>


; <Skipped FStar.Math.Lemmas.mod_mul_div_exact/>


; <Start encoding FStar.Math.Lemmas.mod_mul_div_exact>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mod_mul_div_exact (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mod_mul_div_exact@tok () Term)

; </end encoding FStar.Math.Lemmas.mod_mul_div_exact>


; <Skipped />


; <Skipped FStar.Math.Lemmas.mod_pow2_div2/>


; <Start encoding FStar.Math.Lemmas.mod_pow2_div2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mod_pow2_div2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mod_pow2_div2@tok () Term)

; </end encoding FStar.Math.Lemmas.mod_pow2_div2>


; <Skipped />


; <Skipped FStar.Math.Lemmas.lemma_div_lt_cancel/>


; <Start encoding FStar.Math.Lemmas.lemma_div_lt_cancel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_lt_cancel (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_lt_cancel@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_div_lt_cancel>


; <Skipped FStar.Math.Lemmas.lemma_mod_mult_zero/>


; <Start encoding FStar.Math.Lemmas.lemma_mod_mult_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mult_zero (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mult_zero@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mod_mult_zero>


; <Skipped FStar.Math.Lemmas.division_multiplication_lemma/>


; <Start encoding FStar.Math.Lemmas.division_multiplication_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_multiplication_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_multiplication_lemma@tok () Term)

; </end encoding FStar.Math.Lemmas.division_multiplication_lemma>


; <Skipped FStar.Math.Lemmas.cancel_fraction/>


; <Start encoding FStar.Math.Lemmas.cancel_fraction>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.cancel_fraction (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.cancel_fraction@tok () Term)

; </end encoding FStar.Math.Lemmas.cancel_fraction>


; <Skipped FStar.Math.Lemmas.modulo_scale_lemma/>


; <Start encoding FStar.Math.Lemmas.modulo_scale_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_scale_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_scale_lemma@tok () Term)

; </end encoding FStar.Math.Lemmas.modulo_scale_lemma>


; <Start encoding FStar.Math.Lemmas.lemma_mul_pos_pos_is_pos>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_pos_pos_is_pos (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_pos_pos_is_pos@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mul_pos_pos_is_pos>


; <Start encoding FStar.Math.Lemmas.lemma_mul_nat_pos_is_nat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_nat_pos_is_nat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_nat_pos_is_nat@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mul_nat_pos_is_nat>


; <Start encoding FStar.Math.Lemmas.modulo_division_lemma_0>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_division_lemma_0 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_division_lemma_0@tok () Term)

; </end encoding FStar.Math.Lemmas.modulo_division_lemma_0>


; <Skipped FStar.Math.Lemmas.modulo_division_lemma/>


; <Start encoding FStar.Math.Lemmas.modulo_division_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_division_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_division_lemma@tok () Term)

; </end encoding FStar.Math.Lemmas.modulo_division_lemma>


; <Skipped FStar.Math.Lemmas.modulo_modulo_lemma/>


; <Start encoding FStar.Math.Lemmas.modulo_modulo_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_modulo_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_modulo_lemma@tok () Term)

; </end encoding FStar.Math.Lemmas.modulo_modulo_lemma>


; <Skipped FStar.Math.Lemmas.pow2_multiplication_division_lemma_1/>


; <Start encoding FStar.Math.Lemmas.pow2_multiplication_division_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_division_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_division_lemma_1@tok () Term)

; </end encoding FStar.Math.Lemmas.pow2_multiplication_division_lemma_1>


; <Skipped FStar.Math.Lemmas.pow2_multiplication_division_lemma_2/>


; <Start encoding FStar.Math.Lemmas.pow2_multiplication_division_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_division_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_division_lemma_2@tok () Term)

; </end encoding FStar.Math.Lemmas.pow2_multiplication_division_lemma_2>


; <Skipped FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_1/>


; <Start encoding FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_1@tok () Term)

; </end encoding FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_1>


; <Skipped FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_2/>


; <Start encoding FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_2@tok () Term)

; </end encoding FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_2>


; <Skipped FStar.Math.Lemmas.pow2_modulo_division_lemma_1/>


; <Start encoding FStar.Math.Lemmas.pow2_modulo_division_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_division_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_division_lemma_1@tok () Term)

; </end encoding FStar.Math.Lemmas.pow2_modulo_division_lemma_1>


; <Skipped FStar.Math.Lemmas.pow2_modulo_division_lemma_2/>


; <Start encoding FStar.Math.Lemmas.pow2_modulo_division_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_division_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_division_lemma_2@tok () Term)

; </end encoding FStar.Math.Lemmas.pow2_modulo_division_lemma_2>


; <Skipped FStar.Math.Lemmas.pow2_modulo_modulo_lemma_1/>


; <Start encoding FStar.Math.Lemmas.pow2_modulo_modulo_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_modulo_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_modulo_lemma_1@tok () Term)

; </end encoding FStar.Math.Lemmas.pow2_modulo_modulo_lemma_1>


; <Skipped FStar.Math.Lemmas.pow2_modulo_modulo_lemma_2/>


; <Start encoding FStar.Math.Lemmas.pow2_modulo_modulo_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_modulo_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_modulo_lemma_2@tok () Term)

; </end encoding FStar.Math.Lemmas.pow2_modulo_modulo_lemma_2>


; <Skipped FStar.Math.Lemmas.modulo_add/>


; <Start encoding FStar.Math.Lemmas.modulo_add>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_add (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_add@tok () Term)

; </end encoding FStar.Math.Lemmas.modulo_add>


; <Skipped FStar.Math.Lemmas.lemma_mod_twice/>


; <Start encoding FStar.Math.Lemmas.lemma_mod_twice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_twice (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_twice@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mod_twice>


; <Skipped FStar.Math.Lemmas.modulo_sub/>


; <Start encoding FStar.Math.Lemmas.modulo_sub>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_sub (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_sub@tok () Term)

; </end encoding FStar.Math.Lemmas.modulo_sub>


; <Skipped FStar.Math.Lemmas.mod_add_both/>


; <Start encoding FStar.Math.Lemmas.mod_add_both>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mod_add_both (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mod_add_both@tok () Term)

; </end encoding FStar.Math.Lemmas.mod_add_both>


; <Skipped FStar.Math.Lemmas.lemma_mod_plus_injective/>


; <Start encoding FStar.Math.Lemmas.lemma_mod_plus_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_injective (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_injective@tok () Term)

; </end encoding FStar.Math.Lemmas.lemma_mod_plus_injective>


; <Skipped FStar.Math.Lemmas.modulo_sub_lemma/>


; <Start encoding FStar.Math.Lemmas.modulo_sub_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_sub_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_sub_lemma@tok () Term)

; </end encoding FStar.Math.Lemmas.modulo_sub_lemma>


; End Externals for module FStar.Math.Lemmas


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End module FStar.Math.Lemmas (616 decls; total size 53035)

;;; Start module FStar.BitVector

; Externals for module FStar.BitVector


; <Start encoding FStar.BitVector.bv_t>

(declare-fun FStar.BitVector.bv_t (Term) Term)
;;;;;;;;;;;;;;;;n: Prims.nat -> Type
(declare-fun Tm_arrow_9974df5c311cfcfa7100bc7bef095e1e () Term)
(declare-fun FStar.BitVector.bv_t@tok () Term)
(declare-fun Tm_refine_e2d5d62a90ceed8a6faf9d20615f4e1e (Term) Term)

; </end encoding FStar.BitVector.bv_t>


; <Start encoding FStar.BitVector.zero_vec>

(declare-fun FStar.BitVector.zero_vec (Term) Term)
;;;;;;;;;;;;;;;;FStar.BitVector.bv_t n
(declare-fun Tm_arrow_b6d52a9c4babaef5c45b062eb8723782 () Term)
(declare-fun FStar.BitVector.zero_vec@tok () Term)

; </end encoding FStar.BitVector.zero_vec>


; <Start encoding FStar.BitVector.elem_vec>


(declare-fun FStar.BitVector.elem_vec (Term Term) Term)

;;;;;;;;;;;;;;;;i: Prims.nat{i < n} -> FStar.BitVector.bv_t n
(declare-fun Tm_arrow_6880b3a4da9e8c38f1dbaa400eb50d7d () Term)
(declare-fun FStar.BitVector.elem_vec@tok () Term)


; </end encoding FStar.BitVector.elem_vec>


; <Start encoding FStar.BitVector.ones_vec>

(declare-fun FStar.BitVector.ones_vec (Term) Term)

(declare-fun FStar.BitVector.ones_vec@tok () Term)

; </end encoding FStar.BitVector.ones_vec>


; <Start encoding FStar.BitVector.logand_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.BitVector.logand_vec.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.BitVector.logand_vec.fuel_instrumented_token () Term)
(declare-fun FStar.BitVector.logand_vec (Term Term Term) Term)
(declare-fun FStar.BitVector.logand_vec@tok () Term)
;;;;;;;;;;;;;;;;a: FStar.BitVector.bv_t n -> b: FStar.BitVector.bv_t n -> FStar.BitVector.bv_t n
(declare-fun Tm_arrow_d5001f682a0789c7aa8e67d06058b034 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.BitVector.logand_vec; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fst(45,8-45,18); use=FStar.BitVector.fst(45,8-45,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.BitVector.logand_vec.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.BitVector.logand_vec.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.BitVector.logand_vec.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.BitVector.logand_vec.fuel_instrumented))

:named @fuel_irrelevance_FStar.BitVector.logand_vec.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.BitVector.logand_vec; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fst(45,8-45,18); use=FStar.BitVector.fst(45,8-45,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.BitVector.logand_vec @x0
@x1
@x2)
(FStar.BitVector.logand_vec.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.BitVector.logand_vec @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.BitVector.logand_vec.fuel_instrumented))

:named @fuel_correspondence_FStar.BitVector.logand_vec.fuel_instrumented))

; </end encoding FStar.BitVector.logand_vec>


; <Start encoding FStar.BitVector.logand_vec_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.logand_vec_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.logand_vec_definition@tok () Term)


; </end encoding FStar.BitVector.logand_vec_definition>


; <Start encoding FStar.BitVector.logxor_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.BitVector.logxor_vec.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.BitVector.logxor_vec.fuel_instrumented_token () Term)
(declare-fun FStar.BitVector.logxor_vec (Term Term Term) Term)
(declare-fun FStar.BitVector.logxor_vec@tok () Term)

;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.BitVector.logxor_vec; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fst(57,8-57,18); use=FStar.BitVector.fst(57,8-57,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.BitVector.logxor_vec.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.BitVector.logxor_vec.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.BitVector.logxor_vec.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.BitVector.logxor_vec.fuel_instrumented))

:named @fuel_irrelevance_FStar.BitVector.logxor_vec.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.BitVector.logxor_vec; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fst(57,8-57,18); use=FStar.BitVector.fst(57,8-57,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.BitVector.logxor_vec @x0
@x1
@x2)
(FStar.BitVector.logxor_vec.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.BitVector.logxor_vec @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.BitVector.logxor_vec.fuel_instrumented))

:named @fuel_correspondence_FStar.BitVector.logxor_vec.fuel_instrumented))

; </end encoding FStar.BitVector.logxor_vec>


; <Start encoding FStar.BitVector.logxor_vec_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.logxor_vec_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.logxor_vec_definition@tok () Term)


; </end encoding FStar.BitVector.logxor_vec_definition>


; <Start encoding FStar.BitVector.logor_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.BitVector.logor_vec.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.BitVector.logor_vec.fuel_instrumented_token () Term)
(declare-fun FStar.BitVector.logor_vec (Term Term Term) Term)
(declare-fun FStar.BitVector.logor_vec@tok () Term)

;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.BitVector.logor_vec; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fst(69,8-69,17); use=FStar.BitVector.fst(69,8-69,17)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.BitVector.logor_vec.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.BitVector.logor_vec.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.BitVector.logor_vec.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.BitVector.logor_vec.fuel_instrumented))

:named @fuel_irrelevance_FStar.BitVector.logor_vec.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.BitVector.logor_vec; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fst(69,8-69,17); use=FStar.BitVector.fst(69,8-69,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.BitVector.logor_vec @x0
@x1
@x2)
(FStar.BitVector.logor_vec.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.BitVector.logor_vec @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.BitVector.logor_vec.fuel_instrumented))

:named @fuel_correspondence_FStar.BitVector.logor_vec.fuel_instrumented))

; </end encoding FStar.BitVector.logor_vec>


; <Start encoding FStar.BitVector.logor_vec_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.logor_vec_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.logor_vec_definition@tok () Term)


; </end encoding FStar.BitVector.logor_vec_definition>


; <Start encoding FStar.BitVector.lognot_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.BitVector.lognot_vec.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.BitVector.lognot_vec.fuel_instrumented_token () Term)
(declare-fun FStar.BitVector.lognot_vec (Term Term) Term)
(declare-fun FStar.BitVector.lognot_vec@tok () Term)
;;;;;;;;;;;;;;;;a: FStar.BitVector.bv_t n -> FStar.BitVector.bv_t n
(declare-fun Tm_arrow_190e27813ba14c0d36577dc3d47778da () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.BitVector.lognot_vec; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fst(81,8-81,18); use=FStar.BitVector.fst(81,8-81,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.BitVector.lognot_vec.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.BitVector.lognot_vec.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.BitVector.lognot_vec.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.BitVector.lognot_vec.fuel_instrumented))

:named @fuel_irrelevance_FStar.BitVector.lognot_vec.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.BitVector.lognot_vec; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fst(81,8-81,18); use=FStar.BitVector.fst(81,8-81,18)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.BitVector.lognot_vec @x0
@x1)
(FStar.BitVector.lognot_vec.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.BitVector.lognot_vec @x0
@x1))
:qid @fuel_correspondence_FStar.BitVector.lognot_vec.fuel_instrumented))

:named @fuel_correspondence_FStar.BitVector.lognot_vec.fuel_instrumented))

; </end encoding FStar.BitVector.lognot_vec>


; <Start encoding FStar.BitVector.lognot_vec_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.lognot_vec_definition (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.lognot_vec_definition@tok () Term)


; </end encoding FStar.BitVector.lognot_vec_definition>


; <Start encoding FStar.BitVector.lemma_xor_bounded>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.lemma_xor_bounded (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.lemma_xor_bounded@tok () Term)

; </end encoding FStar.BitVector.lemma_xor_bounded>


; <Start encoding FStar.BitVector.is_subset_vec>

(declare-fun FStar.BitVector.is_subset_vec (Term Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.BitVector.bv_t n -> b: FStar.BitVector.bv_t n -> Prims.logical
(declare-fun Tm_arrow_b51a0c80adeae3f31b1215853bb34fe1 () Term)
(declare-fun FStar.BitVector.is_subset_vec@tok () Term)

(declare-fun Tm_abs_c26b15d92a0324df025664cb1dd69766 (Term Term Term) Term)

; </end encoding FStar.BitVector.is_subset_vec>


; <Start encoding FStar.BitVector.is_superset_vec>

(declare-fun FStar.BitVector.is_superset_vec (Term Term Term) Term)

(declare-fun FStar.BitVector.is_superset_vec@tok () Term)

(declare-fun Tm_abs_8fab78d513bbc3161e95814bf48fbd56 (Term Term Term) Term)

; </end encoding FStar.BitVector.is_superset_vec>


; <Start encoding FStar.BitVector.lemma_slice_subset_vec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.lemma_slice_subset_vec (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.lemma_slice_subset_vec@tok () Term)

; </end encoding FStar.BitVector.lemma_slice_subset_vec>


; <Start encoding FStar.BitVector.lemma_slice_superset_vec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.lemma_slice_superset_vec (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.lemma_slice_superset_vec@tok () Term)

; </end encoding FStar.BitVector.lemma_slice_superset_vec>


; <Start encoding FStar.BitVector.shift_left_vec>

(declare-fun FStar.BitVector.shift_left_vec (Term Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.BitVector.bv_t n -> s: Prims.nat -> FStar.BitVector.bv_t n
(declare-fun Tm_arrow_ccbebd343bd3a7caba5f263c2ba5f3be () Term)
(declare-fun FStar.BitVector.shift_left_vec@tok () Term)

; </end encoding FStar.BitVector.shift_left_vec>


; <Start encoding FStar.BitVector.shift_left_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_left_vec_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_left_vec_lemma_1@tok () Term)
(declare-fun Tm_refine_6ccf0869e6825997ab860bb25791c11f (Term Term) Term)

; </end encoding FStar.BitVector.shift_left_vec_lemma_1>


; <Start encoding FStar.BitVector.shift_left_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_left_vec_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_left_vec_lemma_2@tok () Term)
(declare-fun Tm_refine_e8e1ad4b2203cd724d5b8b2dba0a5826 (Term Term) Term)

; </end encoding FStar.BitVector.shift_left_vec_lemma_2>


; <Start encoding FStar.BitVector.shift_right_vec>

(declare-fun FStar.BitVector.shift_right_vec (Term Term Term) Term)

(declare-fun FStar.BitVector.shift_right_vec@tok () Term)

; </end encoding FStar.BitVector.shift_right_vec>


; <Start encoding FStar.BitVector.shift_right_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_right_vec_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_right_vec_lemma_1@tok () Term)
(declare-fun Tm_refine_34425c23b534b8a294f8f063dd9faa4b (Term Term) Term)

; </end encoding FStar.BitVector.shift_right_vec_lemma_1>


; <Start encoding FStar.BitVector.shift_right_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_right_vec_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_right_vec_lemma_2@tok () Term)
(declare-fun Tm_refine_c0ec47abc53a2509e744dad22ccf8191 (Term Term) Term)

; </end encoding FStar.BitVector.shift_right_vec_lemma_2>


; <Start encoding FStar.BitVector.shift_arithmetic_right_vec>

(declare-fun FStar.BitVector.shift_arithmetic_right_vec (Term Term Term) Term)

(declare-fun FStar.BitVector.shift_arithmetic_right_vec@tok () Term)

; </end encoding FStar.BitVector.shift_arithmetic_right_vec>


; <Start encoding FStar.BitVector.shift_arithmetic_right_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_arithmetic_right_vec_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_arithmetic_right_vec_lemma_1@tok () Term)


; </end encoding FStar.BitVector.shift_arithmetic_right_vec_lemma_1>


; <Start encoding FStar.BitVector.shift_arithmetic_right_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_arithmetic_right_vec_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_arithmetic_right_vec_lemma_2@tok () Term)


; </end encoding FStar.BitVector.shift_arithmetic_right_vec_lemma_2>


; End Externals for module FStar.BitVector


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End module FStar.BitVector (154 decls; total size 16381)

;;; Start interface FStar.UInt

; Externals for interface FStar.UInt


; <Start encoding FStar.UInt.pow2_values>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.pow2_values (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.pow2_values@tok () Term)
;;;;;;;;;;;;;;;;Lemma: FStar.UInt.pow2_values
;;; Fact-ids: Name FStar.UInt.pow2_values; Namespace FStar.UInt
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.nat)
(let ((@lb1 @x0))
(ite (= @lb1
(BoxInt 0))

;; def=FStar.UInt.fsti(28,11-28,14); use=FStar.UInt.fsti(28,11-28,14)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 1))

(ite (= @lb1
(BoxInt 1))

;; def=FStar.UInt.fsti(29,11-29,14); use=FStar.UInt.fsti(29,11-29,14)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 2))

(ite (= @lb1
(BoxInt 8))

;; def=FStar.UInt.fsti(30,11-30,16); use=FStar.UInt.fsti(30,11-30,16)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 256))

(ite (= @lb1
(BoxInt 16))

;; def=FStar.UInt.fsti(31,11-31,18); use=FStar.UInt.fsti(31,11-31,18)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 65536))

(ite (= @lb1
(BoxInt 31))

;; def=FStar.UInt.fsti(32,11-32,23); use=FStar.UInt.fsti(32,11-32,23)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 2147483648))

(ite (= @lb1
(BoxInt 32))

;; def=FStar.UInt.fsti(33,11-33,23); use=FStar.UInt.fsti(33,11-33,23)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 4294967296))

(ite (= @lb1
(BoxInt 63))

;; def=FStar.UInt.fsti(34,11-34,32); use=FStar.UInt.fsti(34,11-34,32)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 9223372036854775808))

(ite (= @lb1
(BoxInt 64))

;; def=FStar.UInt.fsti(35,11-35,33); use=FStar.UInt.fsti(35,11-35,33)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 18446744073709551616))

(implies (= @lb1
(BoxInt 128))

;; def=FStar.UInt.fsti(36,12-36,49); use=FStar.UInt.fsti(36,12-36,49)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 340282366920938463463374607431768211456))
)))))))))))
 

:pattern ((Prims.pow2.fuel_instrumented ZFuel
@x0))
:qid lemma_FStar.UInt.pow2_values))
:named lemma_FStar.UInt.pow2_values))

; </end encoding FStar.UInt.pow2_values>


; <Start encoding FStar.UInt.max_int>

(declare-fun FStar.UInt.max_int (Term) Term)
;;;;;;;;;;;;;;;;n: Prims.nat -> Prims.int
(declare-fun Tm_arrow_fc34ca66de2f262c06145b17fb7ed6cb () Term)
(declare-fun FStar.UInt.max_int@tok () Term)
;;;;;;;;;;;;;;;;Equation for FStar.UInt.max_int
;;; Fact-ids: Name FStar.UInt.max_int; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(46,4-46,11); use=FStar.UInt.fsti(46,4-46,11)
(forall ((@x0 Term))
 (! (= (FStar.UInt.max_int @x0)
(Prims.op_Subtraction (Prims.pow2 @x0)
(BoxInt 1)))
 

:pattern ((FStar.UInt.max_int @x0))
:qid equation_FStar.UInt.max_int))

:named equation_FStar.UInt.max_int))

; </end encoding FStar.UInt.max_int>


; <Start encoding FStar.UInt.min_int>

(declare-fun FStar.UInt.min_int (Term) Term)

(declare-fun FStar.UInt.min_int@tok () Term)
;;;;;;;;;;;;;;;;Equation for FStar.UInt.min_int
;;; Fact-ids: Name FStar.UInt.min_int; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(47,4-47,11); use=FStar.UInt.fsti(47,4-47,11)
(forall ((@x0 Term))
 (! (= (FStar.UInt.min_int @x0)
(BoxInt 0))
 

:pattern ((FStar.UInt.min_int @x0))
:qid equation_FStar.UInt.min_int))

:named equation_FStar.UInt.min_int))

; </end encoding FStar.UInt.min_int>


; <Start encoding FStar.UInt.fits>

(declare-fun FStar.UInt.fits (Term Term) Term)
;;;;;;;;;;;;;;;;x: Prims.int -> n: Prims.nat -> Prims.bool
(declare-fun Tm_arrow_dea48782e508c14fa98dcf9716548804 () Term)
(declare-fun FStar.UInt.fits@tok () Term)
;;;;;;;;;;;;;;;;Equation for FStar.UInt.fits
;;; Fact-ids: Name FStar.UInt.fits; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(49,4-49,8); use=FStar.UInt.fsti(49,4-49,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.UInt.fits @x0
@x1)
(Prims.op_AmpAmp (Prims.op_LessThanOrEqual (FStar.UInt.min_int @x1)
@x0)
(Prims.op_LessThanOrEqual @x0
(FStar.UInt.max_int @x1))))
 

:pattern ((FStar.UInt.fits @x0
@x1))
:qid equation_FStar.UInt.fits))

:named equation_FStar.UInt.fits))

; </end encoding FStar.UInt.fits>


; <Start encoding FStar.UInt.size>

(declare-fun FStar.UInt.size (Term Term) Term)
;;;;;;;;;;;;;;;;x: Prims.int -> n: Prims.nat -> Type
(declare-fun Tm_arrow_f4ec8f8bfe492e31741a15356024bbaa () Term)
(declare-fun FStar.UInt.size@tok () Term)
;;;;;;;;;;;;;;;;Equation for FStar.UInt.size
;;; Fact-ids: Name FStar.UInt.size; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(50,4-50,8); use=FStar.UInt.fsti(50,4-50,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.UInt.size @x0
@x1)
(Prims.b2t (FStar.UInt.fits @x0
@x1)))
 

:pattern ((FStar.UInt.size @x0
@x1))
:qid equation_FStar.UInt.size))

:named equation_FStar.UInt.size))

; </end encoding FStar.UInt.size>


; <Start encoding FStar.UInt.uint_t>

(declare-fun FStar.UInt.uint_t (Term) Term)

(declare-fun FStar.UInt.uint_t@tok () Term)
(declare-fun Tm_refine_f13070840248fced9d9d60d77bdae3ec (Term) Term)
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.UInt.uint_t; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(53,22-53,37); use=FStar.UInt.fsti(53,22-53,37)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_f13070840248fced9d9d60d77bdae3ec @x2))
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=FStar.UInt.fsti(53,28-53,36); use=FStar.UInt.fsti(53,28-53,36)
(Valid 
;; def=FStar.UInt.fsti(53,28-53,36); use=FStar.UInt.fsti(53,28-53,36)
(FStar.UInt.size @x1
@x2)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_f13070840248fced9d9d60d77bdae3ec @x2)))
:qid refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec))

:named refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec))
;;;;;;;;;;;;;;;;Equation for FStar.UInt.uint_t
;;; Fact-ids: Name FStar.UInt.uint_t; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(53,5-53,11); use=FStar.UInt.fsti(53,5-53,11)
(forall ((@x0 Term))
 (! (= (FStar.UInt.uint_t @x0)
(Tm_refine_f13070840248fced9d9d60d77bdae3ec @x0))
 

:pattern ((FStar.UInt.uint_t @x0))
:qid equation_FStar.UInt.uint_t))

:named equation_FStar.UInt.uint_t))

; </end encoding FStar.UInt.uint_t>


; <Start encoding FStar.UInt.zero>

(declare-fun FStar.UInt.zero (Term) Term)
;;;;;;;;;;;;;;;;n: Prims.nat -> FStar.UInt.uint_t n
(declare-fun Tm_arrow_f1dd811328ea3b27fc410fa0f52880f7 () Term)
(declare-fun FStar.UInt.zero@tok () Term)

; </end encoding FStar.UInt.zero>


; <Start encoding FStar.UInt.pow2_n>


(declare-fun FStar.UInt.pow2_n (Term Term) Term)

;;;;;;;;;;;;;;;;p: Prims.nat{p < n} -> FStar.UInt.uint_t n
(declare-fun Tm_arrow_8d41edd1e7b665db26512e6c6d9ece64 () Term)
(declare-fun FStar.UInt.pow2_n@tok () Term)


; </end encoding FStar.UInt.pow2_n>


; <Start encoding FStar.UInt.one>

(declare-fun FStar.UInt.one (Term) Term)
;;;;;;;;;;;;;;;;n: Prims.pos -> FStar.UInt.uint_t n
(declare-fun Tm_arrow_89d370fa478cfd1f85a8759662ce0390 () Term)
(declare-fun FStar.UInt.one@tok () Term)

; </end encoding FStar.UInt.one>


; <Start encoding FStar.UInt.ones>

(declare-fun FStar.UInt.ones (Term) Term)

(declare-fun FStar.UInt.ones@tok () Term)

; </end encoding FStar.UInt.ones>


; <Start encoding FStar.UInt.incr>

(declare-fun FStar.UInt.incr (Term Term) Term)
(declare-fun Tm_refine_22e8629663f0cb1c9de86e57e73778e3 (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt.uint_t n -> Prims.Pure (FStar.UInt.uint_t n)
(declare-fun Tm_arrow_e8e04e4a1022a7343e76760b76915c9e () Term)
(declare-fun FStar.UInt.incr@tok () Term)


; </end encoding FStar.UInt.incr>


; <Start encoding FStar.UInt.decr>

(declare-fun FStar.UInt.decr (Term Term) Term)

;;;;;;;;;;;;;;;;a: FStar.UInt.uint_t n -> Prims.Pure (FStar.UInt.uint_t n)
(declare-fun Tm_arrow_2a167fb2d2f3f00bff7b73f048db0e83 () Term)
(declare-fun FStar.UInt.decr@tok () Term)


; </end encoding FStar.UInt.decr>


; <Start encoding FStar.UInt.incr_underspec>

(declare-fun FStar.UInt.incr_underspec (Term Term) Term)
(declare-fun Tm_refine_6a367e92d5b1ca10009a43bd430dd796 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt.uint_t n -> Prims.Pure (FStar.UInt.uint_t n)
(declare-fun Tm_arrow_fb114bd2e9239af1296268eb30490ff7 () Term)
(declare-fun FStar.UInt.incr_underspec@tok () Term)


; </end encoding FStar.UInt.incr_underspec>


; <Start encoding FStar.UInt.decr_underspec>

(declare-fun FStar.UInt.decr_underspec (Term Term) Term)
(declare-fun Tm_refine_fa3c796c533e86dc9f3e3ffc647718f6 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt.uint_t n -> Prims.Pure (FStar.UInt.uint_t n)
(declare-fun Tm_arrow_f1853f30408c6d0beb7795897a3ab5bc () Term)
(declare-fun FStar.UInt.decr_underspec@tok () Term)


; </end encoding FStar.UInt.decr_underspec>


; <Start encoding FStar.UInt.incr_mod>

(declare-fun FStar.UInt.incr_mod (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt.uint_t n -> FStar.UInt.uint_t n
(declare-fun Tm_arrow_a565732dbe0b43ae2274b1f24341f11b () Term)
(declare-fun FStar.UInt.incr_mod@tok () Term)

; </end encoding FStar.UInt.incr_mod>


; <Start encoding FStar.UInt.decr_mod>

(declare-fun FStar.UInt.decr_mod (Term Term) Term)

(declare-fun FStar.UInt.decr_mod@tok () Term)

; </end encoding FStar.UInt.decr_mod>


; <Start encoding FStar.UInt.add>

(declare-fun FStar.UInt.add (Term Term Term) Term)

;;;;;;;;;;;;;;;;a: FStar.UInt.uint_t n -> b: FStar.UInt.uint_t n -> Prims.Pure (FStar.UInt.uint_t n)
(declare-fun Tm_arrow_ea9f73d61c207ec4508af75e87c5ca13 () Term)
(declare-fun FStar.UInt.add@tok () Term)


; </end encoding FStar.UInt.add>


; <Start encoding FStar.UInt.add_underspec>

(declare-fun FStar.UInt.add_underspec (Term Term Term) Term)
(declare-fun Tm_refine_c7a9b50c1b5983f8171c03368a208e31 (Term Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt.uint_t n -> b: FStar.UInt.uint_t n -> Prims.Pure (FStar.UInt.uint_t n)
(declare-fun Tm_arrow_880847ba34dd402fb6567384684864a6 () Term)
(declare-fun FStar.UInt.add_underspec@tok () Term)


; </end encoding FStar.UInt.add_underspec>


; <Start encoding FStar.UInt.add_mod>

(declare-fun FStar.UInt.add_mod (Term Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt.uint_t n -> b: FStar.UInt.uint_t n -> FStar.UInt.uint_t n
(declare-fun Tm_arrow_2f3c6a962eb1cbbfd959311c0f20b277 () Term)
(declare-fun FStar.UInt.add_mod@tok () Term)

; </end encoding FStar.UInt.add_mod>


; <Start encoding FStar.UInt.sub>

(declare-fun FStar.UInt.sub (Term Term Term) Term)

;;;;;;;;;;;;;;;;a: FStar.UInt.uint_t n -> b: FStar.UInt.uint_t n -> Prims.Pure (FStar.UInt.uint_t n)
(declare-fun Tm_arrow_974b47e4388c1a4055fe210bb6a11687 () Term)
(declare-fun FStar.UInt.sub@tok () Term)


; </end encoding FStar.UInt.sub>


; <Start encoding FStar.UInt.sub_underspec>

(declare-fun FStar.UInt.sub_underspec (Term Term Term) Term)
(declare-fun Tm_refine_109ae46bb20ad559af297346ec64ae4e (Term Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt.uint_t n -> b: FStar.UInt.uint_t n -> Prims.Pure (FStar.UInt.uint_t n)
(declare-fun Tm_arrow_1479a03f646b965be1bfedb2ee360f95 () Term)
(declare-fun FStar.UInt.sub_underspec@tok () Term)


; </end encoding FStar.UInt.sub_underspec>


; <Start encoding FStar.UInt.sub_mod>

(declare-fun FStar.UInt.sub_mod (Term Term Term) Term)

(declare-fun FStar.UInt.sub_mod@tok () Term)

; </end encoding FStar.UInt.sub_mod>


; <Start encoding FStar.UInt.mul>

(declare-fun FStar.UInt.mul (Term Term Term) Term)

;;;;;;;;;;;;;;;;a: FStar.UInt.uint_t n -> b: FStar.UInt.uint_t n -> Prims.Pure (FStar.UInt.uint_t n)
(declare-fun Tm_arrow_45e02637bbbba15e6760300e4a62b58d () Term)
(declare-fun FStar.UInt.mul@tok () Term)


; </end encoding FStar.UInt.mul>


; <Start encoding FStar.UInt.mul_underspec>

(declare-fun FStar.UInt.mul_underspec (Term Term Term) Term)
(declare-fun Tm_refine_ea207e5cce50229e615af011837e59a5 (Term Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt.uint_t n -> b: FStar.UInt.uint_t n -> Prims.Pure (FStar.UInt.uint_t n)
(declare-fun Tm_arrow_1f5fca1fff06689d84a49261819dc580 () Term)
(declare-fun FStar.UInt.mul_underspec@tok () Term)


; </end encoding FStar.UInt.mul_underspec>


; <Start encoding FStar.UInt.mul_mod>

(declare-fun FStar.UInt.mul_mod (Term Term Term) Term)

(declare-fun FStar.UInt.mul_mod@tok () Term)

; </end encoding FStar.UInt.mul_mod>


; <Start encoding FStar.UInt.lt_square_div_lt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lt_square_div_lt (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lt_square_div_lt@tok () Term)

; </end encoding FStar.UInt.lt_square_div_lt>


; <Skipped />


; <Start encoding FStar.UInt.mul_div>

(declare-fun FStar.UInt.mul_div (Term Term Term) Term)

(declare-fun FStar.UInt.mul_div@tok () Term)

; </end encoding FStar.UInt.mul_div>


; <Skipped />


; <Start encoding FStar.UInt.div>

(declare-fun Tm_refine_0722e9115d2a1be8d90527397d01011c (Term) Term)
(declare-fun FStar.UInt.div (Term Term Term) Term)

(declare-fun Tm_refine_e49d79feeb1e96b29b0f01b06f8dac23 (Term Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt.uint_t n -> b: FStar.UInt.uint_t n {b <> 0} -> Prims.Pure (FStar.UInt.uint_t n)
(declare-fun Tm_arrow_6ebc7a9e6ff34015952a4168421980bf () Term)
(declare-fun FStar.UInt.div@tok () Term)



; </end encoding FStar.UInt.div>


; <Start encoding FStar.UInt.div_underspec>


(declare-fun FStar.UInt.div_underspec (Term Term Term) Term)

(declare-fun Tm_refine_fafbb762e9b0100ba27aa174122ddaa3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt.uint_t n -> b: FStar.UInt.uint_t n {b <> 0} -> Prims.Pure (FStar.UInt.uint_t n)
(declare-fun Tm_arrow_ed1485a952a27dc4770fb0182ab26e79 () Term)
(declare-fun FStar.UInt.div_underspec@tok () Term)


; </end encoding FStar.UInt.div_underspec>


; <Start encoding FStar.UInt.div_size>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.div_size (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.div_size@tok () Term)

; </end encoding FStar.UInt.div_size>


; <Start encoding FStar.UInt.udiv>


(declare-fun FStar.UInt.udiv (Term Term Term) Term)


;;;;;;;;;;;;;;;;a: FStar.UInt.uint_t n -> b: FStar.UInt.uint_t n {b <> 0}   -> c: FStar.UInt.uint_t n {b <> 0 ==> a / b = c}
(declare-fun Tm_arrow_2b6a409bd2eeb88753b2b6fe89b0d0a9 () Term)
(declare-fun FStar.UInt.udiv@tok () Term)



; </end encoding FStar.UInt.udiv>


; <Start encoding FStar.UInt.mod>


(declare-fun FStar.UInt.mod (Term Term Term) Term)

;;;;;;;;;;;;;;;;a: FStar.UInt.uint_t n -> b: FStar.UInt.uint_t n {b <> 0} -> FStar.UInt.uint_t n
(declare-fun Tm_arrow_6ae50616ce0b08fd950ce0be5e711193 () Term)
(declare-fun FStar.UInt.mod@tok () Term)


; </end encoding FStar.UInt.mod>


; <Start encoding FStar.UInt.eq>

(declare-fun FStar.UInt.eq (Term Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt.uint_t n -> b: FStar.UInt.uint_t n -> Prims.bool
(declare-fun Tm_arrow_ed25d9271888f66e143c5c59e11fb3a9 () Term)
(declare-fun FStar.UInt.eq@tok () Term)

; </end encoding FStar.UInt.eq>


; <Start encoding FStar.UInt.gt>

(declare-fun FStar.UInt.gt (Term Term Term) Term)

(declare-fun FStar.UInt.gt@tok () Term)

; </end encoding FStar.UInt.gt>


; <Start encoding FStar.UInt.gte>

(declare-fun FStar.UInt.gte (Term Term Term) Term)

(declare-fun FStar.UInt.gte@tok () Term)

; </end encoding FStar.UInt.gte>


; <Start encoding FStar.UInt.lt>

(declare-fun FStar.UInt.lt (Term Term Term) Term)

(declare-fun FStar.UInt.lt@tok () Term)

; </end encoding FStar.UInt.lt>


; <Start encoding FStar.UInt.lte>

(declare-fun FStar.UInt.lte (Term Term Term) Term)

(declare-fun FStar.UInt.lte@tok () Term)

; </end encoding FStar.UInt.lte>


; <Start encoding FStar.UInt.to_uint_t>

(declare-fun FStar.UInt.to_uint_t (Term Term) Term)
;;;;;;;;;;;;;;;;m: Prims.nat -> a: Prims.int -> FStar.UInt.uint_t m
(declare-fun Tm_arrow_d5257ef463a03617bca88873b50f4e96 () Term)
(declare-fun FStar.UInt.to_uint_t@tok () Term)

; </end encoding FStar.UInt.to_uint_t>


; <Start encoding FStar.UInt.to_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.UInt.to_vec.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.UInt.to_vec.fuel_instrumented_token () Term)
(declare-fun FStar.UInt.to_vec (Term Term) Term)
(declare-fun FStar.UInt.to_vec@tok () Term)
;;;;;;;;;;;;;;;;num: FStar.UInt.uint_t n -> FStar.BitVector.bv_t n
(declare-fun Tm_arrow_50c9ac04c4da2f9a3a1512bf3cfd180e () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.UInt.to_vec; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(180,8-180,14); use=FStar.UInt.fsti(180,8-180,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.UInt.to_vec.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.UInt.to_vec.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.UInt.to_vec.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.UInt.to_vec.fuel_instrumented))

:named @fuel_irrelevance_FStar.UInt.to_vec.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.UInt.to_vec; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(180,8-180,14); use=FStar.UInt.fsti(180,8-180,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.UInt.to_vec @x0
@x1)
(FStar.UInt.to_vec.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.UInt.to_vec @x0
@x1))
:qid @fuel_correspondence_FStar.UInt.to_vec.fuel_instrumented))

:named @fuel_correspondence_FStar.UInt.to_vec.fuel_instrumented))

; </end encoding FStar.UInt.to_vec>


; <Start encoding FStar.UInt.from_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.UInt.from_vec.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.UInt.from_vec.fuel_instrumented_token () Term)
(declare-fun FStar.UInt.from_vec (Term Term) Term)
(declare-fun FStar.UInt.from_vec@tok () Term)
;;;;;;;;;;;;;;;;vec: FStar.BitVector.bv_t n -> FStar.UInt.uint_t n
(declare-fun Tm_arrow_3a21f80bb386ebae30b30ec5363d47ef () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.UInt.from_vec; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(184,8-184,16); use=FStar.UInt.fsti(184,8-184,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.UInt.from_vec.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.UInt.from_vec.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.UInt.from_vec.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.UInt.from_vec.fuel_instrumented))

:named @fuel_irrelevance_FStar.UInt.from_vec.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.UInt.from_vec; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(184,8-184,16); use=FStar.UInt.fsti(184,8-184,16)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.UInt.from_vec @x0
@x1)
(FStar.UInt.from_vec.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.UInt.from_vec @x0
@x1))
:qid @fuel_correspondence_FStar.UInt.from_vec.fuel_instrumented))

:named @fuel_correspondence_FStar.UInt.from_vec.fuel_instrumented))

; </end encoding FStar.UInt.from_vec>


; <Start encoding FStar.UInt.to_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.to_vec_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.to_vec_lemma_1@tok () Term)

; </end encoding FStar.UInt.to_vec_lemma_1>


; <Start encoding FStar.UInt.to_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.to_vec_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.to_vec_lemma_2@tok () Term)

; </end encoding FStar.UInt.to_vec_lemma_2>


; <Start encoding FStar.UInt.inverse_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.inverse_aux (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.inverse_aux@tok () Term)


; </end encoding FStar.UInt.inverse_aux>


; <Start encoding FStar.UInt.inverse_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.inverse_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.inverse_vec_lemma@tok () Term)

; </end encoding FStar.UInt.inverse_vec_lemma>


; <Start encoding FStar.UInt.inverse_num_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.inverse_num_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.inverse_num_lemma@tok () Term)

; </end encoding FStar.UInt.inverse_num_lemma>


; <Start encoding FStar.UInt.from_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.from_vec_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.from_vec_lemma_1@tok () Term)

; </end encoding FStar.UInt.from_vec_lemma_1>


; <Start encoding FStar.UInt.from_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.from_vec_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.from_vec_lemma_2@tok () Term)

; </end encoding FStar.UInt.from_vec_lemma_2>


; <Start encoding FStar.UInt.from_vec_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.from_vec_aux (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.from_vec_aux@tok () Term)

; </end encoding FStar.UInt.from_vec_aux>


; <Start encoding FStar.UInt.seq_slice_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.seq_slice_lemma (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.seq_slice_lemma@tok () Term)

; </end encoding FStar.UInt.seq_slice_lemma>


; <Start encoding FStar.UInt.from_vec_propriety>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.from_vec_propriety (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.from_vec_propriety@tok () Term)

; </end encoding FStar.UInt.from_vec_propriety>


; <Start encoding FStar.UInt.append_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.append_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.append_lemma@tok () Term)

; </end encoding FStar.UInt.append_lemma>


; <Start encoding FStar.UInt.slice_left_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.slice_left_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.slice_left_lemma@tok () Term)

; </end encoding FStar.UInt.slice_left_lemma>


; <Start encoding FStar.UInt.slice_right_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.slice_right_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.slice_right_lemma@tok () Term)

; </end encoding FStar.UInt.slice_right_lemma>


; <Start encoding FStar.UInt.zero_to_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.zero_to_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.zero_to_vec_lemma@tok () Term)


; </end encoding FStar.UInt.zero_to_vec_lemma>


; <Start encoding FStar.UInt.zero_from_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.zero_from_vec_lemma (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.zero_from_vec_lemma@tok () Term)

; </end encoding FStar.UInt.zero_from_vec_lemma>


; <Start encoding FStar.UInt.one_to_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.one_to_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.one_to_vec_lemma@tok () Term)


; </end encoding FStar.UInt.one_to_vec_lemma>


; <Start encoding FStar.UInt.pow2_to_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.pow2_to_vec_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.pow2_to_vec_lemma@tok () Term)



; </end encoding FStar.UInt.pow2_to_vec_lemma>


; <Start encoding FStar.UInt.pow2_from_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.pow2_from_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.pow2_from_vec_lemma@tok () Term)


; </end encoding FStar.UInt.pow2_from_vec_lemma>


; <Start encoding FStar.UInt.ones_to_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.ones_to_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.ones_to_vec_lemma@tok () Term)


; </end encoding FStar.UInt.ones_to_vec_lemma>


; <Start encoding FStar.UInt.ones_from_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.ones_from_vec_lemma (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.ones_from_vec_lemma@tok () Term)

; </end encoding FStar.UInt.ones_from_vec_lemma>


; <Start encoding FStar.UInt.nth>


(declare-fun FStar.UInt.nth (Term Term Term) Term)

;;;;;;;;;;;;;;;;a: FStar.UInt.uint_t n -> i: Prims.nat{i < n} -> Prims.bool
(declare-fun Tm_arrow_3fc70c4ae2acbd923fa94b8473fca72c () Term)
(declare-fun FStar.UInt.nth@tok () Term)


; </end encoding FStar.UInt.nth>


; <Start encoding FStar.UInt.nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.nth_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.nth_lemma@tok () Term)

; </end encoding FStar.UInt.nth_lemma>


; <Start encoding FStar.UInt.zero_nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.zero_nth_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.zero_nth_lemma@tok () Term)


; </end encoding FStar.UInt.zero_nth_lemma>


; <Start encoding FStar.UInt.pow2_nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.pow2_nth_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.pow2_nth_lemma@tok () Term)



; </end encoding FStar.UInt.pow2_nth_lemma>


; <Start encoding FStar.UInt.one_nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.one_nth_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.one_nth_lemma@tok () Term)


; </end encoding FStar.UInt.one_nth_lemma>


; <Start encoding FStar.UInt.ones_nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.ones_nth_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.ones_nth_lemma@tok () Term)


; </end encoding FStar.UInt.ones_nth_lemma>


; <Start encoding FStar.UInt.logand>

(declare-fun FStar.UInt.logand (Term Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt.uint_t n -> b: FStar.UInt.uint_t n -> FStar.UInt.uint_t n
(declare-fun Tm_arrow_f4d897275479f32ec94ab14cea117895 () Term)
(declare-fun FStar.UInt.logand@tok () Term)

; </end encoding FStar.UInt.logand>


; <Start encoding FStar.UInt.logxor>

(declare-fun FStar.UInt.logxor (Term Term Term) Term)

(declare-fun FStar.UInt.logxor@tok () Term)

; </end encoding FStar.UInt.logxor>


; <Start encoding FStar.UInt.logor>

(declare-fun FStar.UInt.logor (Term Term Term) Term)

(declare-fun FStar.UInt.logor@tok () Term)

; </end encoding FStar.UInt.logor>


; <Start encoding FStar.UInt.lognot>

(declare-fun FStar.UInt.lognot (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt.uint_t n -> FStar.UInt.uint_t n
(declare-fun Tm_arrow_7e93208f7d6c7796851172614443345f () Term)
(declare-fun FStar.UInt.lognot@tok () Term)

; </end encoding FStar.UInt.lognot>


; <Start encoding FStar.UInt.logand_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_definition@tok () Term)


; </end encoding FStar.UInt.logand_definition>


; <Start encoding FStar.UInt.logxor_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_definition@tok () Term)


; </end encoding FStar.UInt.logxor_definition>


; <Start encoding FStar.UInt.logor_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_definition@tok () Term)


; </end encoding FStar.UInt.logor_definition>


; <Start encoding FStar.UInt.lognot_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lognot_definition (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lognot_definition@tok () Term)


; </end encoding FStar.UInt.lognot_definition>


; <Start encoding FStar.UInt.minus>

(declare-fun FStar.UInt.minus (Term Term) Term)

(declare-fun FStar.UInt.minus@tok () Term)

; </end encoding FStar.UInt.minus>


; <Start encoding FStar.UInt.logand_commutative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_commutative (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_commutative@tok () Term)

; </end encoding FStar.UInt.logand_commutative>


; <Start encoding FStar.UInt.logand_associative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_associative (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_associative@tok () Term)

; </end encoding FStar.UInt.logand_associative>


; <Start encoding FStar.UInt.logand_self>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_self (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_self@tok () Term)

; </end encoding FStar.UInt.logand_self>


; <Start encoding FStar.UInt.logand_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_lemma_1@tok () Term)

; </end encoding FStar.UInt.logand_lemma_1>


; <Start encoding FStar.UInt.logand_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_lemma_2@tok () Term)

; </end encoding FStar.UInt.logand_lemma_2>


; <Start encoding FStar.UInt.subset_vec_le_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.subset_vec_le_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.subset_vec_le_lemma@tok () Term)

; </end encoding FStar.UInt.subset_vec_le_lemma>


; <Start encoding FStar.UInt.logand_le>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_le (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_le@tok () Term)

; </end encoding FStar.UInt.logand_le>


; <Start encoding FStar.UInt.logxor_commutative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_commutative (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_commutative@tok () Term)

; </end encoding FStar.UInt.logxor_commutative>


; <Start encoding FStar.UInt.logxor_associative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_associative (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_associative@tok () Term)

; </end encoding FStar.UInt.logxor_associative>


; <Start encoding FStar.UInt.logxor_self>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_self (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_self@tok () Term)

; </end encoding FStar.UInt.logxor_self>


; <Start encoding FStar.UInt.logxor_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_lemma_1@tok () Term)

; </end encoding FStar.UInt.logxor_lemma_1>


; <Start encoding FStar.UInt.logxor_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_lemma_2@tok () Term)

; </end encoding FStar.UInt.logxor_lemma_2>


; <Start encoding FStar.UInt.xor>

(declare-fun FStar.UInt.xor (Term Term) Term)
;;;;;;;;;;;;;;;;b: Prims.bool -> b': Prims.bool -> Prims.bool
(declare-fun Tm_arrow_a41b9b98d4288401e09e5c3b51ccc4f5 () Term)
(declare-fun FStar.UInt.xor@tok () Term)

; </end encoding FStar.UInt.xor>


; <Start encoding FStar.UInt.xor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.xor_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.xor_lemma@tok () Term)

; </end encoding FStar.UInt.xor_lemma>


; <Start encoding FStar.UInt.logxor_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_inv (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_inv@tok () Term)

; </end encoding FStar.UInt.logxor_inv>


; <Start encoding FStar.UInt.logxor_neq_nonzero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_neq_nonzero (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_neq_nonzero@tok () Term)

; </end encoding FStar.UInt.logxor_neq_nonzero>


; <Start encoding FStar.UInt.logor_commutative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_commutative (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_commutative@tok () Term)

; </end encoding FStar.UInt.logor_commutative>


; <Start encoding FStar.UInt.logor_associative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_associative (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_associative@tok () Term)

; </end encoding FStar.UInt.logor_associative>


; <Start encoding FStar.UInt.logor_self>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_self (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_self@tok () Term)

; </end encoding FStar.UInt.logor_self>


; <Start encoding FStar.UInt.logor_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_lemma_1@tok () Term)

; </end encoding FStar.UInt.logor_lemma_1>


; <Start encoding FStar.UInt.logor_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_lemma_2@tok () Term)

; </end encoding FStar.UInt.logor_lemma_2>


; <Start encoding FStar.UInt.superset_vec_ge_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.superset_vec_ge_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.superset_vec_ge_lemma@tok () Term)

; </end encoding FStar.UInt.superset_vec_ge_lemma>


; <Start encoding FStar.UInt.logor_ge>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_ge (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_ge@tok () Term)

; </end encoding FStar.UInt.logor_ge>


; <Start encoding FStar.UInt.lognot_self>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lognot_self (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lognot_self@tok () Term)

; </end encoding FStar.UInt.lognot_self>


; <Start encoding FStar.UInt.lognot_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lognot_lemma_1 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lognot_lemma_1@tok () Term)

; </end encoding FStar.UInt.lognot_lemma_1>


; <Start encoding FStar.UInt.index_to_vec_ones>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.index_to_vec_ones (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.index_to_vec_ones@tok () Term)
(declare-fun Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d (Term) Term)


; </end encoding FStar.UInt.index_to_vec_ones>


; <Start encoding FStar.UInt.logor_disjoint>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_disjoint (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_disjoint@tok () Term)

; </end encoding FStar.UInt.logor_disjoint>


; <Start encoding FStar.UInt.logand_mask>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_mask (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_mask@tok () Term)

; </end encoding FStar.UInt.logand_mask>


; <Start encoding FStar.UInt.shift_left>

(declare-fun FStar.UInt.shift_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt.uint_t n -> s: Prims.nat -> FStar.UInt.uint_t n
(declare-fun Tm_arrow_88bed77db23726a0c4c74cf2019c096b () Term)
(declare-fun FStar.UInt.shift_left@tok () Term)

; </end encoding FStar.UInt.shift_left>


; <Start encoding FStar.UInt.shift_right>

(declare-fun FStar.UInt.shift_right (Term Term Term) Term)

(declare-fun FStar.UInt.shift_right@tok () Term)

; </end encoding FStar.UInt.shift_right>


; <Start encoding FStar.UInt.shift_left_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_lemma_1@tok () Term)


; </end encoding FStar.UInt.shift_left_lemma_1>


; <Start encoding FStar.UInt.shift_left_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_lemma_2@tok () Term)


; </end encoding FStar.UInt.shift_left_lemma_2>


; <Start encoding FStar.UInt.shift_right_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_lemma_1@tok () Term)


; </end encoding FStar.UInt.shift_right_lemma_1>


; <Start encoding FStar.UInt.shift_right_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_lemma_2@tok () Term)


; </end encoding FStar.UInt.shift_right_lemma_2>


; <Start encoding FStar.UInt.shift_left_logand_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_logand_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_logand_lemma@tok () Term)

; </end encoding FStar.UInt.shift_left_logand_lemma>


; <Start encoding FStar.UInt.shift_right_logand_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_logand_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_logand_lemma@tok () Term)

; </end encoding FStar.UInt.shift_right_logand_lemma>


; <Start encoding FStar.UInt.shift_left_logxor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_logxor_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_logxor_lemma@tok () Term)

; </end encoding FStar.UInt.shift_left_logxor_lemma>


; <Start encoding FStar.UInt.shift_right_logxor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_logxor_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_logxor_lemma@tok () Term)

; </end encoding FStar.UInt.shift_right_logxor_lemma>


; <Start encoding FStar.UInt.shift_left_logor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_logor_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_logor_lemma@tok () Term)

; </end encoding FStar.UInt.shift_left_logor_lemma>


; <Start encoding FStar.UInt.shift_right_logor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_logor_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_logor_lemma@tok () Term)

; </end encoding FStar.UInt.shift_right_logor_lemma>


; <Start encoding FStar.UInt.shift_left_value_aux_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_value_aux_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_value_aux_1@tok () Term)

; </end encoding FStar.UInt.shift_left_value_aux_1>


; <Start encoding FStar.UInt.shift_left_value_aux_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_value_aux_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_value_aux_2@tok () Term)

; </end encoding FStar.UInt.shift_left_value_aux_2>


; <Start encoding FStar.UInt.shift_left_value_aux_3>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_value_aux_3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_value_aux_3@tok () Term)

; </end encoding FStar.UInt.shift_left_value_aux_3>


; <Start encoding FStar.UInt.shift_left_value_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_value_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_value_lemma@tok () Term)
;;;;;;;;;;;;;;;;Lemma: FStar.UInt.shift_left_value_lemma
;;; Fact-ids: Name FStar.UInt.shift_left_value_lemma; Namespace FStar.UInt
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.pos)
(HasType @x1
(FStar.UInt.uint_t @x0))
(HasType @x2
Prims.nat))

;; def=FStar.UInt.fsti(515,17-515,58); use=FStar.UInt.fsti(515,17-515,58)
(= (FStar.UInt.shift_left @x0
@x1
@x2)
(Prims.op_Modulus (Prims.op_Multiply @x1
(Prims.pow2.fuel_instrumented ZFuel
@x2))
(Prims.pow2.fuel_instrumented ZFuel
@x0)))
)
 

:pattern ((FStar.UInt.shift_left @x0
@x1
@x2))
:qid lemma_FStar.UInt.shift_left_value_lemma))
:named lemma_FStar.UInt.shift_left_value_lemma))

; </end encoding FStar.UInt.shift_left_value_lemma>


; <Start encoding FStar.UInt.shift_right_value_aux_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_value_aux_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_value_aux_1@tok () Term)

; </end encoding FStar.UInt.shift_right_value_aux_1>


; <Start encoding FStar.UInt.shift_right_value_aux_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_value_aux_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_value_aux_2@tok () Term)

; </end encoding FStar.UInt.shift_right_value_aux_2>


; <Start encoding FStar.UInt.shift_right_value_aux_3>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_value_aux_3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_value_aux_3@tok () Term)

; </end encoding FStar.UInt.shift_right_value_aux_3>


; <Start encoding FStar.UInt.shift_right_value_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_value_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_value_lemma@tok () Term)

; </end encoding FStar.UInt.shift_right_value_lemma>


; <Start encoding FStar.UInt.msb>

(declare-fun FStar.UInt.msb (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt.uint_t n -> Prims.bool
(declare-fun Tm_arrow_d4ac65fa6e48f26152e66f6f5f032db4 () Term)
(declare-fun FStar.UInt.msb@tok () Term)

; </end encoding FStar.UInt.msb>


; <Start encoding FStar.UInt.lemma_msb_pow2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_msb_pow2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_msb_pow2@tok () Term)

; </end encoding FStar.UInt.lemma_msb_pow2>


; <Start encoding FStar.UInt.lemma_minus_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_minus_zero (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_minus_zero@tok () Term)

; </end encoding FStar.UInt.lemma_minus_zero>


; <Start encoding FStar.UInt.lemma_msb_gte>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_msb_gte (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_msb_gte@tok () Term)

; </end encoding FStar.UInt.lemma_msb_gte>


; <Start encoding FStar.UInt.lemma_uint_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_uint_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_uint_mod@tok () Term)

; </end encoding FStar.UInt.lemma_uint_mod>


; <Start encoding FStar.UInt.lemma_add_sub_cancel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_add_sub_cancel (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_add_sub_cancel@tok () Term)

; </end encoding FStar.UInt.lemma_add_sub_cancel>


; <Start encoding FStar.UInt.lemma_mod_sub_distr_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_mod_sub_distr_l (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_mod_sub_distr_l@tok () Term)

; </end encoding FStar.UInt.lemma_mod_sub_distr_l>


; <Start encoding FStar.UInt.lemma_sub_add_cancel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_sub_add_cancel (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_sub_add_cancel@tok () Term)

; </end encoding FStar.UInt.lemma_sub_add_cancel>


; <Start encoding FStar.UInt.zero_extend_vec>

(declare-fun FStar.UInt.zero_extend_vec (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.BitVector.bv_t n -> FStar.BitVector.bv_t (n + 1)
(declare-fun Tm_arrow_dcb1e97275faab10b7eb1bdfcfbde371 () Term)
(declare-fun FStar.UInt.zero_extend_vec@tok () Term)

; </end encoding FStar.UInt.zero_extend_vec>


; <Start encoding FStar.UInt.one_extend_vec>

(declare-fun FStar.UInt.one_extend_vec (Term Term) Term)

(declare-fun FStar.UInt.one_extend_vec@tok () Term)

; </end encoding FStar.UInt.one_extend_vec>


; <Start encoding FStar.UInt.zero_extend>

(declare-fun FStar.UInt.zero_extend (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt.uint_t n -> FStar.UInt.uint_t (n + 1)
(declare-fun Tm_arrow_8a55f1e2e0fc60c6f44b88ae88621b5f () Term)
(declare-fun FStar.UInt.zero_extend@tok () Term)

; </end encoding FStar.UInt.zero_extend>


; <Start encoding FStar.UInt.one_extend>

(declare-fun FStar.UInt.one_extend (Term Term) Term)

(declare-fun FStar.UInt.one_extend@tok () Term)

; </end encoding FStar.UInt.one_extend>


; <Start encoding FStar.UInt.lemma_zero_extend>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_zero_extend (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_zero_extend@tok () Term)
(declare-fun Tm_refine_a2362280d81dbd526f1fa3f771e8faad (Term) Term)

; </end encoding FStar.UInt.lemma_zero_extend>


; <Start encoding FStar.UInt.lemma_one_extend>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_one_extend (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_one_extend@tok () Term)

; </end encoding FStar.UInt.lemma_one_extend>


; <Start encoding FStar.UInt.lemma_lognot_zero_ext>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_zero_ext (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_zero_ext@tok () Term)

; </end encoding FStar.UInt.lemma_lognot_zero_ext>


; <Start encoding FStar.UInt.lemma_lognot_one_ext>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_one_ext (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_one_ext@tok () Term)

; </end encoding FStar.UInt.lemma_lognot_one_ext>


; <Start encoding FStar.UInt.lemma_lognot_value_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_value_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_value_mod@tok () Term)

; </end encoding FStar.UInt.lemma_lognot_value_mod>


; <Start encoding FStar.UInt.lemma_lognot_value_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_value_zero (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_value_zero@tok () Term)

; </end encoding FStar.UInt.lemma_lognot_value_zero>


; <Start encoding FStar.UInt.lemma_one_mod_pow2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_one_mod_pow2 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_one_mod_pow2@tok () Term)

; </end encoding FStar.UInt.lemma_one_mod_pow2>


; <Start encoding FStar.UInt.lemma_lognot_value_nonzero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_value_nonzero (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_value_nonzero@tok () Term)

; </end encoding FStar.UInt.lemma_lognot_value_nonzero>


; <Start encoding FStar.UInt.lemma_lognot_value>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_value (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_value@tok () Term)

; </end encoding FStar.UInt.lemma_lognot_value>


; <Start encoding FStar.UInt.lemma_minus_eq_zero_sub>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_minus_eq_zero_sub (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_minus_eq_zero_sub@tok () Term)

; </end encoding FStar.UInt.lemma_minus_eq_zero_sub>


; End Externals for interface FStar.UInt


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End interface FStar.UInt (719 decls; total size 55578)

;;; Start interface FStar.Int

; Externals for interface FStar.Int


; <Start encoding FStar.Int.pow2_values>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.pow2_values (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.pow2_values@tok () Term)

; </end encoding FStar.Int.pow2_values>


; <Start encoding FStar.Int.max_int>

(declare-fun FStar.Int.max_int (Term) Term)
;;;;;;;;;;;;;;;;n: Prims.pos -> Prims.int
(declare-fun Tm_arrow_08643d78e274903c12e67630bc27e2ff () Term)
(declare-fun FStar.Int.max_int@tok () Term)

; </end encoding FStar.Int.max_int>


; <Start encoding FStar.Int.min_int>

(declare-fun FStar.Int.min_int (Term) Term)

(declare-fun FStar.Int.min_int@tok () Term)

; </end encoding FStar.Int.min_int>


; <Start encoding FStar.Int.fits>

(declare-fun FStar.Int.fits (Term Term) Term)
;;;;;;;;;;;;;;;;x: Prims.int -> n: Prims.pos -> Prims.bool
(declare-fun Tm_arrow_0cc3774076f9b140636f49c6b11206ea () Term)
(declare-fun FStar.Int.fits@tok () Term)

; </end encoding FStar.Int.fits>


; <Start encoding FStar.Int.size>

(declare-fun FStar.Int.size (Term Term) Term)
;;;;;;;;;;;;;;;;x: Prims.int -> n: Prims.pos -> Type
(declare-fun Tm_arrow_7146999d8e685cab1fa5e885783d4ad4 () Term)
(declare-fun FStar.Int.size@tok () Term)

; </end encoding FStar.Int.size>


; <Start encoding FStar.Int.int_t>

(declare-fun FStar.Int.int_t (Term) Term)
;;;;;;;;;;;;;;;;n: Prims.pos -> Type
(declare-fun Tm_arrow_e214da407f361f6aa0144228799685d1 () Term)
(declare-fun FStar.Int.int_t@tok () Term)
(declare-fun Tm_refine_c156ecc6eab05d1687a383ef171435eb (Term) Term)

; </end encoding FStar.Int.int_t>


; <Start encoding FStar.Int.op_Slash>


(declare-fun FStar.Int.op_Slash (Term Term) Term)

;;;;;;;;;;;;;;;;a: Prims.int -> b: Prims.int{b <> 0} -> Prims.int
(declare-fun Tm_arrow_2c2bb042329e2e757b97305bbc29732f () Term)
(declare-fun FStar.Int.op_Slash@tok () Term)


; </end encoding FStar.Int.op_Slash>


; <Start encoding FStar.Int.op_At_Percent>

(declare-fun Tm_refine_6f861454c283cab7fef581bd2f2d57c5 () Term)
(declare-fun FStar.Int.op_At_Percent (Term Term) Term)

;;;;;;;;;;;;;;;;v: Prims.int -> p: Prims.int{p > 0 /\ p % 2 = 0} -> Prims.int
(declare-fun Tm_arrow_3896a5194433b12d044f39d7e0b679dc () Term)
(declare-fun FStar.Int.op_At_Percent@tok () Term)


; </end encoding FStar.Int.op_At_Percent>


; <Start encoding FStar.Int.zero>

(declare-fun FStar.Int.zero (Term) Term)
;;;;;;;;;;;;;;;;n: Prims.pos -> FStar.Int.int_t n
(declare-fun Tm_arrow_cb14a53d8f51c2a1b5f2e44ec1c55960 () Term)
(declare-fun FStar.Int.zero@tok () Term)

; </end encoding FStar.Int.zero>


; <Skipped />


; <Start encoding FStar.Int.pow2_n>

(declare-fun Tm_refine_cf74cf5c1e7834b84db9cc7ebce886a3 (Term) Term)
(declare-fun FStar.Int.pow2_n (Term Term) Term)

;;;;;;;;;;;;;;;;p: Prims.nat{p < n - 1} -> FStar.Int.int_t n
(declare-fun Tm_arrow_42409e57c55f2a2d0836412885dba252 () Term)
(declare-fun FStar.Int.pow2_n@tok () Term)


; </end encoding FStar.Int.pow2_n>


; <Start encoding FStar.Int.pow2_minus_one>

(declare-fun Tm_refine_4fe9a5df27ca5859eef8add9fc6819fb () Term)

(declare-fun FStar.Int.pow2_minus_one (Term Term) Term)


;;;;;;;;;;;;;;;;m: Prims.nat{m < n} -> FStar.Int.int_t n
(declare-fun Tm_arrow_81be2ee4e7a1e46c9526aae5e34753cd () Term)
(declare-fun FStar.Int.pow2_minus_one@tok () Term)



; </end encoding FStar.Int.pow2_minus_one>


; <Start encoding FStar.Int.one>


(declare-fun FStar.Int.one (Term) Term)

;;;;;;;;;;;;;;;;n: Prims.pos{1 < n} -> FStar.Int.int_t n
(declare-fun Tm_arrow_e2450f3af7bd5b3af47241cdfb1c2db6 () Term)
(declare-fun FStar.Int.one@tok () Term)


; </end encoding FStar.Int.one>


; <Skipped />


; <Start encoding FStar.Int.ones>

(declare-fun FStar.Int.ones (Term) Term)

(declare-fun FStar.Int.ones@tok () Term)

; </end encoding FStar.Int.ones>


; <Start encoding FStar.Int.incr>

(declare-fun FStar.Int.incr (Term Term) Term)
(declare-fun Tm_refine_dcbbaccec0a9dbd3681a14f97d5258f4 (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int.int_t n -> Prims.Pure (FStar.Int.int_t n)
(declare-fun Tm_arrow_6a595e67db857b4e04ea431fd250db84 () Term)
(declare-fun FStar.Int.incr@tok () Term)


; </end encoding FStar.Int.incr>


; <Start encoding FStar.Int.decr>

(declare-fun FStar.Int.decr (Term Term) Term)

;;;;;;;;;;;;;;;;a: FStar.Int.int_t n -> Prims.Pure (FStar.Int.int_t n)
(declare-fun Tm_arrow_9932ad821a47221f73f30476224722b3 () Term)
(declare-fun FStar.Int.decr@tok () Term)


; </end encoding FStar.Int.decr>


; <Start encoding FStar.Int.incr_underspec>

(declare-fun FStar.Int.incr_underspec (Term Term) Term)
(declare-fun Tm_refine_d4a5cafc6f5a0f55c9100191cf1c919d (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int.int_t n -> Prims.Pure (FStar.Int.int_t n)
(declare-fun Tm_arrow_7da78e36e44c2863a3eea73f058069f8 () Term)
(declare-fun FStar.Int.incr_underspec@tok () Term)


; </end encoding FStar.Int.incr_underspec>


; <Start encoding FStar.Int.decr_underspec>

(declare-fun FStar.Int.decr_underspec (Term Term) Term)
(declare-fun Tm_refine_fe0f51cc65c8d431b43406ae8d7f7c7c (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int.int_t n -> Prims.Pure (FStar.Int.int_t n)
(declare-fun Tm_arrow_f8ffe0a78d6e5b3dac71656ff7d0fc5a () Term)
(declare-fun FStar.Int.decr_underspec@tok () Term)


; </end encoding FStar.Int.decr_underspec>


; <Start encoding FStar.Int.incr_mod>

(declare-fun FStar.Int.incr_mod (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int.int_t n -> FStar.Int.int_t n
(declare-fun Tm_arrow_d4f13608b577247ae2db20b2380b2245 () Term)
(declare-fun FStar.Int.incr_mod@tok () Term)

; </end encoding FStar.Int.incr_mod>


; <Start encoding FStar.Int.decr_mod>

(declare-fun FStar.Int.decr_mod (Term Term) Term)

(declare-fun FStar.Int.decr_mod@tok () Term)

; </end encoding FStar.Int.decr_mod>


; <Start encoding FStar.Int.add>

(declare-fun FStar.Int.add (Term Term Term) Term)

;;;;;;;;;;;;;;;;a: FStar.Int.int_t n -> b: FStar.Int.int_t n -> Prims.Pure (FStar.Int.int_t n)
(declare-fun Tm_arrow_cbeba074d8c79f94519373cfde34463f () Term)
(declare-fun FStar.Int.add@tok () Term)


; </end encoding FStar.Int.add>


; <Start encoding FStar.Int.add_underspec>

(declare-fun FStar.Int.add_underspec (Term Term Term) Term)
(declare-fun Tm_refine_7bd0fa444597c4ebd4664ae6a997600a (Term Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int.int_t n -> b: FStar.Int.int_t n -> Prims.Pure (FStar.Int.int_t n)
(declare-fun Tm_arrow_5c387c335d6e6391b1c81e806fbecc03 () Term)
(declare-fun FStar.Int.add_underspec@tok () Term)


; </end encoding FStar.Int.add_underspec>


; <Skipped />


; <Start encoding FStar.Int.add_mod>

(declare-fun FStar.Int.add_mod (Term Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int.int_t n -> b: FStar.Int.int_t n -> FStar.Int.int_t n
(declare-fun Tm_arrow_18a34a79f38620fd3e207686d0d0d13e () Term)
(declare-fun FStar.Int.add_mod@tok () Term)

; </end encoding FStar.Int.add_mod>


; <Start encoding FStar.Int.sub>

(declare-fun FStar.Int.sub (Term Term Term) Term)

;;;;;;;;;;;;;;;;a: FStar.Int.int_t n -> b: FStar.Int.int_t n -> Prims.Pure (FStar.Int.int_t n)
(declare-fun Tm_arrow_d5e0171e91c640344190e488b3c3a2c8 () Term)
(declare-fun FStar.Int.sub@tok () Term)


; </end encoding FStar.Int.sub>


; <Start encoding FStar.Int.sub_underspec>

(declare-fun FStar.Int.sub_underspec (Term Term Term) Term)
(declare-fun Tm_refine_b4c298e8d79868eb1409c37bf0adba2a (Term Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int.int_t n -> b: FStar.Int.int_t n -> Prims.Pure (FStar.Int.int_t n)
(declare-fun Tm_arrow_f42d521160539850f1993d34e8fc87c9 () Term)
(declare-fun FStar.Int.sub_underspec@tok () Term)


; </end encoding FStar.Int.sub_underspec>


; <Start encoding FStar.Int.sub_mod>

(declare-fun FStar.Int.sub_mod (Term Term Term) Term)

(declare-fun FStar.Int.sub_mod@tok () Term)

; </end encoding FStar.Int.sub_mod>


; <Start encoding FStar.Int.mul>

(declare-fun FStar.Int.mul (Term Term Term) Term)

;;;;;;;;;;;;;;;;a: FStar.Int.int_t n -> b: FStar.Int.int_t n -> Prims.Pure (FStar.Int.int_t n)
(declare-fun Tm_arrow_59f7075a28af88a37cc8d77ed622794d () Term)
(declare-fun FStar.Int.mul@tok () Term)


; </end encoding FStar.Int.mul>


; <Start encoding FStar.Int.mul_underspec>

(declare-fun FStar.Int.mul_underspec (Term Term Term) Term)
(declare-fun Tm_refine_e0808d72dd3bcd98cbd025f677f0b52b (Term Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int.int_t n -> b: FStar.Int.int_t n -> Prims.Pure (FStar.Int.int_t n)
(declare-fun Tm_arrow_c3825549d78bf3b47b1fc19cca6efb0a () Term)
(declare-fun FStar.Int.mul_underspec@tok () Term)


; </end encoding FStar.Int.mul_underspec>


; <Start encoding FStar.Int.mul_mod>

(declare-fun FStar.Int.mul_mod (Term Term Term) Term)

(declare-fun FStar.Int.mul_mod@tok () Term)

; </end encoding FStar.Int.mul_mod>


; <Skipped />


; <Start encoding FStar.Int.div>

(declare-fun Tm_refine_83ac8ca0eae25a164d9f9c0d728fbff9 (Term) Term)
(declare-fun FStar.Int.div (Term Term Term) Term)

(declare-fun Tm_refine_70714641831ff35b8943074d85fc7551 (Term Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int.int_t n -> b: FStar.Int.int_t n {b <> 0} -> Prims.Pure (FStar.Int.int_t n)
(declare-fun Tm_arrow_59a1c11be2fac6a30b2acdbfbf1eda90 () Term)
(declare-fun FStar.Int.div@tok () Term)



; </end encoding FStar.Int.div>


; <Start encoding FStar.Int.div_underspec>


(declare-fun FStar.Int.div_underspec (Term Term Term) Term)

(declare-fun Tm_refine_af4cbfe65dbbaeb55593b4625c2c5048 (Term Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int.int_t n -> b: FStar.Int.int_t n {b <> 0} -> Prims.Pure (FStar.Int.int_t n)
(declare-fun Tm_arrow_0f80d94a97a6b0663b1915a2060513cc () Term)
(declare-fun FStar.Int.div_underspec@tok () Term)


; </end encoding FStar.Int.div_underspec>


; <Start encoding FStar.Int.div_size>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.div_size (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.div_size@tok () Term)

; </end encoding FStar.Int.div_size>


; <Start encoding FStar.Int.udiv>

(declare-fun Tm_refine_8506aeb4dd19f2072121aa1df21f1bb2 (Term) Term)

(declare-fun FStar.Int.udiv (Term Term Term) Term)



;;;;;;;;;;;;;;;;a: FStar.Int.int_t n {FStar.Int.min_int n < a} -> b: FStar.Int.int_t n {b <> 0}   -> c: FStar.Int.int_t n {b <> 0 ==> a / b = c}
(declare-fun Tm_arrow_82b3f90612854f7c40f1bdc10bed000c () Term)
(declare-fun FStar.Int.udiv@tok () Term)




; </end encoding FStar.Int.udiv>


; <Start encoding FStar.Int.mod>


(declare-fun FStar.Int.mod (Term Term Term) Term)

;;;;;;;;;;;;;;;;a: FStar.Int.int_t n -> b: FStar.Int.int_t n {b <> 0} -> FStar.Int.int_t n
(declare-fun Tm_arrow_d683be1bb1ee9de66cbbf189f68ec0e5 () Term)
(declare-fun FStar.Int.mod@tok () Term)


; </end encoding FStar.Int.mod>


; <Start encoding FStar.Int.eq>

(declare-fun FStar.Int.eq (Term Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int.int_t n -> b: FStar.Int.int_t n -> Prims.bool
(declare-fun Tm_arrow_8a34ac1c572f737da4642094a6f8e213 () Term)
(declare-fun FStar.Int.eq@tok () Term)

; </end encoding FStar.Int.eq>


; <Start encoding FStar.Int.gt>

(declare-fun FStar.Int.gt (Term Term Term) Term)

(declare-fun FStar.Int.gt@tok () Term)

; </end encoding FStar.Int.gt>


; <Start encoding FStar.Int.gte>

(declare-fun FStar.Int.gte (Term Term Term) Term)

(declare-fun FStar.Int.gte@tok () Term)

; </end encoding FStar.Int.gte>


; <Start encoding FStar.Int.lt>

(declare-fun FStar.Int.lt (Term Term Term) Term)

(declare-fun FStar.Int.lt@tok () Term)

; </end encoding FStar.Int.lt>


; <Start encoding FStar.Int.lte>

(declare-fun FStar.Int.lte (Term Term Term) Term)

(declare-fun FStar.Int.lte@tok () Term)

; </end encoding FStar.Int.lte>


; <Skipped />


; <Start encoding FStar.Int.to_uint>

(declare-fun FStar.Int.to_uint (Term Term) Term)
;;;;;;;;;;;;;;;;x: FStar.Int.int_t n -> FStar.UInt.uint_t n
(declare-fun Tm_arrow_3e678eb9a841c4f9b41c85aeb802f0f1 () Term)
(declare-fun FStar.Int.to_uint@tok () Term)

; </end encoding FStar.Int.to_uint>


; <Start encoding FStar.Int.from_uint>

(declare-fun FStar.Int.from_uint (Term Term) Term)
;;;;;;;;;;;;;;;;x: FStar.UInt.uint_t n -> FStar.Int.int_t n
(declare-fun Tm_arrow_c31ea52198bde53869920a7d3bc4602c () Term)
(declare-fun FStar.Int.from_uint@tok () Term)

; </end encoding FStar.Int.from_uint>


; <Start encoding FStar.Int.to_uint_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.to_uint_injective (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.to_uint_injective@tok () Term)

; </end encoding FStar.Int.to_uint_injective>


; <Start encoding FStar.Int.to_int_t>

(declare-fun FStar.Int.to_int_t (Term Term) Term)
;;;;;;;;;;;;;;;;m: Prims.pos -> a: Prims.int -> FStar.Int.int_t m
(declare-fun Tm_arrow_4814b4e3e94f328f65fd76f9d65943d4 () Term)
(declare-fun FStar.Int.to_int_t@tok () Term)

; </end encoding FStar.Int.to_int_t>


; <Start encoding FStar.Int.to_vec>

(declare-fun FStar.Int.to_vec (Term Term) Term)
;;;;;;;;;;;;;;;;num: FStar.Int.int_t n -> FStar.BitVector.bv_t n
(declare-fun Tm_arrow_45e09970c9488f8db22355eb21b4b697 () Term)
(declare-fun FStar.Int.to_vec@tok () Term)

; </end encoding FStar.Int.to_vec>


; <Start encoding FStar.Int.from_vec>

(declare-fun FStar.Int.from_vec (Term Term) Term)
;;;;;;;;;;;;;;;;vec: FStar.BitVector.bv_t n -> FStar.Int.int_t n
(declare-fun Tm_arrow_82852c1e83761b67bc6fcca3c7b80d79 () Term)
(declare-fun FStar.Int.from_vec@tok () Term)

; </end encoding FStar.Int.from_vec>


; <Start encoding FStar.Int.to_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.to_vec_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.to_vec_lemma_1@tok () Term)

; </end encoding FStar.Int.to_vec_lemma_1>


; <Start encoding FStar.Int.to_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.to_vec_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.to_vec_lemma_2@tok () Term)

; </end encoding FStar.Int.to_vec_lemma_2>


; <Start encoding FStar.Int.inverse_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.inverse_aux (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.inverse_aux@tok () Term)


; </end encoding FStar.Int.inverse_aux>


; <Start encoding FStar.Int.inverse_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.inverse_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.inverse_vec_lemma@tok () Term)

; </end encoding FStar.Int.inverse_vec_lemma>


; <Start encoding FStar.Int.inverse_num_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.inverse_num_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.inverse_num_lemma@tok () Term)

; </end encoding FStar.Int.inverse_num_lemma>


; <Start encoding FStar.Int.from_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.from_vec_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.from_vec_lemma_1@tok () Term)

; </end encoding FStar.Int.from_vec_lemma_1>


; <Start encoding FStar.Int.from_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.from_vec_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.from_vec_lemma_2@tok () Term)

; </end encoding FStar.Int.from_vec_lemma_2>


; <Start encoding FStar.Int.zero_to_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.zero_to_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.zero_to_vec_lemma@tok () Term)


; </end encoding FStar.Int.zero_to_vec_lemma>


; <Start encoding FStar.Int.zero_from_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.zero_from_vec_lemma (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.zero_from_vec_lemma@tok () Term)

; </end encoding FStar.Int.zero_from_vec_lemma>


; <Start encoding FStar.Int.one_to_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.one_to_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.one_to_vec_lemma@tok () Term)



; </end encoding FStar.Int.one_to_vec_lemma>


; <Start encoding FStar.Int.pow2_to_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.pow2_to_vec_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.pow2_to_vec_lemma@tok () Term)



; </end encoding FStar.Int.pow2_to_vec_lemma>


; <Start encoding FStar.Int.pow2_from_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.pow2_from_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.pow2_from_vec_lemma@tok () Term)
(declare-fun Tm_refine_b555e04c50662c1d4e406318a3bd8d8d (Term) Term)

; </end encoding FStar.Int.pow2_from_vec_lemma>


; <Start encoding FStar.Int.ones_to_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.ones_to_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.ones_to_vec_lemma@tok () Term)


; </end encoding FStar.Int.ones_to_vec_lemma>


; <Start encoding FStar.Int.ones_from_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.ones_from_vec_lemma (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.ones_from_vec_lemma@tok () Term)

; </end encoding FStar.Int.ones_from_vec_lemma>


; <Start encoding FStar.Int.nth>


(declare-fun FStar.Int.nth (Term Term Term) Term)

;;;;;;;;;;;;;;;;a: FStar.Int.int_t n -> i: Prims.nat{i < n} -> Prims.bool
(declare-fun Tm_arrow_4019956ce842311d665dc67ac9fd8b34 () Term)
(declare-fun FStar.Int.nth@tok () Term)


; </end encoding FStar.Int.nth>


; <Start encoding FStar.Int.nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.nth_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.nth_lemma@tok () Term)

; </end encoding FStar.Int.nth_lemma>


; <Start encoding FStar.Int.zero_nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.zero_nth_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.zero_nth_lemma@tok () Term)


; </end encoding FStar.Int.zero_nth_lemma>


; <Start encoding FStar.Int.one_nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.one_nth_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.one_nth_lemma@tok () Term)



; </end encoding FStar.Int.one_nth_lemma>


; <Start encoding FStar.Int.ones_nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.ones_nth_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.ones_nth_lemma@tok () Term)


; </end encoding FStar.Int.ones_nth_lemma>


; <Start encoding FStar.Int.logand>

(declare-fun FStar.Int.logand (Term Term Term) Term)

(declare-fun FStar.Int.logand@tok () Term)

; </end encoding FStar.Int.logand>


; <Start encoding FStar.Int.logxor>

(declare-fun FStar.Int.logxor (Term Term Term) Term)

(declare-fun FStar.Int.logxor@tok () Term)

; </end encoding FStar.Int.logxor>


; <Start encoding FStar.Int.logor>

(declare-fun FStar.Int.logor (Term Term Term) Term)

(declare-fun FStar.Int.logor@tok () Term)

; </end encoding FStar.Int.logor>


; <Start encoding FStar.Int.lognot>

(declare-fun FStar.Int.lognot (Term Term) Term)

(declare-fun FStar.Int.lognot@tok () Term)

; </end encoding FStar.Int.lognot>


; <Start encoding FStar.Int.logand_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.logand_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.logand_definition@tok () Term)


; </end encoding FStar.Int.logand_definition>


; <Start encoding FStar.Int.logxor_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.logxor_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.logxor_definition@tok () Term)


; </end encoding FStar.Int.logxor_definition>


; <Start encoding FStar.Int.logor_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.logor_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.logor_definition@tok () Term)


; </end encoding FStar.Int.logor_definition>


; <Start encoding FStar.Int.lognot_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.lognot_definition (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.lognot_definition@tok () Term)


; </end encoding FStar.Int.lognot_definition>


; <Start encoding FStar.Int.minus>


(declare-fun FStar.Int.minus (Term Term) Term)

;;;;;;;;;;;;;;;;a: FStar.Int.int_t n -> FStar.Int.int_t n
(declare-fun Tm_arrow_04cc0f7bdc56c0cf812e46ad027a361f () Term)
(declare-fun FStar.Int.minus@tok () Term)


; </end encoding FStar.Int.minus>


; <Start encoding FStar.Int.logand_commutative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.logand_commutative (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.logand_commutative@tok () Term)

; </end encoding FStar.Int.logand_commutative>


; <Start encoding FStar.Int.logand_associative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.logand_associative (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.logand_associative@tok () Term)

; </end encoding FStar.Int.logand_associative>


; <Start encoding FStar.Int.logand_self>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.logand_self (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.logand_self@tok () Term)

; </end encoding FStar.Int.logand_self>


; <Start encoding FStar.Int.logand_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.logand_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.logand_lemma_1@tok () Term)

; </end encoding FStar.Int.logand_lemma_1>


; <Start encoding FStar.Int.logand_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.logand_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.logand_lemma_2@tok () Term)

; </end encoding FStar.Int.logand_lemma_2>


; <Start encoding FStar.Int.sign_bit_negative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.sign_bit_negative (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.sign_bit_negative@tok () Term)

; </end encoding FStar.Int.sign_bit_negative>


; <Start encoding FStar.Int.sign_bit_positive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.sign_bit_positive (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.sign_bit_positive@tok () Term)

; </end encoding FStar.Int.sign_bit_positive>


; <Start encoding FStar.Int.logand_pos_le>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.logand_pos_le (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.logand_pos_le@tok () Term)

; </end encoding FStar.Int.logand_pos_le>


; <Start encoding FStar.Int.logand_pow2_minus_one>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.logand_pow2_minus_one (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.logand_pow2_minus_one@tok () Term)

; </end encoding FStar.Int.logand_pow2_minus_one>


; <Start encoding FStar.Int.logand_max>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.logand_max (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.logand_max@tok () Term)

; </end encoding FStar.Int.logand_max>


; <Start encoding FStar.Int.logxor_commutative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.logxor_commutative (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.logxor_commutative@tok () Term)

; </end encoding FStar.Int.logxor_commutative>


; <Start encoding FStar.Int.logxor_associative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.logxor_associative (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.logxor_associative@tok () Term)

; </end encoding FStar.Int.logxor_associative>


; <Start encoding FStar.Int.logxor_self>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.logxor_self (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.logxor_self@tok () Term)

; </end encoding FStar.Int.logxor_self>


; <Start encoding FStar.Int.logxor_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.logxor_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.logxor_lemma_1@tok () Term)

; </end encoding FStar.Int.logxor_lemma_1>


; <Start encoding FStar.Int.logxor_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.logxor_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.logxor_lemma_2@tok () Term)

; </end encoding FStar.Int.logxor_lemma_2>


; <Start encoding FStar.Int.logxor_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.logxor_inv (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.logxor_inv@tok () Term)

; </end encoding FStar.Int.logxor_inv>


; <Start encoding FStar.Int.logxor_neq_nonzero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.logxor_neq_nonzero (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.logxor_neq_nonzero@tok () Term)

; </end encoding FStar.Int.logxor_neq_nonzero>


; <Start encoding FStar.Int.lognot_negative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.lognot_negative (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.lognot_negative@tok () Term)

; </end encoding FStar.Int.lognot_negative>


; <Start encoding FStar.Int.shift_left>

(declare-fun Tm_refine_f9945c9851ba67924155357268d171eb (Term) Term)
(declare-fun FStar.Int.shift_left (Term Term Term) Term)

;;;;;;;;;;;;;;;;a: FStar.Int.int_t n {0 <= a} -> s: Prims.nat -> FStar.Int.int_t n
(declare-fun Tm_arrow_855fa52a66bb6d9af33de248be8e1a9a () Term)
(declare-fun FStar.Int.shift_left@tok () Term)


; </end encoding FStar.Int.shift_left>


; <Start encoding FStar.Int.shift_right>


(declare-fun FStar.Int.shift_right (Term Term Term) Term)


(declare-fun FStar.Int.shift_right@tok () Term)


; </end encoding FStar.Int.shift_right>


; <Start encoding FStar.Int.shift_arithmetic_right>

(declare-fun FStar.Int.shift_arithmetic_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int.int_t n -> s: Prims.nat -> FStar.Int.int_t n
(declare-fun Tm_arrow_f565aa7121c91c2f8ce9f41727c7b7ca () Term)
(declare-fun FStar.Int.shift_arithmetic_right@tok () Term)

; </end encoding FStar.Int.shift_arithmetic_right>


; <Start encoding FStar.Int.shift_left_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.shift_left_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.shift_left_lemma_1@tok () Term)



; </end encoding FStar.Int.shift_left_lemma_1>


; <Start encoding FStar.Int.shift_left_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.shift_left_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.shift_left_lemma_2@tok () Term)



; </end encoding FStar.Int.shift_left_lemma_2>


; <Start encoding FStar.Int.shift_left_value_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.shift_left_value_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.shift_left_value_lemma@tok () Term)


; </end encoding FStar.Int.shift_left_value_lemma>


; <Start encoding FStar.Int.shift_right_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.shift_right_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.shift_right_lemma_1@tok () Term)



; </end encoding FStar.Int.shift_right_lemma_1>


; <Start encoding FStar.Int.shift_right_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.shift_right_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.shift_right_lemma_2@tok () Term)



; </end encoding FStar.Int.shift_right_lemma_2>


; <Start encoding FStar.Int.shift_arithmetic_right_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.shift_arithmetic_right_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.shift_arithmetic_right_lemma_1@tok () Term)


; </end encoding FStar.Int.shift_arithmetic_right_lemma_1>


; <Start encoding FStar.Int.shift_arithmetic_right_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int.shift_arithmetic_right_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int.shift_arithmetic_right_lemma_2@tok () Term)


; </end encoding FStar.Int.shift_arithmetic_right_lemma_2>


; End Externals for interface FStar.Int


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End interface FStar.Int (556 decls; total size 32604)

;;; Start interface FStar.UInt32

; Externals for interface FStar.UInt32


; <Start encoding FStar.UInt32.n>

(declare-fun FStar.UInt32.n (Dummy_sort) Term)

; </end encoding FStar.UInt32.n>


; <Skipped />


; <Start encoding FStar.UInt32.t>

(declare-fun FStar.UInt32.t (Dummy_sort) Term)

; </end encoding FStar.UInt32.t>


; <Start encoding FStar.UInt32.v>

(declare-fun FStar.UInt32.v (Term) Term)
;;;;;;;;;;;;;;;;x: FStar.UInt32.t -> FStar.UInt.uint_t 32
(declare-fun Tm_arrow_33a06d9a3ec1c77524ab958d37ae1453 () Term)
(declare-fun FStar.UInt32.v@tok () Term)
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt32.v; Namespace FStar.UInt32
(assert (! 
;; def=FStar.UInt32.fsti(54,4-54,5); use=FStar.UInt32.fsti(54,4-54,5)
(forall ((@x0 Term))
 (! (implies (HasType @x0
(FStar.UInt32.t Dummy_value))
(HasType (FStar.UInt32.v @x0)
(FStar.UInt.uint_t (BoxInt 32))))
 

:pattern ((FStar.UInt32.v @x0))
:qid typing_FStar.UInt32.v))

:named typing_FStar.UInt32.v))

; </end encoding FStar.UInt32.v>


; <Start encoding FStar.UInt32.uint_to_t>

(declare-fun FStar.UInt32.uint_to_t (Term) Term)
(declare-fun Tm_refine_0ea1fba779ad5718e28476faeef94d56 (Term) Term)
;;;;;;;;;;;;;;;;x: FStar.UInt.uint_t 32 -> Prims.Pure FStar.UInt32.t
(declare-fun Tm_arrow_3d414099f2a2b7ef3e11b1fc75a28674 () Term)
(declare-fun FStar.UInt32.uint_to_t@tok () Term)


; </end encoding FStar.UInt32.uint_to_t>


; <Start encoding FStar.UInt32.uv_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt32.uv_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt32.uv_inv@tok () Term)

; </end encoding FStar.UInt32.uv_inv>


; <Start encoding FStar.UInt32.vu_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt32.vu_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt32.vu_inv@tok () Term)

; </end encoding FStar.UInt32.vu_inv>


; <Start encoding FStar.UInt32.v_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt32.v_inj (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt32.v_inj@tok () Term)

; </end encoding FStar.UInt32.v_inj>


; <Start encoding FStar.UInt32.zero>

(declare-fun FStar.UInt32.zero (Dummy_sort) Term)
(declare-fun Tm_refine_7cfa0141116db910fdee890408ebbaf1 () Term)


; </end encoding FStar.UInt32.zero>


; <Start encoding FStar.UInt32.one>

(declare-fun FStar.UInt32.one (Dummy_sort) Term)
(declare-fun Tm_refine_d94e5152d1c8429ac781cc5558c9a3e2 () Term)


; </end encoding FStar.UInt32.one>


; <Start encoding FStar.UInt32.add>

(declare-fun FStar.UInt32.add (Term Term) Term)
(declare-fun Tm_refine_709aff84c75b0fff77dcbf3b529649dd (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt32.t -> b: FStar.UInt32.t -> Prims.Pure FStar.UInt32.t
(declare-fun Tm_arrow_5558b72197031b1efc1a0f8298859a47 () Term)
(declare-fun FStar.UInt32.add@tok () Term)


; </end encoding FStar.UInt32.add>


; <Start encoding FStar.UInt32.add_underspec>

(declare-fun FStar.UInt32.add_underspec (Term Term) Term)
(declare-fun Tm_refine_57eacb083aaa8f3c6200eef2872d40a9 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt32.t -> b: FStar.UInt32.t -> Prims.Pure FStar.UInt32.t
(declare-fun Tm_arrow_2aa4a786718187783c350fff98c0276d () Term)
(declare-fun FStar.UInt32.add_underspec@tok () Term)


; </end encoding FStar.UInt32.add_underspec>


; <Start encoding FStar.UInt32.add_mod>

(declare-fun FStar.UInt32.add_mod (Term Term) Term)
(declare-fun Tm_refine_edc8fb7e909853d860d4ab445ef31337 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt32.t -> b: FStar.UInt32.t -> Prims.Pure FStar.UInt32.t
(declare-fun Tm_arrow_edbd649f4b12a343efa6ef46e7961890 () Term)
(declare-fun FStar.UInt32.add_mod@tok () Term)


; </end encoding FStar.UInt32.add_mod>


; <Start encoding FStar.UInt32.sub>

(declare-fun FStar.UInt32.sub (Term Term) Term)
(declare-fun Tm_refine_aa4b3d268075d84252df525db1f85524 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt32.t -> b: FStar.UInt32.t -> Prims.Pure FStar.UInt32.t
(declare-fun Tm_arrow_ac932fe6124478fcfd5be99d334122e8 () Term)
(declare-fun FStar.UInt32.sub@tok () Term)


; </end encoding FStar.UInt32.sub>


; <Start encoding FStar.UInt32.sub_underspec>

(declare-fun FStar.UInt32.sub_underspec (Term Term) Term)
(declare-fun Tm_refine_01926286fa04b785df0ea0da544f2001 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt32.t -> b: FStar.UInt32.t -> Prims.Pure FStar.UInt32.t
(declare-fun Tm_arrow_a0c271942b2fe7be43f6ae297698cd0b () Term)
(declare-fun FStar.UInt32.sub_underspec@tok () Term)


; </end encoding FStar.UInt32.sub_underspec>


; <Start encoding FStar.UInt32.sub_mod>

(declare-fun FStar.UInt32.sub_mod (Term Term) Term)
(declare-fun Tm_refine_ace23c600fbe87b65e5fc333816f74de (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt32.t -> b: FStar.UInt32.t -> Prims.Pure FStar.UInt32.t
(declare-fun Tm_arrow_4a8c4b67b5977a746f1eeda7c310346f () Term)
(declare-fun FStar.UInt32.sub_mod@tok () Term)


; </end encoding FStar.UInt32.sub_mod>


; <Start encoding FStar.UInt32.mul>

(declare-fun FStar.UInt32.mul (Term Term) Term)
(declare-fun Tm_refine_1ccfb21903aa30ace8832f7a4d067d9b (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt32.t -> b: FStar.UInt32.t -> Prims.Pure FStar.UInt32.t
(declare-fun Tm_arrow_f261941925861d12451675f7409141e5 () Term)
(declare-fun FStar.UInt32.mul@tok () Term)


; </end encoding FStar.UInt32.mul>


; <Start encoding FStar.UInt32.mul_underspec>

(declare-fun FStar.UInt32.mul_underspec (Term Term) Term)
(declare-fun Tm_refine_cb4ffd3222952e9ac95fc72e8f9913c6 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt32.t -> b: FStar.UInt32.t -> Prims.Pure FStar.UInt32.t
(declare-fun Tm_arrow_54623a1c9ed03c94751f7d25d259da67 () Term)
(declare-fun FStar.UInt32.mul_underspec@tok () Term)


; </end encoding FStar.UInt32.mul_underspec>


; <Start encoding FStar.UInt32.mul_mod>

(declare-fun FStar.UInt32.mul_mod (Term Term) Term)
(declare-fun Tm_refine_8618df86656cf4c2bc98614452120307 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt32.t -> b: FStar.UInt32.t -> Prims.Pure FStar.UInt32.t
(declare-fun Tm_arrow_b9ba4f3f3f0a1ea3202a99cc97238a0d () Term)
(declare-fun FStar.UInt32.mul_mod@tok () Term)


; </end encoding FStar.UInt32.mul_mod>


; <Start encoding FStar.UInt32.div>

(declare-fun Tm_refine_0941c9ff95557f2d53bc8f8179ab793e () Term)
(declare-fun FStar.UInt32.div (Term Term) Term)

(declare-fun Tm_refine_74d1ae07763cf2ce5f26906c9df0d2cc (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt32.t -> b: FStar.UInt32.t{FStar.UInt32.v b <> 0} -> Prims.Pure FStar.UInt32.t
(declare-fun Tm_arrow_61dc5944349c0fd1e6ccd916a51fdfe8 () Term)
(declare-fun FStar.UInt32.div@tok () Term)


; </end encoding FStar.UInt32.div>


; <Start encoding FStar.UInt32.rem>


(declare-fun FStar.UInt32.rem (Term Term) Term)

(declare-fun Tm_refine_19ac6a052799e5086e9c3eb3a21d54a5 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt32.t -> b: FStar.UInt32.t{FStar.UInt32.v b <> 0} -> Prims.Pure FStar.UInt32.t
(declare-fun Tm_arrow_a00bbce6d7d4a1d495177d4f11116643 () Term)
(declare-fun FStar.UInt32.rem@tok () Term)


; </end encoding FStar.UInt32.rem>


; <Start encoding FStar.UInt32.logand>

(declare-fun FStar.UInt32.logand (Term Term) Term)
(declare-fun Tm_refine_7afd5b0ca8e77c7f6870883658e19d63 (Term Term) Term)
;;;;;;;;;;;;;;;;x: FStar.UInt32.t -> y: FStar.UInt32.t -> Prims.Pure FStar.UInt32.t
(declare-fun Tm_arrow_eff0426e7af51f8d330de4f569da9534 () Term)
(declare-fun FStar.UInt32.logand@tok () Term)


; </end encoding FStar.UInt32.logand>


; <Start encoding FStar.UInt32.logxor>

(declare-fun FStar.UInt32.logxor (Term Term) Term)
(declare-fun Tm_refine_2b25e5c3b25bc06167200cbfa5d36b3e (Term Term) Term)
;;;;;;;;;;;;;;;;x: FStar.UInt32.t -> y: FStar.UInt32.t -> Prims.Pure FStar.UInt32.t
(declare-fun Tm_arrow_07d2eb0ad8dc47fa48b862c24603f207 () Term)
(declare-fun FStar.UInt32.logxor@tok () Term)


; </end encoding FStar.UInt32.logxor>


; <Start encoding FStar.UInt32.logor>

(declare-fun FStar.UInt32.logor (Term Term) Term)
(declare-fun Tm_refine_39cb18a1d289e559096741772432b24f (Term Term) Term)
;;;;;;;;;;;;;;;;x: FStar.UInt32.t -> y: FStar.UInt32.t -> Prims.Pure FStar.UInt32.t
(declare-fun Tm_arrow_f4c0c09b0ba22212b54bc6a7fb947fac () Term)
(declare-fun FStar.UInt32.logor@tok () Term)


; </end encoding FStar.UInt32.logor>


; <Start encoding FStar.UInt32.lognot>

(declare-fun FStar.UInt32.lognot (Term) Term)
(declare-fun Tm_refine_d5743ca0a8d5f3ceec748bdcb132b14f (Term) Term)
;;;;;;;;;;;;;;;;x: FStar.UInt32.t -> Prims.Pure FStar.UInt32.t
(declare-fun Tm_arrow_b6548dae703a0f26a4185c51dee5464b () Term)
(declare-fun FStar.UInt32.lognot@tok () Term)


; </end encoding FStar.UInt32.lognot>


; <Start encoding FStar.UInt32.shift_right>

(declare-fun FStar.UInt32.shift_right (Term Term) Term)
(declare-fun Tm_refine_59202c8b625f4b04caf2081d6778d9e7 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt32.t -> s: FStar.UInt32.t -> Prims.Pure FStar.UInt32.t
(declare-fun Tm_arrow_13c7acc70a3dd34a798f691f2cee4104 () Term)
(declare-fun FStar.UInt32.shift_right@tok () Term)


; </end encoding FStar.UInt32.shift_right>


; <Start encoding FStar.UInt32.shift_left>

(declare-fun FStar.UInt32.shift_left (Term Term) Term)
(declare-fun Tm_refine_c642c4de19ebed0b1a9b5f85d40989c0 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt32.t -> s: FStar.UInt32.t -> Prims.Pure FStar.UInt32.t
(declare-fun Tm_arrow_0709d575329517627fac117b134f4462 () Term)
(declare-fun FStar.UInt32.shift_left@tok () Term)


; </end encoding FStar.UInt32.shift_left>


; <Start encoding FStar.UInt32.eq>

(declare-fun FStar.UInt32.eq (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt32.t -> b: FStar.UInt32.t -> Prims.bool
(declare-fun Tm_arrow_6de09abf9de7977da03ee416904d3039 () Term)
(declare-fun FStar.UInt32.eq@tok () Term)

; </end encoding FStar.UInt32.eq>


; <Start encoding FStar.UInt32.gt>

(declare-fun FStar.UInt32.gt (Term Term) Term)

(declare-fun FStar.UInt32.gt@tok () Term)

; </end encoding FStar.UInt32.gt>


; <Start encoding FStar.UInt32.gte>

(declare-fun FStar.UInt32.gte (Term Term) Term)

(declare-fun FStar.UInt32.gte@tok () Term)

; </end encoding FStar.UInt32.gte>


; <Start encoding FStar.UInt32.lt>

(declare-fun FStar.UInt32.lt (Term Term) Term)

(declare-fun FStar.UInt32.lt@tok () Term)

; </end encoding FStar.UInt32.lt>


; <Start encoding FStar.UInt32.lte>

(declare-fun FStar.UInt32.lte (Term Term) Term)

(declare-fun FStar.UInt32.lte@tok () Term)

; </end encoding FStar.UInt32.lte>


; <Start encoding FStar.UInt32.minus>

(declare-fun FStar.UInt32.minus (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt32.t -> FStar.UInt32.t
(declare-fun Tm_arrow_c4b70260248a2080020c883b42aa875d () Term)
(declare-fun FStar.UInt32.minus@tok () Term)

; </end encoding FStar.UInt32.minus>


; <Start encoding FStar.UInt32.n_minus_one>

(declare-fun FStar.UInt32.n_minus_one (Dummy_sort) Term)

; </end encoding FStar.UInt32.n_minus_one>


; <Skipped />


; <Start encoding FStar.UInt32.eq_mask>

(declare-fun FStar.UInt32.eq_mask (Term Term) Term)
(declare-fun Tm_refine_09d9a189c8c7a3bf3fc28db14e6689cd (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt32.t -> b: FStar.UInt32.t -> Prims.Pure FStar.UInt32.t
(declare-fun Tm_arrow_472ed8b8700983a2f5b417531368b430 () Term)
(declare-fun FStar.UInt32.eq_mask@tok () Term)


; </end encoding FStar.UInt32.eq_mask>


; <Start encoding FStar.UInt32.lemma_sub_msbs>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt32.lemma_sub_msbs (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt32.lemma_sub_msbs@tok () Term)

; </end encoding FStar.UInt32.lemma_sub_msbs>


; <Start encoding FStar.UInt32.gte_mask>

(declare-fun FStar.UInt32.gte_mask (Term Term) Term)
(declare-fun Tm_refine_83df857506788e94d25c8be97271668a (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt32.t -> b: FStar.UInt32.t -> Prims.Pure FStar.UInt32.t
(declare-fun Tm_arrow_a9de8133430dc71a337d9373e485c8b4 () Term)
(declare-fun FStar.UInt32.gte_mask@tok () Term)


; </end encoding FStar.UInt32.gte_mask>


; <Skipped />


; <Start encoding FStar.UInt32.op_Plus_Hat>

(declare-fun FStar.UInt32.op_Plus_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Plus_Hat@tok () Term)


; </end encoding FStar.UInt32.op_Plus_Hat>


; <Start encoding FStar.UInt32.op_Plus_Question_Hat>

(declare-fun FStar.UInt32.op_Plus_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Plus_Question_Hat@tok () Term)


; </end encoding FStar.UInt32.op_Plus_Question_Hat>


; <Start encoding FStar.UInt32.op_Plus_Percent_Hat>

(declare-fun FStar.UInt32.op_Plus_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Plus_Percent_Hat@tok () Term)


; </end encoding FStar.UInt32.op_Plus_Percent_Hat>


; <Start encoding FStar.UInt32.op_Subtraction_Hat>

(declare-fun FStar.UInt32.op_Subtraction_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Subtraction_Hat@tok () Term)


; </end encoding FStar.UInt32.op_Subtraction_Hat>


; <Start encoding FStar.UInt32.op_Subtraction_Question_Hat>

(declare-fun FStar.UInt32.op_Subtraction_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Subtraction_Question_Hat@tok () Term)


; </end encoding FStar.UInt32.op_Subtraction_Question_Hat>


; <Start encoding FStar.UInt32.op_Subtraction_Percent_Hat>

(declare-fun FStar.UInt32.op_Subtraction_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Subtraction_Percent_Hat@tok () Term)


; </end encoding FStar.UInt32.op_Subtraction_Percent_Hat>


; <Start encoding FStar.UInt32.op_Star_Hat>

(declare-fun FStar.UInt32.op_Star_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Star_Hat@tok () Term)


; </end encoding FStar.UInt32.op_Star_Hat>


; <Start encoding FStar.UInt32.op_Star_Question_Hat>

(declare-fun FStar.UInt32.op_Star_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Star_Question_Hat@tok () Term)


; </end encoding FStar.UInt32.op_Star_Question_Hat>


; <Start encoding FStar.UInt32.op_Star_Percent_Hat>

(declare-fun FStar.UInt32.op_Star_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Star_Percent_Hat@tok () Term)


; </end encoding FStar.UInt32.op_Star_Percent_Hat>


; <Start encoding FStar.UInt32.op_Slash_Hat>


(declare-fun FStar.UInt32.op_Slash_Hat (Term Term) Term)



(declare-fun FStar.UInt32.op_Slash_Hat@tok () Term)



; </end encoding FStar.UInt32.op_Slash_Hat>


; <Start encoding FStar.UInt32.op_Percent_Hat>


(declare-fun FStar.UInt32.op_Percent_Hat (Term Term) Term)



(declare-fun FStar.UInt32.op_Percent_Hat@tok () Term)



; </end encoding FStar.UInt32.op_Percent_Hat>


; <Start encoding FStar.UInt32.op_Hat_Hat>

(declare-fun FStar.UInt32.op_Hat_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Hat_Hat@tok () Term)


; </end encoding FStar.UInt32.op_Hat_Hat>


; <Start encoding FStar.UInt32.op_Amp_Hat>

(declare-fun FStar.UInt32.op_Amp_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Amp_Hat@tok () Term)


; </end encoding FStar.UInt32.op_Amp_Hat>


; <Start encoding FStar.UInt32.op_Bar_Hat>

(declare-fun FStar.UInt32.op_Bar_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Bar_Hat@tok () Term)


; </end encoding FStar.UInt32.op_Bar_Hat>


; <Start encoding FStar.UInt32.op_Less_Less_Hat>

(declare-fun FStar.UInt32.op_Less_Less_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Less_Less_Hat@tok () Term)


; </end encoding FStar.UInt32.op_Less_Less_Hat>


; <Start encoding FStar.UInt32.op_Greater_Greater_Hat>

(declare-fun FStar.UInt32.op_Greater_Greater_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Greater_Greater_Hat@tok () Term)


; </end encoding FStar.UInt32.op_Greater_Greater_Hat>


; <Start encoding FStar.UInt32.op_Equals_Hat>

(declare-fun FStar.UInt32.op_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt32.op_Equals_Hat@tok () Term)

; </end encoding FStar.UInt32.op_Equals_Hat>


; <Start encoding FStar.UInt32.op_Greater_Hat>

(declare-fun FStar.UInt32.op_Greater_Hat (Term Term) Term)

(declare-fun FStar.UInt32.op_Greater_Hat@tok () Term)

; </end encoding FStar.UInt32.op_Greater_Hat>


; <Start encoding FStar.UInt32.op_Greater_Equals_Hat>

(declare-fun FStar.UInt32.op_Greater_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt32.op_Greater_Equals_Hat@tok () Term)

; </end encoding FStar.UInt32.op_Greater_Equals_Hat>


; <Start encoding FStar.UInt32.op_Less_Hat>

(declare-fun FStar.UInt32.op_Less_Hat (Term Term) Term)

(declare-fun FStar.UInt32.op_Less_Hat@tok () Term)

; </end encoding FStar.UInt32.op_Less_Hat>


; <Start encoding FStar.UInt32.op_Less_Equals_Hat>

(declare-fun FStar.UInt32.op_Less_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt32.op_Less_Equals_Hat@tok () Term)

; </end encoding FStar.UInt32.op_Less_Equals_Hat>


; <Start encoding FStar.UInt32.to_string>

(declare-fun FStar.UInt32.to_string (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.UInt32.t -> Prims.string
(declare-fun Tm_arrow_bde0326394a5877aafa8a9dfb4adb318 () Term)
(declare-fun FStar.UInt32.to_string@tok () Term)

; </end encoding FStar.UInt32.to_string>


; <Start encoding FStar.UInt32.to_string_hex>

(declare-fun FStar.UInt32.to_string_hex (Term) Term)

(declare-fun FStar.UInt32.to_string_hex@tok () Term)

; </end encoding FStar.UInt32.to_string_hex>


; <Start encoding FStar.UInt32.to_string_hex_pad>

(declare-fun FStar.UInt32.to_string_hex_pad (Term) Term)

(declare-fun FStar.UInt32.to_string_hex_pad@tok () Term)

; </end encoding FStar.UInt32.to_string_hex_pad>


; <Start encoding FStar.UInt32.of_string>

(declare-fun FStar.UInt32.of_string (Term) Term)
;;;;;;;;;;;;;;;;_: Prims.string -> FStar.UInt32.t
(declare-fun Tm_arrow_564534749090ea8f842e229c3182e762 () Term)
(declare-fun FStar.UInt32.of_string@tok () Term)

; </end encoding FStar.UInt32.of_string>


; <Skipped />


; <Start encoding FStar.UInt32.__uint_to_t>

(declare-fun FStar.UInt32.__uint_to_t (Term) Term)
;;;;;;;;;;;;;;;;x: Prims.int -> FStar.UInt32.t
(declare-fun Tm_arrow_67ad727682511dd92ce30d8d55620a8e () Term)
(declare-fun FStar.UInt32.__uint_to_t@tok () Term)

; </end encoding FStar.UInt32.__uint_to_t>


; <Skipped />


; End Externals for interface FStar.UInt32


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End interface FStar.UInt32 (391 decls; total size 19290)

;;; Start interface FStar.Int64

; Externals for interface FStar.Int64


; <Start encoding FStar.Int64.n>

(declare-fun FStar.Int64.n (Dummy_sort) Term)

; </end encoding FStar.Int64.n>


; <Skipped />


; <Start encoding FStar.Int64.t>

(declare-fun FStar.Int64.t (Dummy_sort) Term)

; </end encoding FStar.Int64.t>


; <Start encoding FStar.Int64.v>

(declare-fun FStar.Int64.v (Term) Term)
;;;;;;;;;;;;;;;;x: FStar.Int64.t -> FStar.Int.int_t 64
(declare-fun Tm_arrow_50f88cfd3e9adc79ecaea80d24eaf881 () Term)
(declare-fun FStar.Int64.v@tok () Term)

; </end encoding FStar.Int64.v>


; <Start encoding FStar.Int64.int_to_t>

(declare-fun FStar.Int64.int_to_t (Term) Term)
(declare-fun Tm_refine_20b9727bfb368ca1ad6e64242df43812 (Term) Term)
;;;;;;;;;;;;;;;;x: FStar.Int.int_t 64 -> Prims.Pure FStar.Int64.t
(declare-fun Tm_arrow_9aacd4c51d388dea7f57e52893b15954 () Term)
(declare-fun FStar.Int64.int_to_t@tok () Term)


; </end encoding FStar.Int64.int_to_t>


; <Start encoding FStar.Int64.uv_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int64.uv_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int64.uv_inv@tok () Term)

; </end encoding FStar.Int64.uv_inv>


; <Start encoding FStar.Int64.vu_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int64.vu_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int64.vu_inv@tok () Term)

; </end encoding FStar.Int64.vu_inv>


; <Start encoding FStar.Int64.v_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int64.v_inj (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int64.v_inj@tok () Term)

; </end encoding FStar.Int64.v_inj>


; <Start encoding FStar.Int64.zero>

(declare-fun FStar.Int64.zero (Dummy_sort) Term)
(declare-fun Tm_refine_f34cee8327c62fd7612c44061ac10fdb () Term)


; </end encoding FStar.Int64.zero>


; <Start encoding FStar.Int64.one>

(declare-fun FStar.Int64.one (Dummy_sort) Term)
(declare-fun Tm_refine_203e9273a4f8fdae13114373d4d62bbf () Term)


; </end encoding FStar.Int64.one>


; <Start encoding FStar.Int64.add>

(declare-fun FStar.Int64.add (Term Term) Term)
(declare-fun Tm_refine_cff33b8d55d1ab8b8408d67ea53401d3 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int64.t -> b: FStar.Int64.t -> Prims.Pure FStar.Int64.t
(declare-fun Tm_arrow_ed83283a33f866113fbd25895b9b8d2d () Term)
(declare-fun FStar.Int64.add@tok () Term)


; </end encoding FStar.Int64.add>


; <Start encoding FStar.Int64.sub>

(declare-fun FStar.Int64.sub (Term Term) Term)
(declare-fun Tm_refine_1fc9ac3a217b8d21cc2c0d75816a6c74 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int64.t -> b: FStar.Int64.t -> Prims.Pure FStar.Int64.t
(declare-fun Tm_arrow_4542deddf7766ec0693cc853fcf4efcd () Term)
(declare-fun FStar.Int64.sub@tok () Term)


; </end encoding FStar.Int64.sub>


; <Start encoding FStar.Int64.mul>

(declare-fun FStar.Int64.mul (Term Term) Term)
(declare-fun Tm_refine_37c0725a54ced297933377446e859b55 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int64.t -> b: FStar.Int64.t -> Prims.Pure FStar.Int64.t
(declare-fun Tm_arrow_42cc16185f0281f66fd3c38cb2ce966d () Term)
(declare-fun FStar.Int64.mul@tok () Term)


; </end encoding FStar.Int64.mul>


; <Start encoding FStar.Int64.div>

(declare-fun Tm_refine_628f456abb4ff7ec3d24a18ea94ac133 () Term)
(declare-fun FStar.Int64.div (Term Term) Term)

(declare-fun Tm_refine_a5642a7a89d263d94fde9c889b795c19 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int64.t -> b: FStar.Int64.t{FStar.Int64.v b <> 0} -> Prims.Pure FStar.Int64.t
(declare-fun Tm_arrow_c45424883a6239e4d5ed622479d0e2c2 () Term)
(declare-fun FStar.Int64.div@tok () Term)


; </end encoding FStar.Int64.div>


; <Start encoding FStar.Int64.rem>


(declare-fun FStar.Int64.rem (Term Term) Term)

(declare-fun Tm_refine_1d7b4ef1b74a345016b65edcb3a0b11c (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int64.t -> b: FStar.Int64.t{FStar.Int64.v b <> 0} -> Prims.Pure FStar.Int64.t
(declare-fun Tm_arrow_b094b2204766bbf210faf3515dac5edb () Term)
(declare-fun FStar.Int64.rem@tok () Term)


; </end encoding FStar.Int64.rem>


; <Start encoding FStar.Int64.logand>

(declare-fun FStar.Int64.logand (Term Term) Term)
(declare-fun Tm_refine_0fe072140b6cab185956764b6b2b5100 (Term Term) Term)
;;;;;;;;;;;;;;;;x: FStar.Int64.t -> y: FStar.Int64.t -> Prims.Pure FStar.Int64.t
(declare-fun Tm_arrow_0f24127e58cdc78e646ac8e9ce1e220b () Term)
(declare-fun FStar.Int64.logand@tok () Term)


; </end encoding FStar.Int64.logand>


; <Start encoding FStar.Int64.logxor>

(declare-fun FStar.Int64.logxor (Term Term) Term)
(declare-fun Tm_refine_e2357e15859202c1b74739b99f268c77 (Term Term) Term)
;;;;;;;;;;;;;;;;x: FStar.Int64.t -> y: FStar.Int64.t -> Prims.Pure FStar.Int64.t
(declare-fun Tm_arrow_2b608ce5a03451a1a703bfa96c9de841 () Term)
(declare-fun FStar.Int64.logxor@tok () Term)


; </end encoding FStar.Int64.logxor>


; <Start encoding FStar.Int64.logor>

(declare-fun FStar.Int64.logor (Term Term) Term)
(declare-fun Tm_refine_0d502fb451739d594ffb2dde19acb8c7 (Term Term) Term)
;;;;;;;;;;;;;;;;x: FStar.Int64.t -> y: FStar.Int64.t -> Prims.Pure FStar.Int64.t
(declare-fun Tm_arrow_f2d6223e577fd2c0dc4882b4e94da2d1 () Term)
(declare-fun FStar.Int64.logor@tok () Term)


; </end encoding FStar.Int64.logor>


; <Start encoding FStar.Int64.lognot>

(declare-fun FStar.Int64.lognot (Term) Term)
(declare-fun Tm_refine_09cdf91263ea29addfb21cf90d99d38a (Term) Term)
;;;;;;;;;;;;;;;;x: FStar.Int64.t -> Prims.Pure FStar.Int64.t
(declare-fun Tm_arrow_d446e9a4954555b21a6b121387f388f7 () Term)
(declare-fun FStar.Int64.lognot@tok () Term)


; </end encoding FStar.Int64.lognot>


; <Start encoding FStar.Int64.shift_right>

(declare-fun FStar.Int64.shift_right (Term Term) Term)
(declare-fun Tm_refine_8a1048adcc7173ce6ba343120c56fc30 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int64.t -> s: FStar.UInt32.t -> Prims.Pure FStar.Int64.t
(declare-fun Tm_arrow_460456e909b6fc3f1db6426fd53c8cb8 () Term)
(declare-fun FStar.Int64.shift_right@tok () Term)


; </end encoding FStar.Int64.shift_right>


; <Start encoding FStar.Int64.shift_left>

(declare-fun FStar.Int64.shift_left (Term Term) Term)
(declare-fun Tm_refine_36ce14007f3fdeef8a04301aa925b2cd (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int64.t -> s: FStar.UInt32.t -> Prims.Pure FStar.Int64.t
(declare-fun Tm_arrow_af31e9f4e4b00e004d480198352f97f7 () Term)
(declare-fun FStar.Int64.shift_left@tok () Term)


; </end encoding FStar.Int64.shift_left>


; <Start encoding FStar.Int64.shift_arithmetic_right>

(declare-fun FStar.Int64.shift_arithmetic_right (Term Term) Term)
(declare-fun Tm_refine_0edc24855031dc65d4a9dbb9e8e84d13 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int64.t -> s: FStar.UInt32.t -> Prims.Pure FStar.Int64.t
(declare-fun Tm_arrow_b8898305f4bc94ede71031fc934596bd () Term)
(declare-fun FStar.Int64.shift_arithmetic_right@tok () Term)


; </end encoding FStar.Int64.shift_arithmetic_right>


; <Start encoding FStar.Int64.eq>

(declare-fun FStar.Int64.eq (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int64.t -> b: FStar.Int64.t -> Prims.bool
(declare-fun Tm_arrow_da34eb90e0110da92e0998be30c252a6 () Term)
(declare-fun FStar.Int64.eq@tok () Term)

; </end encoding FStar.Int64.eq>


; <Start encoding FStar.Int64.gt>

(declare-fun FStar.Int64.gt (Term Term) Term)

(declare-fun FStar.Int64.gt@tok () Term)

; </end encoding FStar.Int64.gt>


; <Start encoding FStar.Int64.gte>

(declare-fun FStar.Int64.gte (Term Term) Term)

(declare-fun FStar.Int64.gte@tok () Term)

; </end encoding FStar.Int64.gte>


; <Start encoding FStar.Int64.lt>

(declare-fun FStar.Int64.lt (Term Term) Term)

(declare-fun FStar.Int64.lt@tok () Term)

; </end encoding FStar.Int64.lt>


; <Start encoding FStar.Int64.lte>

(declare-fun FStar.Int64.lte (Term Term) Term)

(declare-fun FStar.Int64.lte@tok () Term)

; </end encoding FStar.Int64.lte>


; <Start encoding FStar.Int64.op_Plus_Hat>

(declare-fun FStar.Int64.op_Plus_Hat (Term Term) Term)


(declare-fun FStar.Int64.op_Plus_Hat@tok () Term)


; </end encoding FStar.Int64.op_Plus_Hat>


; <Start encoding FStar.Int64.op_Subtraction_Hat>

(declare-fun FStar.Int64.op_Subtraction_Hat (Term Term) Term)


(declare-fun FStar.Int64.op_Subtraction_Hat@tok () Term)


; </end encoding FStar.Int64.op_Subtraction_Hat>


; <Start encoding FStar.Int64.op_Star_Hat>

(declare-fun FStar.Int64.op_Star_Hat (Term Term) Term)


(declare-fun FStar.Int64.op_Star_Hat@tok () Term)


; </end encoding FStar.Int64.op_Star_Hat>


; <Start encoding FStar.Int64.op_Slash_Hat>


(declare-fun FStar.Int64.op_Slash_Hat (Term Term) Term)



(declare-fun FStar.Int64.op_Slash_Hat@tok () Term)



; </end encoding FStar.Int64.op_Slash_Hat>


; <Start encoding FStar.Int64.op_Percent_Hat>


(declare-fun FStar.Int64.op_Percent_Hat (Term Term) Term)



(declare-fun FStar.Int64.op_Percent_Hat@tok () Term)



; </end encoding FStar.Int64.op_Percent_Hat>


; <Start encoding FStar.Int64.op_Hat_Hat>

(declare-fun FStar.Int64.op_Hat_Hat (Term Term) Term)


(declare-fun FStar.Int64.op_Hat_Hat@tok () Term)


; </end encoding FStar.Int64.op_Hat_Hat>


; <Start encoding FStar.Int64.op_Amp_Hat>

(declare-fun FStar.Int64.op_Amp_Hat (Term Term) Term)


(declare-fun FStar.Int64.op_Amp_Hat@tok () Term)


; </end encoding FStar.Int64.op_Amp_Hat>


; <Start encoding FStar.Int64.op_Bar_Hat>

(declare-fun FStar.Int64.op_Bar_Hat (Term Term) Term)


(declare-fun FStar.Int64.op_Bar_Hat@tok () Term)


; </end encoding FStar.Int64.op_Bar_Hat>


; <Start encoding FStar.Int64.op_Less_Less_Hat>

(declare-fun FStar.Int64.op_Less_Less_Hat (Term Term) Term)


(declare-fun FStar.Int64.op_Less_Less_Hat@tok () Term)


; </end encoding FStar.Int64.op_Less_Less_Hat>


; <Start encoding FStar.Int64.op_Greater_Greater_Hat>

(declare-fun FStar.Int64.op_Greater_Greater_Hat (Term Term) Term)


(declare-fun FStar.Int64.op_Greater_Greater_Hat@tok () Term)


; </end encoding FStar.Int64.op_Greater_Greater_Hat>


; <Start encoding FStar.Int64.op_Greater_Greater_Greater_Hat>

(declare-fun FStar.Int64.op_Greater_Greater_Greater_Hat (Term Term) Term)


(declare-fun FStar.Int64.op_Greater_Greater_Greater_Hat@tok () Term)


; </end encoding FStar.Int64.op_Greater_Greater_Greater_Hat>


; <Start encoding FStar.Int64.op_Equals_Hat>

(declare-fun FStar.Int64.op_Equals_Hat (Term Term) Term)

(declare-fun FStar.Int64.op_Equals_Hat@tok () Term)

; </end encoding FStar.Int64.op_Equals_Hat>


; <Start encoding FStar.Int64.op_Greater_Hat>

(declare-fun FStar.Int64.op_Greater_Hat (Term Term) Term)

(declare-fun FStar.Int64.op_Greater_Hat@tok () Term)

; </end encoding FStar.Int64.op_Greater_Hat>


; <Start encoding FStar.Int64.op_Greater_Equals_Hat>

(declare-fun FStar.Int64.op_Greater_Equals_Hat (Term Term) Term)

(declare-fun FStar.Int64.op_Greater_Equals_Hat@tok () Term)

; </end encoding FStar.Int64.op_Greater_Equals_Hat>


; <Start encoding FStar.Int64.op_Less_Hat>

(declare-fun FStar.Int64.op_Less_Hat (Term Term) Term)

(declare-fun FStar.Int64.op_Less_Hat@tok () Term)

; </end encoding FStar.Int64.op_Less_Hat>


; <Start encoding FStar.Int64.op_Less_Equals_Hat>

(declare-fun FStar.Int64.op_Less_Equals_Hat (Term Term) Term)

(declare-fun FStar.Int64.op_Less_Equals_Hat@tok () Term)

; </end encoding FStar.Int64.op_Less_Equals_Hat>


; <Start encoding FStar.Int64.ct_abs>

(declare-fun Tm_refine_09e0d51b082ead211eb10bd8852b815a () Term)
(declare-fun FStar.Int64.ct_abs (Term) Term)

(declare-fun Tm_refine_7fa122cebddb86b486e24aaafbe2ddf4 (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int64.t{FStar.Int.min_int 64 < FStar.Int64.v a}   -> b: FStar.Int64.t{FStar.Int64.v b = Prims.abs (FStar.Int64.v a)}
(declare-fun Tm_arrow_160d8d6d739ab631daa29edaa7550b74 () Term)
(declare-fun FStar.Int64.ct_abs@tok () Term)



; </end encoding FStar.Int64.ct_abs>


; <Start encoding FStar.Int64.to_string>

(declare-fun FStar.Int64.to_string (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Int64.t -> Prims.string
(declare-fun Tm_arrow_30afe33eb03c92a72e5102bbb0499845 () Term)
(declare-fun FStar.Int64.to_string@tok () Term)

; </end encoding FStar.Int64.to_string>


; <Start encoding FStar.Int64.of_string>

(declare-fun FStar.Int64.of_string (Term) Term)
;;;;;;;;;;;;;;;;_: Prims.string -> FStar.Int64.t
(declare-fun Tm_arrow_03a93f86f13501f75297c43a6aba4fd8 () Term)
(declare-fun FStar.Int64.of_string@tok () Term)

; </end encoding FStar.Int64.of_string>


; <Skipped />


; <Start encoding FStar.Int64.__int_to_t>

(declare-fun FStar.Int64.__int_to_t (Term) Term)
;;;;;;;;;;;;;;;;x: Prims.int -> FStar.Int64.t
(declare-fun Tm_arrow_737f306dc84ebb26e78501a84ed111e0 () Term)
(declare-fun FStar.Int64.__int_to_t@tok () Term)

; </end encoding FStar.Int64.__int_to_t>


; <Skipped />


; End Externals for interface FStar.Int64


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End interface FStar.Int64 (292 decls; total size 13906)

;;; Start interface FStar.Int32

; Externals for interface FStar.Int32


; <Start encoding FStar.Int32.n>

(declare-fun FStar.Int32.n (Dummy_sort) Term)

; </end encoding FStar.Int32.n>


; <Skipped />


; <Start encoding FStar.Int32.t>

(declare-fun FStar.Int32.t (Dummy_sort) Term)

; </end encoding FStar.Int32.t>


; <Start encoding FStar.Int32.v>

(declare-fun FStar.Int32.v (Term) Term)
;;;;;;;;;;;;;;;;x: FStar.Int32.t -> FStar.Int.int_t 32
(declare-fun Tm_arrow_f4bf94df4bd6f39905f23de9668012e4 () Term)
(declare-fun FStar.Int32.v@tok () Term)

; </end encoding FStar.Int32.v>


; <Start encoding FStar.Int32.int_to_t>

(declare-fun FStar.Int32.int_to_t (Term) Term)
(declare-fun Tm_refine_627e9f1cc724efa294bbc10092665eb4 (Term) Term)
;;;;;;;;;;;;;;;;x: FStar.Int.int_t 32 -> Prims.Pure FStar.Int32.t
(declare-fun Tm_arrow_fe360e36795474927c4df051072b7c84 () Term)
(declare-fun FStar.Int32.int_to_t@tok () Term)


; </end encoding FStar.Int32.int_to_t>


; <Start encoding FStar.Int32.uv_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int32.uv_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int32.uv_inv@tok () Term)

; </end encoding FStar.Int32.uv_inv>


; <Start encoding FStar.Int32.vu_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int32.vu_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int32.vu_inv@tok () Term)

; </end encoding FStar.Int32.vu_inv>


; <Start encoding FStar.Int32.v_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int32.v_inj (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int32.v_inj@tok () Term)

; </end encoding FStar.Int32.v_inj>


; <Start encoding FStar.Int32.zero>

(declare-fun FStar.Int32.zero (Dummy_sort) Term)
(declare-fun Tm_refine_4b27ad679322c7269e5669f5b7ea65d7 () Term)


; </end encoding FStar.Int32.zero>


; <Start encoding FStar.Int32.one>

(declare-fun FStar.Int32.one (Dummy_sort) Term)
(declare-fun Tm_refine_16861580effb696f35863717c1a89e86 () Term)


; </end encoding FStar.Int32.one>


; <Start encoding FStar.Int32.add>

(declare-fun FStar.Int32.add (Term Term) Term)
(declare-fun Tm_refine_5aa5ab11c31de0febf935305a5c980c9 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int32.t -> b: FStar.Int32.t -> Prims.Pure FStar.Int32.t
(declare-fun Tm_arrow_1ae2a1cb7e3b9275ba73e0391a268c58 () Term)
(declare-fun FStar.Int32.add@tok () Term)


; </end encoding FStar.Int32.add>


; <Start encoding FStar.Int32.sub>

(declare-fun FStar.Int32.sub (Term Term) Term)
(declare-fun Tm_refine_2370a76276b3eaf034dd2a6c193ec479 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int32.t -> b: FStar.Int32.t -> Prims.Pure FStar.Int32.t
(declare-fun Tm_arrow_3f0cd0a55749dce187a8b0625a84b969 () Term)
(declare-fun FStar.Int32.sub@tok () Term)


; </end encoding FStar.Int32.sub>


; <Start encoding FStar.Int32.mul>

(declare-fun FStar.Int32.mul (Term Term) Term)
(declare-fun Tm_refine_b2da501eb6d7b3b17717277c72cd3d33 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int32.t -> b: FStar.Int32.t -> Prims.Pure FStar.Int32.t
(declare-fun Tm_arrow_a8520b13e74a8db37464ccab702fc4d8 () Term)
(declare-fun FStar.Int32.mul@tok () Term)


; </end encoding FStar.Int32.mul>


; <Start encoding FStar.Int32.div>

(declare-fun Tm_refine_9961d54ea871d3cceb9a869af9f4caf7 () Term)
(declare-fun FStar.Int32.div (Term Term) Term)

(declare-fun Tm_refine_10c5468be26c345f983216e2f4a2830e (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int32.t -> b: FStar.Int32.t{FStar.Int32.v b <> 0} -> Prims.Pure FStar.Int32.t
(declare-fun Tm_arrow_e4982050523b30538ddc26f6d929adaa () Term)
(declare-fun FStar.Int32.div@tok () Term)


; </end encoding FStar.Int32.div>


; <Start encoding FStar.Int32.rem>


(declare-fun FStar.Int32.rem (Term Term) Term)

(declare-fun Tm_refine_923e81a1f108f9949dc0543f2627072f (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int32.t -> b: FStar.Int32.t{FStar.Int32.v b <> 0} -> Prims.Pure FStar.Int32.t
(declare-fun Tm_arrow_b3f1d49408f6546fc11f91d422dabe23 () Term)
(declare-fun FStar.Int32.rem@tok () Term)


; </end encoding FStar.Int32.rem>


; <Start encoding FStar.Int32.logand>

(declare-fun FStar.Int32.logand (Term Term) Term)
(declare-fun Tm_refine_6866b028a4b89e77530792ce38231111 (Term Term) Term)
;;;;;;;;;;;;;;;;x: FStar.Int32.t -> y: FStar.Int32.t -> Prims.Pure FStar.Int32.t
(declare-fun Tm_arrow_a653d9f76ea6ba694062a5cbf0e017cf () Term)
(declare-fun FStar.Int32.logand@tok () Term)


; </end encoding FStar.Int32.logand>


; <Start encoding FStar.Int32.logxor>

(declare-fun FStar.Int32.logxor (Term Term) Term)
(declare-fun Tm_refine_becfe5da95f1aa4ee2ce8bcb219c8d8b (Term Term) Term)
;;;;;;;;;;;;;;;;x: FStar.Int32.t -> y: FStar.Int32.t -> Prims.Pure FStar.Int32.t
(declare-fun Tm_arrow_4e701446c0289f2c818a71c60cde3590 () Term)
(declare-fun FStar.Int32.logxor@tok () Term)


; </end encoding FStar.Int32.logxor>


; <Start encoding FStar.Int32.logor>

(declare-fun FStar.Int32.logor (Term Term) Term)
(declare-fun Tm_refine_0353e025954e9364168f29e3769e4cb4 (Term Term) Term)
;;;;;;;;;;;;;;;;x: FStar.Int32.t -> y: FStar.Int32.t -> Prims.Pure FStar.Int32.t
(declare-fun Tm_arrow_01dedda34d05d39141cd218b604eb3c0 () Term)
(declare-fun FStar.Int32.logor@tok () Term)


; </end encoding FStar.Int32.logor>


; <Start encoding FStar.Int32.lognot>

(declare-fun FStar.Int32.lognot (Term) Term)
(declare-fun Tm_refine_353248002d2ca4cf50785f111f47157a (Term) Term)
;;;;;;;;;;;;;;;;x: FStar.Int32.t -> Prims.Pure FStar.Int32.t
(declare-fun Tm_arrow_f1b1fe05c7d8b62f9fe5e829c0ada0fd () Term)
(declare-fun FStar.Int32.lognot@tok () Term)


; </end encoding FStar.Int32.lognot>


; <Start encoding FStar.Int32.shift_right>

(declare-fun FStar.Int32.shift_right (Term Term) Term)
(declare-fun Tm_refine_a5bfe2c071f769c34fb186b3c6f025bc (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int32.t -> s: FStar.UInt32.t -> Prims.Pure FStar.Int32.t
(declare-fun Tm_arrow_b3ba4dcd7dc367eb89868fa161b4e04d () Term)
(declare-fun FStar.Int32.shift_right@tok () Term)


; </end encoding FStar.Int32.shift_right>


; <Start encoding FStar.Int32.shift_left>

(declare-fun FStar.Int32.shift_left (Term Term) Term)
(declare-fun Tm_refine_f042c9816d442898756db486f43c46c5 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int32.t -> s: FStar.UInt32.t -> Prims.Pure FStar.Int32.t
(declare-fun Tm_arrow_ac724b30d6ffb2633cc66987d5660504 () Term)
(declare-fun FStar.Int32.shift_left@tok () Term)


; </end encoding FStar.Int32.shift_left>


; <Start encoding FStar.Int32.shift_arithmetic_right>

(declare-fun FStar.Int32.shift_arithmetic_right (Term Term) Term)
(declare-fun Tm_refine_3465cdfd5e573e06047a897b8d2ec713 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int32.t -> s: FStar.UInt32.t -> Prims.Pure FStar.Int32.t
(declare-fun Tm_arrow_56e16e1b27df5db49461580069a4b2e8 () Term)
(declare-fun FStar.Int32.shift_arithmetic_right@tok () Term)


; </end encoding FStar.Int32.shift_arithmetic_right>


; <Start encoding FStar.Int32.eq>

(declare-fun FStar.Int32.eq (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int32.t -> b: FStar.Int32.t -> Prims.bool
(declare-fun Tm_arrow_4229113e57d40c359ccaebc3146f28d8 () Term)
(declare-fun FStar.Int32.eq@tok () Term)

; </end encoding FStar.Int32.eq>


; <Start encoding FStar.Int32.gt>

(declare-fun FStar.Int32.gt (Term Term) Term)

(declare-fun FStar.Int32.gt@tok () Term)

; </end encoding FStar.Int32.gt>


; <Start encoding FStar.Int32.gte>

(declare-fun FStar.Int32.gte (Term Term) Term)

(declare-fun FStar.Int32.gte@tok () Term)

; </end encoding FStar.Int32.gte>


; <Start encoding FStar.Int32.lt>

(declare-fun FStar.Int32.lt (Term Term) Term)

(declare-fun FStar.Int32.lt@tok () Term)

; </end encoding FStar.Int32.lt>


; <Start encoding FStar.Int32.lte>

(declare-fun FStar.Int32.lte (Term Term) Term)

(declare-fun FStar.Int32.lte@tok () Term)

; </end encoding FStar.Int32.lte>


; <Start encoding FStar.Int32.op_Plus_Hat>

(declare-fun FStar.Int32.op_Plus_Hat (Term Term) Term)


(declare-fun FStar.Int32.op_Plus_Hat@tok () Term)


; </end encoding FStar.Int32.op_Plus_Hat>


; <Start encoding FStar.Int32.op_Subtraction_Hat>

(declare-fun FStar.Int32.op_Subtraction_Hat (Term Term) Term)


(declare-fun FStar.Int32.op_Subtraction_Hat@tok () Term)


; </end encoding FStar.Int32.op_Subtraction_Hat>


; <Start encoding FStar.Int32.op_Star_Hat>

(declare-fun FStar.Int32.op_Star_Hat (Term Term) Term)


(declare-fun FStar.Int32.op_Star_Hat@tok () Term)


; </end encoding FStar.Int32.op_Star_Hat>


; <Start encoding FStar.Int32.op_Slash_Hat>


(declare-fun FStar.Int32.op_Slash_Hat (Term Term) Term)



(declare-fun FStar.Int32.op_Slash_Hat@tok () Term)



; </end encoding FStar.Int32.op_Slash_Hat>


; <Start encoding FStar.Int32.op_Percent_Hat>


(declare-fun FStar.Int32.op_Percent_Hat (Term Term) Term)



(declare-fun FStar.Int32.op_Percent_Hat@tok () Term)



; </end encoding FStar.Int32.op_Percent_Hat>


; <Start encoding FStar.Int32.op_Hat_Hat>

(declare-fun FStar.Int32.op_Hat_Hat (Term Term) Term)


(declare-fun FStar.Int32.op_Hat_Hat@tok () Term)


; </end encoding FStar.Int32.op_Hat_Hat>


; <Start encoding FStar.Int32.op_Amp_Hat>

(declare-fun FStar.Int32.op_Amp_Hat (Term Term) Term)


(declare-fun FStar.Int32.op_Amp_Hat@tok () Term)


; </end encoding FStar.Int32.op_Amp_Hat>


; <Start encoding FStar.Int32.op_Bar_Hat>

(declare-fun FStar.Int32.op_Bar_Hat (Term Term) Term)


(declare-fun FStar.Int32.op_Bar_Hat@tok () Term)


; </end encoding FStar.Int32.op_Bar_Hat>


; <Start encoding FStar.Int32.op_Less_Less_Hat>

(declare-fun FStar.Int32.op_Less_Less_Hat (Term Term) Term)


(declare-fun FStar.Int32.op_Less_Less_Hat@tok () Term)


; </end encoding FStar.Int32.op_Less_Less_Hat>


; <Start encoding FStar.Int32.op_Greater_Greater_Hat>

(declare-fun FStar.Int32.op_Greater_Greater_Hat (Term Term) Term)


(declare-fun FStar.Int32.op_Greater_Greater_Hat@tok () Term)


; </end encoding FStar.Int32.op_Greater_Greater_Hat>


; <Start encoding FStar.Int32.op_Greater_Greater_Greater_Hat>

(declare-fun FStar.Int32.op_Greater_Greater_Greater_Hat (Term Term) Term)


(declare-fun FStar.Int32.op_Greater_Greater_Greater_Hat@tok () Term)


; </end encoding FStar.Int32.op_Greater_Greater_Greater_Hat>


; <Start encoding FStar.Int32.op_Equals_Hat>

(declare-fun FStar.Int32.op_Equals_Hat (Term Term) Term)

(declare-fun FStar.Int32.op_Equals_Hat@tok () Term)

; </end encoding FStar.Int32.op_Equals_Hat>


; <Start encoding FStar.Int32.op_Greater_Hat>

(declare-fun FStar.Int32.op_Greater_Hat (Term Term) Term)

(declare-fun FStar.Int32.op_Greater_Hat@tok () Term)

; </end encoding FStar.Int32.op_Greater_Hat>


; <Start encoding FStar.Int32.op_Greater_Equals_Hat>

(declare-fun FStar.Int32.op_Greater_Equals_Hat (Term Term) Term)

(declare-fun FStar.Int32.op_Greater_Equals_Hat@tok () Term)

; </end encoding FStar.Int32.op_Greater_Equals_Hat>


; <Start encoding FStar.Int32.op_Less_Hat>

(declare-fun FStar.Int32.op_Less_Hat (Term Term) Term)

(declare-fun FStar.Int32.op_Less_Hat@tok () Term)

; </end encoding FStar.Int32.op_Less_Hat>


; <Start encoding FStar.Int32.op_Less_Equals_Hat>

(declare-fun FStar.Int32.op_Less_Equals_Hat (Term Term) Term)

(declare-fun FStar.Int32.op_Less_Equals_Hat@tok () Term)

; </end encoding FStar.Int32.op_Less_Equals_Hat>


; <Start encoding FStar.Int32.ct_abs>

(declare-fun Tm_refine_853c92b1b57deba9861afab3b88011fd () Term)
(declare-fun FStar.Int32.ct_abs (Term) Term)

(declare-fun Tm_refine_4832a4dd6f6c8b4bcd43cf5fa229de92 (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int32.t{FStar.Int.min_int 32 < FStar.Int32.v a}   -> b: FStar.Int32.t{FStar.Int32.v b = Prims.abs (FStar.Int32.v a)}
(declare-fun Tm_arrow_da79825446e7a53ed4e2199d118751df () Term)
(declare-fun FStar.Int32.ct_abs@tok () Term)



; </end encoding FStar.Int32.ct_abs>


; <Start encoding FStar.Int32.to_string>

(declare-fun FStar.Int32.to_string (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Int32.t -> Prims.string
(declare-fun Tm_arrow_29acd599eab236ba0b201e41bc06d1d3 () Term)
(declare-fun FStar.Int32.to_string@tok () Term)

; </end encoding FStar.Int32.to_string>


; <Start encoding FStar.Int32.of_string>

(declare-fun FStar.Int32.of_string (Term) Term)
;;;;;;;;;;;;;;;;_: Prims.string -> FStar.Int32.t
(declare-fun Tm_arrow_faca34681b3b6bb74518267d4cc90946 () Term)
(declare-fun FStar.Int32.of_string@tok () Term)

; </end encoding FStar.Int32.of_string>


; <Skipped />


; <Start encoding FStar.Int32.__int_to_t>

(declare-fun FStar.Int32.__int_to_t (Term) Term)
;;;;;;;;;;;;;;;;x: Prims.int -> FStar.Int32.t
(declare-fun Tm_arrow_3b2fe9363a51dee88398c671861cfa75 () Term)
(declare-fun FStar.Int32.__int_to_t@tok () Term)

; </end encoding FStar.Int32.__int_to_t>


; <Skipped />


; End Externals for interface FStar.Int32


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End interface FStar.Int32 (292 decls; total size 13906)

;;; Start interface FStar.Int16

; Externals for interface FStar.Int16


; <Start encoding FStar.Int16.n>

(declare-fun FStar.Int16.n (Dummy_sort) Term)

; </end encoding FStar.Int16.n>


; <Skipped />


; <Start encoding FStar.Int16.t>

(declare-fun FStar.Int16.t (Dummy_sort) Term)

; </end encoding FStar.Int16.t>


; <Start encoding FStar.Int16.v>

(declare-fun FStar.Int16.v (Term) Term)
;;;;;;;;;;;;;;;;x: FStar.Int16.t -> FStar.Int.int_t 16
(declare-fun Tm_arrow_c11f275a21790bc90c0c80fe543f51f5 () Term)
(declare-fun FStar.Int16.v@tok () Term)

; </end encoding FStar.Int16.v>


; <Start encoding FStar.Int16.int_to_t>

(declare-fun FStar.Int16.int_to_t (Term) Term)
(declare-fun Tm_refine_3d5525dd50da96925771e0566aa2cb99 (Term) Term)
;;;;;;;;;;;;;;;;x: FStar.Int.int_t 16 -> Prims.Pure FStar.Int16.t
(declare-fun Tm_arrow_e7cfb34c4da3848085c133e643ce26ee () Term)
(declare-fun FStar.Int16.int_to_t@tok () Term)


; </end encoding FStar.Int16.int_to_t>


; <Start encoding FStar.Int16.uv_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int16.uv_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int16.uv_inv@tok () Term)

; </end encoding FStar.Int16.uv_inv>


; <Start encoding FStar.Int16.vu_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int16.vu_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int16.vu_inv@tok () Term)

; </end encoding FStar.Int16.vu_inv>


; <Start encoding FStar.Int16.v_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int16.v_inj (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int16.v_inj@tok () Term)

; </end encoding FStar.Int16.v_inj>


; <Start encoding FStar.Int16.zero>

(declare-fun FStar.Int16.zero (Dummy_sort) Term)
(declare-fun Tm_refine_68725ebeac1c9fba142682d5289ce1f5 () Term)


; </end encoding FStar.Int16.zero>


; <Start encoding FStar.Int16.one>

(declare-fun FStar.Int16.one (Dummy_sort) Term)
(declare-fun Tm_refine_4e12eab648b1a756fd9089734630525b () Term)


; </end encoding FStar.Int16.one>


; <Start encoding FStar.Int16.add>

(declare-fun FStar.Int16.add (Term Term) Term)
(declare-fun Tm_refine_a28a6b882d97a365aa7f25893bfb4f13 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int16.t -> b: FStar.Int16.t -> Prims.Pure FStar.Int16.t
(declare-fun Tm_arrow_617f701e90143802bc629772224fa59c () Term)
(declare-fun FStar.Int16.add@tok () Term)


; </end encoding FStar.Int16.add>


; <Start encoding FStar.Int16.sub>

(declare-fun FStar.Int16.sub (Term Term) Term)
(declare-fun Tm_refine_0ca1c0e820d26ec0eb6b4b532958a40e (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int16.t -> b: FStar.Int16.t -> Prims.Pure FStar.Int16.t
(declare-fun Tm_arrow_dc7a1b3aed7a4af5df308b5809dd21ab () Term)
(declare-fun FStar.Int16.sub@tok () Term)


; </end encoding FStar.Int16.sub>


; <Start encoding FStar.Int16.mul>

(declare-fun FStar.Int16.mul (Term Term) Term)
(declare-fun Tm_refine_da821069bb94a6e40bac6de95fba260c (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int16.t -> b: FStar.Int16.t -> Prims.Pure FStar.Int16.t
(declare-fun Tm_arrow_cde342f114b4028f0c8154d50b71f9db () Term)
(declare-fun FStar.Int16.mul@tok () Term)


; </end encoding FStar.Int16.mul>


; <Start encoding FStar.Int16.div>

(declare-fun Tm_refine_887fd71edd23a071fb178a8dad28f43b () Term)
(declare-fun FStar.Int16.div (Term Term) Term)

(declare-fun Tm_refine_8b2f6ae4d061c21b9e81df7d528abfa6 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int16.t -> b: FStar.Int16.t{FStar.Int16.v b <> 0} -> Prims.Pure FStar.Int16.t
(declare-fun Tm_arrow_c2e599efefc289f480d8872a2bf2a093 () Term)
(declare-fun FStar.Int16.div@tok () Term)


; </end encoding FStar.Int16.div>


; <Start encoding FStar.Int16.rem>


(declare-fun FStar.Int16.rem (Term Term) Term)

(declare-fun Tm_refine_1123c989dcd1a37aebe940c5097d8257 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int16.t -> b: FStar.Int16.t{FStar.Int16.v b <> 0} -> Prims.Pure FStar.Int16.t
(declare-fun Tm_arrow_4283ce0b2c89cca7bf2313cc51baf51f () Term)
(declare-fun FStar.Int16.rem@tok () Term)


; </end encoding FStar.Int16.rem>


; <Start encoding FStar.Int16.logand>

(declare-fun FStar.Int16.logand (Term Term) Term)
(declare-fun Tm_refine_154c9dbe9b07c1a6797cc48b0acc7b8a (Term Term) Term)
;;;;;;;;;;;;;;;;x: FStar.Int16.t -> y: FStar.Int16.t -> Prims.Pure FStar.Int16.t
(declare-fun Tm_arrow_fa4fd7e045b6f05bb194e120433f4ded () Term)
(declare-fun FStar.Int16.logand@tok () Term)


; </end encoding FStar.Int16.logand>


; <Start encoding FStar.Int16.logxor>

(declare-fun FStar.Int16.logxor (Term Term) Term)
(declare-fun Tm_refine_2dce52c5ba067470a613d0bb4c355670 (Term Term) Term)
;;;;;;;;;;;;;;;;x: FStar.Int16.t -> y: FStar.Int16.t -> Prims.Pure FStar.Int16.t
(declare-fun Tm_arrow_87ea2fac1a3f566f97668cd6cf0ac586 () Term)
(declare-fun FStar.Int16.logxor@tok () Term)


; </end encoding FStar.Int16.logxor>


; <Start encoding FStar.Int16.logor>

(declare-fun FStar.Int16.logor (Term Term) Term)
(declare-fun Tm_refine_58c5e00b8ff380c721d5c7a2f467aaab (Term Term) Term)
;;;;;;;;;;;;;;;;x: FStar.Int16.t -> y: FStar.Int16.t -> Prims.Pure FStar.Int16.t
(declare-fun Tm_arrow_4be57f04067d389af61590436dcf2138 () Term)
(declare-fun FStar.Int16.logor@tok () Term)


; </end encoding FStar.Int16.logor>


; <Start encoding FStar.Int16.lognot>

(declare-fun FStar.Int16.lognot (Term) Term)
(declare-fun Tm_refine_819846e9a5b5d83efd11d9ce0a6f92be (Term) Term)
;;;;;;;;;;;;;;;;x: FStar.Int16.t -> Prims.Pure FStar.Int16.t
(declare-fun Tm_arrow_40c1e288f41a711afe2479696def09cf () Term)
(declare-fun FStar.Int16.lognot@tok () Term)


; </end encoding FStar.Int16.lognot>


; <Start encoding FStar.Int16.shift_right>

(declare-fun FStar.Int16.shift_right (Term Term) Term)
(declare-fun Tm_refine_3255609608361bdf7f6bae26334f531c (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int16.t -> s: FStar.UInt32.t -> Prims.Pure FStar.Int16.t
(declare-fun Tm_arrow_114385a9b92284041feb5bcdfe56beb4 () Term)
(declare-fun FStar.Int16.shift_right@tok () Term)


; </end encoding FStar.Int16.shift_right>


; <Start encoding FStar.Int16.shift_left>

(declare-fun FStar.Int16.shift_left (Term Term) Term)
(declare-fun Tm_refine_c23a7f0c470fb6f47f9fee0e209af523 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int16.t -> s: FStar.UInt32.t -> Prims.Pure FStar.Int16.t
(declare-fun Tm_arrow_9ff317553631dfe954c44fa30cb7dcdd () Term)
(declare-fun FStar.Int16.shift_left@tok () Term)


; </end encoding FStar.Int16.shift_left>


; <Start encoding FStar.Int16.shift_arithmetic_right>

(declare-fun FStar.Int16.shift_arithmetic_right (Term Term) Term)
(declare-fun Tm_refine_472f35e4060ffd705fbcca55e6d74d51 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int16.t -> s: FStar.UInt32.t -> Prims.Pure FStar.Int16.t
(declare-fun Tm_arrow_c0817355be754abe4dde689277ddba42 () Term)
(declare-fun FStar.Int16.shift_arithmetic_right@tok () Term)


; </end encoding FStar.Int16.shift_arithmetic_right>


; <Start encoding FStar.Int16.eq>

(declare-fun FStar.Int16.eq (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int16.t -> b: FStar.Int16.t -> Prims.bool
(declare-fun Tm_arrow_9d624118066eaec6c9711c4caceb3489 () Term)
(declare-fun FStar.Int16.eq@tok () Term)

; </end encoding FStar.Int16.eq>


; <Start encoding FStar.Int16.gt>

(declare-fun FStar.Int16.gt (Term Term) Term)

(declare-fun FStar.Int16.gt@tok () Term)

; </end encoding FStar.Int16.gt>


; <Start encoding FStar.Int16.gte>

(declare-fun FStar.Int16.gte (Term Term) Term)

(declare-fun FStar.Int16.gte@tok () Term)

; </end encoding FStar.Int16.gte>


; <Start encoding FStar.Int16.lt>

(declare-fun FStar.Int16.lt (Term Term) Term)

(declare-fun FStar.Int16.lt@tok () Term)

; </end encoding FStar.Int16.lt>


; <Start encoding FStar.Int16.lte>

(declare-fun FStar.Int16.lte (Term Term) Term)

(declare-fun FStar.Int16.lte@tok () Term)

; </end encoding FStar.Int16.lte>


; <Start encoding FStar.Int16.op_Plus_Hat>

(declare-fun FStar.Int16.op_Plus_Hat (Term Term) Term)


(declare-fun FStar.Int16.op_Plus_Hat@tok () Term)


; </end encoding FStar.Int16.op_Plus_Hat>


; <Start encoding FStar.Int16.op_Subtraction_Hat>

(declare-fun FStar.Int16.op_Subtraction_Hat (Term Term) Term)


(declare-fun FStar.Int16.op_Subtraction_Hat@tok () Term)


; </end encoding FStar.Int16.op_Subtraction_Hat>


; <Start encoding FStar.Int16.op_Star_Hat>

(declare-fun FStar.Int16.op_Star_Hat (Term Term) Term)


(declare-fun FStar.Int16.op_Star_Hat@tok () Term)


; </end encoding FStar.Int16.op_Star_Hat>


; <Start encoding FStar.Int16.op_Slash_Hat>


(declare-fun FStar.Int16.op_Slash_Hat (Term Term) Term)



(declare-fun FStar.Int16.op_Slash_Hat@tok () Term)



; </end encoding FStar.Int16.op_Slash_Hat>


; <Start encoding FStar.Int16.op_Percent_Hat>


(declare-fun FStar.Int16.op_Percent_Hat (Term Term) Term)



(declare-fun FStar.Int16.op_Percent_Hat@tok () Term)



; </end encoding FStar.Int16.op_Percent_Hat>


; <Start encoding FStar.Int16.op_Hat_Hat>

(declare-fun FStar.Int16.op_Hat_Hat (Term Term) Term)


(declare-fun FStar.Int16.op_Hat_Hat@tok () Term)


; </end encoding FStar.Int16.op_Hat_Hat>


; <Start encoding FStar.Int16.op_Amp_Hat>

(declare-fun FStar.Int16.op_Amp_Hat (Term Term) Term)


(declare-fun FStar.Int16.op_Amp_Hat@tok () Term)


; </end encoding FStar.Int16.op_Amp_Hat>


; <Start encoding FStar.Int16.op_Bar_Hat>

(declare-fun FStar.Int16.op_Bar_Hat (Term Term) Term)


(declare-fun FStar.Int16.op_Bar_Hat@tok () Term)


; </end encoding FStar.Int16.op_Bar_Hat>


; <Start encoding FStar.Int16.op_Less_Less_Hat>

(declare-fun FStar.Int16.op_Less_Less_Hat (Term Term) Term)


(declare-fun FStar.Int16.op_Less_Less_Hat@tok () Term)


; </end encoding FStar.Int16.op_Less_Less_Hat>


; <Start encoding FStar.Int16.op_Greater_Greater_Hat>

(declare-fun FStar.Int16.op_Greater_Greater_Hat (Term Term) Term)


(declare-fun FStar.Int16.op_Greater_Greater_Hat@tok () Term)


; </end encoding FStar.Int16.op_Greater_Greater_Hat>


; <Start encoding FStar.Int16.op_Greater_Greater_Greater_Hat>

(declare-fun FStar.Int16.op_Greater_Greater_Greater_Hat (Term Term) Term)


(declare-fun FStar.Int16.op_Greater_Greater_Greater_Hat@tok () Term)


; </end encoding FStar.Int16.op_Greater_Greater_Greater_Hat>


; <Start encoding FStar.Int16.op_Equals_Hat>

(declare-fun FStar.Int16.op_Equals_Hat (Term Term) Term)

(declare-fun FStar.Int16.op_Equals_Hat@tok () Term)

; </end encoding FStar.Int16.op_Equals_Hat>


; <Start encoding FStar.Int16.op_Greater_Hat>

(declare-fun FStar.Int16.op_Greater_Hat (Term Term) Term)

(declare-fun FStar.Int16.op_Greater_Hat@tok () Term)

; </end encoding FStar.Int16.op_Greater_Hat>


; <Start encoding FStar.Int16.op_Greater_Equals_Hat>

(declare-fun FStar.Int16.op_Greater_Equals_Hat (Term Term) Term)

(declare-fun FStar.Int16.op_Greater_Equals_Hat@tok () Term)

; </end encoding FStar.Int16.op_Greater_Equals_Hat>


; <Start encoding FStar.Int16.op_Less_Hat>

(declare-fun FStar.Int16.op_Less_Hat (Term Term) Term)

(declare-fun FStar.Int16.op_Less_Hat@tok () Term)

; </end encoding FStar.Int16.op_Less_Hat>


; <Start encoding FStar.Int16.op_Less_Equals_Hat>

(declare-fun FStar.Int16.op_Less_Equals_Hat (Term Term) Term)

(declare-fun FStar.Int16.op_Less_Equals_Hat@tok () Term)

; </end encoding FStar.Int16.op_Less_Equals_Hat>


; <Start encoding FStar.Int16.ct_abs>

(declare-fun Tm_refine_905eb75d304d39a1c292f6e9a7923059 () Term)
(declare-fun FStar.Int16.ct_abs (Term) Term)

(declare-fun Tm_refine_ec190995fc7a4dee283b722741e05c17 (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int16.t{FStar.Int.min_int 16 < FStar.Int16.v a}   -> b: FStar.Int16.t{FStar.Int16.v b = Prims.abs (FStar.Int16.v a)}
(declare-fun Tm_arrow_ad4d51909612685b37c10d434009e218 () Term)
(declare-fun FStar.Int16.ct_abs@tok () Term)



; </end encoding FStar.Int16.ct_abs>


; <Start encoding FStar.Int16.to_string>

(declare-fun FStar.Int16.to_string (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Int16.t -> Prims.string
(declare-fun Tm_arrow_6dd91255da0d0c601bee14042bacaa10 () Term)
(declare-fun FStar.Int16.to_string@tok () Term)

; </end encoding FStar.Int16.to_string>


; <Start encoding FStar.Int16.of_string>

(declare-fun FStar.Int16.of_string (Term) Term)
;;;;;;;;;;;;;;;;_: Prims.string -> FStar.Int16.t
(declare-fun Tm_arrow_a2f8b8320fd3a7b21bf5a0abc0489d33 () Term)
(declare-fun FStar.Int16.of_string@tok () Term)

; </end encoding FStar.Int16.of_string>


; <Skipped />


; <Start encoding FStar.Int16.__int_to_t>

(declare-fun FStar.Int16.__int_to_t (Term) Term)
;;;;;;;;;;;;;;;;x: Prims.int -> FStar.Int16.t
(declare-fun Tm_arrow_8ca2ae7f208808624432206fa1fd42e7 () Term)
(declare-fun FStar.Int16.__int_to_t@tok () Term)

; </end encoding FStar.Int16.__int_to_t>


; <Skipped />


; End Externals for interface FStar.Int16


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End interface FStar.Int16 (292 decls; total size 13906)

;;; Start interface FStar.Int8

; Externals for interface FStar.Int8


; <Start encoding FStar.Int8.n>

(declare-fun FStar.Int8.n (Dummy_sort) Term)

; </end encoding FStar.Int8.n>


; <Skipped />


; <Start encoding FStar.Int8.t>

(declare-fun FStar.Int8.t (Dummy_sort) Term)

; </end encoding FStar.Int8.t>


; <Start encoding FStar.Int8.v>

(declare-fun FStar.Int8.v (Term) Term)
;;;;;;;;;;;;;;;;x: FStar.Int8.t -> FStar.Int.int_t 8
(declare-fun Tm_arrow_3ed82c48966c43aae55215d1735fa2bd () Term)
(declare-fun FStar.Int8.v@tok () Term)

; </end encoding FStar.Int8.v>


; <Start encoding FStar.Int8.int_to_t>

(declare-fun FStar.Int8.int_to_t (Term) Term)
(declare-fun Tm_refine_627483b23b11d5a071fe1ff3a43454b1 (Term) Term)
;;;;;;;;;;;;;;;;x: FStar.Int.int_t 8 -> Prims.Pure FStar.Int8.t
(declare-fun Tm_arrow_9d833fce331eb42c35cff5f448fe6f61 () Term)
(declare-fun FStar.Int8.int_to_t@tok () Term)


; </end encoding FStar.Int8.int_to_t>


; <Start encoding FStar.Int8.uv_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int8.uv_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int8.uv_inv@tok () Term)

; </end encoding FStar.Int8.uv_inv>


; <Start encoding FStar.Int8.vu_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int8.vu_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int8.vu_inv@tok () Term)

; </end encoding FStar.Int8.vu_inv>


; <Start encoding FStar.Int8.v_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Int8.v_inj (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Int8.v_inj@tok () Term)

; </end encoding FStar.Int8.v_inj>


; <Start encoding FStar.Int8.zero>

(declare-fun FStar.Int8.zero (Dummy_sort) Term)
(declare-fun Tm_refine_f53cd8ad3c1e3115abeb0027455dc224 () Term)


; </end encoding FStar.Int8.zero>


; <Start encoding FStar.Int8.one>

(declare-fun FStar.Int8.one (Dummy_sort) Term)
(declare-fun Tm_refine_dbb1396644bacb35a126b1403611f82d () Term)


; </end encoding FStar.Int8.one>


; <Start encoding FStar.Int8.add>

(declare-fun FStar.Int8.add (Term Term) Term)
(declare-fun Tm_refine_03c914b28d964e6bced1ef7a9aa09acc (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int8.t -> b: FStar.Int8.t -> Prims.Pure FStar.Int8.t
(declare-fun Tm_arrow_fa2e2b38cdb0ba0ad61f9cbd9272d2c0 () Term)
(declare-fun FStar.Int8.add@tok () Term)


; </end encoding FStar.Int8.add>


; <Start encoding FStar.Int8.sub>

(declare-fun FStar.Int8.sub (Term Term) Term)
(declare-fun Tm_refine_9dbaf07bcfba2d4a4aa7ed5bbcb9e54f (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int8.t -> b: FStar.Int8.t -> Prims.Pure FStar.Int8.t
(declare-fun Tm_arrow_e4d8293c31163f9e8cddf99a6e7bb734 () Term)
(declare-fun FStar.Int8.sub@tok () Term)


; </end encoding FStar.Int8.sub>


; <Start encoding FStar.Int8.mul>

(declare-fun FStar.Int8.mul (Term Term) Term)
(declare-fun Tm_refine_7eff5dc2928cafba516308733e6d93bb (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int8.t -> b: FStar.Int8.t -> Prims.Pure FStar.Int8.t
(declare-fun Tm_arrow_6a8a4d136c14c183c4875972e027401b () Term)
(declare-fun FStar.Int8.mul@tok () Term)


; </end encoding FStar.Int8.mul>


; <Start encoding FStar.Int8.div>

(declare-fun Tm_refine_1bed937cce8cdf75e4ca2026e8263a1e () Term)
(declare-fun FStar.Int8.div (Term Term) Term)

(declare-fun Tm_refine_4b9e14abe7b7eb92c750515973de23f8 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int8.t -> b: FStar.Int8.t{FStar.Int8.v b <> 0} -> Prims.Pure FStar.Int8.t
(declare-fun Tm_arrow_64a697cb19e2e787c537831ae65b4de7 () Term)
(declare-fun FStar.Int8.div@tok () Term)


; </end encoding FStar.Int8.div>


; <Start encoding FStar.Int8.rem>


(declare-fun FStar.Int8.rem (Term Term) Term)

(declare-fun Tm_refine_d63e04a4667963c91b06d847b1f2c63c (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int8.t -> b: FStar.Int8.t{FStar.Int8.v b <> 0} -> Prims.Pure FStar.Int8.t
(declare-fun Tm_arrow_aad3c358498ee023378414314b54643f () Term)
(declare-fun FStar.Int8.rem@tok () Term)


; </end encoding FStar.Int8.rem>


; <Start encoding FStar.Int8.logand>

(declare-fun FStar.Int8.logand (Term Term) Term)
(declare-fun Tm_refine_f43344a0fe1d05ddf2dbabae51fd4e35 (Term Term) Term)
;;;;;;;;;;;;;;;;x: FStar.Int8.t -> y: FStar.Int8.t -> Prims.Pure FStar.Int8.t
(declare-fun Tm_arrow_bfd6aed26870cf6fae28146354bf94df () Term)
(declare-fun FStar.Int8.logand@tok () Term)


; </end encoding FStar.Int8.logand>


; <Start encoding FStar.Int8.logxor>

(declare-fun FStar.Int8.logxor (Term Term) Term)
(declare-fun Tm_refine_b280b4d6e3fecdef10318a432bfa2a4d (Term Term) Term)
;;;;;;;;;;;;;;;;x: FStar.Int8.t -> y: FStar.Int8.t -> Prims.Pure FStar.Int8.t
(declare-fun Tm_arrow_2611949a3399b5125e2f6da01a4ed021 () Term)
(declare-fun FStar.Int8.logxor@tok () Term)


; </end encoding FStar.Int8.logxor>


; <Start encoding FStar.Int8.logor>

(declare-fun FStar.Int8.logor (Term Term) Term)
(declare-fun Tm_refine_595251d4c835fba77afbd2cef647300a (Term Term) Term)
;;;;;;;;;;;;;;;;x: FStar.Int8.t -> y: FStar.Int8.t -> Prims.Pure FStar.Int8.t
(declare-fun Tm_arrow_f3a6ebeacd4f2b5123ac737df0c0ace0 () Term)
(declare-fun FStar.Int8.logor@tok () Term)


; </end encoding FStar.Int8.logor>


; <Start encoding FStar.Int8.lognot>

(declare-fun FStar.Int8.lognot (Term) Term)
(declare-fun Tm_refine_2bd33a5e181ec8236ba7097dc5719ec4 (Term) Term)
;;;;;;;;;;;;;;;;x: FStar.Int8.t -> Prims.Pure FStar.Int8.t
(declare-fun Tm_arrow_08ddfb7af34f815aa77a94d02491a0ed () Term)
(declare-fun FStar.Int8.lognot@tok () Term)


; </end encoding FStar.Int8.lognot>


; <Start encoding FStar.Int8.shift_right>

(declare-fun FStar.Int8.shift_right (Term Term) Term)
(declare-fun Tm_refine_9f3d5280a6f37e4281bd94831a9f162c (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int8.t -> s: FStar.UInt32.t -> Prims.Pure FStar.Int8.t
(declare-fun Tm_arrow_34f5ccffce2f6510814b98c0716933dd () Term)
(declare-fun FStar.Int8.shift_right@tok () Term)


; </end encoding FStar.Int8.shift_right>


; <Start encoding FStar.Int8.shift_left>

(declare-fun FStar.Int8.shift_left (Term Term) Term)
(declare-fun Tm_refine_df06688bcdee8215e3a3c64bc81f68e1 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int8.t -> s: FStar.UInt32.t -> Prims.Pure FStar.Int8.t
(declare-fun Tm_arrow_80cd4951455b79877e1ff451adb1a016 () Term)
(declare-fun FStar.Int8.shift_left@tok () Term)


; </end encoding FStar.Int8.shift_left>


; <Start encoding FStar.Int8.shift_arithmetic_right>

(declare-fun FStar.Int8.shift_arithmetic_right (Term Term) Term)
(declare-fun Tm_refine_dc4579ed284bfac9f5f8e3ad9e366470 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int8.t -> s: FStar.UInt32.t -> Prims.Pure FStar.Int8.t
(declare-fun Tm_arrow_2b36269433ce79bddfaec91105165c82 () Term)
(declare-fun FStar.Int8.shift_arithmetic_right@tok () Term)


; </end encoding FStar.Int8.shift_arithmetic_right>


; <Start encoding FStar.Int8.eq>

(declare-fun FStar.Int8.eq (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int8.t -> b: FStar.Int8.t -> Prims.bool
(declare-fun Tm_arrow_d4e8934c44aa0cbf0c20e016141bb2ce () Term)
(declare-fun FStar.Int8.eq@tok () Term)

; </end encoding FStar.Int8.eq>


; <Start encoding FStar.Int8.gt>

(declare-fun FStar.Int8.gt (Term Term) Term)

(declare-fun FStar.Int8.gt@tok () Term)

; </end encoding FStar.Int8.gt>


; <Start encoding FStar.Int8.gte>

(declare-fun FStar.Int8.gte (Term Term) Term)

(declare-fun FStar.Int8.gte@tok () Term)

; </end encoding FStar.Int8.gte>


; <Start encoding FStar.Int8.lt>

(declare-fun FStar.Int8.lt (Term Term) Term)

(declare-fun FStar.Int8.lt@tok () Term)

; </end encoding FStar.Int8.lt>


; <Start encoding FStar.Int8.lte>

(declare-fun FStar.Int8.lte (Term Term) Term)

(declare-fun FStar.Int8.lte@tok () Term)

; </end encoding FStar.Int8.lte>


; <Start encoding FStar.Int8.op_Plus_Hat>

(declare-fun FStar.Int8.op_Plus_Hat (Term Term) Term)


(declare-fun FStar.Int8.op_Plus_Hat@tok () Term)


; </end encoding FStar.Int8.op_Plus_Hat>


; <Start encoding FStar.Int8.op_Subtraction_Hat>

(declare-fun FStar.Int8.op_Subtraction_Hat (Term Term) Term)


(declare-fun FStar.Int8.op_Subtraction_Hat@tok () Term)


; </end encoding FStar.Int8.op_Subtraction_Hat>


; <Start encoding FStar.Int8.op_Star_Hat>

(declare-fun FStar.Int8.op_Star_Hat (Term Term) Term)


(declare-fun FStar.Int8.op_Star_Hat@tok () Term)


; </end encoding FStar.Int8.op_Star_Hat>


; <Start encoding FStar.Int8.op_Slash_Hat>


(declare-fun FStar.Int8.op_Slash_Hat (Term Term) Term)



(declare-fun FStar.Int8.op_Slash_Hat@tok () Term)



; </end encoding FStar.Int8.op_Slash_Hat>


; <Start encoding FStar.Int8.op_Percent_Hat>


(declare-fun FStar.Int8.op_Percent_Hat (Term Term) Term)



(declare-fun FStar.Int8.op_Percent_Hat@tok () Term)



; </end encoding FStar.Int8.op_Percent_Hat>


; <Start encoding FStar.Int8.op_Hat_Hat>

(declare-fun FStar.Int8.op_Hat_Hat (Term Term) Term)


(declare-fun FStar.Int8.op_Hat_Hat@tok () Term)


; </end encoding FStar.Int8.op_Hat_Hat>


; <Start encoding FStar.Int8.op_Amp_Hat>

(declare-fun FStar.Int8.op_Amp_Hat (Term Term) Term)


(declare-fun FStar.Int8.op_Amp_Hat@tok () Term)


; </end encoding FStar.Int8.op_Amp_Hat>


; <Start encoding FStar.Int8.op_Bar_Hat>

(declare-fun FStar.Int8.op_Bar_Hat (Term Term) Term)


(declare-fun FStar.Int8.op_Bar_Hat@tok () Term)


; </end encoding FStar.Int8.op_Bar_Hat>


; <Start encoding FStar.Int8.op_Less_Less_Hat>

(declare-fun FStar.Int8.op_Less_Less_Hat (Term Term) Term)


(declare-fun FStar.Int8.op_Less_Less_Hat@tok () Term)


; </end encoding FStar.Int8.op_Less_Less_Hat>


; <Start encoding FStar.Int8.op_Greater_Greater_Hat>

(declare-fun FStar.Int8.op_Greater_Greater_Hat (Term Term) Term)


(declare-fun FStar.Int8.op_Greater_Greater_Hat@tok () Term)


; </end encoding FStar.Int8.op_Greater_Greater_Hat>


; <Start encoding FStar.Int8.op_Greater_Greater_Greater_Hat>

(declare-fun FStar.Int8.op_Greater_Greater_Greater_Hat (Term Term) Term)


(declare-fun FStar.Int8.op_Greater_Greater_Greater_Hat@tok () Term)


; </end encoding FStar.Int8.op_Greater_Greater_Greater_Hat>


; <Start encoding FStar.Int8.op_Equals_Hat>

(declare-fun FStar.Int8.op_Equals_Hat (Term Term) Term)

(declare-fun FStar.Int8.op_Equals_Hat@tok () Term)

; </end encoding FStar.Int8.op_Equals_Hat>


; <Start encoding FStar.Int8.op_Greater_Hat>

(declare-fun FStar.Int8.op_Greater_Hat (Term Term) Term)

(declare-fun FStar.Int8.op_Greater_Hat@tok () Term)

; </end encoding FStar.Int8.op_Greater_Hat>


; <Start encoding FStar.Int8.op_Greater_Equals_Hat>

(declare-fun FStar.Int8.op_Greater_Equals_Hat (Term Term) Term)

(declare-fun FStar.Int8.op_Greater_Equals_Hat@tok () Term)

; </end encoding FStar.Int8.op_Greater_Equals_Hat>


; <Start encoding FStar.Int8.op_Less_Hat>

(declare-fun FStar.Int8.op_Less_Hat (Term Term) Term)

(declare-fun FStar.Int8.op_Less_Hat@tok () Term)

; </end encoding FStar.Int8.op_Less_Hat>


; <Start encoding FStar.Int8.op_Less_Equals_Hat>

(declare-fun FStar.Int8.op_Less_Equals_Hat (Term Term) Term)

(declare-fun FStar.Int8.op_Less_Equals_Hat@tok () Term)

; </end encoding FStar.Int8.op_Less_Equals_Hat>


; <Start encoding FStar.Int8.ct_abs>

(declare-fun Tm_refine_edde6135cd8c48071c1d975316b81b83 () Term)
(declare-fun FStar.Int8.ct_abs (Term) Term)

(declare-fun Tm_refine_2733cf7f3e8b5a35bb8ad950fb38f85f (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int8.t{FStar.Int.min_int 8 < FStar.Int8.v a}   -> b: FStar.Int8.t{FStar.Int8.v b = Prims.abs (FStar.Int8.v a)}
(declare-fun Tm_arrow_4cabbb86c1d7e25395530e2b0ae71e53 () Term)
(declare-fun FStar.Int8.ct_abs@tok () Term)



; </end encoding FStar.Int8.ct_abs>


; <Start encoding FStar.Int8.to_string>

(declare-fun FStar.Int8.to_string (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Int8.t -> Prims.string
(declare-fun Tm_arrow_ed16a302d40f77572b6ea634826e997e () Term)
(declare-fun FStar.Int8.to_string@tok () Term)

; </end encoding FStar.Int8.to_string>


; <Start encoding FStar.Int8.of_string>

(declare-fun FStar.Int8.of_string (Term) Term)
;;;;;;;;;;;;;;;;_: Prims.string -> FStar.Int8.t
(declare-fun Tm_arrow_6c64329622905793cf9762c06e1b912d () Term)
(declare-fun FStar.Int8.of_string@tok () Term)

; </end encoding FStar.Int8.of_string>


; <Skipped />


; <Start encoding FStar.Int8.__int_to_t>

(declare-fun FStar.Int8.__int_to_t (Term) Term)
;;;;;;;;;;;;;;;;x: Prims.int -> FStar.Int8.t
(declare-fun Tm_arrow_3d31dd23e32abdda6c1f97b10136598a () Term)
(declare-fun FStar.Int8.__int_to_t@tok () Term)

; </end encoding FStar.Int8.__int_to_t>


; <Skipped />


; End Externals for interface FStar.Int8


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End interface FStar.Int8 (292 decls; total size 13675)

;;; Start interface FStar.UInt64

; Externals for interface FStar.UInt64


; <Start encoding FStar.UInt64.n>

(declare-fun FStar.UInt64.n (Dummy_sort) Term)

; </end encoding FStar.UInt64.n>


; <Skipped />


; <Start encoding FStar.UInt64.t>

(declare-fun FStar.UInt64.t (Dummy_sort) Term)

; </end encoding FStar.UInt64.t>


; <Start encoding FStar.UInt64.v>

(declare-fun FStar.UInt64.v (Term) Term)
;;;;;;;;;;;;;;;;x: FStar.UInt64.t -> FStar.UInt.uint_t 64
(declare-fun Tm_arrow_b1dc77edd47f50a79ef19c45877be87f () Term)
(declare-fun FStar.UInt64.v@tok () Term)
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt64.v; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(54,4-54,5); use=FStar.UInt64.fsti(54,4-54,5)
(forall ((@x0 Term))
 (! (implies (HasType @x0
(FStar.UInt64.t Dummy_value))
(HasType (FStar.UInt64.v @x0)
(FStar.UInt.uint_t (BoxInt 64))))
 

:pattern ((FStar.UInt64.v @x0))
:qid typing_FStar.UInt64.v))

:named typing_FStar.UInt64.v))

; </end encoding FStar.UInt64.v>


; <Start encoding FStar.UInt64.uint_to_t>

(declare-fun FStar.UInt64.uint_to_t (Term) Term)
(declare-fun Tm_refine_48c1b5b4c02ad49f0760911a9d4b1fb4 (Term) Term)
;;;;;;;;;;;;;;;;x: FStar.UInt.uint_t 64 -> Prims.Pure FStar.UInt64.t
(declare-fun Tm_arrow_0a7b550d26d1f7783c7c5e1990842388 () Term)
(declare-fun FStar.UInt64.uint_to_t@tok () Term)


; </end encoding FStar.UInt64.uint_to_t>


; <Start encoding FStar.UInt64.uv_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt64.uv_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt64.uv_inv@tok () Term)

; </end encoding FStar.UInt64.uv_inv>


; <Start encoding FStar.UInt64.vu_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt64.vu_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt64.vu_inv@tok () Term)

; </end encoding FStar.UInt64.vu_inv>


; <Start encoding FStar.UInt64.v_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt64.v_inj (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt64.v_inj@tok () Term)

; </end encoding FStar.UInt64.v_inj>


; <Start encoding FStar.UInt64.zero>

(declare-fun FStar.UInt64.zero (Dummy_sort) Term)
(declare-fun Tm_refine_89584a9c9cf094f470969adafcc43f12 () Term)


; </end encoding FStar.UInt64.zero>


; <Start encoding FStar.UInt64.one>

(declare-fun FStar.UInt64.one (Dummy_sort) Term)
(declare-fun Tm_refine_248426d47c73436882d5ff4a2d4f3cf0 () Term)


; </end encoding FStar.UInt64.one>


; <Start encoding FStar.UInt64.add>

(declare-fun FStar.UInt64.add (Term Term) Term)
(declare-fun Tm_refine_bc552b2c624e2add758b3ac761c0c563 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt64.t -> b: FStar.UInt64.t -> Prims.Pure FStar.UInt64.t
(declare-fun Tm_arrow_be2b56e86970b1435b564896876df5af () Term)
(declare-fun FStar.UInt64.add@tok () Term)


; </end encoding FStar.UInt64.add>


; <Start encoding FStar.UInt64.add_underspec>

(declare-fun FStar.UInt64.add_underspec (Term Term) Term)
(declare-fun Tm_refine_453fa410c3a31a8a972a89b516aee90f (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt64.t -> b: FStar.UInt64.t -> Prims.Pure FStar.UInt64.t
(declare-fun Tm_arrow_7f1e1876505bc4561e28a0354c79be94 () Term)
(declare-fun FStar.UInt64.add_underspec@tok () Term)


; </end encoding FStar.UInt64.add_underspec>


; <Start encoding FStar.UInt64.add_mod>

(declare-fun FStar.UInt64.add_mod (Term Term) Term)
(declare-fun Tm_refine_2d98f2f5de361516da3dbd9f556509e2 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt64.t -> b: FStar.UInt64.t -> Prims.Pure FStar.UInt64.t
(declare-fun Tm_arrow_05395bb977e74723e0c89b35f3db81b1 () Term)
(declare-fun FStar.UInt64.add_mod@tok () Term)


; </end encoding FStar.UInt64.add_mod>


; <Start encoding FStar.UInt64.sub>

(declare-fun FStar.UInt64.sub (Term Term) Term)
(declare-fun Tm_refine_4db8ba22c4504a66577a2159dcc603cd (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt64.t -> b: FStar.UInt64.t -> Prims.Pure FStar.UInt64.t
(declare-fun Tm_arrow_a3c2957810330952c9cd0dc2ef7e5dc1 () Term)
(declare-fun FStar.UInt64.sub@tok () Term)


; </end encoding FStar.UInt64.sub>


; <Start encoding FStar.UInt64.sub_underspec>

(declare-fun FStar.UInt64.sub_underspec (Term Term) Term)
(declare-fun Tm_refine_dd3e2dd01aa446ac6616a71fc757406a (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt64.t -> b: FStar.UInt64.t -> Prims.Pure FStar.UInt64.t
(declare-fun Tm_arrow_87b0e65776a09c1fe9734c4195b4bf84 () Term)
(declare-fun FStar.UInt64.sub_underspec@tok () Term)


; </end encoding FStar.UInt64.sub_underspec>


; <Start encoding FStar.UInt64.sub_mod>

(declare-fun FStar.UInt64.sub_mod (Term Term) Term)
(declare-fun Tm_refine_cb95789552ffa46c14f21af13ceaad6b (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt64.t -> b: FStar.UInt64.t -> Prims.Pure FStar.UInt64.t
(declare-fun Tm_arrow_7f617113bda01094490f58e39564f398 () Term)
(declare-fun FStar.UInt64.sub_mod@tok () Term)


; </end encoding FStar.UInt64.sub_mod>


; <Start encoding FStar.UInt64.mul>

(declare-fun FStar.UInt64.mul (Term Term) Term)
(declare-fun Tm_refine_2ac8bed7a6398f84bccb91bd4fed7136 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt64.t -> b: FStar.UInt64.t -> Prims.Pure FStar.UInt64.t
(declare-fun Tm_arrow_ea17845c6f4791bda61fffc74c40da51 () Term)
(declare-fun FStar.UInt64.mul@tok () Term)


; </end encoding FStar.UInt64.mul>


; <Start encoding FStar.UInt64.mul_underspec>

(declare-fun FStar.UInt64.mul_underspec (Term Term) Term)
(declare-fun Tm_refine_b936d941ba7bf51db4d781f9af09acd3 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt64.t -> b: FStar.UInt64.t -> Prims.Pure FStar.UInt64.t
(declare-fun Tm_arrow_596709ad66a9eee3dc6ef040a813e08e () Term)
(declare-fun FStar.UInt64.mul_underspec@tok () Term)


; </end encoding FStar.UInt64.mul_underspec>


; <Start encoding FStar.UInt64.mul_mod>

(declare-fun FStar.UInt64.mul_mod (Term Term) Term)
(declare-fun Tm_refine_fce3a2e2e29645212301d89fcebc4e29 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt64.t -> b: FStar.UInt64.t -> Prims.Pure FStar.UInt64.t
(declare-fun Tm_arrow_a58b92e22a54f064a91938f5890f3d26 () Term)
(declare-fun FStar.UInt64.mul_mod@tok () Term)


; </end encoding FStar.UInt64.mul_mod>


; <Start encoding FStar.UInt64.div>

(declare-fun Tm_refine_94d25b6e0041d543efd58300424ecc37 () Term)
(declare-fun FStar.UInt64.div (Term Term) Term)

(declare-fun Tm_refine_2905e4cd1a81244ae97dc5c62563e060 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt64.t -> b: FStar.UInt64.t{FStar.UInt64.v b <> 0} -> Prims.Pure FStar.UInt64.t
(declare-fun Tm_arrow_362fd430a2a36692a10db610ce347491 () Term)
(declare-fun FStar.UInt64.div@tok () Term)


; </end encoding FStar.UInt64.div>


; <Start encoding FStar.UInt64.rem>


(declare-fun FStar.UInt64.rem (Term Term) Term)

(declare-fun Tm_refine_06f2bf4950bb76094f7b7f43daea2409 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt64.t -> b: FStar.UInt64.t{FStar.UInt64.v b <> 0} -> Prims.Pure FStar.UInt64.t
(declare-fun Tm_arrow_53bf9c10f719f234f584267623ec2e33 () Term)
(declare-fun FStar.UInt64.rem@tok () Term)


; </end encoding FStar.UInt64.rem>


; <Start encoding FStar.UInt64.logand>

(declare-fun FStar.UInt64.logand (Term Term) Term)
(declare-fun Tm_refine_4a73301fbc41c8e432f23b6aef69a5eb (Term Term) Term)
;;;;;;;;;;;;;;;;x: FStar.UInt64.t -> y: FStar.UInt64.t -> Prims.Pure FStar.UInt64.t
(declare-fun Tm_arrow_cbca1d1a87f201e6ff2f61643983b2f3 () Term)
(declare-fun FStar.UInt64.logand@tok () Term)


; </end encoding FStar.UInt64.logand>


; <Start encoding FStar.UInt64.logxor>

(declare-fun FStar.UInt64.logxor (Term Term) Term)
(declare-fun Tm_refine_b87f471e80e3c2bc077d38b7026cfcf6 (Term Term) Term)
;;;;;;;;;;;;;;;;x: FStar.UInt64.t -> y: FStar.UInt64.t -> Prims.Pure FStar.UInt64.t
(declare-fun Tm_arrow_7a0892a26110d0c3bb8d5540c3f9134f () Term)
(declare-fun FStar.UInt64.logxor@tok () Term)


; </end encoding FStar.UInt64.logxor>


; <Start encoding FStar.UInt64.logor>

(declare-fun FStar.UInt64.logor (Term Term) Term)
(declare-fun Tm_refine_6913af387cf2f30da0961ac60666f00f (Term Term) Term)
;;;;;;;;;;;;;;;;x: FStar.UInt64.t -> y: FStar.UInt64.t -> Prims.Pure FStar.UInt64.t
(declare-fun Tm_arrow_88959be20cb195d8ed8c043810621aa5 () Term)
(declare-fun FStar.UInt64.logor@tok () Term)


; </end encoding FStar.UInt64.logor>


; <Start encoding FStar.UInt64.lognot>

(declare-fun FStar.UInt64.lognot (Term) Term)
(declare-fun Tm_refine_d294ad5c8783c9adf54e87f8b3d910d1 (Term) Term)
;;;;;;;;;;;;;;;;x: FStar.UInt64.t -> Prims.Pure FStar.UInt64.t
(declare-fun Tm_arrow_5830582bc087a4c4cac6e2d02503540d () Term)
(declare-fun FStar.UInt64.lognot@tok () Term)


; </end encoding FStar.UInt64.lognot>


; <Start encoding FStar.UInt64.shift_right>

(declare-fun FStar.UInt64.shift_right (Term Term) Term)
(declare-fun Tm_refine_0556f625b89f1ac99fd21e82e26fe9e0 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt64.t -> s: FStar.UInt32.t -> Prims.Pure FStar.UInt64.t
(declare-fun Tm_arrow_54172cd4c03b90333401dcf08f131f18 () Term)
(declare-fun FStar.UInt64.shift_right@tok () Term)


; </end encoding FStar.UInt64.shift_right>


; <Start encoding FStar.UInt64.shift_left>

(declare-fun FStar.UInt64.shift_left (Term Term) Term)
(declare-fun Tm_refine_ebf0af240d826e12ec6c1570ad81631c (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt64.t -> s: FStar.UInt32.t -> Prims.Pure FStar.UInt64.t
(declare-fun Tm_arrow_f0e726dc2efef2bba1cad7b7437673ab () Term)
(declare-fun FStar.UInt64.shift_left@tok () Term)


; </end encoding FStar.UInt64.shift_left>


; <Start encoding FStar.UInt64.eq>

(declare-fun FStar.UInt64.eq (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt64.t -> b: FStar.UInt64.t -> Prims.bool
(declare-fun Tm_arrow_598288f3403164a95ff09472c7ec0bb4 () Term)
(declare-fun FStar.UInt64.eq@tok () Term)

; </end encoding FStar.UInt64.eq>


; <Start encoding FStar.UInt64.gt>

(declare-fun FStar.UInt64.gt (Term Term) Term)

(declare-fun FStar.UInt64.gt@tok () Term)

; </end encoding FStar.UInt64.gt>


; <Start encoding FStar.UInt64.gte>

(declare-fun FStar.UInt64.gte (Term Term) Term)

(declare-fun FStar.UInt64.gte@tok () Term)

; </end encoding FStar.UInt64.gte>


; <Start encoding FStar.UInt64.lt>

(declare-fun FStar.UInt64.lt (Term Term) Term)

(declare-fun FStar.UInt64.lt@tok () Term)

; </end encoding FStar.UInt64.lt>


; <Start encoding FStar.UInt64.lte>

(declare-fun FStar.UInt64.lte (Term Term) Term)

(declare-fun FStar.UInt64.lte@tok () Term)

; </end encoding FStar.UInt64.lte>


; <Start encoding FStar.UInt64.minus>

(declare-fun FStar.UInt64.minus (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt64.t -> FStar.UInt64.t
(declare-fun Tm_arrow_1b7783661e16e9c2a9894c974bc97032 () Term)
(declare-fun FStar.UInt64.minus@tok () Term)

; </end encoding FStar.UInt64.minus>


; <Start encoding FStar.UInt64.n_minus_one>

(declare-fun FStar.UInt64.n_minus_one (Dummy_sort) Term)

; </end encoding FStar.UInt64.n_minus_one>


; <Skipped />


; <Start encoding FStar.UInt64.eq_mask>

(declare-fun FStar.UInt64.eq_mask (Term Term) Term)
(declare-fun Tm_refine_30c561286d2c8600e271922aaab003cf (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt64.t -> b: FStar.UInt64.t -> Prims.Pure FStar.UInt64.t
(declare-fun Tm_arrow_dc89781bb433a3a499ce3ed25df276ee () Term)
(declare-fun FStar.UInt64.eq_mask@tok () Term)


; </end encoding FStar.UInt64.eq_mask>


; <Start encoding FStar.UInt64.lemma_sub_msbs>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt64.lemma_sub_msbs (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt64.lemma_sub_msbs@tok () Term)

; </end encoding FStar.UInt64.lemma_sub_msbs>


; <Start encoding FStar.UInt64.gte_mask>

(declare-fun FStar.UInt64.gte_mask (Term Term) Term)
(declare-fun Tm_refine_1b1f0e3b5d9ef76ddc765c8d9e623234 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt64.t -> b: FStar.UInt64.t -> Prims.Pure FStar.UInt64.t
(declare-fun Tm_arrow_7b13171caed18c0d7cf0b1d9315655c1 () Term)
(declare-fun FStar.UInt64.gte_mask@tok () Term)


; </end encoding FStar.UInt64.gte_mask>


; <Skipped />


; <Start encoding FStar.UInt64.op_Plus_Hat>

(declare-fun FStar.UInt64.op_Plus_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Plus_Hat@tok () Term)


; </end encoding FStar.UInt64.op_Plus_Hat>


; <Start encoding FStar.UInt64.op_Plus_Question_Hat>

(declare-fun FStar.UInt64.op_Plus_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Plus_Question_Hat@tok () Term)


; </end encoding FStar.UInt64.op_Plus_Question_Hat>


; <Start encoding FStar.UInt64.op_Plus_Percent_Hat>

(declare-fun FStar.UInt64.op_Plus_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Plus_Percent_Hat@tok () Term)


; </end encoding FStar.UInt64.op_Plus_Percent_Hat>


; <Start encoding FStar.UInt64.op_Subtraction_Hat>

(declare-fun FStar.UInt64.op_Subtraction_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Subtraction_Hat@tok () Term)


; </end encoding FStar.UInt64.op_Subtraction_Hat>


; <Start encoding FStar.UInt64.op_Subtraction_Question_Hat>

(declare-fun FStar.UInt64.op_Subtraction_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Subtraction_Question_Hat@tok () Term)


; </end encoding FStar.UInt64.op_Subtraction_Question_Hat>


; <Start encoding FStar.UInt64.op_Subtraction_Percent_Hat>

(declare-fun FStar.UInt64.op_Subtraction_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Subtraction_Percent_Hat@tok () Term)


; </end encoding FStar.UInt64.op_Subtraction_Percent_Hat>


; <Start encoding FStar.UInt64.op_Star_Hat>

(declare-fun FStar.UInt64.op_Star_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Star_Hat@tok () Term)


; </end encoding FStar.UInt64.op_Star_Hat>


; <Start encoding FStar.UInt64.op_Star_Question_Hat>

(declare-fun FStar.UInt64.op_Star_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Star_Question_Hat@tok () Term)


; </end encoding FStar.UInt64.op_Star_Question_Hat>


; <Start encoding FStar.UInt64.op_Star_Percent_Hat>

(declare-fun FStar.UInt64.op_Star_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Star_Percent_Hat@tok () Term)


; </end encoding FStar.UInt64.op_Star_Percent_Hat>


; <Start encoding FStar.UInt64.op_Slash_Hat>


(declare-fun FStar.UInt64.op_Slash_Hat (Term Term) Term)



(declare-fun FStar.UInt64.op_Slash_Hat@tok () Term)



; </end encoding FStar.UInt64.op_Slash_Hat>


; <Start encoding FStar.UInt64.op_Percent_Hat>


(declare-fun FStar.UInt64.op_Percent_Hat (Term Term) Term)



(declare-fun FStar.UInt64.op_Percent_Hat@tok () Term)



; </end encoding FStar.UInt64.op_Percent_Hat>


; <Start encoding FStar.UInt64.op_Hat_Hat>

(declare-fun FStar.UInt64.op_Hat_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Hat_Hat@tok () Term)


; </end encoding FStar.UInt64.op_Hat_Hat>


; <Start encoding FStar.UInt64.op_Amp_Hat>

(declare-fun FStar.UInt64.op_Amp_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Amp_Hat@tok () Term)


; </end encoding FStar.UInt64.op_Amp_Hat>


; <Start encoding FStar.UInt64.op_Bar_Hat>

(declare-fun FStar.UInt64.op_Bar_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Bar_Hat@tok () Term)


; </end encoding FStar.UInt64.op_Bar_Hat>


; <Start encoding FStar.UInt64.op_Less_Less_Hat>

(declare-fun FStar.UInt64.op_Less_Less_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Less_Less_Hat@tok () Term)


; </end encoding FStar.UInt64.op_Less_Less_Hat>


; <Start encoding FStar.UInt64.op_Greater_Greater_Hat>

(declare-fun FStar.UInt64.op_Greater_Greater_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Greater_Greater_Hat@tok () Term)


; </end encoding FStar.UInt64.op_Greater_Greater_Hat>


; <Start encoding FStar.UInt64.op_Equals_Hat>

(declare-fun FStar.UInt64.op_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt64.op_Equals_Hat@tok () Term)

; </end encoding FStar.UInt64.op_Equals_Hat>


; <Start encoding FStar.UInt64.op_Greater_Hat>

(declare-fun FStar.UInt64.op_Greater_Hat (Term Term) Term)

(declare-fun FStar.UInt64.op_Greater_Hat@tok () Term)

; </end encoding FStar.UInt64.op_Greater_Hat>


; <Start encoding FStar.UInt64.op_Greater_Equals_Hat>

(declare-fun FStar.UInt64.op_Greater_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt64.op_Greater_Equals_Hat@tok () Term)

; </end encoding FStar.UInt64.op_Greater_Equals_Hat>


; <Start encoding FStar.UInt64.op_Less_Hat>

(declare-fun FStar.UInt64.op_Less_Hat (Term Term) Term)

(declare-fun FStar.UInt64.op_Less_Hat@tok () Term)

; </end encoding FStar.UInt64.op_Less_Hat>


; <Start encoding FStar.UInt64.op_Less_Equals_Hat>

(declare-fun FStar.UInt64.op_Less_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt64.op_Less_Equals_Hat@tok () Term)

; </end encoding FStar.UInt64.op_Less_Equals_Hat>


; <Start encoding FStar.UInt64.to_string>

(declare-fun FStar.UInt64.to_string (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.UInt64.t -> Prims.string
(declare-fun Tm_arrow_9181e066d5f5e8abb661df26378ed002 () Term)
(declare-fun FStar.UInt64.to_string@tok () Term)

; </end encoding FStar.UInt64.to_string>


; <Start encoding FStar.UInt64.to_string_hex>

(declare-fun FStar.UInt64.to_string_hex (Term) Term)

(declare-fun FStar.UInt64.to_string_hex@tok () Term)

; </end encoding FStar.UInt64.to_string_hex>


; <Start encoding FStar.UInt64.to_string_hex_pad>

(declare-fun FStar.UInt64.to_string_hex_pad (Term) Term)

(declare-fun FStar.UInt64.to_string_hex_pad@tok () Term)

; </end encoding FStar.UInt64.to_string_hex_pad>


; <Start encoding FStar.UInt64.of_string>

(declare-fun FStar.UInt64.of_string (Term) Term)
;;;;;;;;;;;;;;;;_: Prims.string -> FStar.UInt64.t
(declare-fun Tm_arrow_d8ed8461d1bddbfa79f5d5b77e608759 () Term)
(declare-fun FStar.UInt64.of_string@tok () Term)

; </end encoding FStar.UInt64.of_string>


; <Skipped />


; <Start encoding FStar.UInt64.__uint_to_t>

(declare-fun FStar.UInt64.__uint_to_t (Term) Term)
;;;;;;;;;;;;;;;;x: Prims.int -> FStar.UInt64.t
(declare-fun Tm_arrow_583103ad9bf405c63f576183363ae2d9 () Term)
(declare-fun FStar.UInt64.__uint_to_t@tok () Term)

; </end encoding FStar.UInt64.__uint_to_t>


; <Skipped />


; End Externals for interface FStar.UInt64


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End interface FStar.UInt64 (391 decls; total size 19290)

;;; Start interface FStar.UInt16

; Externals for interface FStar.UInt16


; <Start encoding FStar.UInt16.n>

(declare-fun FStar.UInt16.n (Dummy_sort) Term)

; </end encoding FStar.UInt16.n>


; <Skipped />


; <Start encoding FStar.UInt16.t>

(declare-fun FStar.UInt16.t (Dummy_sort) Term)

; </end encoding FStar.UInt16.t>


; <Start encoding FStar.UInt16.v>

(declare-fun FStar.UInt16.v (Term) Term)
;;;;;;;;;;;;;;;;x: FStar.UInt16.t -> FStar.UInt.uint_t 16
(declare-fun Tm_arrow_831b8138993a407ded8960bcff127b07 () Term)
(declare-fun FStar.UInt16.v@tok () Term)

; </end encoding FStar.UInt16.v>


; <Start encoding FStar.UInt16.uint_to_t>

(declare-fun FStar.UInt16.uint_to_t (Term) Term)
(declare-fun Tm_refine_f2a41cd0b7a1b87e64e4bdabfc823091 (Term) Term)
;;;;;;;;;;;;;;;;x: FStar.UInt.uint_t 16 -> Prims.Pure FStar.UInt16.t
(declare-fun Tm_arrow_f4c24117357cf86f1b23d9cc39310530 () Term)
(declare-fun FStar.UInt16.uint_to_t@tok () Term)


; </end encoding FStar.UInt16.uint_to_t>


; <Start encoding FStar.UInt16.uv_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt16.uv_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt16.uv_inv@tok () Term)

; </end encoding FStar.UInt16.uv_inv>


; <Start encoding FStar.UInt16.vu_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt16.vu_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt16.vu_inv@tok () Term)

; </end encoding FStar.UInt16.vu_inv>


; <Start encoding FStar.UInt16.v_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt16.v_inj (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt16.v_inj@tok () Term)

; </end encoding FStar.UInt16.v_inj>


; <Start encoding FStar.UInt16.zero>

(declare-fun FStar.UInt16.zero (Dummy_sort) Term)
(declare-fun Tm_refine_954f2f8414e85457d28fe853c92eda2f () Term)


; </end encoding FStar.UInt16.zero>


; <Start encoding FStar.UInt16.one>

(declare-fun FStar.UInt16.one (Dummy_sort) Term)
(declare-fun Tm_refine_2808678106914fa614675fc00e2d12d2 () Term)


; </end encoding FStar.UInt16.one>


; <Start encoding FStar.UInt16.add>

(declare-fun FStar.UInt16.add (Term Term) Term)
(declare-fun Tm_refine_6fc1cfeb1ee6b248d1fef572cc963c99 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt16.t -> b: FStar.UInt16.t -> Prims.Pure FStar.UInt16.t
(declare-fun Tm_arrow_f5504d213bba7b5885cb0987c01f2153 () Term)
(declare-fun FStar.UInt16.add@tok () Term)


; </end encoding FStar.UInt16.add>


; <Start encoding FStar.UInt16.add_underspec>

(declare-fun FStar.UInt16.add_underspec (Term Term) Term)
(declare-fun Tm_refine_34c091163f56732e02aa4746939ed3b3 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt16.t -> b: FStar.UInt16.t -> Prims.Pure FStar.UInt16.t
(declare-fun Tm_arrow_fca12874fe31591238919898de90521f () Term)
(declare-fun FStar.UInt16.add_underspec@tok () Term)


; </end encoding FStar.UInt16.add_underspec>


; <Start encoding FStar.UInt16.add_mod>

(declare-fun FStar.UInt16.add_mod (Term Term) Term)
(declare-fun Tm_refine_a528e7088dc7771b5f67a6b9c65b45af (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt16.t -> b: FStar.UInt16.t -> Prims.Pure FStar.UInt16.t
(declare-fun Tm_arrow_e98be28bf728160b6eb326bbf51fc61a () Term)
(declare-fun FStar.UInt16.add_mod@tok () Term)


; </end encoding FStar.UInt16.add_mod>


; <Start encoding FStar.UInt16.sub>

(declare-fun FStar.UInt16.sub (Term Term) Term)
(declare-fun Tm_refine_b859c3bfdcf246597841540fb1ed998d (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt16.t -> b: FStar.UInt16.t -> Prims.Pure FStar.UInt16.t
(declare-fun Tm_arrow_413f6d7ea0554099e9c499578964c6cd () Term)
(declare-fun FStar.UInt16.sub@tok () Term)


; </end encoding FStar.UInt16.sub>


; <Start encoding FStar.UInt16.sub_underspec>

(declare-fun FStar.UInt16.sub_underspec (Term Term) Term)
(declare-fun Tm_refine_8fdd03b83187f4fea291f025e835855f (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt16.t -> b: FStar.UInt16.t -> Prims.Pure FStar.UInt16.t
(declare-fun Tm_arrow_d2d64a11e05eca67e5ebd6fbca18667e () Term)
(declare-fun FStar.UInt16.sub_underspec@tok () Term)


; </end encoding FStar.UInt16.sub_underspec>


; <Start encoding FStar.UInt16.sub_mod>

(declare-fun FStar.UInt16.sub_mod (Term Term) Term)
(declare-fun Tm_refine_129b0169b4e8bab9a8dfb4cbd0d62214 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt16.t -> b: FStar.UInt16.t -> Prims.Pure FStar.UInt16.t
(declare-fun Tm_arrow_0cfa58c6ce7e51c3d1880814626c261d () Term)
(declare-fun FStar.UInt16.sub_mod@tok () Term)


; </end encoding FStar.UInt16.sub_mod>


; <Start encoding FStar.UInt16.mul>

(declare-fun FStar.UInt16.mul (Term Term) Term)
(declare-fun Tm_refine_0c3c281ec070e108a64d9e6643fa12b8 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt16.t -> b: FStar.UInt16.t -> Prims.Pure FStar.UInt16.t
(declare-fun Tm_arrow_818a65cd860d9d90b9ff51d2de174014 () Term)
(declare-fun FStar.UInt16.mul@tok () Term)


; </end encoding FStar.UInt16.mul>


; <Start encoding FStar.UInt16.mul_underspec>

(declare-fun FStar.UInt16.mul_underspec (Term Term) Term)
(declare-fun Tm_refine_cb1b76b3df6f40838b504137c35a6e17 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt16.t -> b: FStar.UInt16.t -> Prims.Pure FStar.UInt16.t
(declare-fun Tm_arrow_dfe74ad18d22be11665be6a37fdb27f6 () Term)
(declare-fun FStar.UInt16.mul_underspec@tok () Term)


; </end encoding FStar.UInt16.mul_underspec>


; <Start encoding FStar.UInt16.mul_mod>

(declare-fun FStar.UInt16.mul_mod (Term Term) Term)
(declare-fun Tm_refine_e24ce146e70bc5c453cecdd42c419aa1 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt16.t -> b: FStar.UInt16.t -> Prims.Pure FStar.UInt16.t
(declare-fun Tm_arrow_fa5800654240cb69e060f3600acc0ab9 () Term)
(declare-fun FStar.UInt16.mul_mod@tok () Term)


; </end encoding FStar.UInt16.mul_mod>


; <Start encoding FStar.UInt16.div>

(declare-fun Tm_refine_3e34e2c4f5ba554ca9d5a94a7452f876 () Term)
(declare-fun FStar.UInt16.div (Term Term) Term)

(declare-fun Tm_refine_a2680f37a85ca38ef32ad76329ca6655 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt16.t -> b: FStar.UInt16.t{FStar.UInt16.v b <> 0} -> Prims.Pure FStar.UInt16.t
(declare-fun Tm_arrow_1d3ed7d1a36eb1c15be9167cdd26d975 () Term)
(declare-fun FStar.UInt16.div@tok () Term)


; </end encoding FStar.UInt16.div>


; <Start encoding FStar.UInt16.rem>


(declare-fun FStar.UInt16.rem (Term Term) Term)

(declare-fun Tm_refine_8d1743b5c6d2f2c9050076549cfeb5f4 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt16.t -> b: FStar.UInt16.t{FStar.UInt16.v b <> 0} -> Prims.Pure FStar.UInt16.t
(declare-fun Tm_arrow_a9b2f8e628351ca8191e5a2d74e12318 () Term)
(declare-fun FStar.UInt16.rem@tok () Term)


; </end encoding FStar.UInt16.rem>


; <Start encoding FStar.UInt16.logand>

(declare-fun FStar.UInt16.logand (Term Term) Term)
(declare-fun Tm_refine_7cf5fd844874f3049d3067fe68a85256 (Term Term) Term)
;;;;;;;;;;;;;;;;x: FStar.UInt16.t -> y: FStar.UInt16.t -> Prims.Pure FStar.UInt16.t
(declare-fun Tm_arrow_7aa270d906bd8fb45c247b75568c48db () Term)
(declare-fun FStar.UInt16.logand@tok () Term)


; </end encoding FStar.UInt16.logand>


; <Start encoding FStar.UInt16.logxor>

(declare-fun FStar.UInt16.logxor (Term Term) Term)
(declare-fun Tm_refine_e55be37d77d9b240b683ff3354ca439c (Term Term) Term)
;;;;;;;;;;;;;;;;x: FStar.UInt16.t -> y: FStar.UInt16.t -> Prims.Pure FStar.UInt16.t
(declare-fun Tm_arrow_22be9a4de1ee3eadb350cd60783b66ae () Term)
(declare-fun FStar.UInt16.logxor@tok () Term)


; </end encoding FStar.UInt16.logxor>


; <Start encoding FStar.UInt16.logor>

(declare-fun FStar.UInt16.logor (Term Term) Term)
(declare-fun Tm_refine_3881ab512ff2d0d86d43bf57b0c61e75 (Term Term) Term)
;;;;;;;;;;;;;;;;x: FStar.UInt16.t -> y: FStar.UInt16.t -> Prims.Pure FStar.UInt16.t
(declare-fun Tm_arrow_fa4847a4c38079a6033cc53f6f8391a5 () Term)
(declare-fun FStar.UInt16.logor@tok () Term)


; </end encoding FStar.UInt16.logor>


; <Start encoding FStar.UInt16.lognot>

(declare-fun FStar.UInt16.lognot (Term) Term)
(declare-fun Tm_refine_dfa8480cc0780e895037e28b8472b8df (Term) Term)
;;;;;;;;;;;;;;;;x: FStar.UInt16.t -> Prims.Pure FStar.UInt16.t
(declare-fun Tm_arrow_893e33c74d084e533ade4a873a1f755c () Term)
(declare-fun FStar.UInt16.lognot@tok () Term)


; </end encoding FStar.UInt16.lognot>


; <Start encoding FStar.UInt16.shift_right>

(declare-fun FStar.UInt16.shift_right (Term Term) Term)
(declare-fun Tm_refine_4ef8dd68ca64f7c4c1a8bac302cb51a6 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt16.t -> s: FStar.UInt32.t -> Prims.Pure FStar.UInt16.t
(declare-fun Tm_arrow_a7706d3849bacf3a6eca4b133d095a70 () Term)
(declare-fun FStar.UInt16.shift_right@tok () Term)


; </end encoding FStar.UInt16.shift_right>


; <Start encoding FStar.UInt16.shift_left>

(declare-fun FStar.UInt16.shift_left (Term Term) Term)
(declare-fun Tm_refine_bb6b262bbc4fcaf78b2af3148bb763c6 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt16.t -> s: FStar.UInt32.t -> Prims.Pure FStar.UInt16.t
(declare-fun Tm_arrow_5b62fe9416ecdac1c662be0b77ffd710 () Term)
(declare-fun FStar.UInt16.shift_left@tok () Term)


; </end encoding FStar.UInt16.shift_left>


; <Start encoding FStar.UInt16.eq>

(declare-fun FStar.UInt16.eq (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt16.t -> b: FStar.UInt16.t -> Prims.bool
(declare-fun Tm_arrow_ec095ea6bafa5e9866a85b27cff308e0 () Term)
(declare-fun FStar.UInt16.eq@tok () Term)

; </end encoding FStar.UInt16.eq>


; <Start encoding FStar.UInt16.gt>

(declare-fun FStar.UInt16.gt (Term Term) Term)

(declare-fun FStar.UInt16.gt@tok () Term)

; </end encoding FStar.UInt16.gt>


; <Start encoding FStar.UInt16.gte>

(declare-fun FStar.UInt16.gte (Term Term) Term)

(declare-fun FStar.UInt16.gte@tok () Term)

; </end encoding FStar.UInt16.gte>


; <Start encoding FStar.UInt16.lt>

(declare-fun FStar.UInt16.lt (Term Term) Term)

(declare-fun FStar.UInt16.lt@tok () Term)

; </end encoding FStar.UInt16.lt>


; <Start encoding FStar.UInt16.lte>

(declare-fun FStar.UInt16.lte (Term Term) Term)

(declare-fun FStar.UInt16.lte@tok () Term)

; </end encoding FStar.UInt16.lte>


; <Start encoding FStar.UInt16.minus>

(declare-fun FStar.UInt16.minus (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt16.t -> FStar.UInt16.t
(declare-fun Tm_arrow_3f395de82a49d1518ea23b50c5f2f44e () Term)
(declare-fun FStar.UInt16.minus@tok () Term)

; </end encoding FStar.UInt16.minus>


; <Start encoding FStar.UInt16.n_minus_one>

(declare-fun FStar.UInt16.n_minus_one (Dummy_sort) Term)

; </end encoding FStar.UInt16.n_minus_one>


; <Skipped />


; <Start encoding FStar.UInt16.eq_mask>

(declare-fun FStar.UInt16.eq_mask (Term Term) Term)
(declare-fun Tm_refine_4337d527bd8e18a624079c37cd404c59 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt16.t -> b: FStar.UInt16.t -> Prims.Pure FStar.UInt16.t
(declare-fun Tm_arrow_3b501882da55605a5a3d3f43f32c45b9 () Term)
(declare-fun FStar.UInt16.eq_mask@tok () Term)


; </end encoding FStar.UInt16.eq_mask>


; <Start encoding FStar.UInt16.lemma_sub_msbs>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt16.lemma_sub_msbs (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt16.lemma_sub_msbs@tok () Term)

; </end encoding FStar.UInt16.lemma_sub_msbs>


; <Start encoding FStar.UInt16.gte_mask>

(declare-fun FStar.UInt16.gte_mask (Term Term) Term)
(declare-fun Tm_refine_d8e117de3278723cbc3559698b2db64e (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt16.t -> b: FStar.UInt16.t -> Prims.Pure FStar.UInt16.t
(declare-fun Tm_arrow_01b6b3276c1f9c1f15edd31113793e3b () Term)
(declare-fun FStar.UInt16.gte_mask@tok () Term)


; </end encoding FStar.UInt16.gte_mask>


; <Skipped />


; <Start encoding FStar.UInt16.op_Plus_Hat>

(declare-fun FStar.UInt16.op_Plus_Hat (Term Term) Term)


(declare-fun FStar.UInt16.op_Plus_Hat@tok () Term)


; </end encoding FStar.UInt16.op_Plus_Hat>


; <Start encoding FStar.UInt16.op_Plus_Question_Hat>

(declare-fun FStar.UInt16.op_Plus_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt16.op_Plus_Question_Hat@tok () Term)


; </end encoding FStar.UInt16.op_Plus_Question_Hat>


; <Start encoding FStar.UInt16.op_Plus_Percent_Hat>

(declare-fun FStar.UInt16.op_Plus_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt16.op_Plus_Percent_Hat@tok () Term)


; </end encoding FStar.UInt16.op_Plus_Percent_Hat>


; <Start encoding FStar.UInt16.op_Subtraction_Hat>

(declare-fun FStar.UInt16.op_Subtraction_Hat (Term Term) Term)


(declare-fun FStar.UInt16.op_Subtraction_Hat@tok () Term)


; </end encoding FStar.UInt16.op_Subtraction_Hat>


; <Start encoding FStar.UInt16.op_Subtraction_Question_Hat>

(declare-fun FStar.UInt16.op_Subtraction_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt16.op_Subtraction_Question_Hat@tok () Term)


; </end encoding FStar.UInt16.op_Subtraction_Question_Hat>


; <Start encoding FStar.UInt16.op_Subtraction_Percent_Hat>

(declare-fun FStar.UInt16.op_Subtraction_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt16.op_Subtraction_Percent_Hat@tok () Term)


; </end encoding FStar.UInt16.op_Subtraction_Percent_Hat>


; <Start encoding FStar.UInt16.op_Star_Hat>

(declare-fun FStar.UInt16.op_Star_Hat (Term Term) Term)


(declare-fun FStar.UInt16.op_Star_Hat@tok () Term)


; </end encoding FStar.UInt16.op_Star_Hat>


; <Start encoding FStar.UInt16.op_Star_Question_Hat>

(declare-fun FStar.UInt16.op_Star_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt16.op_Star_Question_Hat@tok () Term)


; </end encoding FStar.UInt16.op_Star_Question_Hat>


; <Start encoding FStar.UInt16.op_Star_Percent_Hat>

(declare-fun FStar.UInt16.op_Star_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt16.op_Star_Percent_Hat@tok () Term)


; </end encoding FStar.UInt16.op_Star_Percent_Hat>


; <Start encoding FStar.UInt16.op_Slash_Hat>


(declare-fun FStar.UInt16.op_Slash_Hat (Term Term) Term)



(declare-fun FStar.UInt16.op_Slash_Hat@tok () Term)



; </end encoding FStar.UInt16.op_Slash_Hat>


; <Start encoding FStar.UInt16.op_Percent_Hat>


(declare-fun FStar.UInt16.op_Percent_Hat (Term Term) Term)



(declare-fun FStar.UInt16.op_Percent_Hat@tok () Term)



; </end encoding FStar.UInt16.op_Percent_Hat>


; <Start encoding FStar.UInt16.op_Hat_Hat>

(declare-fun FStar.UInt16.op_Hat_Hat (Term Term) Term)


(declare-fun FStar.UInt16.op_Hat_Hat@tok () Term)


; </end encoding FStar.UInt16.op_Hat_Hat>


; <Start encoding FStar.UInt16.op_Amp_Hat>

(declare-fun FStar.UInt16.op_Amp_Hat (Term Term) Term)


(declare-fun FStar.UInt16.op_Amp_Hat@tok () Term)


; </end encoding FStar.UInt16.op_Amp_Hat>


; <Start encoding FStar.UInt16.op_Bar_Hat>

(declare-fun FStar.UInt16.op_Bar_Hat (Term Term) Term)


(declare-fun FStar.UInt16.op_Bar_Hat@tok () Term)


; </end encoding FStar.UInt16.op_Bar_Hat>


; <Start encoding FStar.UInt16.op_Less_Less_Hat>

(declare-fun FStar.UInt16.op_Less_Less_Hat (Term Term) Term)


(declare-fun FStar.UInt16.op_Less_Less_Hat@tok () Term)


; </end encoding FStar.UInt16.op_Less_Less_Hat>


; <Start encoding FStar.UInt16.op_Greater_Greater_Hat>

(declare-fun FStar.UInt16.op_Greater_Greater_Hat (Term Term) Term)


(declare-fun FStar.UInt16.op_Greater_Greater_Hat@tok () Term)


; </end encoding FStar.UInt16.op_Greater_Greater_Hat>


; <Start encoding FStar.UInt16.op_Equals_Hat>

(declare-fun FStar.UInt16.op_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt16.op_Equals_Hat@tok () Term)

; </end encoding FStar.UInt16.op_Equals_Hat>


; <Start encoding FStar.UInt16.op_Greater_Hat>

(declare-fun FStar.UInt16.op_Greater_Hat (Term Term) Term)

(declare-fun FStar.UInt16.op_Greater_Hat@tok () Term)

; </end encoding FStar.UInt16.op_Greater_Hat>


; <Start encoding FStar.UInt16.op_Greater_Equals_Hat>

(declare-fun FStar.UInt16.op_Greater_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt16.op_Greater_Equals_Hat@tok () Term)

; </end encoding FStar.UInt16.op_Greater_Equals_Hat>


; <Start encoding FStar.UInt16.op_Less_Hat>

(declare-fun FStar.UInt16.op_Less_Hat (Term Term) Term)

(declare-fun FStar.UInt16.op_Less_Hat@tok () Term)

; </end encoding FStar.UInt16.op_Less_Hat>


; <Start encoding FStar.UInt16.op_Less_Equals_Hat>

(declare-fun FStar.UInt16.op_Less_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt16.op_Less_Equals_Hat@tok () Term)

; </end encoding FStar.UInt16.op_Less_Equals_Hat>


; <Start encoding FStar.UInt16.to_string>

(declare-fun FStar.UInt16.to_string (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.UInt16.t -> Prims.string
(declare-fun Tm_arrow_1567a0c3fa9c6a7b76db1de05c62a83e () Term)
(declare-fun FStar.UInt16.to_string@tok () Term)

; </end encoding FStar.UInt16.to_string>


; <Start encoding FStar.UInt16.to_string_hex>

(declare-fun FStar.UInt16.to_string_hex (Term) Term)

(declare-fun FStar.UInt16.to_string_hex@tok () Term)

; </end encoding FStar.UInt16.to_string_hex>


; <Start encoding FStar.UInt16.to_string_hex_pad>

(declare-fun FStar.UInt16.to_string_hex_pad (Term) Term)

(declare-fun FStar.UInt16.to_string_hex_pad@tok () Term)

; </end encoding FStar.UInt16.to_string_hex_pad>


; <Start encoding FStar.UInt16.of_string>

(declare-fun FStar.UInt16.of_string (Term) Term)
;;;;;;;;;;;;;;;;_: Prims.string -> FStar.UInt16.t
(declare-fun Tm_arrow_68a59188b2c9544b263522e5c6da7655 () Term)
(declare-fun FStar.UInt16.of_string@tok () Term)

; </end encoding FStar.UInt16.of_string>


; <Skipped />


; <Start encoding FStar.UInt16.__uint_to_t>

(declare-fun FStar.UInt16.__uint_to_t (Term) Term)
;;;;;;;;;;;;;;;;x: Prims.int -> FStar.UInt16.t
(declare-fun Tm_arrow_08c7c5e1e582fde525f5d9f6401fce2b () Term)
(declare-fun FStar.UInt16.__uint_to_t@tok () Term)

; </end encoding FStar.UInt16.__uint_to_t>


; <Skipped />


; End Externals for interface FStar.UInt16


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End interface FStar.UInt16 (390 decls; total size 18881)

;;; Start interface FStar.UInt8

; Externals for interface FStar.UInt8


; <Start encoding FStar.UInt8.n>

(declare-fun FStar.UInt8.n (Dummy_sort) Term)

; </end encoding FStar.UInt8.n>


; <Skipped />


; <Start encoding FStar.UInt8.t>

(declare-fun FStar.UInt8.t (Dummy_sort) Term)

; </end encoding FStar.UInt8.t>


; <Start encoding FStar.UInt8.v>

(declare-fun FStar.UInt8.v (Term) Term)
;;;;;;;;;;;;;;;;x: FStar.UInt8.t -> FStar.UInt.uint_t 8
(declare-fun Tm_arrow_3777b5a630a36e62279f05e8abae7a72 () Term)
(declare-fun FStar.UInt8.v@tok () Term)

; </end encoding FStar.UInt8.v>


; <Start encoding FStar.UInt8.uint_to_t>

(declare-fun FStar.UInt8.uint_to_t (Term) Term)
(declare-fun Tm_refine_25c72d704900d626b30894312c325451 (Term) Term)
;;;;;;;;;;;;;;;;x: FStar.UInt.uint_t 8 -> Prims.Pure FStar.UInt8.t
(declare-fun Tm_arrow_99681d89836a4c650badaf3b898e0fd2 () Term)
(declare-fun FStar.UInt8.uint_to_t@tok () Term)


; </end encoding FStar.UInt8.uint_to_t>


; <Start encoding FStar.UInt8.uv_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt8.uv_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt8.uv_inv@tok () Term)

; </end encoding FStar.UInt8.uv_inv>


; <Start encoding FStar.UInt8.vu_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt8.vu_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt8.vu_inv@tok () Term)

; </end encoding FStar.UInt8.vu_inv>


; <Start encoding FStar.UInt8.v_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt8.v_inj (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt8.v_inj@tok () Term)

; </end encoding FStar.UInt8.v_inj>


; <Start encoding FStar.UInt8.zero>

(declare-fun FStar.UInt8.zero (Dummy_sort) Term)
(declare-fun Tm_refine_70356e30ad97b892992d5e77127e234b () Term)


; </end encoding FStar.UInt8.zero>


; <Start encoding FStar.UInt8.one>

(declare-fun FStar.UInt8.one (Dummy_sort) Term)
(declare-fun Tm_refine_9a778967dadeb1d9cdc158a156c04472 () Term)


; </end encoding FStar.UInt8.one>


; <Start encoding FStar.UInt8.add>

(declare-fun FStar.UInt8.add (Term Term) Term)
(declare-fun Tm_refine_e7a8c22ddf5fa06051ce01d4308e93c9 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt8.t -> b: FStar.UInt8.t -> Prims.Pure FStar.UInt8.t
(declare-fun Tm_arrow_93f019685d372e95eac5ee2026269943 () Term)
(declare-fun FStar.UInt8.add@tok () Term)


; </end encoding FStar.UInt8.add>


; <Start encoding FStar.UInt8.add_underspec>

(declare-fun FStar.UInt8.add_underspec (Term Term) Term)
(declare-fun Tm_refine_e2fc73b749d5084f2161a1b2256e684a (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt8.t -> b: FStar.UInt8.t -> Prims.Pure FStar.UInt8.t
(declare-fun Tm_arrow_c4436082bc35b52549c292a4092c74f2 () Term)
(declare-fun FStar.UInt8.add_underspec@tok () Term)


; </end encoding FStar.UInt8.add_underspec>


; <Start encoding FStar.UInt8.add_mod>

(declare-fun FStar.UInt8.add_mod (Term Term) Term)
(declare-fun Tm_refine_c5c06f774ce917320ace84c78a678f3a (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt8.t -> b: FStar.UInt8.t -> Prims.Pure FStar.UInt8.t
(declare-fun Tm_arrow_52ecb5e08ede937a376b797f76452f11 () Term)
(declare-fun FStar.UInt8.add_mod@tok () Term)


; </end encoding FStar.UInt8.add_mod>


; <Start encoding FStar.UInt8.sub>

(declare-fun FStar.UInt8.sub (Term Term) Term)
(declare-fun Tm_refine_b9fa04b492b01fd435452ff429d13919 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt8.t -> b: FStar.UInt8.t -> Prims.Pure FStar.UInt8.t
(declare-fun Tm_arrow_ec1e3750fe88626fd39551f91ea86fc8 () Term)
(declare-fun FStar.UInt8.sub@tok () Term)


; </end encoding FStar.UInt8.sub>


; <Start encoding FStar.UInt8.sub_underspec>

(declare-fun FStar.UInt8.sub_underspec (Term Term) Term)
(declare-fun Tm_refine_2f0c7364767f32abaf6bd4293573996b (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt8.t -> b: FStar.UInt8.t -> Prims.Pure FStar.UInt8.t
(declare-fun Tm_arrow_9b74ded99c9ac1ce430c56353e375533 () Term)
(declare-fun FStar.UInt8.sub_underspec@tok () Term)


; </end encoding FStar.UInt8.sub_underspec>


; <Start encoding FStar.UInt8.sub_mod>

(declare-fun FStar.UInt8.sub_mod (Term Term) Term)
(declare-fun Tm_refine_31110a8e88288515f5ff8c631a6fc5fd (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt8.t -> b: FStar.UInt8.t -> Prims.Pure FStar.UInt8.t
(declare-fun Tm_arrow_f944420b8232be8a08ac1eac1a8cfc60 () Term)
(declare-fun FStar.UInt8.sub_mod@tok () Term)


; </end encoding FStar.UInt8.sub_mod>


; <Start encoding FStar.UInt8.mul>

(declare-fun FStar.UInt8.mul (Term Term) Term)
(declare-fun Tm_refine_d72a979d91a11894cbd64b344a4b0237 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt8.t -> b: FStar.UInt8.t -> Prims.Pure FStar.UInt8.t
(declare-fun Tm_arrow_f916cf085880111e18cd4d6a364c6342 () Term)
(declare-fun FStar.UInt8.mul@tok () Term)


; </end encoding FStar.UInt8.mul>


; <Start encoding FStar.UInt8.mul_underspec>

(declare-fun FStar.UInt8.mul_underspec (Term Term) Term)
(declare-fun Tm_refine_12692332647397b458ce816ee08aa096 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt8.t -> b: FStar.UInt8.t -> Prims.Pure FStar.UInt8.t
(declare-fun Tm_arrow_44a424ccb654a64902b3f4c4584dfee1 () Term)
(declare-fun FStar.UInt8.mul_underspec@tok () Term)


; </end encoding FStar.UInt8.mul_underspec>


; <Start encoding FStar.UInt8.mul_mod>

(declare-fun FStar.UInt8.mul_mod (Term Term) Term)
(declare-fun Tm_refine_4ce5cfa0cf1c69159e9310e6885c3e22 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt8.t -> b: FStar.UInt8.t -> Prims.Pure FStar.UInt8.t
(declare-fun Tm_arrow_082e5a7318c49f7336161f30b53f326f () Term)
(declare-fun FStar.UInt8.mul_mod@tok () Term)


; </end encoding FStar.UInt8.mul_mod>


; <Start encoding FStar.UInt8.div>

(declare-fun Tm_refine_a8cb57fcf32c2764d2e39fc97ecb3aa0 () Term)
(declare-fun FStar.UInt8.div (Term Term) Term)

(declare-fun Tm_refine_488bac52b9d15f98f9de642f30db345a (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt8.t -> b: FStar.UInt8.t{FStar.UInt8.v b <> 0} -> Prims.Pure FStar.UInt8.t
(declare-fun Tm_arrow_032d4f95524b20f7a0ffe6be0a29e0dd () Term)
(declare-fun FStar.UInt8.div@tok () Term)


; </end encoding FStar.UInt8.div>


; <Start encoding FStar.UInt8.rem>


(declare-fun FStar.UInt8.rem (Term Term) Term)

(declare-fun Tm_refine_41d38db91700fb5bf8d345e71a7ea813 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt8.t -> b: FStar.UInt8.t{FStar.UInt8.v b <> 0} -> Prims.Pure FStar.UInt8.t
(declare-fun Tm_arrow_cce9ccb13b0c72c92896f9584ae44f9a () Term)
(declare-fun FStar.UInt8.rem@tok () Term)


; </end encoding FStar.UInt8.rem>


; <Start encoding FStar.UInt8.logand>

(declare-fun FStar.UInt8.logand (Term Term) Term)
(declare-fun Tm_refine_71d1a346f76194fb038bba96302ce90d (Term Term) Term)
;;;;;;;;;;;;;;;;x: FStar.UInt8.t -> y: FStar.UInt8.t -> Prims.Pure FStar.UInt8.t
(declare-fun Tm_arrow_606a7fadbc7c16f0b0151a905dbf43f5 () Term)
(declare-fun FStar.UInt8.logand@tok () Term)


; </end encoding FStar.UInt8.logand>


; <Start encoding FStar.UInt8.logxor>

(declare-fun FStar.UInt8.logxor (Term Term) Term)
(declare-fun Tm_refine_97e4a63388ae45ee4261a689ecdcc635 (Term Term) Term)
;;;;;;;;;;;;;;;;x: FStar.UInt8.t -> y: FStar.UInt8.t -> Prims.Pure FStar.UInt8.t
(declare-fun Tm_arrow_64e5ecb00734a6581a045079ffb5fe59 () Term)
(declare-fun FStar.UInt8.logxor@tok () Term)


; </end encoding FStar.UInt8.logxor>


; <Start encoding FStar.UInt8.logor>

(declare-fun FStar.UInt8.logor (Term Term) Term)
(declare-fun Tm_refine_a7fcc8489f92354d1f8a101b7f900b3b (Term Term) Term)
;;;;;;;;;;;;;;;;x: FStar.UInt8.t -> y: FStar.UInt8.t -> Prims.Pure FStar.UInt8.t
(declare-fun Tm_arrow_32400c8ec986ceb55a1554f2089e0efa () Term)
(declare-fun FStar.UInt8.logor@tok () Term)


; </end encoding FStar.UInt8.logor>


; <Start encoding FStar.UInt8.lognot>

(declare-fun FStar.UInt8.lognot (Term) Term)
(declare-fun Tm_refine_455031e9fe191e56270c683d0e98b61b (Term) Term)
;;;;;;;;;;;;;;;;x: FStar.UInt8.t -> Prims.Pure FStar.UInt8.t
(declare-fun Tm_arrow_1a84223456a82ceb3bff40c0b2935125 () Term)
(declare-fun FStar.UInt8.lognot@tok () Term)


; </end encoding FStar.UInt8.lognot>


; <Start encoding FStar.UInt8.shift_right>

(declare-fun FStar.UInt8.shift_right (Term Term) Term)
(declare-fun Tm_refine_098e5306776c74ab1df7fd9dd6d3b590 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt8.t -> s: FStar.UInt32.t -> Prims.Pure FStar.UInt8.t
(declare-fun Tm_arrow_b066c40415d68ecc38942bb71d3e3f6f () Term)
(declare-fun FStar.UInt8.shift_right@tok () Term)


; </end encoding FStar.UInt8.shift_right>


; <Start encoding FStar.UInt8.shift_left>

(declare-fun FStar.UInt8.shift_left (Term Term) Term)
(declare-fun Tm_refine_a97317ecf8cf07e3c11fb9b0d3ed777c (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt8.t -> s: FStar.UInt32.t -> Prims.Pure FStar.UInt8.t
(declare-fun Tm_arrow_07d4bb9ab4248e20b62c52c13b75d97e () Term)
(declare-fun FStar.UInt8.shift_left@tok () Term)


; </end encoding FStar.UInt8.shift_left>


; <Start encoding FStar.UInt8.eq>

(declare-fun FStar.UInt8.eq (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt8.t -> b: FStar.UInt8.t -> Prims.bool
(declare-fun Tm_arrow_044ce6ce0f384eef0fc1f6f3f8f2f074 () Term)
(declare-fun FStar.UInt8.eq@tok () Term)

; </end encoding FStar.UInt8.eq>


; <Start encoding FStar.UInt8.gt>

(declare-fun FStar.UInt8.gt (Term Term) Term)

(declare-fun FStar.UInt8.gt@tok () Term)

; </end encoding FStar.UInt8.gt>


; <Start encoding FStar.UInt8.gte>

(declare-fun FStar.UInt8.gte (Term Term) Term)

(declare-fun FStar.UInt8.gte@tok () Term)

; </end encoding FStar.UInt8.gte>


; <Start encoding FStar.UInt8.lt>

(declare-fun FStar.UInt8.lt (Term Term) Term)

(declare-fun FStar.UInt8.lt@tok () Term)

; </end encoding FStar.UInt8.lt>


; <Start encoding FStar.UInt8.lte>

(declare-fun FStar.UInt8.lte (Term Term) Term)

(declare-fun FStar.UInt8.lte@tok () Term)

; </end encoding FStar.UInt8.lte>


; <Start encoding FStar.UInt8.minus>

(declare-fun FStar.UInt8.minus (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt8.t -> FStar.UInt8.t
(declare-fun Tm_arrow_53a47de46a631aa3eac76ad156b433ff () Term)
(declare-fun FStar.UInt8.minus@tok () Term)

; </end encoding FStar.UInt8.minus>


; <Start encoding FStar.UInt8.n_minus_one>

(declare-fun FStar.UInt8.n_minus_one (Dummy_sort) Term)

; </end encoding FStar.UInt8.n_minus_one>


; <Skipped />


; <Start encoding FStar.UInt8.eq_mask>

(declare-fun FStar.UInt8.eq_mask (Term Term) Term)
(declare-fun Tm_refine_4b365856d6f9222ae4baaff2421b1f3d (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt8.t -> b: FStar.UInt8.t -> Prims.Pure FStar.UInt8.t
(declare-fun Tm_arrow_a445c7cdf140b45a21388352df89d169 () Term)
(declare-fun FStar.UInt8.eq_mask@tok () Term)


; </end encoding FStar.UInt8.eq_mask>


; <Start encoding FStar.UInt8.lemma_sub_msbs>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt8.lemma_sub_msbs (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt8.lemma_sub_msbs@tok () Term)

; </end encoding FStar.UInt8.lemma_sub_msbs>


; <Start encoding FStar.UInt8.gte_mask>

(declare-fun FStar.UInt8.gte_mask (Term Term) Term)
(declare-fun Tm_refine_d0b1e2944ee74da332d1b0864caf4a29 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt8.t -> b: FStar.UInt8.t -> Prims.Pure FStar.UInt8.t
(declare-fun Tm_arrow_fdec4315b860ac38893cb3277ba98c8c () Term)
(declare-fun FStar.UInt8.gte_mask@tok () Term)


; </end encoding FStar.UInt8.gte_mask>


; <Skipped />


; <Start encoding FStar.UInt8.op_Plus_Hat>

(declare-fun FStar.UInt8.op_Plus_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Plus_Hat@tok () Term)


; </end encoding FStar.UInt8.op_Plus_Hat>


; <Start encoding FStar.UInt8.op_Plus_Question_Hat>

(declare-fun FStar.UInt8.op_Plus_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Plus_Question_Hat@tok () Term)


; </end encoding FStar.UInt8.op_Plus_Question_Hat>


; <Start encoding FStar.UInt8.op_Plus_Percent_Hat>

(declare-fun FStar.UInt8.op_Plus_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Plus_Percent_Hat@tok () Term)


; </end encoding FStar.UInt8.op_Plus_Percent_Hat>


; <Start encoding FStar.UInt8.op_Subtraction_Hat>

(declare-fun FStar.UInt8.op_Subtraction_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Subtraction_Hat@tok () Term)


; </end encoding FStar.UInt8.op_Subtraction_Hat>


; <Start encoding FStar.UInt8.op_Subtraction_Question_Hat>

(declare-fun FStar.UInt8.op_Subtraction_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Subtraction_Question_Hat@tok () Term)


; </end encoding FStar.UInt8.op_Subtraction_Question_Hat>


; <Start encoding FStar.UInt8.op_Subtraction_Percent_Hat>

(declare-fun FStar.UInt8.op_Subtraction_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Subtraction_Percent_Hat@tok () Term)


; </end encoding FStar.UInt8.op_Subtraction_Percent_Hat>


; <Start encoding FStar.UInt8.op_Star_Hat>

(declare-fun FStar.UInt8.op_Star_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Star_Hat@tok () Term)


; </end encoding FStar.UInt8.op_Star_Hat>


; <Start encoding FStar.UInt8.op_Star_Question_Hat>

(declare-fun FStar.UInt8.op_Star_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Star_Question_Hat@tok () Term)


; </end encoding FStar.UInt8.op_Star_Question_Hat>


; <Start encoding FStar.UInt8.op_Star_Percent_Hat>

(declare-fun FStar.UInt8.op_Star_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Star_Percent_Hat@tok () Term)


; </end encoding FStar.UInt8.op_Star_Percent_Hat>


; <Start encoding FStar.UInt8.op_Slash_Hat>


(declare-fun FStar.UInt8.op_Slash_Hat (Term Term) Term)



(declare-fun FStar.UInt8.op_Slash_Hat@tok () Term)



; </end encoding FStar.UInt8.op_Slash_Hat>


; <Start encoding FStar.UInt8.op_Percent_Hat>


(declare-fun FStar.UInt8.op_Percent_Hat (Term Term) Term)



(declare-fun FStar.UInt8.op_Percent_Hat@tok () Term)



; </end encoding FStar.UInt8.op_Percent_Hat>


; <Start encoding FStar.UInt8.op_Hat_Hat>

(declare-fun FStar.UInt8.op_Hat_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Hat_Hat@tok () Term)


; </end encoding FStar.UInt8.op_Hat_Hat>


; <Start encoding FStar.UInt8.op_Amp_Hat>

(declare-fun FStar.UInt8.op_Amp_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Amp_Hat@tok () Term)


; </end encoding FStar.UInt8.op_Amp_Hat>


; <Start encoding FStar.UInt8.op_Bar_Hat>

(declare-fun FStar.UInt8.op_Bar_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Bar_Hat@tok () Term)


; </end encoding FStar.UInt8.op_Bar_Hat>


; <Start encoding FStar.UInt8.op_Less_Less_Hat>

(declare-fun FStar.UInt8.op_Less_Less_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Less_Less_Hat@tok () Term)


; </end encoding FStar.UInt8.op_Less_Less_Hat>


; <Start encoding FStar.UInt8.op_Greater_Greater_Hat>

(declare-fun FStar.UInt8.op_Greater_Greater_Hat (Term Term) Term)


(declare-fun FStar.UInt8.op_Greater_Greater_Hat@tok () Term)


; </end encoding FStar.UInt8.op_Greater_Greater_Hat>


; <Start encoding FStar.UInt8.op_Equals_Hat>

(declare-fun FStar.UInt8.op_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt8.op_Equals_Hat@tok () Term)

; </end encoding FStar.UInt8.op_Equals_Hat>


; <Start encoding FStar.UInt8.op_Greater_Hat>

(declare-fun FStar.UInt8.op_Greater_Hat (Term Term) Term)

(declare-fun FStar.UInt8.op_Greater_Hat@tok () Term)

; </end encoding FStar.UInt8.op_Greater_Hat>


; <Start encoding FStar.UInt8.op_Greater_Equals_Hat>

(declare-fun FStar.UInt8.op_Greater_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt8.op_Greater_Equals_Hat@tok () Term)

; </end encoding FStar.UInt8.op_Greater_Equals_Hat>


; <Start encoding FStar.UInt8.op_Less_Hat>

(declare-fun FStar.UInt8.op_Less_Hat (Term Term) Term)

(declare-fun FStar.UInt8.op_Less_Hat@tok () Term)

; </end encoding FStar.UInt8.op_Less_Hat>


; <Start encoding FStar.UInt8.op_Less_Equals_Hat>

(declare-fun FStar.UInt8.op_Less_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt8.op_Less_Equals_Hat@tok () Term)

; </end encoding FStar.UInt8.op_Less_Equals_Hat>


; <Start encoding FStar.UInt8.to_string>

(declare-fun FStar.UInt8.to_string (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.UInt8.t -> Prims.string
(declare-fun Tm_arrow_630ce6920914ed05e3724fa72d06132c () Term)
(declare-fun FStar.UInt8.to_string@tok () Term)

; </end encoding FStar.UInt8.to_string>


; <Start encoding FStar.UInt8.to_string_hex>

(declare-fun FStar.UInt8.to_string_hex (Term) Term)

(declare-fun FStar.UInt8.to_string_hex@tok () Term)

; </end encoding FStar.UInt8.to_string_hex>


; <Start encoding FStar.UInt8.to_string_hex_pad>

(declare-fun FStar.UInt8.to_string_hex_pad (Term) Term)

(declare-fun FStar.UInt8.to_string_hex_pad@tok () Term)

; </end encoding FStar.UInt8.to_string_hex_pad>


; <Start encoding FStar.UInt8.of_string>

(declare-fun FStar.UInt8.of_string (Term) Term)
;;;;;;;;;;;;;;;;_: Prims.string -> FStar.UInt8.t
(declare-fun Tm_arrow_2b6f4c2bff8eb5d0563e8b6985a71043 () Term)
(declare-fun FStar.UInt8.of_string@tok () Term)

; </end encoding FStar.UInt8.of_string>


; <Skipped />


; <Start encoding FStar.UInt8.__uint_to_t>

(declare-fun FStar.UInt8.__uint_to_t (Term) Term)
;;;;;;;;;;;;;;;;x: Prims.int -> FStar.UInt8.t
(declare-fun Tm_arrow_52383a4d974551ee41b2c1746d04b8c5 () Term)
(declare-fun FStar.UInt8.__uint_to_t@tok () Term)

; </end encoding FStar.UInt8.__uint_to_t>


; <Skipped />


; <Start encoding FStar.UInt8.byte>

(declare-fun FStar.UInt8.byte (Dummy_sort) Term)

; </end encoding FStar.UInt8.byte>


; End Externals for interface FStar.UInt8


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End interface FStar.UInt8 (393 decls; total size 18693)

;;; Start module FStar.Int.Cast

; Externals for module FStar.Int.Cast


; <Start encoding FStar.Int.Cast.op_At_Percent>


(declare-fun FStar.Int.Cast.op_At_Percent (Term Term) Term)


(declare-fun FStar.Int.Cast.op_At_Percent@tok () Term)


; </end encoding FStar.Int.Cast.op_At_Percent>


; <Skipped FStar.Int.Cast.uint8_to_uint64/>


; <Start encoding FStar.Int.Cast.uint8_to_uint64>

(declare-fun FStar.Int.Cast.uint8_to_uint64 (Term) Term)
(declare-fun Tm_refine_6188ec86658c123c2c3404e80bc93cd0 () Term)
(declare-fun Tm_refine_a227ad0d71254edda31227d9c263f41f (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt8.t -> b: FStar.UInt64.t{FStar.UInt64.v b = FStar.UInt8.v a}
(declare-fun Tm_arrow_b30868c48f909fad59360eb5436def27 () Term)
(declare-fun FStar.Int.Cast.uint8_to_uint64@tok () Term)



; </end encoding FStar.Int.Cast.uint8_to_uint64>


; <Skipped FStar.Int.Cast.uint8_to_uint32/>


; <Start encoding FStar.Int.Cast.uint8_to_uint32>

(declare-fun FStar.Int.Cast.uint8_to_uint32 (Term) Term)
(declare-fun Tm_refine_19e88ca5b68046e66eaf6d879a230cb2 () Term)
(declare-fun Tm_refine_f9fef8e8f7fb988701b6ae18e80c3650 (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt8.t -> b: FStar.UInt32.t{FStar.UInt32.v b = FStar.UInt8.v a}
(declare-fun Tm_arrow_3e792841744f96fe34ece25ea0958b5a () Term)
(declare-fun FStar.Int.Cast.uint8_to_uint32@tok () Term)



; </end encoding FStar.Int.Cast.uint8_to_uint32>


; <Skipped FStar.Int.Cast.uint8_to_uint16/>


; <Start encoding FStar.Int.Cast.uint8_to_uint16>

(declare-fun FStar.Int.Cast.uint8_to_uint16 (Term) Term)
(declare-fun Tm_refine_4654dd4b2d6f243e5ec6eaf9826069c9 () Term)
(declare-fun Tm_refine_541d06ed6731928026bc39b1981eb00a (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt8.t -> b: FStar.UInt16.t{FStar.UInt16.v b = FStar.UInt8.v a}
(declare-fun Tm_arrow_33d01fdbf74fe116db26d351fc7017a6 () Term)
(declare-fun FStar.Int.Cast.uint8_to_uint16@tok () Term)



; </end encoding FStar.Int.Cast.uint8_to_uint16>


; <Skipped FStar.Int.Cast.uint16_to_uint64/>


; <Start encoding FStar.Int.Cast.uint16_to_uint64>

(declare-fun FStar.Int.Cast.uint16_to_uint64 (Term) Term)
(declare-fun Tm_refine_4540dfbe159ce3f577a577d113336bcc () Term)
(declare-fun Tm_refine_9cf469fa8489cbf1b2ed08a71b5743d4 (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt16.t -> b: FStar.UInt64.t{FStar.UInt64.v b = FStar.UInt16.v a}
(declare-fun Tm_arrow_0cb6afa4d92844783b58f16fffb2aadd () Term)
(declare-fun FStar.Int.Cast.uint16_to_uint64@tok () Term)



; </end encoding FStar.Int.Cast.uint16_to_uint64>


; <Skipped FStar.Int.Cast.uint16_to_uint32/>


; <Start encoding FStar.Int.Cast.uint16_to_uint32>

(declare-fun FStar.Int.Cast.uint16_to_uint32 (Term) Term)
(declare-fun Tm_refine_f91ac8d5efb06a83fcdb210426823423 () Term)
(declare-fun Tm_refine_88c857def71d9b11ced5e5e041edc24e (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt16.t -> b: FStar.UInt32.t{FStar.UInt32.v b = FStar.UInt16.v a}
(declare-fun Tm_arrow_effa2521fbf4da1bc3af389a0b715be8 () Term)
(declare-fun FStar.Int.Cast.uint16_to_uint32@tok () Term)



; </end encoding FStar.Int.Cast.uint16_to_uint32>


; <Skipped FStar.Int.Cast.uint16_to_uint8/>


; <Start encoding FStar.Int.Cast.uint16_to_uint8>

(declare-fun FStar.Int.Cast.uint16_to_uint8 (Term) Term)
(declare-fun Tm_refine_af2ccefb76d12e4faeb5a044fc7b97fa (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt16.t -> b: FStar.UInt8.t{FStar.UInt8.v b = FStar.UInt16.v a % Prims.pow2 8}
(declare-fun Tm_arrow_0973f66356bdca368f98d6064110c664 () Term)
(declare-fun FStar.Int.Cast.uint16_to_uint8@tok () Term)


; </end encoding FStar.Int.Cast.uint16_to_uint8>


; <Skipped FStar.Int.Cast.uint32_to_uint64/>


; <Start encoding FStar.Int.Cast.uint32_to_uint64>

(declare-fun FStar.Int.Cast.uint32_to_uint64 (Term) Term)
(declare-fun Tm_refine_a16f87d3d33f1a5fd74bee8c48ea5bbe () Term)
(declare-fun Tm_refine_d15a9766d4c1ec94d1574f05b54a618b (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt32.t -> b: FStar.UInt64.t{FStar.UInt64.v b = FStar.UInt32.v a}
(declare-fun Tm_arrow_e9cf004be5f180c5a2491182d3c322b8 () Term)
(declare-fun FStar.Int.Cast.uint32_to_uint64@tok () Term)



; </end encoding FStar.Int.Cast.uint32_to_uint64>


; <Skipped FStar.Int.Cast.uint32_to_uint16/>


; <Start encoding FStar.Int.Cast.uint32_to_uint16>

(declare-fun FStar.Int.Cast.uint32_to_uint16 (Term) Term)
(declare-fun Tm_refine_c2c08e6a1513c9b4fdaa7cb1c01945c6 (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt32.t -> b: FStar.UInt16.t{FStar.UInt16.v b = FStar.UInt32.v a % Prims.pow2 16}
(declare-fun Tm_arrow_44b897918d7bbfb0379cac98e600cdb5 () Term)
(declare-fun FStar.Int.Cast.uint32_to_uint16@tok () Term)


; </end encoding FStar.Int.Cast.uint32_to_uint16>


; <Skipped FStar.Int.Cast.uint32_to_uint8/>


; <Start encoding FStar.Int.Cast.uint32_to_uint8>

(declare-fun FStar.Int.Cast.uint32_to_uint8 (Term) Term)
(declare-fun Tm_refine_d9192f4297d24144581d486ededefa39 (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt32.t -> b: FStar.UInt8.t{FStar.UInt8.v b = FStar.UInt32.v a % Prims.pow2 8}
(declare-fun Tm_arrow_73ce2f9c6c951295db44e8ce00c6ac3a () Term)
(declare-fun FStar.Int.Cast.uint32_to_uint8@tok () Term)


; </end encoding FStar.Int.Cast.uint32_to_uint8>


; <Skipped FStar.Int.Cast.uint64_to_uint32/>


; <Start encoding FStar.Int.Cast.uint64_to_uint32>

(declare-fun FStar.Int.Cast.uint64_to_uint32 (Term) Term)
(declare-fun Tm_refine_a3e91433acc705e2c7f5ab6f610b2493 (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt64.t -> b: FStar.UInt32.t{FStar.UInt32.v b = FStar.UInt64.v a % Prims.pow2 32}
(declare-fun Tm_arrow_8e494e3841dc742bdc3169e6e7f0e520 () Term)
(declare-fun FStar.Int.Cast.uint64_to_uint32@tok () Term)


; </end encoding FStar.Int.Cast.uint64_to_uint32>


; <Skipped FStar.Int.Cast.uint64_to_uint16/>


; <Start encoding FStar.Int.Cast.uint64_to_uint16>

(declare-fun FStar.Int.Cast.uint64_to_uint16 (Term) Term)
(declare-fun Tm_refine_b1d824cf2088b268a2840e4d24632eda (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt64.t -> b: FStar.UInt16.t{FStar.UInt16.v b = FStar.UInt64.v a % Prims.pow2 16}
(declare-fun Tm_arrow_352d26b5f6ecf750411cfeb6933dfb62 () Term)
(declare-fun FStar.Int.Cast.uint64_to_uint16@tok () Term)


; </end encoding FStar.Int.Cast.uint64_to_uint16>


; <Skipped FStar.Int.Cast.uint64_to_uint8/>


; <Start encoding FStar.Int.Cast.uint64_to_uint8>

(declare-fun FStar.Int.Cast.uint64_to_uint8 (Term) Term)
(declare-fun Tm_refine_0d41224c682684630fd89def512a35ee (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt64.t -> b: FStar.UInt8.t{FStar.UInt8.v b = FStar.UInt64.v a % Prims.pow2 8}
(declare-fun Tm_arrow_52e28d461537e7b65f5e8cc14082e14e () Term)
(declare-fun FStar.Int.Cast.uint64_to_uint8@tok () Term)


; </end encoding FStar.Int.Cast.uint64_to_uint8>


; <Skipped FStar.Int.Cast.int8_to_int64/>


; <Start encoding FStar.Int.Cast.int8_to_int64>

(declare-fun FStar.Int.Cast.int8_to_int64 (Term) Term)
(declare-fun Tm_refine_a399bc5b4c3acf4a57becd3ec8db4b3b () Term)
(declare-fun Tm_refine_e314adf6675e8533aa83c6ce5c71c9fa (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int8.t -> b: FStar.Int64.t{FStar.Int64.v b = FStar.Int8.v a}
(declare-fun Tm_arrow_112f07b72afdf921786d46937965a1b3 () Term)
(declare-fun FStar.Int.Cast.int8_to_int64@tok () Term)



; </end encoding FStar.Int.Cast.int8_to_int64>


; <Skipped FStar.Int.Cast.int8_to_int32/>


; <Start encoding FStar.Int.Cast.int8_to_int32>

(declare-fun FStar.Int.Cast.int8_to_int32 (Term) Term)
(declare-fun Tm_refine_20555d4690db1ab7ba8f509bea00b24d () Term)
(declare-fun Tm_refine_4b22c947a87151885c92e2a7e2bd109a (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int8.t -> b: FStar.Int32.t{FStar.Int32.v b = FStar.Int8.v a}
(declare-fun Tm_arrow_cc1dacf0370411eadb726abae2d44f63 () Term)
(declare-fun FStar.Int.Cast.int8_to_int32@tok () Term)



; </end encoding FStar.Int.Cast.int8_to_int32>


; <Skipped FStar.Int.Cast.int8_to_int16/>


; <Start encoding FStar.Int.Cast.int8_to_int16>

(declare-fun FStar.Int.Cast.int8_to_int16 (Term) Term)
(declare-fun Tm_refine_b44e12994d2f4788a60cf11dcbfb8611 () Term)
(declare-fun Tm_refine_3ab503ce232a68746613ae032acba034 (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int8.t -> b: FStar.Int16.t{FStar.Int16.v b = FStar.Int8.v a}
(declare-fun Tm_arrow_b80c1c6617bae3238804d4038267872c () Term)
(declare-fun FStar.Int.Cast.int8_to_int16@tok () Term)



; </end encoding FStar.Int.Cast.int8_to_int16>


; <Skipped FStar.Int.Cast.int16_to_int64/>


; <Start encoding FStar.Int.Cast.int16_to_int64>

(declare-fun FStar.Int.Cast.int16_to_int64 (Term) Term)
(declare-fun Tm_refine_d4a84b93f9d98f1d1f86f8d8c79db285 () Term)
(declare-fun Tm_refine_602f9bac7efb12d89f78e75f59b9e80c (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int16.t -> b: FStar.Int64.t{FStar.Int64.v b = FStar.Int16.v a}
(declare-fun Tm_arrow_1457f2d0e07ecb83fbdf06135d5b6bbb () Term)
(declare-fun FStar.Int.Cast.int16_to_int64@tok () Term)



; </end encoding FStar.Int.Cast.int16_to_int64>


; <Skipped FStar.Int.Cast.int16_to_int32/>


; <Start encoding FStar.Int.Cast.int16_to_int32>

(declare-fun FStar.Int.Cast.int16_to_int32 (Term) Term)
(declare-fun Tm_refine_99be29c5f33c48c1672d3faa43f9cdfd () Term)
(declare-fun Tm_refine_f8e9042428580164ec1dc6c00c7f5cab (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int16.t -> b: FStar.Int32.t{FStar.Int32.v b = FStar.Int16.v a}
(declare-fun Tm_arrow_f5c1843595acef62eca586a78487a579 () Term)
(declare-fun FStar.Int.Cast.int16_to_int32@tok () Term)



; </end encoding FStar.Int.Cast.int16_to_int32>


; <Skipped FStar.Int.Cast.int16_to_int8/>


; <Start encoding FStar.Int.Cast.int16_to_int8>

(declare-fun FStar.Int.Cast.int16_to_int8 (Term) Term)
(declare-fun Tm_refine_a995c3cc7036f692b497220b043bcc27 (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int16.t -> b: FStar.Int8.t{FStar.Int8.v b = FStar.Int16.v a @% Prims.pow2 8}
(declare-fun Tm_arrow_f397785bfa03aa7f2d33767382b007da () Term)
(declare-fun FStar.Int.Cast.int16_to_int8@tok () Term)


; </end encoding FStar.Int.Cast.int16_to_int8>


; <Skipped FStar.Int.Cast.int32_to_int64/>


; <Start encoding FStar.Int.Cast.int32_to_int64>

(declare-fun FStar.Int.Cast.int32_to_int64 (Term) Term)
(declare-fun Tm_refine_a8ce8a30c934a9cee3859f020c8d307b () Term)
(declare-fun Tm_refine_9f01234bd71588dca9c7d75e62bba5a9 (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int32.t -> b: FStar.Int64.t{FStar.Int64.v b = FStar.Int32.v a}
(declare-fun Tm_arrow_f7c8b6ce706610352f972de2080cf6ea () Term)
(declare-fun FStar.Int.Cast.int32_to_int64@tok () Term)



; </end encoding FStar.Int.Cast.int32_to_int64>


; <Skipped FStar.Int.Cast.int32_to_int16/>


; <Start encoding FStar.Int.Cast.int32_to_int16>

(declare-fun FStar.Int.Cast.int32_to_int16 (Term) Term)
(declare-fun Tm_refine_5f29c16e7741c37a49590c89f05643b9 (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int32.t -> b: FStar.Int16.t{FStar.Int16.v b = FStar.Int32.v a @% Prims.pow2 16}
(declare-fun Tm_arrow_cfb2c82411d7bff610842a265ad0e4fa () Term)
(declare-fun FStar.Int.Cast.int32_to_int16@tok () Term)


; </end encoding FStar.Int.Cast.int32_to_int16>


; <Skipped FStar.Int.Cast.int32_to_int8/>


; <Start encoding FStar.Int.Cast.int32_to_int8>

(declare-fun FStar.Int.Cast.int32_to_int8 (Term) Term)
(declare-fun Tm_refine_05ff8833bcb488276b58c943e39d656a (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int32.t -> b: FStar.Int8.t{FStar.Int8.v b = FStar.Int32.v a @% Prims.pow2 8}
(declare-fun Tm_arrow_6b394b648b995ce2ae50470efff7e3e2 () Term)
(declare-fun FStar.Int.Cast.int32_to_int8@tok () Term)


; </end encoding FStar.Int.Cast.int32_to_int8>


; <Skipped FStar.Int.Cast.int64_to_int32/>


; <Start encoding FStar.Int.Cast.int64_to_int32>

(declare-fun FStar.Int.Cast.int64_to_int32 (Term) Term)
(declare-fun Tm_refine_72ca2444b5d1539855725300fe501b81 (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int64.t -> b: FStar.Int32.t{FStar.Int32.v b = FStar.Int64.v a @% Prims.pow2 32}
(declare-fun Tm_arrow_5abf0ed1cc53d42c3093f36570bc7b1b () Term)
(declare-fun FStar.Int.Cast.int64_to_int32@tok () Term)


; </end encoding FStar.Int.Cast.int64_to_int32>


; <Skipped FStar.Int.Cast.int64_to_int16/>


; <Start encoding FStar.Int.Cast.int64_to_int16>

(declare-fun FStar.Int.Cast.int64_to_int16 (Term) Term)
(declare-fun Tm_refine_da9342fe71736f1f888ac59e58b690cd (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int64.t -> b: FStar.Int16.t{FStar.Int16.v b = FStar.Int64.v a @% Prims.pow2 16}
(declare-fun Tm_arrow_d54f7fb1b8fc5952ed9540682bfb17e9 () Term)
(declare-fun FStar.Int.Cast.int64_to_int16@tok () Term)


; </end encoding FStar.Int.Cast.int64_to_int16>


; <Skipped FStar.Int.Cast.int64_to_int8/>


; <Start encoding FStar.Int.Cast.int64_to_int8>

(declare-fun FStar.Int.Cast.int64_to_int8 (Term) Term)
(declare-fun Tm_refine_e2fc29919093cf2cde4a21a4afcc83ab (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int64.t -> b: FStar.Int8.t{FStar.Int8.v b = FStar.Int64.v a @% Prims.pow2 8}
(declare-fun Tm_arrow_3bc98739d3f8dbecf4c2a9665877518d () Term)
(declare-fun FStar.Int.Cast.int64_to_int8@tok () Term)


; </end encoding FStar.Int.Cast.int64_to_int8>


; <Skipped FStar.Int.Cast.uint8_to_int64/>


; <Start encoding FStar.Int.Cast.uint8_to_int64>

(declare-fun FStar.Int.Cast.uint8_to_int64 (Term) Term)
(declare-fun Tm_refine_66b01e5a04cd5e59f9a6490d74f9c117 () Term)
(declare-fun Tm_refine_23f1c9c80c0b98a15e596c93c1434016 (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt8.t -> b: FStar.Int64.t{FStar.Int64.v b = FStar.UInt8.v a}
(declare-fun Tm_arrow_3616393d5a98b958597af8ff4c1d66c3 () Term)
(declare-fun FStar.Int.Cast.uint8_to_int64@tok () Term)



; </end encoding FStar.Int.Cast.uint8_to_int64>


; <Skipped FStar.Int.Cast.uint8_to_int32/>


; <Start encoding FStar.Int.Cast.uint8_to_int32>

(declare-fun FStar.Int.Cast.uint8_to_int32 (Term) Term)
(declare-fun Tm_refine_30f54be659cb3068ff6b4d29fbfd37b9 () Term)
(declare-fun Tm_refine_cf578fb296bd23c2c44ac23f0c1ab02f (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt8.t -> b: FStar.Int32.t{FStar.Int32.v b = FStar.UInt8.v a}
(declare-fun Tm_arrow_9cb44043a017b4a323f7c0ec9ca86bd3 () Term)
(declare-fun FStar.Int.Cast.uint8_to_int32@tok () Term)



; </end encoding FStar.Int.Cast.uint8_to_int32>


; <Skipped FStar.Int.Cast.uint8_to_int16/>


; <Start encoding FStar.Int.Cast.uint8_to_int16>

(declare-fun FStar.Int.Cast.uint8_to_int16 (Term) Term)
(declare-fun Tm_refine_0fa467ad3d3ad969314aac98bb8e0d1b () Term)
(declare-fun Tm_refine_ae02686b9f6923456fd487c2c9b9e342 (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt8.t -> b: FStar.Int16.t{FStar.Int16.v b = FStar.UInt8.v a}
(declare-fun Tm_arrow_4a9ea178892403f6f322eefcf79a587d () Term)
(declare-fun FStar.Int.Cast.uint8_to_int16@tok () Term)



; </end encoding FStar.Int.Cast.uint8_to_int16>


; <Skipped FStar.Int.Cast.uint8_to_int8/>


; <Start encoding FStar.Int.Cast.uint8_to_int8>

(declare-fun FStar.Int.Cast.uint8_to_int8 (Term) Term)
(declare-fun Tm_refine_f7c1cb31f6532bc9ea476d36305e51cc (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt8.t -> b: FStar.Int8.t{FStar.Int8.v b = FStar.UInt8.v a @% Prims.pow2 8}
(declare-fun Tm_arrow_847892e407a105d1ca5e64d5f9c78d8d () Term)
(declare-fun FStar.Int.Cast.uint8_to_int8@tok () Term)


; </end encoding FStar.Int.Cast.uint8_to_int8>


; <Skipped FStar.Int.Cast.uint16_to_int64/>


; <Start encoding FStar.Int.Cast.uint16_to_int64>

(declare-fun FStar.Int.Cast.uint16_to_int64 (Term) Term)
(declare-fun Tm_refine_d601f2d8d86bb81cb4e53ef7f6de8606 () Term)
(declare-fun Tm_refine_581df71c96afff0e16eaaf326e7825ef (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt16.t -> b: FStar.Int64.t{FStar.Int64.v b = FStar.UInt16.v a}
(declare-fun Tm_arrow_45a4dfebb46ad0363ede1ff7158abbda () Term)
(declare-fun FStar.Int.Cast.uint16_to_int64@tok () Term)



; </end encoding FStar.Int.Cast.uint16_to_int64>


; <Skipped FStar.Int.Cast.uint16_to_int32/>


; <Start encoding FStar.Int.Cast.uint16_to_int32>

(declare-fun FStar.Int.Cast.uint16_to_int32 (Term) Term)
(declare-fun Tm_refine_38a73e5144d443b0875e11c634d849b2 () Term)
(declare-fun Tm_refine_0dc4e94071105b843bcff67d2632c690 (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt16.t -> b: FStar.Int32.t{FStar.Int32.v b = FStar.UInt16.v a}
(declare-fun Tm_arrow_063cfbf1e8b876889cc40b92b62fc706 () Term)
(declare-fun FStar.Int.Cast.uint16_to_int32@tok () Term)



; </end encoding FStar.Int.Cast.uint16_to_int32>


; <Skipped FStar.Int.Cast.uint16_to_int16/>


; <Start encoding FStar.Int.Cast.uint16_to_int16>

(declare-fun FStar.Int.Cast.uint16_to_int16 (Term) Term)
(declare-fun Tm_refine_94529b1af755ca27532a9b1afe59ecb4 (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt16.t -> b: FStar.Int16.t{FStar.Int16.v b = FStar.UInt16.v a @% Prims.pow2 16}
(declare-fun Tm_arrow_a6d2e563e3cdf4fbac562b994789f788 () Term)
(declare-fun FStar.Int.Cast.uint16_to_int16@tok () Term)


; </end encoding FStar.Int.Cast.uint16_to_int16>


; <Skipped FStar.Int.Cast.uint16_to_int8/>


; <Start encoding FStar.Int.Cast.uint16_to_int8>

(declare-fun FStar.Int.Cast.uint16_to_int8 (Term) Term)
(declare-fun Tm_refine_6fd4d3789031952837c2c7b3c3e901e9 (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt16.t -> b: FStar.Int8.t{FStar.Int8.v b = FStar.UInt16.v a @% Prims.pow2 8}
(declare-fun Tm_arrow_28e8c6cd99a5b1ab22cfac6ad16ac1c3 () Term)
(declare-fun FStar.Int.Cast.uint16_to_int8@tok () Term)


; </end encoding FStar.Int.Cast.uint16_to_int8>


; <Skipped FStar.Int.Cast.uint32_to_int64/>


; <Start encoding FStar.Int.Cast.uint32_to_int64>

(declare-fun FStar.Int.Cast.uint32_to_int64 (Term) Term)
(declare-fun Tm_refine_b5e6c055aa02f0fe99c3006bfade50de () Term)
(declare-fun Tm_refine_69b5bc2f0167419281a19f76e3e879be (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt32.t -> b: FStar.Int64.t{FStar.Int64.v b = FStar.UInt32.v a}
(declare-fun Tm_arrow_8d533ac247e0963f402bcd97e7983307 () Term)
(declare-fun FStar.Int.Cast.uint32_to_int64@tok () Term)



; </end encoding FStar.Int.Cast.uint32_to_int64>


; <Skipped FStar.Int.Cast.uint32_to_int32/>


; <Start encoding FStar.Int.Cast.uint32_to_int32>

(declare-fun FStar.Int.Cast.uint32_to_int32 (Term) Term)
(declare-fun Tm_refine_f8becfef591c73e0694d1c5c365e8382 (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt32.t -> b: FStar.Int32.t{FStar.Int32.v b = FStar.UInt32.v a @% Prims.pow2 32}
(declare-fun Tm_arrow_81f1324e2a340ce9da78c49852327f0d () Term)
(declare-fun FStar.Int.Cast.uint32_to_int32@tok () Term)


; </end encoding FStar.Int.Cast.uint32_to_int32>


; <Skipped FStar.Int.Cast.uint32_to_int16/>


; <Start encoding FStar.Int.Cast.uint32_to_int16>

(declare-fun FStar.Int.Cast.uint32_to_int16 (Term) Term)
(declare-fun Tm_refine_2fed3cbbb5409570dc49319258ccf3ef (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt32.t -> b: FStar.Int16.t{FStar.Int16.v b = FStar.UInt32.v a @% Prims.pow2 16}
(declare-fun Tm_arrow_2345e2f2acd04a838810b547244b2f50 () Term)
(declare-fun FStar.Int.Cast.uint32_to_int16@tok () Term)


; </end encoding FStar.Int.Cast.uint32_to_int16>


; <Skipped FStar.Int.Cast.uint32_to_int8/>


; <Start encoding FStar.Int.Cast.uint32_to_int8>

(declare-fun FStar.Int.Cast.uint32_to_int8 (Term) Term)
(declare-fun Tm_refine_3c584f3fe1ee365defbf6bda5fccd7ec (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt32.t -> b: FStar.Int8.t{FStar.Int8.v b = FStar.UInt32.v a @% Prims.pow2 8}
(declare-fun Tm_arrow_5890cc1a509aef4ad1d4c36150335ae3 () Term)
(declare-fun FStar.Int.Cast.uint32_to_int8@tok () Term)


; </end encoding FStar.Int.Cast.uint32_to_int8>


; <Skipped FStar.Int.Cast.uint64_to_int64/>


; <Start encoding FStar.Int.Cast.uint64_to_int64>

(declare-fun FStar.Int.Cast.uint64_to_int64 (Term) Term)
(declare-fun Tm_refine_b1a4253476b77fa130c605646cc1dd10 (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt64.t -> b: FStar.Int64.t{FStar.Int64.v b = FStar.UInt64.v a @% Prims.pow2 64}
(declare-fun Tm_arrow_348f26b36e63f2c00579d5193c674a6e () Term)
(declare-fun FStar.Int.Cast.uint64_to_int64@tok () Term)


; </end encoding FStar.Int.Cast.uint64_to_int64>


; <Skipped FStar.Int.Cast.uint64_to_int32/>


; <Start encoding FStar.Int.Cast.uint64_to_int32>

(declare-fun FStar.Int.Cast.uint64_to_int32 (Term) Term)
(declare-fun Tm_refine_ff7be75a282a2d1efb57eeb2fd2ee26b (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt64.t -> b: FStar.Int32.t{FStar.Int32.v b = FStar.UInt64.v a @% Prims.pow2 32}
(declare-fun Tm_arrow_a7cfcbe071987eae3f86bdadbe4199f6 () Term)
(declare-fun FStar.Int.Cast.uint64_to_int32@tok () Term)


; </end encoding FStar.Int.Cast.uint64_to_int32>


; <Skipped FStar.Int.Cast.uint64_to_int16/>


; <Start encoding FStar.Int.Cast.uint64_to_int16>

(declare-fun FStar.Int.Cast.uint64_to_int16 (Term) Term)
(declare-fun Tm_refine_138d2fcfa5cc106f08023f48389b7c56 (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt64.t -> b: FStar.Int16.t{FStar.Int16.v b = FStar.UInt64.v a @% Prims.pow2 16}
(declare-fun Tm_arrow_02639e85ebdabd354e76e10699692390 () Term)
(declare-fun FStar.Int.Cast.uint64_to_int16@tok () Term)


; </end encoding FStar.Int.Cast.uint64_to_int16>


; <Skipped FStar.Int.Cast.uint64_to_int8/>


; <Start encoding FStar.Int.Cast.uint64_to_int8>

(declare-fun FStar.Int.Cast.uint64_to_int8 (Term) Term)
(declare-fun Tm_refine_6df89b85900113faf10d8cb061ec8297 (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt64.t -> b: FStar.Int8.t{FStar.Int8.v b = FStar.UInt64.v a @% Prims.pow2 8}
(declare-fun Tm_arrow_c1e35fa2c4dbeea8718aed75c8427cfc () Term)
(declare-fun FStar.Int.Cast.uint64_to_int8@tok () Term)


; </end encoding FStar.Int.Cast.uint64_to_int8>


; <Skipped FStar.Int.Cast.int8_to_uint64/>


; <Start encoding FStar.Int.Cast.int8_to_uint64>

(declare-fun FStar.Int.Cast.int8_to_uint64 (Term) Term)
(declare-fun Tm_refine_6725f4adff6b363b8006a224af88d3d8 (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int8.t -> b: FStar.UInt64.t{FStar.UInt64.v b = FStar.Int8.v a % Prims.pow2 64}
(declare-fun Tm_arrow_169462abfa6bf6f667b7531226171d1e () Term)
(declare-fun FStar.Int.Cast.int8_to_uint64@tok () Term)


; </end encoding FStar.Int.Cast.int8_to_uint64>


; <Skipped FStar.Int.Cast.int8_to_uint32/>


; <Start encoding FStar.Int.Cast.int8_to_uint32>

(declare-fun FStar.Int.Cast.int8_to_uint32 (Term) Term)
(declare-fun Tm_refine_c61120a48ea923b3f508ab6b6834aebd (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int8.t -> b: FStar.UInt32.t{FStar.UInt32.v b = FStar.Int8.v a % Prims.pow2 32}
(declare-fun Tm_arrow_31295d9715b484817d50ce2b6a6fcabd () Term)
(declare-fun FStar.Int.Cast.int8_to_uint32@tok () Term)


; </end encoding FStar.Int.Cast.int8_to_uint32>


; <Skipped FStar.Int.Cast.int8_to_uint16/>


; <Start encoding FStar.Int.Cast.int8_to_uint16>

(declare-fun FStar.Int.Cast.int8_to_uint16 (Term) Term)
(declare-fun Tm_refine_2df77538bb976c5347a86dd4169fe001 (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int8.t -> b: FStar.UInt16.t{FStar.UInt16.v b = FStar.Int8.v a % Prims.pow2 16}
(declare-fun Tm_arrow_89df052e05666bf302588cd611eb47f4 () Term)
(declare-fun FStar.Int.Cast.int8_to_uint16@tok () Term)


; </end encoding FStar.Int.Cast.int8_to_uint16>


; <Skipped FStar.Int.Cast.int8_to_uint8/>


; <Start encoding FStar.Int.Cast.int8_to_uint8>

(declare-fun FStar.Int.Cast.int8_to_uint8 (Term) Term)
(declare-fun Tm_refine_70247acca6618885acac490081edbfc0 (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int8.t -> b: FStar.UInt8.t{FStar.UInt8.v b = FStar.Int8.v a % Prims.pow2 8}
(declare-fun Tm_arrow_6f812131e5e51bc427769ae875d4a341 () Term)
(declare-fun FStar.Int.Cast.int8_to_uint8@tok () Term)


; </end encoding FStar.Int.Cast.int8_to_uint8>


; <Skipped FStar.Int.Cast.int16_to_uint64/>


; <Start encoding FStar.Int.Cast.int16_to_uint64>

(declare-fun FStar.Int.Cast.int16_to_uint64 (Term) Term)
(declare-fun Tm_refine_a26519a40aab867b4821f7c4709fce2f (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int16.t -> b: FStar.UInt64.t{FStar.UInt64.v b = FStar.Int16.v a % Prims.pow2 64}
(declare-fun Tm_arrow_b6ed69d2b1ff88d468430e59ed8f216a () Term)
(declare-fun FStar.Int.Cast.int16_to_uint64@tok () Term)


; </end encoding FStar.Int.Cast.int16_to_uint64>


; <Skipped FStar.Int.Cast.int16_to_uint32/>


; <Start encoding FStar.Int.Cast.int16_to_uint32>

(declare-fun FStar.Int.Cast.int16_to_uint32 (Term) Term)
(declare-fun Tm_refine_beede139ea3f7a90e582a1f4b5e8db0d (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int16.t -> b: FStar.UInt32.t{FStar.UInt32.v b = FStar.Int16.v a % Prims.pow2 32}
(declare-fun Tm_arrow_705f0d60676ffddd1cedb9a5786dc911 () Term)
(declare-fun FStar.Int.Cast.int16_to_uint32@tok () Term)


; </end encoding FStar.Int.Cast.int16_to_uint32>


; <Skipped FStar.Int.Cast.int16_to_uint16/>


; <Start encoding FStar.Int.Cast.int16_to_uint16>

(declare-fun FStar.Int.Cast.int16_to_uint16 (Term) Term)
(declare-fun Tm_refine_31cbf848d09e50ce0bac9457ee42d214 (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int16.t -> b: FStar.UInt16.t{FStar.UInt16.v b = FStar.Int16.v a % Prims.pow2 16}
(declare-fun Tm_arrow_5490d75ec7e4d50a10e988d6f853fdf7 () Term)
(declare-fun FStar.Int.Cast.int16_to_uint16@tok () Term)


; </end encoding FStar.Int.Cast.int16_to_uint16>


; <Skipped FStar.Int.Cast.int16_to_uint8/>


; <Start encoding FStar.Int.Cast.int16_to_uint8>

(declare-fun FStar.Int.Cast.int16_to_uint8 (Term) Term)
(declare-fun Tm_refine_1384a5b9a05cec0b617fb43252552353 (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int16.t -> b: FStar.UInt8.t{FStar.UInt8.v b = FStar.Int16.v a % Prims.pow2 8}
(declare-fun Tm_arrow_c934b9b127f7d7c6e5c6c96909da3f94 () Term)
(declare-fun FStar.Int.Cast.int16_to_uint8@tok () Term)


; </end encoding FStar.Int.Cast.int16_to_uint8>


; <Skipped FStar.Int.Cast.int32_to_uint64/>


; <Start encoding FStar.Int.Cast.int32_to_uint64>

(declare-fun FStar.Int.Cast.int32_to_uint64 (Term) Term)
(declare-fun Tm_refine_ec63826da772cf76cf20aa5b616602e0 (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int32.t -> b: FStar.UInt64.t{FStar.UInt64.v b = FStar.Int32.v a % Prims.pow2 64}
(declare-fun Tm_arrow_4499665da7255445828a5e9de8c5ad68 () Term)
(declare-fun FStar.Int.Cast.int32_to_uint64@tok () Term)


; </end encoding FStar.Int.Cast.int32_to_uint64>


; <Skipped FStar.Int.Cast.int32_to_uint32/>


; <Start encoding FStar.Int.Cast.int32_to_uint32>

(declare-fun FStar.Int.Cast.int32_to_uint32 (Term) Term)
(declare-fun Tm_refine_d02c3b6ffdeb0591f5aa4a4d977f5728 (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int32.t -> b: FStar.UInt32.t{FStar.UInt32.v b = FStar.Int32.v a % Prims.pow2 32}
(declare-fun Tm_arrow_35f7cb06c070cb327fb84cb58a30bbff () Term)
(declare-fun FStar.Int.Cast.int32_to_uint32@tok () Term)


; </end encoding FStar.Int.Cast.int32_to_uint32>


; <Skipped FStar.Int.Cast.int32_to_uint16/>


; <Start encoding FStar.Int.Cast.int32_to_uint16>

(declare-fun FStar.Int.Cast.int32_to_uint16 (Term) Term)
(declare-fun Tm_refine_e449b6e1c6e00f368340fb73db682fda (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int32.t -> b: FStar.UInt16.t{FStar.UInt16.v b = FStar.Int32.v a % Prims.pow2 16}
(declare-fun Tm_arrow_842eca3d248fddcdb89fa181315ba69f () Term)
(declare-fun FStar.Int.Cast.int32_to_uint16@tok () Term)


; </end encoding FStar.Int.Cast.int32_to_uint16>


; <Skipped FStar.Int.Cast.int32_to_uint8/>


; <Start encoding FStar.Int.Cast.int32_to_uint8>

(declare-fun FStar.Int.Cast.int32_to_uint8 (Term) Term)
(declare-fun Tm_refine_b64a84f458b8ad489604fc9affd5b8b6 (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int32.t -> b: FStar.UInt8.t{FStar.UInt8.v b = FStar.Int32.v a % Prims.pow2 8}
(declare-fun Tm_arrow_8244c03c726fb8d315458f01acc11161 () Term)
(declare-fun FStar.Int.Cast.int32_to_uint8@tok () Term)


; </end encoding FStar.Int.Cast.int32_to_uint8>


; <Skipped FStar.Int.Cast.int64_to_uint64/>


; <Start encoding FStar.Int.Cast.int64_to_uint64>

(declare-fun FStar.Int.Cast.int64_to_uint64 (Term) Term)
(declare-fun Tm_refine_12289bfec6b7b6d49daf3d53fef8e372 (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int64.t -> b: FStar.UInt64.t{FStar.UInt64.v b = FStar.Int64.v a % Prims.pow2 64}
(declare-fun Tm_arrow_3a3abb9fd504a9a9c83c13081b486dac () Term)
(declare-fun FStar.Int.Cast.int64_to_uint64@tok () Term)


; </end encoding FStar.Int.Cast.int64_to_uint64>


; <Skipped FStar.Int.Cast.int64_to_uint32/>


; <Start encoding FStar.Int.Cast.int64_to_uint32>

(declare-fun FStar.Int.Cast.int64_to_uint32 (Term) Term)
(declare-fun Tm_refine_aa10b26044072a79c677f1b78e9d2240 (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int64.t -> b: FStar.UInt32.t{FStar.UInt32.v b = FStar.Int64.v a % Prims.pow2 32}
(declare-fun Tm_arrow_47a8effab975c1c3a5008108167e26c3 () Term)
(declare-fun FStar.Int.Cast.int64_to_uint32@tok () Term)


; </end encoding FStar.Int.Cast.int64_to_uint32>


; <Skipped FStar.Int.Cast.int64_to_uint16/>


; <Start encoding FStar.Int.Cast.int64_to_uint16>

(declare-fun FStar.Int.Cast.int64_to_uint16 (Term) Term)
(declare-fun Tm_refine_7c201645d045b8db196510f74719ec8a (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int64.t -> b: FStar.UInt16.t{FStar.UInt16.v b = FStar.Int64.v a % Prims.pow2 16}
(declare-fun Tm_arrow_a413b259785d40eb3a0af350ff560edd () Term)
(declare-fun FStar.Int.Cast.int64_to_uint16@tok () Term)


; </end encoding FStar.Int.Cast.int64_to_uint16>


; <Skipped FStar.Int.Cast.int64_to_uint8/>


; <Start encoding FStar.Int.Cast.int64_to_uint8>

(declare-fun FStar.Int.Cast.int64_to_uint8 (Term) Term)
(declare-fun Tm_refine_1765c30fd6679f2fa6a46ea5468366f1 (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Int64.t -> b: FStar.UInt8.t{FStar.UInt8.v b = FStar.Int64.v a % Prims.pow2 8}
(declare-fun Tm_arrow_6bf93131ed5c50a7cc0b586fb1765052 () Term)
(declare-fun FStar.Int.Cast.int64_to_uint8@tok () Term)


; </end encoding FStar.Int.Cast.int64_to_uint8>


; End Externals for module FStar.Int.Cast


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End module FStar.Int.Cast (495 decls; total size 30242)

;;; Start interface FStar.Issue

; Externals for interface FStar.Issue


; <Start encoding FStar.Issue.issue>

(declare-fun FStar.Issue.issue () Term)

; </end encoding FStar.Issue.issue>


; <Start encoding FStar.Issue.issue_level_string>

(declare-fun FStar.Issue.issue_level_string () Term)
(declare-fun Tm_refine_aa8eedc0ecb86da30f7a24511f57030f () Term)

; </end encoding FStar.Issue.issue_level_string>


; <Start encoding FStar.Issue.message_of_issue>

(declare-fun FStar.Issue.message_of_issue (Term) Term)
;;;;;;;;;;;;;;;;i: FStar.Issue.issue -> Prims.string
(declare-fun Tm_arrow_ac5151aeda0379e1d6b8d444cd3f0526 () Term)
(declare-fun FStar.Issue.message_of_issue@tok () Term)

; </end encoding FStar.Issue.message_of_issue>


; <Start encoding FStar.Issue.level_of_issue>

(declare-fun FStar.Issue.level_of_issue (Term) Term)
;;;;;;;;;;;;;;;;i: FStar.Issue.issue -> FStar.Issue.issue_level_string
(declare-fun Tm_arrow_baa5bfeaffb7436a922fcee810b3f6e5 () Term)
(declare-fun FStar.Issue.level_of_issue@tok () Term)

; </end encoding FStar.Issue.level_of_issue>


; <Start encoding FStar.Issue.number_of_issue>

(declare-fun FStar.Issue.number_of_issue (Term) Term)
;;;;;;;;;;;;;;;;i: FStar.Issue.issue -> FStar.Pervasives.Native.option Prims.int
(declare-fun Tm_arrow_78394d1c43ffc2ecdd350b139696c115 () Term)
(declare-fun FStar.Issue.number_of_issue@tok () Term)

; </end encoding FStar.Issue.number_of_issue>


; <Start encoding FStar.Issue.range_of_issue>

(declare-fun FStar.Issue.range_of_issue (Term) Term)
;;;;;;;;;;;;;;;;i: FStar.Issue.issue -> FStar.Pervasives.Native.option FStar.Range.range
(declare-fun Tm_arrow_72e8882c08b4ea92dd32d41519ff957b () Term)
(declare-fun FStar.Issue.range_of_issue@tok () Term)

; </end encoding FStar.Issue.range_of_issue>


; <Start encoding FStar.Issue.context_of_issue>

(declare-fun FStar.Issue.context_of_issue (Term) Term)
;;;;;;;;;;;;;;;;i: FStar.Issue.issue -> Prims.list Prims.string
(declare-fun Tm_arrow_546b620b9af82be043f5b40b81574a85 () Term)
(declare-fun FStar.Issue.context_of_issue@tok () Term)

; </end encoding FStar.Issue.context_of_issue>


; <Start encoding FStar.Issue.mk_issue>

(declare-fun FStar.Issue.mk_issue (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;i: FStar.Issue.issue_level_string ->     msg: Prims.string ->     range: FStar.Pervasives.Native.option FStar.Range.range ->     number: FStar.Pervasives.Native.option Prims.int ->     ctx: Prims.list Prims.string   -> FStar.Issue.issue
(declare-fun Tm_arrow_a1628df8c9319e78aab0e01f400423ed () Term)
(declare-fun FStar.Issue.mk_issue@tok () Term)

; </end encoding FStar.Issue.mk_issue>


; End Externals for interface FStar.Issue


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End interface FStar.Issue (40 decls; total size 3705)

;;; Start interface FStar.Tactics.Common

; Externals for interface FStar.Tactics.Common


; <Start encoding FStar.Tactics.Common.NotAListLiteral>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.Common.NotAListLiteral () Term)
;;;;;;;;;;;;;;;;data constructor proxy: NotAListLiteral
(declare-fun FStar.Tactics.Common.NotAListLiteral@tok () Term)

; <Start encoding FStar.Tactics.Common.NotAListLiteral>


; <start constructor FStar.Tactics.Common.NotAListLiteral>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.Common.NotAListLiteral ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
102)
(= __@x0
FStar.Tactics.Common.NotAListLiteral)))

; </end constructor FStar.Tactics.Common.NotAListLiteral>


; </end encoding FStar.Tactics.Common.NotAListLiteral>


; </end encoding FStar.Tactics.Common.NotAListLiteral>


; <Start encoding FStar.Tactics.Common.uu___is_NotAListLiteral>

(declare-fun FStar.Tactics.Common.uu___is_NotAListLiteral (Term) Term)
;;;;;;;;;;;;;;;;projectee: Prims.exn -> Prims.bool
(declare-fun Tm_arrow_81ab3356926b82578fcb92e97b412345 () Term)
(declare-fun FStar.Tactics.Common.uu___is_NotAListLiteral@tok () Term)

; </end encoding FStar.Tactics.Common.uu___is_NotAListLiteral>


; <Skipped FStar.Tactics.Common.uu___is_NotAListLiteral/>


; <Start encoding FStar.Tactics.Common.TacticFailure>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.Common.TacticFailure (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.Common.TacticFailure_uu___ (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: TacticFailure
(declare-fun FStar.Tactics.Common.TacticFailure@tok () Term)
;;;;;;;;;;;;;;;;_: Prims.string -> Prims.exn
(declare-fun Tm_arrow_ba2c44545f37b4cb1ed7c94934918f65 () Term)

; <Start encoding FStar.Tactics.Common.TacticFailure>


; <start constructor FStar.Tactics.Common.TacticFailure>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.Common.TacticFailure ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
106)
(= __@x0
(FStar.Tactics.Common.TacticFailure (FStar.Tactics.Common.TacticFailure_uu___ __@x0)))))

; </end constructor FStar.Tactics.Common.TacticFailure>


; </end encoding FStar.Tactics.Common.TacticFailure>


; </end encoding FStar.Tactics.Common.TacticFailure>


; <Start encoding FStar.Tactics.Common.uu___is_TacticFailure>

(declare-fun FStar.Tactics.Common.uu___is_TacticFailure (Term) Term)

(declare-fun FStar.Tactics.Common.uu___is_TacticFailure@tok () Term)

; </end encoding FStar.Tactics.Common.uu___is_TacticFailure>


; <Skipped FStar.Tactics.Common.uu___is_TacticFailure/>


; <Start encoding FStar.Tactics.Common.__proj__TacticFailure__item__uu___>

(declare-fun Tm_refine_f53d64a13e4d8d524df16a3fedd94d61 () Term)
(declare-fun FStar.Tactics.Common.__proj__TacticFailure__item__uu___ (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: Prims.exn{TacticFailure? _} -> Prims.string
(declare-fun Tm_arrow_6cee8c703bd0f8dde774a69349f47604 () Term)
(declare-fun FStar.Tactics.Common.__proj__TacticFailure__item__uu___@tok () Term)

; </end encoding FStar.Tactics.Common.__proj__TacticFailure__item__uu___>


; <Skipped FStar.Tactics.Common.__proj__TacticFailure__item__uu___/>


; End Externals for interface FStar.Tactics.Common


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End interface FStar.Tactics.Common (43 decls; total size 4279)

;;; Start interface FStar.Reflection.Types

; Externals for interface FStar.Reflection.Types


; <Start encoding FStar.Reflection.Types.namedv>

(declare-fun FStar.Reflection.Types.namedv () Term)

; </end encoding FStar.Reflection.Types.namedv>


; <Start encoding FStar.Reflection.Types.bv>

(declare-fun FStar.Reflection.Types.bv () Term)

; </end encoding FStar.Reflection.Types.bv>


; <Start encoding FStar.Reflection.Types.binder>

(declare-fun FStar.Reflection.Types.binder () Term)

; </end encoding FStar.Reflection.Types.binder>


; <Start encoding FStar.Reflection.Types.term>

(declare-fun FStar.Reflection.Types.term () Term)

; </end encoding FStar.Reflection.Types.term>


; <Start encoding FStar.Reflection.Types.env>

(declare-fun FStar.Reflection.Types.env () Term)

; </end encoding FStar.Reflection.Types.env>


; <Start encoding FStar.Reflection.Types.fv>

(declare-fun FStar.Reflection.Types.fv () Term)

; </end encoding FStar.Reflection.Types.fv>


; <Start encoding FStar.Reflection.Types.comp>

(declare-fun FStar.Reflection.Types.comp () Term)

; </end encoding FStar.Reflection.Types.comp>


; <Start encoding FStar.Reflection.Types.sigelt>

(declare-fun FStar.Reflection.Types.sigelt () Term)

; </end encoding FStar.Reflection.Types.sigelt>


; <Start encoding FStar.Reflection.Types.ctx_uvar_and_subst>

(declare-fun FStar.Reflection.Types.ctx_uvar_and_subst () Term)

; </end encoding FStar.Reflection.Types.ctx_uvar_and_subst>


; <Start encoding FStar.Reflection.Types.letbinding>

(declare-fun FStar.Reflection.Types.letbinding () Term)

; </end encoding FStar.Reflection.Types.letbinding>


; <Start encoding FStar.Reflection.Types.ident>

(declare-fun FStar.Reflection.Types.ident () Term)

; </end encoding FStar.Reflection.Types.ident>


; <Start encoding FStar.Reflection.Types.universe_uvar>

(declare-fun FStar.Reflection.Types.universe_uvar () Term)

; </end encoding FStar.Reflection.Types.universe_uvar>


; <Start encoding FStar.Reflection.Types.universe>

(declare-fun FStar.Reflection.Types.universe () Term)

; </end encoding FStar.Reflection.Types.universe>


; <Start encoding FStar.Reflection.Types.name>

(declare-fun FStar.Reflection.Types.name (Dummy_sort) Term)

; </end encoding FStar.Reflection.Types.name>


; <Start encoding FStar.Reflection.Types.univ_name>

(declare-fun FStar.Reflection.Types.univ_name () Term)

; </end encoding FStar.Reflection.Types.univ_name>


; <Start encoding FStar.Reflection.Types.typ>

(declare-fun FStar.Reflection.Types.typ () Term)

; </end encoding FStar.Reflection.Types.typ>


; <Start encoding FStar.Reflection.Types.binders>

(declare-fun FStar.Reflection.Types.binders () Term)

; </end encoding FStar.Reflection.Types.binders>


; <Start encoding FStar.Reflection.Types.match_returns_ascription>

(declare-fun FStar.Reflection.Types.match_returns_ascription () Term)

; </end encoding FStar.Reflection.Types.match_returns_ascription>


; <Start encoding FStar.Reflection.Types.decls>

(declare-fun FStar.Reflection.Types.decls () Term)

; </end encoding FStar.Reflection.Types.decls>


; End Externals for interface FStar.Reflection.Types


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End interface FStar.Reflection.Types (60 decls; total size 4164)

;;; Start interface FStar.Tactics.Types

; Externals for interface FStar.Tactics.Types


; <Start encoding FStar.Tactics.Types.proofstate>

(declare-fun FStar.Tactics.Types.proofstate () Term)

; </end encoding FStar.Tactics.Types.proofstate>


; <Start encoding FStar.Tactics.Types.goal>

(declare-fun FStar.Tactics.Types.goal () Term)

; </end encoding FStar.Tactics.Types.goal>


; <Start encoding FStar.Tactics.Types.goals_of>

(declare-fun FStar.Tactics.Types.goals_of (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Tactics.Types.proofstate -> Prims.list FStar.Tactics.Types.goal
(declare-fun Tm_arrow_89520215de07e0836df656d6fb09d4f7 () Term)
(declare-fun FStar.Tactics.Types.goals_of@tok () Term)

; </end encoding FStar.Tactics.Types.goals_of>


; <Start encoding FStar.Tactics.Types.smt_goals_of>

(declare-fun FStar.Tactics.Types.smt_goals_of (Term) Term)

(declare-fun FStar.Tactics.Types.smt_goals_of@tok () Term)

; </end encoding FStar.Tactics.Types.smt_goals_of>


; <Start encoding FStar.Tactics.Types.goal_env>

(declare-fun FStar.Tactics.Types.goal_env (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Tactics.Types.goal -> FStar.Reflection.Types.env
(declare-fun Tm_arrow_4cfc2993fb357dc146f3f63b6a3b67db () Term)
(declare-fun FStar.Tactics.Types.goal_env@tok () Term)

; </end encoding FStar.Tactics.Types.goal_env>


; <Start encoding FStar.Tactics.Types.goal_type>

(declare-fun FStar.Tactics.Types.goal_type (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Tactics.Types.goal -> FStar.Reflection.Types.typ
(declare-fun Tm_arrow_0b411aa7a3662e065dde74443f3a36d3 () Term)
(declare-fun FStar.Tactics.Types.goal_type@tok () Term)

; </end encoding FStar.Tactics.Types.goal_type>


; <Start encoding FStar.Tactics.Types.goal_witness>

(declare-fun FStar.Tactics.Types.goal_witness (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Tactics.Types.goal -> FStar.Reflection.Types.term
(declare-fun Tm_arrow_1f2bedfdcaa7a0dfd3a7c2d5531eb790 () Term)
(declare-fun FStar.Tactics.Types.goal_witness@tok () Term)

; </end encoding FStar.Tactics.Types.goal_witness>


; <Start encoding FStar.Tactics.Types.is_guard>

(declare-fun FStar.Tactics.Types.is_guard (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Tactics.Types.goal -> Prims.bool
(declare-fun Tm_arrow_75d5545f3ca41b84fc7056a1a2a294d1 () Term)
(declare-fun FStar.Tactics.Types.is_guard@tok () Term)

; </end encoding FStar.Tactics.Types.is_guard>


; <Start encoding FStar.Tactics.Types.get_label>

(declare-fun FStar.Tactics.Types.get_label (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Tactics.Types.goal -> Prims.string
(declare-fun Tm_arrow_bc926ef91174f916dbbb1a47a5a43812 () Term)
(declare-fun FStar.Tactics.Types.get_label@tok () Term)

; </end encoding FStar.Tactics.Types.get_label>


; <Start encoding FStar.Tactics.Types.set_label>

(declare-fun FStar.Tactics.Types.set_label (Term Term) Term)
;;;;;;;;;;;;;;;;_: Prims.string -> _: FStar.Tactics.Types.goal -> FStar.Tactics.Types.goal
(declare-fun Tm_arrow_cccda37185d7c7159a4bc03bc91b563a () Term)
(declare-fun FStar.Tactics.Types.set_label@tok () Term)

; </end encoding FStar.Tactics.Types.set_label>


; <Start encoding FStar.Tactics.Types.incr_depth>

(declare-fun FStar.Tactics.Types.incr_depth (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Tactics.Types.proofstate -> FStar.Tactics.Types.proofstate
(declare-fun Tm_arrow_2fe977cc6d3912a983dd7909f4981abc () Term)
(declare-fun FStar.Tactics.Types.incr_depth@tok () Term)

; </end encoding FStar.Tactics.Types.incr_depth>


; <Start encoding FStar.Tactics.Types.decr_depth>

(declare-fun FStar.Tactics.Types.decr_depth (Term) Term)

(declare-fun FStar.Tactics.Types.decr_depth@tok () Term)

; </end encoding FStar.Tactics.Types.decr_depth>


; <Start encoding FStar.Tactics.Types.tracepoint>

(declare-fun FStar.Tactics.Types.tracepoint (Term) Term)
(declare-fun Tm_refine_b8e45d9d9da45ba5c9bad7262617aa9f () Term)
;;;;;;;;;;;;;;;;_: FStar.Tactics.Types.proofstate -> b: Prims.bool{b == true}
(declare-fun Tm_arrow_ec42dc68f894de0aea106734e112d02a () Term)
(declare-fun FStar.Tactics.Types.tracepoint@tok () Term)


; </end encoding FStar.Tactics.Types.tracepoint>


; <Start encoding FStar.Tactics.Types.set_proofstate_range>

(declare-fun FStar.Tactics.Types.set_proofstate_range (Term Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Tactics.Types.proofstate -> _: FStar.Range.range -> FStar.Tactics.Types.proofstate
(declare-fun Tm_arrow_9760dbd7ec75c0db2f3291f148d16407 () Term)
(declare-fun FStar.Tactics.Types.set_proofstate_range@tok () Term)

; </end encoding FStar.Tactics.Types.set_proofstate_range>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.Types.direction () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.Types.TopDown () Term)
;;;;;;;;;;;;;;;;data constructor proxy: TopDown
(declare-fun FStar.Tactics.Types.TopDown@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.Types.BottomUp () Term)
;;;;;;;;;;;;;;;;data constructor proxy: BottomUp
(declare-fun FStar.Tactics.Types.BottomUp@tok () Term)

; <Start encoding FStar.Tactics.Types.direction>


; <start constructor FStar.Tactics.Types.direction>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.Types.direction ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
133)
(= __@x0
FStar.Tactics.Types.direction)))

; </end constructor FStar.Tactics.Types.direction>


; </end encoding FStar.Tactics.Types.direction>


; <Start encoding FStar.Tactics.Types.TopDown>


; <start constructor FStar.Tactics.Types.TopDown>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.Types.TopDown ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
139)
(= __@x0
FStar.Tactics.Types.TopDown)))

; </end constructor FStar.Tactics.Types.TopDown>


; </end encoding FStar.Tactics.Types.TopDown>


; <Start encoding FStar.Tactics.Types.BottomUp>


; <start constructor FStar.Tactics.Types.BottomUp>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.Types.BottomUp ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
141)
(= __@x0
FStar.Tactics.Types.BottomUp)))

; </end constructor FStar.Tactics.Types.BottomUp>


; </end encoding FStar.Tactics.Types.BottomUp>


; </end encoding >


; <Start encoding FStar.Tactics.Types.direction__uu___haseq>


; </end encoding FStar.Tactics.Types.direction__uu___haseq>


; <Start encoding FStar.Tactics.Types.uu___is_TopDown>

(declare-fun FStar.Tactics.Types.uu___is_TopDown (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Tactics.Types.direction -> Prims.bool
(declare-fun Tm_arrow_7358a6ef8bed5fa10bfdd45d61363e4f () Term)
(declare-fun FStar.Tactics.Types.uu___is_TopDown@tok () Term)

; </end encoding FStar.Tactics.Types.uu___is_TopDown>


; <Skipped FStar.Tactics.Types.uu___is_TopDown/>


; <Start encoding FStar.Tactics.Types.uu___is_BottomUp>

(declare-fun FStar.Tactics.Types.uu___is_BottomUp (Term) Term)

(declare-fun FStar.Tactics.Types.uu___is_BottomUp@tok () Term)

; </end encoding FStar.Tactics.Types.uu___is_BottomUp>


; <Skipped FStar.Tactics.Types.uu___is_BottomUp/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.Types.ctrl_flag () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.Types.Continue () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Continue
(declare-fun FStar.Tactics.Types.Continue@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.Types.Skip () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Skip
(declare-fun FStar.Tactics.Types.Skip@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.Types.Abort () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Abort
(declare-fun FStar.Tactics.Types.Abort@tok () Term)

; <Start encoding FStar.Tactics.Types.ctrl_flag>


; <start constructor FStar.Tactics.Types.ctrl_flag>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.Types.ctrl_flag ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
146)
(= __@x0
FStar.Tactics.Types.ctrl_flag)))

; </end constructor FStar.Tactics.Types.ctrl_flag>


; </end encoding FStar.Tactics.Types.ctrl_flag>


; <Start encoding FStar.Tactics.Types.Continue>


; <start constructor FStar.Tactics.Types.Continue>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.Types.Continue ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
152)
(= __@x0
FStar.Tactics.Types.Continue)))

; </end constructor FStar.Tactics.Types.Continue>


; </end encoding FStar.Tactics.Types.Continue>


; <Start encoding FStar.Tactics.Types.Skip>


; <start constructor FStar.Tactics.Types.Skip>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.Types.Skip ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
154)
(= __@x0
FStar.Tactics.Types.Skip)))

; </end constructor FStar.Tactics.Types.Skip>


; </end encoding FStar.Tactics.Types.Skip>


; <Start encoding FStar.Tactics.Types.Abort>


; <start constructor FStar.Tactics.Types.Abort>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.Types.Abort ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
156)
(= __@x0
FStar.Tactics.Types.Abort)))

; </end constructor FStar.Tactics.Types.Abort>


; </end encoding FStar.Tactics.Types.Abort>


; </end encoding >


; <Start encoding FStar.Tactics.Types.ctrl_flag__uu___haseq>


; </end encoding FStar.Tactics.Types.ctrl_flag__uu___haseq>


; <Start encoding FStar.Tactics.Types.uu___is_Continue>

(declare-fun FStar.Tactics.Types.uu___is_Continue (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Tactics.Types.ctrl_flag -> Prims.bool
(declare-fun Tm_arrow_798e88af71a79fd5e1c9022837898535 () Term)
(declare-fun FStar.Tactics.Types.uu___is_Continue@tok () Term)

; </end encoding FStar.Tactics.Types.uu___is_Continue>


; <Skipped FStar.Tactics.Types.uu___is_Continue/>


; <Start encoding FStar.Tactics.Types.uu___is_Skip>

(declare-fun FStar.Tactics.Types.uu___is_Skip (Term) Term)

(declare-fun FStar.Tactics.Types.uu___is_Skip@tok () Term)

; </end encoding FStar.Tactics.Types.uu___is_Skip>


; <Skipped FStar.Tactics.Types.uu___is_Skip/>


; <Start encoding FStar.Tactics.Types.uu___is_Abort>

(declare-fun FStar.Tactics.Types.uu___is_Abort (Term) Term)

(declare-fun FStar.Tactics.Types.uu___is_Abort@tok () Term)

; </end encoding FStar.Tactics.Types.uu___is_Abort>


; <Skipped FStar.Tactics.Types.uu___is_Abort/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.Types.guard_policy () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.Types.SMT () Term)
;;;;;;;;;;;;;;;;data constructor proxy: SMT
(declare-fun FStar.Tactics.Types.SMT@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.Types.Goal () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Goal
(declare-fun FStar.Tactics.Types.Goal@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.Types.Force () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Force
(declare-fun FStar.Tactics.Types.Force@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.Types.Drop () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Drop
(declare-fun FStar.Tactics.Types.Drop@tok () Term)

; <Start encoding FStar.Tactics.Types.guard_policy>


; <start constructor FStar.Tactics.Types.guard_policy>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.Types.guard_policy ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
163)
(= __@x0
FStar.Tactics.Types.guard_policy)))

; </end constructor FStar.Tactics.Types.guard_policy>


; </end encoding FStar.Tactics.Types.guard_policy>


; <Start encoding FStar.Tactics.Types.SMT>


; <start constructor FStar.Tactics.Types.SMT>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.Types.SMT ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
169)
(= __@x0
FStar.Tactics.Types.SMT)))

; </end constructor FStar.Tactics.Types.SMT>


; </end encoding FStar.Tactics.Types.SMT>


; <Start encoding FStar.Tactics.Types.Goal>


; <start constructor FStar.Tactics.Types.Goal>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.Types.Goal ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
171)
(= __@x0
FStar.Tactics.Types.Goal)))

; </end constructor FStar.Tactics.Types.Goal>


; </end encoding FStar.Tactics.Types.Goal>


; <Start encoding FStar.Tactics.Types.Force>


; <start constructor FStar.Tactics.Types.Force>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.Types.Force ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
173)
(= __@x0
FStar.Tactics.Types.Force)))

; </end constructor FStar.Tactics.Types.Force>


; </end encoding FStar.Tactics.Types.Force>


; <Start encoding FStar.Tactics.Types.Drop>


; <start constructor FStar.Tactics.Types.Drop>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.Types.Drop ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
175)
(= __@x0
FStar.Tactics.Types.Drop)))

; </end constructor FStar.Tactics.Types.Drop>


; </end encoding FStar.Tactics.Types.Drop>


; </end encoding >


; <Start encoding FStar.Tactics.Types.guard_policy__uu___haseq>


; </end encoding FStar.Tactics.Types.guard_policy__uu___haseq>


; <Start encoding FStar.Tactics.Types.uu___is_SMT>

(declare-fun FStar.Tactics.Types.uu___is_SMT (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Tactics.Types.guard_policy -> Prims.bool
(declare-fun Tm_arrow_f0bad2289bdf39f7d4f27822040a08f9 () Term)
(declare-fun FStar.Tactics.Types.uu___is_SMT@tok () Term)

; </end encoding FStar.Tactics.Types.uu___is_SMT>


; <Skipped FStar.Tactics.Types.uu___is_SMT/>


; <Start encoding FStar.Tactics.Types.uu___is_Goal>

(declare-fun FStar.Tactics.Types.uu___is_Goal (Term) Term)

(declare-fun FStar.Tactics.Types.uu___is_Goal@tok () Term)

; </end encoding FStar.Tactics.Types.uu___is_Goal>


; <Skipped FStar.Tactics.Types.uu___is_Goal/>


; <Start encoding FStar.Tactics.Types.uu___is_Force>

(declare-fun FStar.Tactics.Types.uu___is_Force (Term) Term)

(declare-fun FStar.Tactics.Types.uu___is_Force@tok () Term)

; </end encoding FStar.Tactics.Types.uu___is_Force>


; <Skipped FStar.Tactics.Types.uu___is_Force/>


; <Start encoding FStar.Tactics.Types.uu___is_Drop>

(declare-fun FStar.Tactics.Types.uu___is_Drop (Term) Term)

(declare-fun FStar.Tactics.Types.uu___is_Drop@tok () Term)

; </end encoding FStar.Tactics.Types.uu___is_Drop>


; <Skipped FStar.Tactics.Types.uu___is_Drop/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.Types.unfold_side () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.Types.Left () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Left
(declare-fun FStar.Tactics.Types.Left@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.Types.Right () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Right
(declare-fun FStar.Tactics.Types.Right@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.Types.Both () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Both
(declare-fun FStar.Tactics.Types.Both@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.Types.Neither () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Neither
(declare-fun FStar.Tactics.Types.Neither@tok () Term)

; <Start encoding FStar.Tactics.Types.unfold_side>


; <start constructor FStar.Tactics.Types.unfold_side>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.Types.unfold_side ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
184)
(= __@x0
FStar.Tactics.Types.unfold_side)))

; </end constructor FStar.Tactics.Types.unfold_side>


; </end encoding FStar.Tactics.Types.unfold_side>


; <Start encoding FStar.Tactics.Types.Left>


; <start constructor FStar.Tactics.Types.Left>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.Types.Left ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
190)
(= __@x0
FStar.Tactics.Types.Left)))

; </end constructor FStar.Tactics.Types.Left>


; </end encoding FStar.Tactics.Types.Left>


; <Start encoding FStar.Tactics.Types.Right>


; <start constructor FStar.Tactics.Types.Right>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.Types.Right ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
192)
(= __@x0
FStar.Tactics.Types.Right)))

; </end constructor FStar.Tactics.Types.Right>


; </end encoding FStar.Tactics.Types.Right>


; <Start encoding FStar.Tactics.Types.Both>


; <start constructor FStar.Tactics.Types.Both>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.Types.Both ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
194)
(= __@x0
FStar.Tactics.Types.Both)))

; </end constructor FStar.Tactics.Types.Both>


; </end encoding FStar.Tactics.Types.Both>


; <Start encoding FStar.Tactics.Types.Neither>


; <start constructor FStar.Tactics.Types.Neither>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.Types.Neither ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
196)
(= __@x0
FStar.Tactics.Types.Neither)))

; </end constructor FStar.Tactics.Types.Neither>


; </end encoding FStar.Tactics.Types.Neither>


; </end encoding >


; <Start encoding FStar.Tactics.Types.unfold_side__uu___haseq>


; </end encoding FStar.Tactics.Types.unfold_side__uu___haseq>


; <Start encoding FStar.Tactics.Types.uu___is_Left>

(declare-fun FStar.Tactics.Types.uu___is_Left (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Tactics.Types.unfold_side -> Prims.bool
(declare-fun Tm_arrow_e3862bd19cc7900c4d4417d33a8dd78f () Term)
(declare-fun FStar.Tactics.Types.uu___is_Left@tok () Term)

; </end encoding FStar.Tactics.Types.uu___is_Left>


; <Skipped FStar.Tactics.Types.uu___is_Left/>


; <Start encoding FStar.Tactics.Types.uu___is_Right>

(declare-fun FStar.Tactics.Types.uu___is_Right (Term) Term)

(declare-fun FStar.Tactics.Types.uu___is_Right@tok () Term)

; </end encoding FStar.Tactics.Types.uu___is_Right>


; <Skipped FStar.Tactics.Types.uu___is_Right/>


; <Start encoding FStar.Tactics.Types.uu___is_Both>

(declare-fun FStar.Tactics.Types.uu___is_Both (Term) Term)

(declare-fun FStar.Tactics.Types.uu___is_Both@tok () Term)

; </end encoding FStar.Tactics.Types.uu___is_Both>


; <Skipped FStar.Tactics.Types.uu___is_Both/>


; <Start encoding FStar.Tactics.Types.uu___is_Neither>

(declare-fun FStar.Tactics.Types.uu___is_Neither (Term) Term)

(declare-fun FStar.Tactics.Types.uu___is_Neither@tok () Term)

; </end encoding FStar.Tactics.Types.uu___is_Neither>


; <Skipped FStar.Tactics.Types.uu___is_Neither/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.Types.tot_or_ghost () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.Types.E_Total () Term)
;;;;;;;;;;;;;;;;data constructor proxy: E_Total
(declare-fun FStar.Tactics.Types.E_Total@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.Types.E_Ghost () Term)
;;;;;;;;;;;;;;;;data constructor proxy: E_Ghost
(declare-fun FStar.Tactics.Types.E_Ghost@tok () Term)

; <Start encoding FStar.Tactics.Types.tot_or_ghost>


; <start constructor FStar.Tactics.Types.tot_or_ghost>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.Types.tot_or_ghost ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
205)
(= __@x0
FStar.Tactics.Types.tot_or_ghost)))

; </end constructor FStar.Tactics.Types.tot_or_ghost>


; </end encoding FStar.Tactics.Types.tot_or_ghost>


; <Start encoding FStar.Tactics.Types.E_Total>


; <start constructor FStar.Tactics.Types.E_Total>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.Types.E_Total ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
211)
(= __@x0
FStar.Tactics.Types.E_Total)))

; </end constructor FStar.Tactics.Types.E_Total>


; </end encoding FStar.Tactics.Types.E_Total>


; <Start encoding FStar.Tactics.Types.E_Ghost>


; <start constructor FStar.Tactics.Types.E_Ghost>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.Types.E_Ghost ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
213)
(= __@x0
FStar.Tactics.Types.E_Ghost)))

; </end constructor FStar.Tactics.Types.E_Ghost>


; </end encoding FStar.Tactics.Types.E_Ghost>


; </end encoding >


; <Start encoding FStar.Tactics.Types.tot_or_ghost__uu___haseq>


; </end encoding FStar.Tactics.Types.tot_or_ghost__uu___haseq>


; <Start encoding FStar.Tactics.Types.uu___is_E_Total>

(declare-fun FStar.Tactics.Types.uu___is_E_Total (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Tactics.Types.tot_or_ghost -> Prims.bool
(declare-fun Tm_arrow_34556757c574720cb9ac10f10c4e4e53 () Term)
(declare-fun FStar.Tactics.Types.uu___is_E_Total@tok () Term)

; </end encoding FStar.Tactics.Types.uu___is_E_Total>


; <Skipped FStar.Tactics.Types.uu___is_E_Total/>


; <Start encoding FStar.Tactics.Types.uu___is_E_Ghost>

(declare-fun FStar.Tactics.Types.uu___is_E_Ghost (Term) Term)

(declare-fun FStar.Tactics.Types.uu___is_E_Ghost@tok () Term)

; </end encoding FStar.Tactics.Types.uu___is_E_Ghost>


; <Skipped FStar.Tactics.Types.uu___is_E_Ghost/>


; <Start encoding FStar.Tactics.Types.subtyping_token>

(declare-fun FStar.Tactics.Types.subtyping_token (Term Term Term) Term)
;;;;;;;;;;;;;;;;g: FStar.Reflection.Types.env -> t0: FStar.Reflection.Types.typ -> t1: FStar.Reflection.Types.typ   -> Type
(declare-fun Tm_arrow_200a29e39d46a03e4f2f84c19ad2f11f () Term)
(declare-fun FStar.Tactics.Types.subtyping_token@tok () Term)

; </end encoding FStar.Tactics.Types.subtyping_token>


; <Start encoding FStar.Tactics.Types.equiv_token>

(declare-fun FStar.Tactics.Types.equiv_token (Term Term Term) Term)

(declare-fun FStar.Tactics.Types.equiv_token@tok () Term)

; </end encoding FStar.Tactics.Types.equiv_token>


; <Start encoding FStar.Tactics.Types.typing_token>

(declare-fun FStar.Tactics.Types.typing_token (Term Term Term) Term)
;;;;;;;;;;;;;;;;g: FStar.Reflection.Types.env ->     e: FStar.Reflection.Types.term ->     c: (FStar.Tactics.Types.tot_or_ghost * FStar.Reflection.Types.typ)   -> Type
(declare-fun Tm_arrow_d510fcfc3b22c3021130465ac7359fd1 () Term)
(declare-fun FStar.Tactics.Types.typing_token@tok () Term)

; </end encoding FStar.Tactics.Types.typing_token>


; <Start encoding FStar.Tactics.Types.issues>

(declare-fun FStar.Tactics.Types.issues () Term)

; </end encoding FStar.Tactics.Types.issues>


; End Externals for interface FStar.Tactics.Types


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End interface FStar.Tactics.Types (334 decls; total size 23254)

;;; Start interface FStar.Tactics.Result

; Externals for interface FStar.Tactics.Result


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.Result.__result (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.Result.__result@x0 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Tactics.Result.__result@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.Result.Success (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.Result.Success_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.Result.Success_v (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.Result.Success_ps (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Success
(declare-fun FStar.Tactics.Result.Success@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.Result.Failed (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.Result.Failed_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.Result.Failed_exn (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.Result.Failed_ps (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Failed
(declare-fun FStar.Tactics.Result.Failed@tok () Term)
;;;;;;;;;;;;;;;;v: a -> ps: FStar.Tactics.Types.proofstate -> FStar.Tactics.Result.__result a
(declare-fun Tm_arrow_c0018340fe3c286ccd144c28c9db261e () Term)
;;;;;;;;;;;;;;;;exn: Prims.exn -> ps: FStar.Tactics.Types.proofstate -> FStar.Tactics.Result.__result a
(declare-fun Tm_arrow_ac6a3c821a9461d276786a8e6ccfbb3b () Term)

; <Start encoding FStar.Tactics.Result.__result>


; <start constructor FStar.Tactics.Result.__result>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.Result.__result ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(exists ((@x0 Term))
 (! (= __@x0
(FStar.Tactics.Result.__result @x0))
 
;;no pats
:qid is-FStar.Tactics.Result.__result))))

; </end constructor FStar.Tactics.Result.__result>


; </end encoding FStar.Tactics.Result.__result>


; <Start encoding FStar.Tactics.Result.Success>


; <start constructor FStar.Tactics.Result.Success>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.Result.Success ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
108)
(= __@x0
(FStar.Tactics.Result.Success (FStar.Tactics.Result.Success_a __@x0)
(FStar.Tactics.Result.Success_v __@x0)
(FStar.Tactics.Result.Success_ps __@x0)))))

; </end constructor FStar.Tactics.Result.Success>


; </end encoding FStar.Tactics.Result.Success>


; <Start encoding FStar.Tactics.Result.Failed>


; <start constructor FStar.Tactics.Result.Failed>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.Result.Failed ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
113)
(= __@x0
(FStar.Tactics.Result.Failed (FStar.Tactics.Result.Failed_a __@x0)
(FStar.Tactics.Result.Failed_exn __@x0)
(FStar.Tactics.Result.Failed_ps __@x0)))))

; </end constructor FStar.Tactics.Result.Failed>


; </end encoding FStar.Tactics.Result.Failed>


; </end encoding >


; <Start encoding FStar.Tactics.Result.uu___is_Success>

(declare-fun FStar.Tactics.Result.uu___is_Success (Term Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Tactics.Result.__result a -> Prims.bool
(declare-fun Tm_arrow_59c0391174065308f513f6f1ca4fc275 () Term)
(declare-fun FStar.Tactics.Result.uu___is_Success@tok () Term)

; </end encoding FStar.Tactics.Result.uu___is_Success>


; <Skipped FStar.Tactics.Result.uu___is_Success/>


; <Start encoding FStar.Tactics.Result.__proj__Success__item__v>

(declare-fun Tm_refine_29b9adb85ab54486bb858ab07eefa868 (Term) Term)
(declare-fun FStar.Tactics.Result.__proj__Success__item__v (Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.Result.__result a {Success? _} -> a
(declare-fun Tm_arrow_245559ada104aed2d9dcfca02c812320 () Term)
(declare-fun FStar.Tactics.Result.__proj__Success__item__v@tok () Term)

; </end encoding FStar.Tactics.Result.__proj__Success__item__v>


; <Skipped FStar.Tactics.Result.__proj__Success__item__v/>


; <Start encoding FStar.Tactics.Result.__proj__Success__item__ps>


(declare-fun FStar.Tactics.Result.__proj__Success__item__ps (Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.Result.__result a {Success? _} -> FStar.Tactics.Types.proofstate
(declare-fun Tm_arrow_d3a0c1060de58e8b315d43a061ca97e4 () Term)
(declare-fun FStar.Tactics.Result.__proj__Success__item__ps@tok () Term)

; </end encoding FStar.Tactics.Result.__proj__Success__item__ps>


; <Skipped FStar.Tactics.Result.__proj__Success__item__ps/>


; <Start encoding FStar.Tactics.Result.uu___is_Failed>

(declare-fun FStar.Tactics.Result.uu___is_Failed (Term Term) Term)

(declare-fun FStar.Tactics.Result.uu___is_Failed@tok () Term)

; </end encoding FStar.Tactics.Result.uu___is_Failed>


; <Skipped FStar.Tactics.Result.uu___is_Failed/>


; <Start encoding FStar.Tactics.Result.__proj__Failed__item__exn>

(declare-fun Tm_refine_e5441e7c5a446e2437660eff2f66dd32 (Term) Term)
(declare-fun FStar.Tactics.Result.__proj__Failed__item__exn (Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.Result.__result a {Failed? _} -> Prims.exn
(declare-fun Tm_arrow_0f072ce7104f1893ce83a2406a992ab0 () Term)
(declare-fun FStar.Tactics.Result.__proj__Failed__item__exn@tok () Term)

; </end encoding FStar.Tactics.Result.__proj__Failed__item__exn>


; <Skipped FStar.Tactics.Result.__proj__Failed__item__exn/>


; <Start encoding FStar.Tactics.Result.__proj__Failed__item__ps>


(declare-fun FStar.Tactics.Result.__proj__Failed__item__ps (Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.Result.__result a {Failed? _} -> FStar.Tactics.Types.proofstate
(declare-fun Tm_arrow_45836a7ec2cf10744dc33b0123d62e50 () Term)
(declare-fun FStar.Tactics.Result.__proj__Failed__item__ps@tok () Term)

; </end encoding FStar.Tactics.Result.__proj__Failed__item__ps>


; <Skipped FStar.Tactics.Result.__proj__Failed__item__ps/>


; End Externals for interface FStar.Tactics.Result


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End interface FStar.Tactics.Result (79 decls; total size 7050)

;;; Start module FStar.Monotonic.Pure

; Externals for module FStar.Monotonic.Pure


; <Start encoding FStar.Monotonic.Pure.is_monotonic>

(declare-fun FStar.Monotonic.Pure.is_monotonic (Term Term) Term)

(declare-fun FStar.Monotonic.Pure.is_monotonic@tok () Term)









; </end encoding FStar.Monotonic.Pure.is_monotonic>


; <Start encoding FStar.Monotonic.Pure.elim_pure_wp_monotonicity>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Pure.elim_pure_wp_monotonicity (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Pure.elim_pure_wp_monotonicity@tok () Term)

; </end encoding FStar.Monotonic.Pure.elim_pure_wp_monotonicity>


; <Start encoding FStar.Monotonic.Pure.elim_pure_wp_monotonicity_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Pure.elim_pure_wp_monotonicity_forall (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Pure.elim_pure_wp_monotonicity_forall@tok () Term)

; </end encoding FStar.Monotonic.Pure.elim_pure_wp_monotonicity_forall>


; <Start encoding FStar.Monotonic.Pure.intro_pure_wp_monotonicity>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Pure.intro_pure_wp_monotonicity (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Pure.intro_pure_wp_monotonicity@tok () Term)

; </end encoding FStar.Monotonic.Pure.intro_pure_wp_monotonicity>


; <Start encoding FStar.Monotonic.Pure.as_pure_wp>

(declare-fun FStar.Monotonic.Pure.as_pure_wp (Term Term) Term)
(declare-fun Tm_refine_5578b11cc349512589a3d2a8bfe37c29 (Term Term) Term)
;;;;;;;;;;;;;;;;wp: Prims.pure_wp' a -> Prims.Pure (Prims.pure_wp a)
(declare-fun Tm_arrow_169997680175178f95069b947929b45b () Term)
(declare-fun FStar.Monotonic.Pure.as_pure_wp@tok () Term)


; </end encoding FStar.Monotonic.Pure.as_pure_wp>


; <Start encoding FStar.Monotonic.Pure.elim_pure>



;;;;;;;;;;;;;;;;y: _: a{Prims.l_True} -> Prims.GTot Type
(declare-fun Tm_arrow_61bb9550f39772f18eaab129c43c3788 (Term) Term)
(declare-fun Tm_abs_6ffc06f5d789cf42c73d4f163a977cc0 (Term Term) Term)
(declare-fun Tm_refine_9d7e1da4c8ccc98f1562bffecfa030b6 (Term Term) Term)



(declare-fun Tm_abs_735bfa0400a12573ed48312f042e45e7 (Term) Term)
;;;;;;;;;;;;;;;;_: Prims.unit -> Prims.PURE a
(declare-fun Tm_arrow_c4804ca26ade2f3859400eebcb37ddbd (Term Term) Term)
(declare-fun FStar.Monotonic.Pure.elim_pure (Term Term Term Term) Term)











;;;;;;;;;;;;;;;;$f: (_: Prims.unit -> Prims.PURE a) -> p: Prims.pure_post a -> Prims.Pure a
(declare-fun Tm_arrow_08f6df717f4cfecbf9659e86cd16d49b () Term)
(declare-fun FStar.Monotonic.Pure.elim_pure@tok () Term)












; </end encoding FStar.Monotonic.Pure.elim_pure>


; End Externals for module FStar.Monotonic.Pure


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End module FStar.Monotonic.Pure (72 decls; total size 3957)

;;; Start interface FStar.Tactics.Effect

; Externals for interface FStar.Tactics.Effect


; <Start encoding FStar.Tactics.Effect.tac_wp_t0>

(declare-fun FStar.Tactics.Effect.tac_wp_t0 (Term) Term)

(declare-fun FStar.Tactics.Effect.tac_wp_t0@tok () Term)
;;;;;;;;;;;;;;;;_: FStar.Tactics.Result.__result a -> Type
(declare-fun Tm_arrow_e933639b62d15ffe7662240a31dd4831 (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Tactics.Types.proofstate -> _: (_: FStar.Tactics.Result.__result a -> Type) -> Type
(declare-fun Tm_arrow_58718aa53a4bad336e6e71645c7041a5 (Term) Term)

; </end encoding FStar.Tactics.Effect.tac_wp_t0>


; <Start encoding FStar.Tactics.Effect.tac_wp_monotonic>

(declare-fun FStar.Tactics.Effect.tac_wp_monotonic (Term Term) Term)
;;;;;;;;;;;;;;;;wp: FStar.Tactics.Effect.tac_wp_t0 a -> Prims.logical
(declare-fun Tm_arrow_586e511512340cebc0763f51dd24e52e () Term)
(declare-fun FStar.Tactics.Effect.tac_wp_monotonic@tok () Term)





(declare-fun Tm_abs_82879b54ecd7c10bf0b5e87d5506ddb5 (Term Term Term) Term)

;;;;;;;;;;;;;;;;q: (_: FStar.Tactics.Result.__result a -> Type) -> Prims.GTot Type
(declare-fun Tm_arrow_d10e7a90c75a65268b54e48e43214be0 (Term) Term)
(declare-fun Tm_abs_7c63fa0d59a5e643ee1606439f3f0f47 (Term Term Term Term) Term)


(declare-fun Tm_abs_9eee7854722ca3e597eb2287e883a166 (Term Term Term) Term)
;;;;;;;;;;;;;;;;ps: FStar.Tactics.Types.proofstate -> Prims.GTot Type
(declare-fun Tm_arrow_3d14141f09cc93a3dcb75ce07a0f5d15 () Term)
(declare-fun Tm_abs_76f0e03b87d0cabd33a754df15a024e4 (Term Term) Term)





; </end encoding FStar.Tactics.Effect.tac_wp_monotonic>


; <Start encoding FStar.Tactics.Effect.tac_wp_t>

(declare-fun FStar.Tactics.Effect.tac_wp_t (Term) Term)

(declare-fun FStar.Tactics.Effect.tac_wp_t@tok () Term)


(declare-fun Tm_refine_8b22c2769f6907ec32a8bea96d54292a (Term) Term)

; </end encoding FStar.Tactics.Effect.tac_wp_t>


; <Start encoding FStar.Tactics.Effect.tac_repr>

(declare-fun FStar.Tactics.Effect.tac_repr (Term Term) Term)
;;;;;;;;;;;;;;;;a: Type -> wp: FStar.Tactics.Effect.tac_wp_t a -> Type
(declare-fun Tm_arrow_3f33249eca490ba8c990fff289934593 () Term)
(declare-fun FStar.Tactics.Effect.tac_repr@tok () Term)
(declare-fun Non_total_Tm_arrow_f1c83c84180cf82bef38d7d5e86fd13b () Term)

; </end encoding FStar.Tactics.Effect.tac_repr>


; <Start encoding FStar.Tactics.Effect.tac_return_wp>

(declare-fun FStar.Tactics.Effect.tac_return_wp (Term Term) Term)
;;;;;;;;;;;;;;;;x: a -> FStar.Tactics.Effect.tac_wp_t a
(declare-fun Tm_arrow_d45e4c1a61d444b0cb436be42fdd8fff () Term)
(declare-fun FStar.Tactics.Effect.tac_return_wp@tok () Term)



(declare-fun Tm_abs_dc31fb3e44ab0ddfa86f693242e93d52 (Term Term) Term)

; </end encoding FStar.Tactics.Effect.tac_return_wp>


; <Start encoding FStar.Tactics.Effect.tac_return>

(declare-fun FStar.Tactics.Effect.tac_return (Term Term) Term)




;;;;;;;;;;;;;;;;a: Type -> x: a   -> FStar.Tactics.Effect.tac_repr a (fun ps post -> post (FStar.Tactics.Result.Success x ps))
(declare-fun Tm_arrow_db635c9f2281c688360d17fd4457eda0 () Term)
(declare-fun FStar.Tactics.Effect.tac_return@tok () Term)




;;;;;;;;;;;;;;;;Imprecise function encoding
(declare-fun Tm_abs_FStar.Tactics.Effect_169 () Term)

; </end encoding FStar.Tactics.Effect.tac_return>


; <Start encoding FStar.Tactics.Effect.tac_bind_wp>

;;;;;;;;;;;;;;;;_: a -> FStar.Tactics.Effect.tac_wp_t b
(declare-fun Tm_arrow_615c284bf702a1fbef85424e39380642 (Term Term) Term)
(declare-fun FStar.Tactics.Effect.tac_bind_wp (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;wp_f: FStar.Tactics.Effect.tac_wp_t a -> wp_g: (_: a -> FStar.Tactics.Effect.tac_wp_t b)   -> FStar.Tactics.Effect.tac_wp_t b
(declare-fun Tm_arrow_8fd6de47bf2be2d2417a26df2df3e1fa () Term)
(declare-fun FStar.Tactics.Effect.tac_bind_wp@tok () Term)



(declare-fun Tm_abs_898fced1d2b8c3711183b386ac2e3d36 (Term Term Term Term) Term)


(declare-fun Tm_abs_2ec61fc96a9f62d25f52405b172ac2fe (Term Term Term Term) Term)

; </end encoding FStar.Tactics.Effect.tac_bind_wp>


; <Start encoding FStar.Tactics.Effect.tac_wp_compact>

(declare-fun FStar.Tactics.Effect.tac_wp_compact (Term Term) Term)
;;;;;;;;;;;;;;;;a: Type -> wp: FStar.Tactics.Effect.tac_wp_t a -> FStar.Tactics.Effect.tac_wp_t a
(declare-fun Tm_arrow_d630ba03ac64e20998a0b33887db7f1d () Term)
(declare-fun FStar.Tactics.Effect.tac_wp_compact@tok () Term)
;;;;;;;;;;;;;;;;_: FStar.Tactics.Result.__result a -> Prims.logical
(declare-fun Tm_arrow_9d1666c96e89ea2581d8872c34714f9f (Term) Term)







(declare-fun Tm_abs_7f60da2e9178d78cb6d04b441350997a (Term Term Term Term) Term)


;;;;;;;;;;;;;;;;ps: FStar.Tactics.Types.proofstate -> post: (_: FStar.Tactics.Result.__result a -> Prims.logical)   -> Prims.logical
(declare-fun Tm_arrow_821af196f6785e088a5972de7c4f5c6f (Term) Term)
(declare-fun Tm_abs_4cfb319044ec4452ae262dde1882bbe7 (Term Term) Term)

; </end encoding FStar.Tactics.Effect.tac_wp_compact>


; <Start encoding FStar.Tactics.Effect.tac_bind_interleave_begin>

(declare-fun FStar.Tactics.Effect.tac_bind_interleave_begin (Dummy_sort) Term)

; </end encoding FStar.Tactics.Effect.tac_bind_interleave_begin>


; <Skipped />


; <Start encoding FStar.Tactics.Effect.tac_bind>


;;;;;;;;;;;;;;;;x: a -> FStar.Tactics.Effect.tac_repr b (wp_g x)
(declare-fun Tm_arrow_73ffef9431728db285f9b23266829750 (Term Term Term) Term)
(declare-fun FStar.Tactics.Effect.tac_bind (Term Term Term Term Term Term Term Term) Term)












(declare-fun Tm_abs_58244a596eecc164c6f91d5196e4595e (Term Term Term Term Term Term) Term)





(declare-fun Tm_abs_3ee854aab9df128f03f9bc9e24fb4780 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;a: Type ->     b: Type ->     wp_f: FStar.Tactics.Effect.tac_wp_t a ->     wp_g: (_: a -> FStar.Tactics.Effect.tac_wp_t b) ->     r1: FStar.Range.range ->     r2: FStar.Range.range ->     t1: FStar.Tactics.Effect.tac_repr a wp_f ->     t2: (x: a -> FStar.Tactics.Effect.tac_repr b (wp_g x))   -> FStar.Tactics.Effect.tac_repr b       (fun ps post ->           forall (k: (_: FStar.Tactics.Result.__result b -> Type)).             (forall (r: FStar.Tactics.Result.__result b). {:pattern Prims.guard_free (k r)}                 post r ==> k r) ==>             wp_f ps               (fun r ->                   (match r with                     | FStar.Tactics.Result.Success #_ x ps -> wp_g x ps k                     | FStar.Tactics.Result.Failed #_ ex ps -> k (FStar.Tactics.Result.Failed ex ps))                   <:                   Type))
(declare-fun Tm_arrow_7ec375fe29a2981ad899c256e47dfb6d () Term)
(declare-fun FStar.Tactics.Effect.tac_bind@tok () Term)




















;;;;;;;;;;;;;;;;Imprecise function encoding
(declare-fun Tm_abs_FStar.Tactics.Effect_264 () Term)

; </end encoding FStar.Tactics.Effect.tac_bind>


; <Skipped />


; <Start encoding FStar.Tactics.Effect.tac_bind_interleave_end>

(declare-fun FStar.Tactics.Effect.tac_bind_interleave_end (Dummy_sort) Term)

; </end encoding FStar.Tactics.Effect.tac_bind_interleave_end>


; <Start encoding FStar.Tactics.Effect.tac_if_then_else_wp>

(declare-fun FStar.Tactics.Effect.tac_if_then_else_wp (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;wp_then: FStar.Tactics.Effect.tac_wp_t a ->     wp_else: FStar.Tactics.Effect.tac_wp_t a ->     b: Prims.bool   -> FStar.Tactics.Effect.tac_wp_t a
(declare-fun Tm_arrow_0d888f0d0310e06a23a044b7487ca9a3 () Term)
(declare-fun FStar.Tactics.Effect.tac_if_then_else_wp@tok () Term)


;;;;;;;;;;;;;;;;ps: FStar.Tactics.Types.proofstate -> post: (_: FStar.Tactics.Result.__result a -> Type)   -> Prims.logical
(declare-fun Tm_arrow_278078e1979c7e1c7e2de8246a69a9dd (Term) Term)
(declare-fun Tm_abs_463338f429e17d448d9b75942c1555ef (Term Term Term Term) Term)

; </end encoding FStar.Tactics.Effect.tac_if_then_else_wp>


; <Start encoding FStar.Tactics.Effect.tac_if_then_else>

(declare-fun FStar.Tactics.Effect.tac_if_then_else (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;a: Type ->     wp_then: FStar.Tactics.Effect.tac_wp_t a ->     wp_else: FStar.Tactics.Effect.tac_wp_t a ->     f: FStar.Tactics.Effect.tac_repr a wp_then ->     g: FStar.Tactics.Effect.tac_repr a wp_else ->     b: Prims.bool   -> Type
(declare-fun Tm_arrow_36fb4b5a399369ef643849e96611ebec () Term)
(declare-fun FStar.Tactics.Effect.tac_if_then_else@tok () Term)








(declare-fun Tm_abs_ca3c44facb4ba4185f0435fb36e67ba5 (Term Term Term Term Term Term) Term)



(declare-fun Tm_abs_620461c79d51aa9e6916b721852675b8 (Term Term Term Term) Term)

; </end encoding FStar.Tactics.Effect.tac_if_then_else>


; <Start encoding FStar.Tactics.Effect.tac_subcomp>


(declare-fun FStar.Tactics.Effect.tac_subcomp (Term Term Term Term) Term)
(declare-fun Tm_refine_9688035851d5c5523a806a1df19cb706 (Term Term) Term)

;;;;;;;;;;;;;;;;a: Type ->     wp_f: FStar.Tactics.Effect.tac_wp_t a ->     wp_g: FStar.Tactics.Effect.tac_wp_t a ->     f: FStar.Tactics.Effect.tac_repr a wp_f   -> Prims.Pure (FStar.Tactics.Effect.tac_repr a wp_g)
(declare-fun Tm_arrow_788e1b2961b9ae25259f47335ddd186b () Term)
(declare-fun FStar.Tactics.Effect.tac_subcomp@tok () Term)


; </end encoding FStar.Tactics.Effect.tac_subcomp>


; <Skipped FStar.Tactics.Effect.TAC/>


; <Skipped FStar.Tactics.Effect.TacH/>


; <Skipped FStar.Tactics.Effect.Tac/>


; <Skipped FStar.Tactics.Effect.TacS/>


; <Skipped FStar.Tactics.Effect.TacF/>


; <Start encoding FStar.Tactics.Effect.lift_div_tac_wp>

(declare-fun FStar.Tactics.Effect.lift_div_tac_wp (Term Term) Term)
;;;;;;;;;;;;;;;;wp: Prims.pure_wp a -> FStar.Tactics.Effect.tac_wp_t a
(declare-fun Tm_arrow_756b2c443a872ea2d839224a3f915862 () Term)
(declare-fun FStar.Tactics.Effect.lift_div_tac_wp@tok () Term)


(declare-fun Tm_abs_7959fb2584d24c5d132481891ec37d35 (Term Term Term) Term)

;;;;;;;;;;;;;;;;ps: FStar.Tactics.Types.proofstate -> p: (_: FStar.Tactics.Result.__result a -> Type)   -> Prims.pure_pre
(declare-fun Tm_arrow_b92e6f01dff838e803e095d62245bc97 (Term) Term)
(declare-fun Tm_abs_07546604f955e818deb9865b95ca5af1 (Term Term) Term)

; </end encoding FStar.Tactics.Effect.lift_div_tac_wp>


; <Start encoding FStar.Tactics.Effect.lift_div_tac>

(declare-fun Non_total_Tm_arrow_da9712c41bd4800828fa87c1bc605521 () Term)
(declare-fun FStar.Tactics.Effect.lift_div_tac (Term Term Term) Term)







;;;;;;;;;;;;;;;;a: Type -> wp: Prims.pure_wp a -> f: (_: (Prims.unit <: Type) -> FStar.Pervasives.DIV a)   -> FStar.Tactics.Effect.tac_repr a       (fun ps p -> wp (fun x -> p (FStar.Tactics.Result.Success x ps)))
(declare-fun Tm_arrow_c9c50880e578c545efcdf57580fcf6ed () Term)
(declare-fun FStar.Tactics.Effect.lift_div_tac@tok () Term)







;;;;;;;;;;;;;;;;Imprecise function encoding
(declare-fun Tm_abs_FStar.Tactics.Effect_332 () Term)

; </end encoding FStar.Tactics.Effect.lift_div_tac>


; <Skipped />


; <Start encoding FStar.Tactics.Effect.get>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Effect.get (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Effect.get@tok () Term)

; </end encoding FStar.Tactics.Effect.get>


; <Start encoding FStar.Tactics.Effect.raise>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Effect.raise (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Effect.raise@tok () Term)

; </end encoding FStar.Tactics.Effect.raise>


; <Start encoding FStar.Tactics.Effect.with_tactic>

(declare-fun Non_total_Tm_arrow_b5fb269338aa8fbf8993af346cd57198 () Term)
(declare-fun FStar.Tactics.Effect.with_tactic (Term Term) Term)

;;;;;;;;;;;;;;;;t: (_: Prims.unit -> FStar.Tactics.Effect.Tac Prims.unit) -> p: Type -> Type
(declare-fun Tm_arrow_bc891c4560763ac350ffcac5bbd7f4b9 () Term)
(declare-fun FStar.Tactics.Effect.with_tactic@tok () Term)

; </end encoding FStar.Tactics.Effect.with_tactic>


; <Start encoding FStar.Tactics.Effect.rewrite_with_tactic>


(declare-fun FStar.Tactics.Effect.rewrite_with_tactic (Term Term Term) Term)

;;;;;;;;;;;;;;;;t: (_: Prims.unit -> FStar.Tactics.Effect.Tac Prims.unit) -> x: a -> a
(declare-fun Tm_arrow_edb736e60db7295fa7ac6e07858fd62c () Term)
(declare-fun FStar.Tactics.Effect.rewrite_with_tactic@tok () Term)

; </end encoding FStar.Tactics.Effect.rewrite_with_tactic>


; <Start encoding FStar.Tactics.Effect.synth_by_tactic>


(declare-fun FStar.Tactics.Effect.synth_by_tactic (Term Term) Term)

;;;;;;;;;;;;;;;;_: (_: Prims.unit -> FStar.Tactics.Effect.Tac Prims.unit) -> t
(declare-fun Tm_arrow_6d1a363150cbbfa38f04b994ff0fb5c5 () Term)
(declare-fun FStar.Tactics.Effect.synth_by_tactic@tok () Term)

; </end encoding FStar.Tactics.Effect.synth_by_tactic>


; <Start encoding FStar.Tactics.Effect.assert_by_tactic>


(declare-fun FStar.Tactics.Effect.assert_by_tactic (Term Term) Term)


;;;;;;;;;;;;;;;;p: Type -> t: (_: Prims.unit -> FStar.Tactics.Effect.Tac Prims.unit) -> Prims.Pure Prims.unit
(declare-fun Tm_arrow_ed84c5a2d4a2e8e6494ee5fac39d8310 () Term)
(declare-fun FStar.Tactics.Effect.assert_by_tactic@tok () Term)


; </end encoding FStar.Tactics.Effect.assert_by_tactic>


; <Start encoding FStar.Tactics.Effect.by_tactic_seman>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Effect.by_tactic_seman (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Effect.by_tactic_seman@tok () Term)

; </end encoding FStar.Tactics.Effect.by_tactic_seman>


; <Start encoding FStar.Tactics.Effect.assume_safe>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Effect.assume_safe (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Effect.assume_safe@tok () Term)

; </end encoding FStar.Tactics.Effect.assume_safe>


; <Start encoding FStar.Tactics.Effect.tac>

(declare-fun FStar.Tactics.Effect.tac (Term Term) Term)

(declare-fun FStar.Tactics.Effect.tac@tok () Term)
(declare-fun Non_total_Tm_arrow_87968cfe37cd2464957eabbcab7f7f95 () Term)

; </end encoding FStar.Tactics.Effect.tac>


; <Start encoding FStar.Tactics.Effect.tactic>

(declare-fun FStar.Tactics.Effect.tactic (Term) Term)

(declare-fun FStar.Tactics.Effect.tactic@tok () Term)

; </end encoding FStar.Tactics.Effect.tactic>


; <Start encoding FStar.Tactics.Effect.preprocess_with>

(declare-fun Non_total_Tm_arrow_e861e04d3c5ee51752cacbddfd00ad24 () Term)
(declare-fun FStar.Tactics.Effect.preprocess_with (Term) Term)

;;;;;;;;;;;;;;;;tau: (_: FStar.Reflection.Types.term -> FStar.Tactics.Effect.Tac FStar.Reflection.Types.term)   -> Prims.unit
(declare-fun Tm_arrow_30fd81cbad352db2f0c1f5e220225f48 () Term)
(declare-fun FStar.Tactics.Effect.preprocess_with@tok () Term)

; </end encoding FStar.Tactics.Effect.preprocess_with>


; <Start encoding FStar.Tactics.Effect.postprocess_with>


(declare-fun FStar.Tactics.Effect.postprocess_with (Term) Term)

;;;;;;;;;;;;;;;;tau: (_: Prims.unit -> FStar.Tactics.Effect.Tac Prims.unit) -> Prims.unit
(declare-fun Tm_arrow_9d657ced30ddbb7b775798b7adec5977 () Term)
(declare-fun FStar.Tactics.Effect.postprocess_with@tok () Term)

; </end encoding FStar.Tactics.Effect.postprocess_with>


; <Start encoding FStar.Tactics.Effect.postprocess_for_extraction_with>


(declare-fun FStar.Tactics.Effect.postprocess_for_extraction_with (Term) Term)


(declare-fun FStar.Tactics.Effect.postprocess_for_extraction_with@tok () Term)

; </end encoding FStar.Tactics.Effect.postprocess_for_extraction_with>


; <Skipped />


; <Start encoding FStar.Tactics.Effect.unfold_with_tactic>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Effect.unfold_with_tactic (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Effect.unfold_with_tactic@tok () Term)

; </end encoding FStar.Tactics.Effect.unfold_with_tactic>


; <Start encoding FStar.Tactics.Effect.unfold_rewrite_with_tactic>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Effect.unfold_rewrite_with_tactic (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Effect.unfold_rewrite_with_tactic@tok () Term)

; </end encoding FStar.Tactics.Effect.unfold_rewrite_with_tactic>


; End Externals for interface FStar.Tactics.Effect


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End interface FStar.Tactics.Effect (318 decls; total size 17410)

;;; Start module FStar.Exn

; Externals for module FStar.Exn


; <Start encoding FStar.Exn.raise>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Exn.raise (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Exn.raise@tok () Term)

; </end encoding FStar.Exn.raise>


; End Externals for module FStar.Exn


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End module FStar.Exn (7 decls; total size 1423)

;;; Start interface FStar.Set

; Externals for interface FStar.Set


; <Skipped />


; <Start encoding FStar.Set.set>

(declare-fun FStar.Set.set (Term) Term)

(declare-fun FStar.Set.set@tok () Term)

; </end encoding FStar.Set.set>


; <Start encoding FStar.Set.equal>

(declare-fun FStar.Set.equal (Term Term Term) Term)
;;;;;;;;;;;;;;;;s1: FStar.Set.set a -> s2: FStar.Set.set a -> Type
(declare-fun Tm_arrow_3c4f6e4cf547bd34ec8e06fa6c99957f () Term)
(declare-fun FStar.Set.equal@tok () Term)

; </end encoding FStar.Set.equal>


; <Start encoding FStar.Set.mem>

(declare-fun FStar.Set.mem (Term Term Term) Term)
;;;;;;;;;;;;;;;;x: a -> s: FStar.Set.set a -> Prims.bool
(declare-fun Tm_arrow_3622740f6f31d7fd022d9da9e7023a5e () Term)
(declare-fun FStar.Set.mem@tok () Term)

; </end encoding FStar.Set.mem>


; <Start encoding FStar.Set.empty>

(declare-fun FStar.Set.empty (Term) Term)
;;;;;;;;;;;;;;;;FStar.Set.set a
(declare-fun Tm_arrow_8126140804a823c0abf765b538511539 () Term)
(declare-fun FStar.Set.empty@tok () Term)

; </end encoding FStar.Set.empty>


; <Start encoding FStar.Set.singleton>

(declare-fun FStar.Set.singleton (Term Term) Term)
;;;;;;;;;;;;;;;;x: a -> FStar.Set.set a
(declare-fun Tm_arrow_764304f899737575fb0645eff5d55885 () Term)
(declare-fun FStar.Set.singleton@tok () Term)

; </end encoding FStar.Set.singleton>


; <Start encoding FStar.Set.union>

(declare-fun FStar.Set.union (Term Term Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Set.set a -> _: FStar.Set.set a -> FStar.Set.set a
(declare-fun Tm_arrow_7571f855c31e3c10cb35bbdc0f3ae878 () Term)
(declare-fun FStar.Set.union@tok () Term)

; </end encoding FStar.Set.union>


; <Start encoding FStar.Set.intersect>

(declare-fun FStar.Set.intersect (Term Term Term) Term)

(declare-fun FStar.Set.intersect@tok () Term)

; </end encoding FStar.Set.intersect>


; <Start encoding FStar.Set.complement>

(declare-fun FStar.Set.complement (Term Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Set.set a -> FStar.Set.set a
(declare-fun Tm_arrow_4a14af1f2d9ff62069ebb44d0d1980f6 () Term)
(declare-fun FStar.Set.complement@tok () Term)

; </end encoding FStar.Set.complement>


; <Start encoding FStar.Set.intension>


(declare-fun FStar.Set.intension (Term Term) Term)

;;;;;;;;;;;;;;;;_: (_: a -> Prims.bool) -> Prims.GTot (FStar.Set.set a)
(declare-fun Tm_ghost_arrow_04e42a5c0c55c36964ab6333a076e29e () Term)
(declare-fun FStar.Set.intension@tok () Term)

; </end encoding FStar.Set.intension>


; <Start encoding FStar.Set.disjoint>

(declare-fun FStar.Set.disjoint (Term Term Term) Term)

(declare-fun FStar.Set.disjoint@tok () Term)

; </end encoding FStar.Set.disjoint>


; <Start encoding FStar.Set.subset>

(declare-fun FStar.Set.subset (Term Term Term) Term)
;;;;;;;;;;;;;;;;s1: FStar.Set.set a -> s2: FStar.Set.set a -> Prims.logical
(declare-fun Tm_arrow_9a1bfd7a415bf0250a3dd161144f27fa () Term)
(declare-fun FStar.Set.subset@tok () Term)

(declare-fun Tm_abs_b994f65c6ead01769958409fcca4789b (Term Term Term) Term)

; </end encoding FStar.Set.subset>


; <Start encoding FStar.Set.add>

(declare-fun FStar.Set.add (Term Term Term) Term)
;;;;;;;;;;;;;;;;x: a -> s: FStar.Set.set a -> FStar.Set.set a
(declare-fun Tm_arrow_3e561cbcf9b0a4b95f6e5d77760b40db () Term)
(declare-fun FStar.Set.add@tok () Term)

; </end encoding FStar.Set.add>


; <Start encoding FStar.Set.remove>

(declare-fun FStar.Set.remove (Term Term Term) Term)

(declare-fun FStar.Set.remove@tok () Term)

; </end encoding FStar.Set.remove>


; <Start encoding FStar.Set.mem_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_empty@tok () Term)

; </end encoding FStar.Set.mem_empty>


; <Start encoding FStar.Set.mem_singleton>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_singleton (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_singleton@tok () Term)

; </end encoding FStar.Set.mem_singleton>


; <Start encoding FStar.Set.mem_union>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_union (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_union@tok () Term)

; </end encoding FStar.Set.mem_union>


; <Start encoding FStar.Set.mem_intersect>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_intersect (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_intersect@tok () Term)

; </end encoding FStar.Set.mem_intersect>


; <Start encoding FStar.Set.mem_complement>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_complement (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_complement@tok () Term)

; </end encoding FStar.Set.mem_complement>


; <Start encoding FStar.Set.mem_intension>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_intension (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_intension@tok () Term)

; </end encoding FStar.Set.mem_intension>


; <Start encoding FStar.Set.mem_subset>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_subset (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_subset@tok () Term)

; </end encoding FStar.Set.mem_subset>


; <Start encoding FStar.Set.subset_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.subset_mem (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.subset_mem@tok () Term)

; </end encoding FStar.Set.subset_mem>


; <Start encoding FStar.Set.lemma_equal_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.lemma_equal_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.lemma_equal_intro@tok () Term)

; </end encoding FStar.Set.lemma_equal_intro>


; <Start encoding FStar.Set.lemma_equal_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.lemma_equal_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.lemma_equal_elim@tok () Term)

; </end encoding FStar.Set.lemma_equal_elim>


; <Start encoding FStar.Set.lemma_equal_refl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.lemma_equal_refl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.lemma_equal_refl@tok () Term)

; </end encoding FStar.Set.lemma_equal_refl>


; <Start encoding FStar.Set.disjoint_not_in_both>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.disjoint_not_in_both (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.disjoint_not_in_both@tok () Term)

; </end encoding FStar.Set.disjoint_not_in_both>


; <Skipped />


; <Start encoding FStar.Set.as_set'>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Set.as_set_.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Set.as_set_.fuel_instrumented_token () Term)
(declare-fun FStar.Set.as_set_ (Term Term) Term)
(declare-fun FStar.Set.as_set_@tok () Term)
;;;;;;;;;;;;;;;;l: Prims.list a -> FStar.Set.set a
(declare-fun Tm_arrow_37c32948884378803a50151abdb3cb09 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Set.as_set'; Namespace FStar.Set
(assert (! 
;; def=FStar.Set.fsti(125,8-125,15); use=FStar.Set.fsti(125,8-125,15)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.Set.as_set_.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.Set.as_set_.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.Set.as_set_.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.Set.as_set_.fuel_instrumented))

:named @fuel_irrelevance_FStar.Set.as_set_.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Set.as_set'; Namespace FStar.Set
(assert (! 
;; def=FStar.Set.fsti(125,8-125,15); use=FStar.Set.fsti(125,8-125,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Set.as_set_ @x0
@x1)
(FStar.Set.as_set_.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.Set.as_set_ @x0
@x1))
:qid @fuel_correspondence_FStar.Set.as_set_.fuel_instrumented))

:named @fuel_correspondence_FStar.Set.as_set_.fuel_instrumented))

; </end encoding FStar.Set.as_set'>


; <Start encoding FStar.Set.as_set>

(declare-fun FStar.Set.as_set (Term Term) Term)

(declare-fun FStar.Set.as_set@tok () Term)

; </end encoding FStar.Set.as_set>


; <Start encoding FStar.Set.lemma_disjoint_subset>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.lemma_disjoint_subset (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.lemma_disjoint_subset@tok () Term)

; </end encoding FStar.Set.lemma_disjoint_subset>


; End Externals for interface FStar.Set


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End interface FStar.Set (140 decls; total size 10541)

;;; Start interface FStar.Monotonic.Witnessed

; Externals for interface FStar.Monotonic.Witnessed


; <Start encoding FStar.Monotonic.Witnessed.witnessed>


(declare-fun FStar.Monotonic.Witnessed.witnessed (Term Term Term) Term)

;;;;;;;;;;;;;;;;rel: FStar.Preorder.preorder state -> p: (_: state -> Type) -> Type
(declare-fun Tm_arrow_d588830826b7a1087c9fd83547a14841 () Term)
(declare-fun FStar.Monotonic.Witnessed.witnessed@tok () Term)

; </end encoding FStar.Monotonic.Witnessed.witnessed>


; <Start encoding FStar.Monotonic.Witnessed.lemma_witnessed_weakening>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_weakening (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_weakening@tok () Term)

; </end encoding FStar.Monotonic.Witnessed.lemma_witnessed_weakening>


; <Start encoding FStar.Monotonic.Witnessed.lemma_witnessed_constant>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_constant (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_constant@tok () Term)

; </end encoding FStar.Monotonic.Witnessed.lemma_witnessed_constant>


; <Start encoding FStar.Monotonic.Witnessed.lemma_witnessed_nested>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_nested (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_nested@tok () Term)

; </end encoding FStar.Monotonic.Witnessed.lemma_witnessed_nested>


; <Start encoding FStar.Monotonic.Witnessed.lemma_witnessed_and>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_and (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_and@tok () Term)

; </end encoding FStar.Monotonic.Witnessed.lemma_witnessed_and>


; <Start encoding FStar.Monotonic.Witnessed.lemma_witnessed_or>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_or (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_or@tok () Term)

; </end encoding FStar.Monotonic.Witnessed.lemma_witnessed_or>


; <Start encoding FStar.Monotonic.Witnessed.lemma_witnessed_impl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_impl (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_impl@tok () Term)

; </end encoding FStar.Monotonic.Witnessed.lemma_witnessed_impl>


; <Start encoding FStar.Monotonic.Witnessed.lemma_witnessed_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_forall (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_forall@tok () Term)

; </end encoding FStar.Monotonic.Witnessed.lemma_witnessed_forall>


; <Start encoding FStar.Monotonic.Witnessed.lemma_witnessed_exists>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_exists (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_exists@tok () Term)

; </end encoding FStar.Monotonic.Witnessed.lemma_witnessed_exists>


; End Externals for interface FStar.Monotonic.Witnessed


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End interface FStar.Monotonic.Witnessed (42 decls; total size 4949)

;;; Start interface FStar.TSet

; Externals for interface FStar.TSet


; <Skipped />


; <Start encoding FStar.TSet.set>

(declare-fun FStar.TSet.set (Term) Term)

(declare-fun FStar.TSet.set@tok () Term)

; </end encoding FStar.TSet.set>


; <Start encoding FStar.TSet.equal>

(declare-fun FStar.TSet.equal (Term Term Term) Term)
;;;;;;;;;;;;;;;;s1: FStar.TSet.set a -> s2: FStar.TSet.set a -> Type
(declare-fun Tm_arrow_a884d17a435ad7c4eff639e843c2e915 () Term)
(declare-fun FStar.TSet.equal@tok () Term)

; </end encoding FStar.TSet.equal>


; <Start encoding FStar.TSet.mem>

(declare-fun FStar.TSet.mem (Term Term Term) Term)
;;;;;;;;;;;;;;;;_: 'a -> _: FStar.TSet.set 'a -> Type
(declare-fun Tm_arrow_873fce3a2d3f7456c376d64b089ed4d6 () Term)
(declare-fun FStar.TSet.mem@tok () Term)

; </end encoding FStar.TSet.mem>


; <Start encoding FStar.TSet.empty>

(declare-fun FStar.TSet.empty (Term) Term)
;;;;;;;;;;;;;;;;FStar.TSet.set a
(declare-fun Tm_arrow_7479bde908a771f633d91cf1e6159164 () Term)
(declare-fun FStar.TSet.empty@tok () Term)

; </end encoding FStar.TSet.empty>


; <Start encoding FStar.TSet.singleton>

(declare-fun FStar.TSet.singleton (Term Term) Term)
;;;;;;;;;;;;;;;;x: a -> FStar.TSet.set a
(declare-fun Tm_arrow_efd4130c737a1c63982cd396443713d5 () Term)
(declare-fun FStar.TSet.singleton@tok () Term)

; </end encoding FStar.TSet.singleton>


; <Start encoding FStar.TSet.union>

(declare-fun FStar.TSet.union (Term Term Term) Term)
;;;;;;;;;;;;;;;;x: FStar.TSet.set a -> y: FStar.TSet.set a -> FStar.TSet.set a
(declare-fun Tm_arrow_3de58fd829d33d9d3ee6c709e8528481 () Term)
(declare-fun FStar.TSet.union@tok () Term)

; </end encoding FStar.TSet.union>


; <Start encoding FStar.TSet.intersect>

(declare-fun FStar.TSet.intersect (Term Term Term) Term)

(declare-fun FStar.TSet.intersect@tok () Term)

; </end encoding FStar.TSet.intersect>


; <Start encoding FStar.TSet.complement>

(declare-fun FStar.TSet.complement (Term Term) Term)
;;;;;;;;;;;;;;;;x: FStar.TSet.set a -> FStar.TSet.set a
(declare-fun Tm_arrow_0bfcc001675666a8c38e138bf5ac4ee8 () Term)
(declare-fun FStar.TSet.complement@tok () Term)

; </end encoding FStar.TSet.complement>


; <Start encoding FStar.TSet.subset>

(declare-fun FStar.TSet.subset (Term Term Term) Term)

(declare-fun FStar.TSet.subset@tok () Term)

(declare-fun Tm_abs_fe63068de0c50c38f701457141c25b46 (Term Term Term) Term)

; </end encoding FStar.TSet.subset>


; <Start encoding FStar.TSet.mem_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.mem_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.mem_empty@tok () Term)

; </end encoding FStar.TSet.mem_empty>


; <Start encoding FStar.TSet.mem_singleton>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.mem_singleton (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.mem_singleton@tok () Term)

; </end encoding FStar.TSet.mem_singleton>


; <Start encoding FStar.TSet.mem_union>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.mem_union (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.mem_union@tok () Term)

; </end encoding FStar.TSet.mem_union>


; <Start encoding FStar.TSet.mem_intersect>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.mem_intersect (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.mem_intersect@tok () Term)

; </end encoding FStar.TSet.mem_intersect>


; <Start encoding FStar.TSet.mem_complement>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.mem_complement (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.mem_complement@tok () Term)

; </end encoding FStar.TSet.mem_complement>


; <Start encoding FStar.TSet.mem_subset>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.mem_subset (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.mem_subset@tok () Term)

; </end encoding FStar.TSet.mem_subset>


; <Start encoding FStar.TSet.subset_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.subset_mem (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.subset_mem@tok () Term)

; </end encoding FStar.TSet.subset_mem>


; <Start encoding FStar.TSet.lemma_equal_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.lemma_equal_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.lemma_equal_intro@tok () Term)

; </end encoding FStar.TSet.lemma_equal_intro>


; <Start encoding FStar.TSet.lemma_equal_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.lemma_equal_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.lemma_equal_elim@tok () Term)

; </end encoding FStar.TSet.lemma_equal_elim>


; <Start encoding FStar.TSet.lemma_equal_refl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.lemma_equal_refl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.lemma_equal_refl@tok () Term)

; </end encoding FStar.TSet.lemma_equal_refl>


; <Start encoding FStar.TSet.tset_of_set>

(declare-fun FStar.TSet.tset_of_set (Term Term) Term)
;;;;;;;;;;;;;;;;s: FStar.Set.set a -> FStar.TSet.set a
(declare-fun Tm_arrow_3cbed28ab0f3b752d3656db155a3e9f3 () Term)
(declare-fun FStar.TSet.tset_of_set@tok () Term)

; </end encoding FStar.TSet.tset_of_set>


; <Start encoding FStar.TSet.lemma_mem_tset_of_set>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.lemma_mem_tset_of_set (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.lemma_mem_tset_of_set@tok () Term)

; </end encoding FStar.TSet.lemma_mem_tset_of_set>


; <Start encoding FStar.TSet.filter>


(declare-fun FStar.TSet.filter (Term Term Term) Term)

;;;;;;;;;;;;;;;;f: (_: a -> Type) -> s: FStar.TSet.set a -> FStar.TSet.set a
(declare-fun Tm_arrow_1a001071ad6106aec2470a87b194954c () Term)
(declare-fun FStar.TSet.filter@tok () Term)

; </end encoding FStar.TSet.filter>


; <Start encoding FStar.TSet.lemma_mem_filter>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.lemma_mem_filter (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.lemma_mem_filter@tok () Term)


; </end encoding FStar.TSet.lemma_mem_filter>


; <Start encoding FStar.TSet.map>


(declare-fun FStar.TSet.map (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;f: (_: a -> b) -> s: FStar.TSet.set a -> FStar.TSet.set b
(declare-fun Tm_arrow_8af532fc458491b78200f8bcb1361e90 () Term)
(declare-fun FStar.TSet.map@tok () Term)

; </end encoding FStar.TSet.map>


; <Start encoding FStar.TSet.lemma_mem_map>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.lemma_mem_map (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.lemma_mem_map@tok () Term)


; </end encoding FStar.TSet.lemma_mem_map>


; <Skipped />


; <Start encoding FStar.TSet.as_set'>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.TSet.as_set_.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.TSet.as_set_.fuel_instrumented_token () Term)
(declare-fun FStar.TSet.as_set_ (Term Term) Term)
(declare-fun FStar.TSet.as_set_@tok () Term)
;;;;;;;;;;;;;;;;l: Prims.list a -> FStar.TSet.set a
(declare-fun Tm_arrow_b205d25f357c7c6022ebceb6497753f3 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.TSet.as_set'; Namespace FStar.TSet
(assert (! 
;; def=FStar.TSet.fsti(118,8-118,15); use=FStar.TSet.fsti(118,8-118,15)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.TSet.as_set_.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.TSet.as_set_.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.TSet.as_set_.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.TSet.as_set_.fuel_instrumented))

:named @fuel_irrelevance_FStar.TSet.as_set_.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.TSet.as_set'; Namespace FStar.TSet
(assert (! 
;; def=FStar.TSet.fsti(118,8-118,15); use=FStar.TSet.fsti(118,8-118,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.TSet.as_set_ @x0
@x1)
(FStar.TSet.as_set_.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.TSet.as_set_ @x0
@x1))
:qid @fuel_correspondence_FStar.TSet.as_set_.fuel_instrumented))

:named @fuel_correspondence_FStar.TSet.as_set_.fuel_instrumented))

; </end encoding FStar.TSet.as_set'>


; End Externals for interface FStar.TSet


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End interface FStar.TSet (134 decls; total size 10328)

;;; Start interface FStar.Monotonic.Heap

; Externals for interface FStar.Monotonic.Heap


; <Start encoding FStar.Monotonic.Heap.set>

(declare-fun FStar.Monotonic.Heap.set (Term) Term)

(declare-fun FStar.Monotonic.Heap.set@tok () Term)

; </end encoding FStar.Monotonic.Heap.set>


; <Start encoding FStar.Monotonic.Heap.tset>

(declare-fun FStar.Monotonic.Heap.tset (Term) Term)

(declare-fun FStar.Monotonic.Heap.tset@tok () Term)

; </end encoding FStar.Monotonic.Heap.tset>


; <Start encoding FStar.Monotonic.Heap.heap>

(declare-fun FStar.Monotonic.Heap.heap () Term)

; </end encoding FStar.Monotonic.Heap.heap>


; <Start encoding FStar.Monotonic.Heap.equal>

(declare-fun FStar.Monotonic.Heap.equal (Term Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Monotonic.Heap.heap -> _: FStar.Monotonic.Heap.heap -> Type
(declare-fun Tm_arrow_22ea7bfd67f4919a6b048e3792f6aac6 () Term)
(declare-fun FStar.Monotonic.Heap.equal@tok () Term)

; </end encoding FStar.Monotonic.Heap.equal>


; <Start encoding FStar.Monotonic.Heap.equal_extensional>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.equal_extensional (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.equal_extensional@tok () Term)

; </end encoding FStar.Monotonic.Heap.equal_extensional>


; <Start encoding FStar.Monotonic.Heap.emp>

(declare-fun FStar.Monotonic.Heap.emp (Dummy_sort) Term)

; </end encoding FStar.Monotonic.Heap.emp>


; <Start encoding FStar.Monotonic.Heap.next_addr>

(declare-fun FStar.Monotonic.Heap.next_addr (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Monotonic.Heap.heap -> Prims.GTot Prims.pos
(declare-fun Tm_ghost_arrow_5f9b7d66eebaf7d00b1d1c8781e1bd33 () Term)
(declare-fun FStar.Monotonic.Heap.next_addr@tok () Term)

; </end encoding FStar.Monotonic.Heap.next_addr>


; <Start encoding FStar.Monotonic.Heap.core_mref>

(declare-fun FStar.Monotonic.Heap.core_mref (Term) Term)

(declare-fun FStar.Monotonic.Heap.core_mref@tok () Term)

; </end encoding FStar.Monotonic.Heap.core_mref>


; <Start encoding FStar.Monotonic.Heap.mref>

(declare-fun FStar.Monotonic.Heap.mref (Term Term) Term)
;;;;;;;;;;;;;;;;a: Type -> rel: FStar.Preorder.preorder a -> Type
(declare-fun Tm_arrow_5bf0606d629ecb30adc0c556c248cd8a () Term)
(declare-fun FStar.Monotonic.Heap.mref@tok () Term)

; </end encoding FStar.Monotonic.Heap.mref>


; <Start encoding FStar.Monotonic.Heap.addr_of>

(declare-fun FStar.Monotonic.Heap.addr_of (Term Term Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Monotonic.Heap.mref a rel -> Prims.GTot Prims.pos
(declare-fun Tm_ghost_arrow_3e3805ca9fb6a056cde481ca6e6b2666 () Term)
(declare-fun FStar.Monotonic.Heap.addr_of@tok () Term)

; </end encoding FStar.Monotonic.Heap.addr_of>


; <Start encoding FStar.Monotonic.Heap.is_mm>

(declare-fun FStar.Monotonic.Heap.is_mm (Term Term Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Monotonic.Heap.mref a rel -> Prims.GTot Prims.bool
(declare-fun Tm_ghost_arrow_8181c56eb62b6f09010fd19362ec557f () Term)
(declare-fun FStar.Monotonic.Heap.is_mm@tok () Term)

; </end encoding FStar.Monotonic.Heap.is_mm>


; <Start encoding FStar.Monotonic.Heap.compare_addrs>

(declare-fun FStar.Monotonic.Heap.compare_addrs (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;r1: FStar.Monotonic.Heap.mref a rel1 -> r2: FStar.Monotonic.Heap.mref b rel2   -> Prims.GTot Prims.bool
(declare-fun Tm_ghost_arrow_d9620af24825960ed2af7182687876b1 () Term)
(declare-fun FStar.Monotonic.Heap.compare_addrs@tok () Term)

; </end encoding FStar.Monotonic.Heap.compare_addrs>


; <Start encoding FStar.Monotonic.Heap.contains>

(declare-fun FStar.Monotonic.Heap.contains (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Monotonic.Heap.heap -> _: FStar.Monotonic.Heap.mref a rel -> Type
(declare-fun Tm_arrow_78eae2771402d9ca8cd20442a69b19a1 () Term)
(declare-fun FStar.Monotonic.Heap.contains@tok () Term)

; </end encoding FStar.Monotonic.Heap.contains>


; <Start encoding FStar.Monotonic.Heap.addr_unused_in>

(declare-fun FStar.Monotonic.Heap.addr_unused_in (Term Term) Term)
;;;;;;;;;;;;;;;;_: Prims.nat -> _: FStar.Monotonic.Heap.heap -> Type
(declare-fun Tm_arrow_5e652491869ddd6d9add00477fe250d4 () Term)
(declare-fun FStar.Monotonic.Heap.addr_unused_in@tok () Term)

; </end encoding FStar.Monotonic.Heap.addr_unused_in>


; <Start encoding FStar.Monotonic.Heap.not_addr_unused_in_nullptr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.not_addr_unused_in_nullptr (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.not_addr_unused_in_nullptr@tok () Term)

; </end encoding FStar.Monotonic.Heap.not_addr_unused_in_nullptr>


; <Start encoding FStar.Monotonic.Heap.unused_in>

(declare-fun FStar.Monotonic.Heap.unused_in (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Monotonic.Heap.mref a rel -> _: FStar.Monotonic.Heap.heap -> Type
(declare-fun Tm_arrow_63db68eb9811874d358b39a3a3a594c0 () Term)
(declare-fun FStar.Monotonic.Heap.unused_in@tok () Term)

; </end encoding FStar.Monotonic.Heap.unused_in>


; <Start encoding FStar.Monotonic.Heap.fresh>

(declare-fun FStar.Monotonic.Heap.fresh (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;r: FStar.Monotonic.Heap.mref a rel -> h0: FStar.Monotonic.Heap.heap -> h1: FStar.Monotonic.Heap.heap   -> Prims.logical
(declare-fun Tm_arrow_516fb5369267798913835a1aff4b7fe3 () Term)
(declare-fun FStar.Monotonic.Heap.fresh@tok () Term)

; </end encoding FStar.Monotonic.Heap.fresh>


; <Start encoding FStar.Monotonic.Heap.only_t>

(declare-fun FStar.Monotonic.Heap.only_t (Term Term Term) Term)
;;;;;;;;;;;;;;;;x: FStar.Monotonic.Heap.mref a rel -> Prims.GTot (FStar.Monotonic.Heap.tset Prims.nat)
(declare-fun Tm_ghost_arrow_b5e045c084fdae187553cafe5f60138d () Term)
(declare-fun FStar.Monotonic.Heap.only_t@tok () Term)

; </end encoding FStar.Monotonic.Heap.only_t>


; <Start encoding FStar.Monotonic.Heap.only>

(declare-fun FStar.Monotonic.Heap.only (Term Term Term) Term)
;;;;;;;;;;;;;;;;x: FStar.Monotonic.Heap.mref a rel -> Prims.GTot (FStar.Monotonic.Heap.set Prims.nat)
(declare-fun Tm_ghost_arrow_fe5c1d63e245bf0ffcacbc885af17fc3 () Term)
(declare-fun FStar.Monotonic.Heap.only@tok () Term)

; </end encoding FStar.Monotonic.Heap.only>


; <Start encoding FStar.Monotonic.Heap.op_Hat_Plus_Plus>

(declare-fun FStar.Monotonic.Heap.op_Hat_Plus_Plus (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;r: FStar.Monotonic.Heap.mref a rel -> s: FStar.Monotonic.Heap.set Prims.nat   -> Prims.GTot (FStar.Monotonic.Heap.set Prims.nat)
(declare-fun Tm_ghost_arrow_21e6803beb51b9a6b0e4cc69a41b426b () Term)
(declare-fun FStar.Monotonic.Heap.op_Hat_Plus_Plus@tok () Term)

; </end encoding FStar.Monotonic.Heap.op_Hat_Plus_Plus>


; <Start encoding FStar.Monotonic.Heap.op_Plus_Plus_Hat>

(declare-fun FStar.Monotonic.Heap.op_Plus_Plus_Hat (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;s: FStar.Monotonic.Heap.set Prims.nat -> r: FStar.Monotonic.Heap.mref a rel   -> Prims.GTot (FStar.Monotonic.Heap.set Prims.nat)
(declare-fun Tm_ghost_arrow_155b4e9b4b7e1cd02500a5483fe79417 () Term)
(declare-fun FStar.Monotonic.Heap.op_Plus_Plus_Hat@tok () Term)

; </end encoding FStar.Monotonic.Heap.op_Plus_Plus_Hat>


; <Start encoding FStar.Monotonic.Heap.op_Hat_Plus_Hat>

(declare-fun FStar.Monotonic.Heap.op_Hat_Plus_Hat (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;r1: FStar.Monotonic.Heap.mref a rel1 -> r2: FStar.Monotonic.Heap.mref b rel2   -> Prims.GTot (FStar.Monotonic.Heap.set Prims.nat)
(declare-fun Tm_ghost_arrow_a3f887bc1beedc82ccf25ac24af9a106 () Term)
(declare-fun FStar.Monotonic.Heap.op_Hat_Plus_Hat@tok () Term)

; </end encoding FStar.Monotonic.Heap.op_Hat_Plus_Hat>


; <Start encoding FStar.Monotonic.Heap.sel_tot>

(declare-fun Tm_refine_60a89cd0c268e7ce38a2aab467325fd8 (Term Term Term) Term)
(declare-fun FStar.Monotonic.Heap.sel_tot (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;h: FStar.Monotonic.Heap.heap ->     r: FStar.Monotonic.Heap.mref a rel {FStar.Monotonic.Heap.contains h r}   -> a
(declare-fun Tm_arrow_b9c7abd21015083a18544d8f5e4bfa5f () Term)
(declare-fun FStar.Monotonic.Heap.sel_tot@tok () Term)

; </end encoding FStar.Monotonic.Heap.sel_tot>


; <Start encoding FStar.Monotonic.Heap.sel>

(declare-fun FStar.Monotonic.Heap.sel (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Monotonic.Heap.heap -> _: FStar.Monotonic.Heap.mref a rel -> Prims.GTot a
(declare-fun Tm_ghost_arrow_ffe8429ce0118fe92246c624b0f48cb8 () Term)
(declare-fun FStar.Monotonic.Heap.sel@tok () Term)

; </end encoding FStar.Monotonic.Heap.sel>


; <Start encoding FStar.Monotonic.Heap.upd_tot>


(declare-fun FStar.Monotonic.Heap.upd_tot (Term Term Term Term Term) Term)

;;;;;;;;;;;;;;;;h: FStar.Monotonic.Heap.heap ->     r: FStar.Monotonic.Heap.mref a rel {FStar.Monotonic.Heap.contains h r} ->     x: a   -> FStar.Monotonic.Heap.heap
(declare-fun Tm_arrow_bc62c38ea3e82ecfe3b8b2ec42ad37db () Term)
(declare-fun FStar.Monotonic.Heap.upd_tot@tok () Term)

; </end encoding FStar.Monotonic.Heap.upd_tot>


; <Start encoding FStar.Monotonic.Heap.upd>

(declare-fun FStar.Monotonic.Heap.upd (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;h: FStar.Monotonic.Heap.heap -> r: FStar.Monotonic.Heap.mref a rel -> x: a   -> Prims.GTot FStar.Monotonic.Heap.heap
(declare-fun Tm_ghost_arrow_34a9169877528f6cc19628f2fc55c538 () Term)
(declare-fun FStar.Monotonic.Heap.upd@tok () Term)

; </end encoding FStar.Monotonic.Heap.upd>


; <Start encoding FStar.Monotonic.Heap.alloc>

(declare-fun FStar.Monotonic.Heap.alloc (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;rel: FStar.Preorder.preorder a -> _: FStar.Monotonic.Heap.heap -> _: a -> mm: Prims.bool   -> FStar.Monotonic.Heap.mref a rel * FStar.Monotonic.Heap.heap
(declare-fun Tm_arrow_1c0aac8fe904b4d396ec54b136d2ffe7 () Term)
(declare-fun FStar.Monotonic.Heap.alloc@tok () Term)

; </end encoding FStar.Monotonic.Heap.alloc>


; <Start encoding FStar.Monotonic.Heap.free_mm>

(declare-fun Tm_refine_5015146880b2d88cf7d4492a6a4488b3 (Term Term Term) Term)
(declare-fun FStar.Monotonic.Heap.free_mm (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;h: FStar.Monotonic.Heap.heap ->     r:       FStar.Monotonic.Heap.mref a rel         {FStar.Monotonic.Heap.contains h r /\ FStar.Monotonic.Heap.is_mm r}   -> FStar.Monotonic.Heap.heap
(declare-fun Tm_arrow_6ecb62093891266f94b1f3f1a90a448e () Term)
(declare-fun FStar.Monotonic.Heap.free_mm@tok () Term)

; </end encoding FStar.Monotonic.Heap.free_mm>


; <Start encoding FStar.Monotonic.Heap.modifies_t>

(declare-fun FStar.Monotonic.Heap.modifies_t (Term Term Term) Term)
;;;;;;;;;;;;;;;;s: FStar.Monotonic.Heap.tset Prims.nat ->     h0: FStar.Monotonic.Heap.heap ->     h1: FStar.Monotonic.Heap.heap   -> Prims.logical
(declare-fun Tm_arrow_a4fe7207a94d4c1647746618fee3b728 () Term)
(declare-fun FStar.Monotonic.Heap.modifies_t@tok () Term)
;;;;;;;;;;;;;;;;r: FStar.Monotonic.Heap.mref a rel -> Prims.GTot Type
(declare-fun Tm_arrow_b0af2f35e8005ef7e3ba20908101c76d (Term Term) Term)
(declare-fun Tm_abs_8a8ca27930544e5fc9be9d72f0a83048 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;rel: FStar.Preorder.preorder a -> Prims.GTot Type
(declare-fun Tm_arrow_2a35a7f52eecacc79bffa513619cd3c8 (Term) Term)
(declare-fun Tm_abs_d2f4a5b47ca9998181b7505d9863f51b (Term Term Term Term) Term)

(declare-fun Tm_abs_ffef443a20a6b6cb0a037fef8658073c (Term Term Term) Term)

(declare-fun Tm_abs_204c20fae9e54ba52e38507c25cd375f (Term Term Term Term) Term)

(declare-fun Tm_abs_7ae75c1528636c9b47a86edec9ff33f0 (Term Term Term) Term)

(declare-fun Tm_abs_59c118da13b595105cdd8c9ff05a05cd (Term Term) Term)

(declare-fun Tm_abs_c52a059ca06af964a574baae6464dcd8 (Term Term Term Term) Term)

(declare-fun Tm_abs_4e102dee5e90e8010a884053ae1db5fd (Term Term Term) Term)

(declare-fun Tm_abs_0c074a60a2b4bcc96aa8bfd347e319b8 (Term Term) Term)

(declare-fun Tm_abs_4453e0ae84c959c56724482b72f4be02 (Term Term) Term)

; </end encoding FStar.Monotonic.Heap.modifies_t>


; <Start encoding FStar.Monotonic.Heap.modifies>

(declare-fun FStar.Monotonic.Heap.modifies (Term Term Term) Term)
;;;;;;;;;;;;;;;;s: FStar.Monotonic.Heap.set Prims.nat ->     h0: FStar.Monotonic.Heap.heap ->     h1: FStar.Monotonic.Heap.heap   -> Prims.logical
(declare-fun Tm_arrow_46ebd76bd348c127a0b9b24dfad446fc () Term)
(declare-fun FStar.Monotonic.Heap.modifies@tok () Term)

; </end encoding FStar.Monotonic.Heap.modifies>


; <Start encoding FStar.Monotonic.Heap.equal_dom>

(declare-fun FStar.Monotonic.Heap.equal_dom (Term Term) Term)

(declare-fun FStar.Monotonic.Heap.equal_dom@tok () Term)

(declare-fun Tm_abs_9ee9e40b4202ee7b9159377fbe37cbb5 (Term Term Term Term) Term)

(declare-fun Tm_abs_2d34dc0797c0ccb91806a6c73dc8de99 (Term Term Term) Term)

(declare-fun Tm_abs_e2e9ef4c98e04066fc73873911de0d04 (Term Term) Term)

(declare-fun Tm_abs_a61ebfa8a82cd778f3db8471bab6d609 (Term Term Term Term) Term)

(declare-fun Tm_abs_e48a2c7a3f2cb9d8e08594617aeb730b (Term Term Term) Term)

(declare-fun Tm_abs_693ff78e51234847751b90c40efbc5af (Term Term) Term)

; </end encoding FStar.Monotonic.Heap.equal_dom>


; <Start encoding FStar.Monotonic.Heap.lemma_ref_unused_iff_addr_unused>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_ref_unused_iff_addr_unused (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_ref_unused_iff_addr_unused@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_ref_unused_iff_addr_unused>


; <Start encoding FStar.Monotonic.Heap.lemma_contains_implies_used>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_contains_implies_used (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_contains_implies_used@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_contains_implies_used>


; <Start encoding FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_types>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_types (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_types@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_types>


; <Start encoding FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_preorders>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_preorders (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_preorders@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_preorders>


; <Start encoding FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_mm>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_mm (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_mm@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_mm>


; <Start encoding FStar.Monotonic.Heap.lemma_distinct_addrs_unused>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_distinct_addrs_unused (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_distinct_addrs_unused@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_distinct_addrs_unused>


; <Start encoding FStar.Monotonic.Heap.lemma_alloc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_alloc (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_alloc@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_alloc>


; <Start encoding FStar.Monotonic.Heap.lemma_free_mm_sel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_free_mm_sel (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_free_mm_sel@tok () Term)


; </end encoding FStar.Monotonic.Heap.lemma_free_mm_sel>


; <Start encoding FStar.Monotonic.Heap.lemma_free_mm_contains>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_free_mm_contains (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_free_mm_contains@tok () Term)


; </end encoding FStar.Monotonic.Heap.lemma_free_mm_contains>


; <Start encoding FStar.Monotonic.Heap.lemma_free_mm_unused>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_free_mm_unused (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_free_mm_unused@tok () Term)


; </end encoding FStar.Monotonic.Heap.lemma_free_mm_unused>


; <Start encoding FStar.Monotonic.Heap.lemma_free_addr_unused_in>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_free_addr_unused_in (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_free_addr_unused_in@tok () Term)

(declare-fun Tm_refine_b197fcc3fe1a6a8a07bfa2aebd77a80a () Term)

; </end encoding FStar.Monotonic.Heap.lemma_free_addr_unused_in>


; <Start encoding FStar.Monotonic.Heap.lemma_sel_same_addr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_sel_same_addr (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_sel_same_addr@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_sel_same_addr>


; <Start encoding FStar.Monotonic.Heap.lemma_sel_upd1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_sel_upd1 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_sel_upd1@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_sel_upd1>


; <Start encoding FStar.Monotonic.Heap.lemma_sel_upd2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_sel_upd2 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_sel_upd2@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_sel_upd2>


; <Start encoding FStar.Monotonic.Heap.lemma_mref_injectivity>

(declare-fun FStar.Monotonic.Heap.lemma_mref_injectivity () Term)
(declare-fun Tm_refine_e1adf49e5e772ddffa19181e1a812a81 () Term)


; </end encoding FStar.Monotonic.Heap.lemma_mref_injectivity>


; <Start encoding FStar.Monotonic.Heap.lemma_in_dom_emp>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_in_dom_emp (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_in_dom_emp@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_in_dom_emp>


; <Start encoding FStar.Monotonic.Heap.lemma_upd_contains>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_upd_contains (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_upd_contains@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_upd_contains>


; <Start encoding FStar.Monotonic.Heap.lemma_well_typed_upd_contains>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_well_typed_upd_contains (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_well_typed_upd_contains@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_well_typed_upd_contains>


; <Start encoding FStar.Monotonic.Heap.lemma_unused_upd_contains>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_unused_upd_contains (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_unused_upd_contains@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_unused_upd_contains>


; <Start encoding FStar.Monotonic.Heap.lemma_upd_contains_different_addr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_upd_contains_different_addr (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_upd_contains_different_addr@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_upd_contains_different_addr>


; <Start encoding FStar.Monotonic.Heap.lemma_upd_unused>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_upd_unused (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_upd_unused@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_upd_unused>


; <Start encoding FStar.Monotonic.Heap.lemma_contains_upd_modifies>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_contains_upd_modifies (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_contains_upd_modifies@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_contains_upd_modifies>


; <Start encoding FStar.Monotonic.Heap.lemma_unused_upd_modifies>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_unused_upd_modifies (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_unused_upd_modifies@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_unused_upd_modifies>


; <Start encoding FStar.Monotonic.Heap.lemma_sel_equals_sel_tot_for_contained_refs>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_sel_equals_sel_tot_for_contained_refs (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_sel_equals_sel_tot_for_contained_refs@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_sel_equals_sel_tot_for_contained_refs>


; <Start encoding FStar.Monotonic.Heap.lemma_upd_equals_upd_tot_for_contained_refs>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_upd_equals_upd_tot_for_contained_refs (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_upd_equals_upd_tot_for_contained_refs@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_upd_equals_upd_tot_for_contained_refs>


; <Start encoding FStar.Monotonic.Heap.lemma_modifies_and_equal_dom_sel_diff_addr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_modifies_and_equal_dom_sel_diff_addr (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_modifies_and_equal_dom_sel_diff_addr@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_modifies_and_equal_dom_sel_diff_addr>


; <Start encoding FStar.Monotonic.Heap.lemma_heap_equality_upd_same_addr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_heap_equality_upd_same_addr (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_heap_equality_upd_same_addr@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_heap_equality_upd_same_addr>


; <Start encoding FStar.Monotonic.Heap.lemma_heap_equality_cancel_same_mref_upd>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_heap_equality_cancel_same_mref_upd (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_heap_equality_cancel_same_mref_upd@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_heap_equality_cancel_same_mref_upd>


; <Start encoding FStar.Monotonic.Heap.lemma_heap_equality_upd_with_sel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_heap_equality_upd_with_sel (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_heap_equality_upd_with_sel@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_heap_equality_upd_with_sel>


; <Start encoding FStar.Monotonic.Heap.lemma_heap_equality_commute_distinct_upds>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_heap_equality_commute_distinct_upds (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_heap_equality_commute_distinct_upds@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_heap_equality_commute_distinct_upds>


; <Start encoding FStar.Monotonic.Heap.lemma_next_addr_upd_tot>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_next_addr_upd_tot (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_next_addr_upd_tot@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_next_addr_upd_tot>


; <Start encoding FStar.Monotonic.Heap.lemma_next_addr_upd>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_next_addr_upd (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_next_addr_upd@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_next_addr_upd>


; <Start encoding FStar.Monotonic.Heap.lemma_next_addr_alloc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_next_addr_alloc (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_next_addr_alloc@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_next_addr_alloc>


; <Start encoding FStar.Monotonic.Heap.lemma_next_addr_free_mm>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_next_addr_free_mm (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_next_addr_free_mm@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_next_addr_free_mm>


; <Start encoding FStar.Monotonic.Heap.lemma_next_addr_contained_refs_addr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_next_addr_contained_refs_addr (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_next_addr_contained_refs_addr@tok () Term)

; </end encoding FStar.Monotonic.Heap.lemma_next_addr_contained_refs_addr>


; <Start encoding FStar.Monotonic.Heap.aref>

(declare-fun FStar.Monotonic.Heap.aref () Term)

; </end encoding FStar.Monotonic.Heap.aref>


; <Start encoding FStar.Monotonic.Heap.dummy_aref>

(declare-fun FStar.Monotonic.Heap.dummy_aref (Dummy_sort) Term)

; </end encoding FStar.Monotonic.Heap.dummy_aref>


; <Start encoding FStar.Monotonic.Heap.aref_equal>

(declare-fun FStar.Monotonic.Heap.aref_equal (Term Term) Term)
(declare-fun Tm_refine_82707a6e3d48caa257bb4bddb01d7d73 (Term Term) Term)
;;;;;;;;;;;;;;;;a1: FStar.Monotonic.Heap.aref -> a2: FStar.Monotonic.Heap.aref -> Prims.Ghost Prims.bool
(declare-fun Tm_ghost_arrow_15fb16496d887138d488803245c89d64 () Term)
(declare-fun FStar.Monotonic.Heap.aref_equal@tok () Term)


; </end encoding FStar.Monotonic.Heap.aref_equal>


; <Start encoding FStar.Monotonic.Heap.aref_of>

(declare-fun FStar.Monotonic.Heap.aref_of (Term Term Term) Term)
;;;;;;;;;;;;;;;;r: FStar.Monotonic.Heap.mref t rel -> FStar.Monotonic.Heap.aref
(declare-fun Tm_arrow_52adf65c8447500d70e5098f6c041a65 () Term)
(declare-fun FStar.Monotonic.Heap.aref_of@tok () Term)

; </end encoding FStar.Monotonic.Heap.aref_of>


; <Start encoding FStar.Monotonic.Heap.addr_of_aref>

(declare-fun FStar.Monotonic.Heap.addr_of_aref (Term) Term)
(declare-fun Tm_refine_afd51579b90d50ea23e03b743a1fa001 () Term)
;;;;;;;;;;;;;;;;a: FStar.Monotonic.Heap.aref -> Prims.GTot (n: Prims.nat{n > 0})
(declare-fun Tm_ghost_arrow_168094509145e28b296ce766eea04736 () Term)
(declare-fun FStar.Monotonic.Heap.addr_of_aref@tok () Term)


; </end encoding FStar.Monotonic.Heap.addr_of_aref>


; <Start encoding FStar.Monotonic.Heap.addr_of_aref_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.addr_of_aref_of (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.addr_of_aref_of@tok () Term)

; </end encoding FStar.Monotonic.Heap.addr_of_aref_of>


; <Start encoding FStar.Monotonic.Heap.aref_is_mm>

(declare-fun FStar.Monotonic.Heap.aref_is_mm (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Monotonic.Heap.aref -> Prims.GTot Prims.bool
(declare-fun Tm_ghost_arrow_86fca776032c40cedacef7de5d660572 () Term)
(declare-fun FStar.Monotonic.Heap.aref_is_mm@tok () Term)

; </end encoding FStar.Monotonic.Heap.aref_is_mm>


; <Start encoding FStar.Monotonic.Heap.is_mm_aref_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.is_mm_aref_of (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.is_mm_aref_of@tok () Term)

; </end encoding FStar.Monotonic.Heap.is_mm_aref_of>


; <Start encoding FStar.Monotonic.Heap.aref_unused_in>

(declare-fun FStar.Monotonic.Heap.aref_unused_in (Term Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Monotonic.Heap.aref -> _: FStar.Monotonic.Heap.heap -> Type
(declare-fun Tm_arrow_8227ceb756b15f6c9348698ae3bb9b5e () Term)
(declare-fun FStar.Monotonic.Heap.aref_unused_in@tok () Term)

; </end encoding FStar.Monotonic.Heap.aref_unused_in>


; <Start encoding FStar.Monotonic.Heap.unused_in_aref_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.unused_in_aref_of (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.unused_in_aref_of@tok () Term)

; </end encoding FStar.Monotonic.Heap.unused_in_aref_of>


; <Start encoding FStar.Monotonic.Heap.contains_aref_unused_in>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.contains_aref_unused_in (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.contains_aref_unused_in@tok () Term)

; </end encoding FStar.Monotonic.Heap.contains_aref_unused_in>


; <Start encoding FStar.Monotonic.Heap.aref_live_at>

(declare-fun FStar.Monotonic.Heap.aref_live_at (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;h: FStar.Monotonic.Heap.heap ->     a: FStar.Monotonic.Heap.aref ->     t: Type ->     rel: FStar.Preorder.preorder t   -> Prims.GTot Type
(declare-fun Tm_arrow_9c4830390b5ceaaec5e76b4f367d6c11 () Term)
(declare-fun FStar.Monotonic.Heap.aref_live_at@tok () Term)

; </end encoding FStar.Monotonic.Heap.aref_live_at>


; <Start encoding FStar.Monotonic.Heap.gref_of>

(declare-fun FStar.Monotonic.Heap.gref_of (Term Term Term) Term)
(declare-fun Tm_refine_f871b1cec1676516ecbdd8b1fdf16da7 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.Monotonic.Heap.aref -> t: Type -> rel: FStar.Preorder.preorder t   -> Prims.Ghost (FStar.Monotonic.Heap.mref t rel)
(declare-fun Tm_ghost_arrow_b090c641b42392b5ed08e8774610283a () Term)
(declare-fun FStar.Monotonic.Heap.gref_of@tok () Term)


; </end encoding FStar.Monotonic.Heap.gref_of>


; <Start encoding FStar.Monotonic.Heap.ref_of>

(declare-fun FStar.Monotonic.Heap.ref_of (Term Term Term Term) Term)
(declare-fun Tm_refine_e9f69f18eb8d91697e49057991573e9f (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;h: FStar.Monotonic.Heap.heap ->     a: FStar.Monotonic.Heap.aref ->     t: Type ->     rel: FStar.Preorder.preorder t   -> Prims.Pure (FStar.Monotonic.Heap.mref t rel)
(declare-fun Tm_arrow_593ebdf0a0f4ac12ef03a2bedce8e97b () Term)
(declare-fun FStar.Monotonic.Heap.ref_of@tok () Term)


; </end encoding FStar.Monotonic.Heap.ref_of>


; <Start encoding FStar.Monotonic.Heap.aref_live_at_aref_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.aref_live_at_aref_of (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.aref_live_at_aref_of@tok () Term)

; </end encoding FStar.Monotonic.Heap.aref_live_at_aref_of>


; <Start encoding FStar.Monotonic.Heap.contains_gref_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.contains_gref_of (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.contains_gref_of@tok () Term)

; </end encoding FStar.Monotonic.Heap.contains_gref_of>


; <Start encoding FStar.Monotonic.Heap.aref_of_gref_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.aref_of_gref_of (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.aref_of_gref_of@tok () Term)

; </end encoding FStar.Monotonic.Heap.aref_of_gref_of>


; <Start encoding FStar.Monotonic.Heap.addr_of_gref_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.addr_of_gref_of (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.addr_of_gref_of@tok () Term)

; </end encoding FStar.Monotonic.Heap.addr_of_gref_of>


; <Start encoding FStar.Monotonic.Heap.is_mm_gref_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.is_mm_gref_of (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.is_mm_gref_of@tok () Term)

; </end encoding FStar.Monotonic.Heap.is_mm_gref_of>


; <Start encoding FStar.Monotonic.Heap.unused_in_gref_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.unused_in_gref_of (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.unused_in_gref_of@tok () Term)

; </end encoding FStar.Monotonic.Heap.unused_in_gref_of>


; <Start encoding FStar.Monotonic.Heap.sel_ref_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.sel_ref_of (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.sel_ref_of@tok () Term)

; </end encoding FStar.Monotonic.Heap.sel_ref_of>


; <Start encoding FStar.Monotonic.Heap.upd_ref_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.upd_ref_of (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.upd_ref_of@tok () Term)

; </end encoding FStar.Monotonic.Heap.upd_ref_of>


; End Externals for interface FStar.Monotonic.Heap


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End interface FStar.Monotonic.Heap (438 decls; total size 37655)

;;; Start module FStar.Heap

; Externals for module FStar.Heap


; <Start encoding FStar.Heap.trivial_rel>

(declare-fun FStar.Heap.trivial_rel (Term) Term)
;;;;;;;;;;;;;;;;a: Type -> FStar.Preorder.relation a
(declare-fun Tm_arrow_5e933b4711265943ba4bba734363561b () Term)
(declare-fun FStar.Heap.trivial_rel@tok () Term)

(declare-fun Tm_abs_568747eb5009c1dec504311dee989dc2 (Term) Term)

; </end encoding FStar.Heap.trivial_rel>


; <Start encoding FStar.Heap.trivial_preorder>

(declare-fun FStar.Heap.trivial_preorder (Term) Term)
;;;;;;;;;;;;;;;;a: Type -> FStar.Preorder.preorder a
(declare-fun Tm_arrow_1a6db055683d4a5b8a00786676e339b5 () Term)
(declare-fun FStar.Heap.trivial_preorder@tok () Term)

; </end encoding FStar.Heap.trivial_preorder>


; <Start encoding FStar.Heap.ref>

(declare-fun FStar.Heap.ref (Term) Term)

(declare-fun FStar.Heap.ref@tok () Term)

; </end encoding FStar.Heap.ref>


; End Externals for module FStar.Heap


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End module FStar.Heap (20 decls; total size 1987)

;;; Start module FStar.ST

; Externals for module FStar.ST


; <Skipped FStar.ST.GST/>


; <Start encoding FStar.ST.gst_pre>

(declare-fun FStar.ST.gst_pre () Term)

; </end encoding FStar.ST.gst_pre>


; <Start encoding FStar.ST.gst_post'>

(declare-fun FStar.ST.gst_post_ (Term Term) Term)

(declare-fun FStar.ST.gst_post_@tok () Term)

; </end encoding FStar.ST.gst_post'>


; <Start encoding FStar.ST.gst_post>

(declare-fun FStar.ST.gst_post (Term) Term)

(declare-fun FStar.ST.gst_post@tok () Term)

; </end encoding FStar.ST.gst_post>


; <Start encoding FStar.ST.gst_wp>

(declare-fun FStar.ST.gst_wp (Term) Term)

(declare-fun FStar.ST.gst_wp@tok () Term)

; </end encoding FStar.ST.gst_wp>


; <Start encoding FStar.ST.lift_div_gst>

(declare-fun FStar.ST.lift_div_gst (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;a: Type -> wp: Prims.pure_wp a -> p: FStar.ST.gst_post a -> h: FStar.Monotonic.Heap.heap   -> Prims.pure_pre
(declare-fun Tm_arrow_bbaeef6680f54609c0f7c85c1ba1bd3c () Term)
(declare-fun FStar.ST.lift_div_gst@tok () Term)



; </end encoding FStar.ST.lift_div_gst>


; <Skipped />


; <Start encoding FStar.ST.heap_rel>

(declare-fun FStar.ST.heap_rel (Term Term) Term)
;;;;;;;;;;;;;;;;h1: FStar.Monotonic.Heap.heap -> h2: FStar.Monotonic.Heap.heap -> Prims.logical
(declare-fun Tm_arrow_3ffd8da3a1b4fb5a75e097e2a7ead7a9 () Term)
(declare-fun FStar.ST.heap_rel@tok () Term)

(declare-fun Tm_abs_dcdf10d151981dea7db997e407eca7e8 (Term Term Term Term) Term)

(declare-fun Tm_abs_25f36f044c9be09733ed8b33db10f7e3 (Term Term Term) Term)

(declare-fun Tm_abs_659fe0a1fc2df9e48953d53cf96a4134 (Term Term) Term)

; </end encoding FStar.ST.heap_rel>


; <Start encoding FStar.ST.gst_get>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.gst_get (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.gst_get@tok () Term)

; </end encoding FStar.ST.gst_get>


; <Start encoding FStar.ST.gst_put>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.gst_put (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.gst_put@tok () Term)

; </end encoding FStar.ST.gst_put>


; <Start encoding FStar.ST.heap_predicate>

(declare-fun FStar.ST.heap_predicate () Term)
;;;;;;;;;;;;;;;;_: FStar.Monotonic.Heap.heap -> Type
(declare-fun Tm_arrow_c4185f52507383203d0d6335fd0332a8 () Term)

; </end encoding FStar.ST.heap_predicate>


; <Start encoding FStar.ST.stable>

(declare-fun FStar.ST.stable (Term) Term)
;;;;;;;;;;;;;;;;p: FStar.ST.heap_predicate -> Prims.logical
(declare-fun Tm_arrow_6fabddab2e8badc7a54f2fce30469fd3 () Term)
(declare-fun FStar.ST.stable@tok () Term)

(declare-fun Tm_abs_d50f5c9d7c456d2fb662170f9d9c7bc4 (Term Term) Term)

(declare-fun Tm_abs_46f02e95f964a3b2a6736df0b5d51c82 (Term) Term)

; </end encoding FStar.ST.stable>


; <Start encoding FStar.ST.witnessed>

(declare-fun Tm_refine_a11098d99239284f14b49e1dd0266896 () Term)
(declare-fun FStar.ST.witnessed (Term) Term)

;;;;;;;;;;;;;;;;p: FStar.ST.heap_predicate{FStar.ST.stable p} -> Type
(declare-fun Tm_arrow_eda1223bb1d06bd92699e8c3d8f9251d () Term)
(declare-fun FStar.ST.witnessed@tok () Term)

; </end encoding FStar.ST.witnessed>


; <Start encoding FStar.ST.gst_witness>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.gst_witness (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.gst_witness@tok () Term)

; </end encoding FStar.ST.gst_witness>


; <Start encoding FStar.ST.gst_recall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.gst_recall (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.gst_recall@tok () Term)

; </end encoding FStar.ST.gst_recall>


; <Skipped FStar.ST.lemma_functoriality/>


; <Start encoding FStar.ST.lemma_functoriality>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.lemma_functoriality (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.lemma_functoriality@tok () Term)

; </end encoding FStar.ST.lemma_functoriality>


; <Start encoding FStar.ST.st_pre>

(declare-fun FStar.ST.st_pre () Term)

; </end encoding FStar.ST.st_pre>


; <Start encoding FStar.ST.st_post'>

(declare-fun FStar.ST.st_post_ (Term Term) Term)

(declare-fun FStar.ST.st_post_@tok () Term)

; </end encoding FStar.ST.st_post'>


; <Start encoding FStar.ST.st_post>

(declare-fun FStar.ST.st_post (Term) Term)

(declare-fun FStar.ST.st_post@tok () Term)

; </end encoding FStar.ST.st_post>


; <Start encoding FStar.ST.st_wp>

(declare-fun FStar.ST.st_wp (Term) Term)

(declare-fun FStar.ST.st_wp@tok () Term)

; </end encoding FStar.ST.st_wp>


; <Skipped FStar.ST.STATE/>


; <Start encoding FStar.ST.lift_gst_state>

(declare-fun FStar.ST.lift_gst_state (Term Term) Term)
;;;;;;;;;;;;;;;;a: Type -> wp: FStar.ST.gst_wp a -> FStar.ST.gst_wp a
(declare-fun Tm_arrow_9f8aa176b7421939c7ff58d9777d1285 () Term)
(declare-fun FStar.ST.lift_gst_state@tok () Term)

; </end encoding FStar.ST.lift_gst_state>


; <Skipped />


; <Skipped FStar.ST.State/>


; <Skipped FStar.ST.ST/>


; <Skipped FStar.ST.St/>


; <Start encoding FStar.ST.contains_pred>

(declare-fun FStar.ST.contains_pred (Term Term Term Term) Term)

(declare-fun FStar.ST.contains_pred@tok () Term)

; </end encoding FStar.ST.contains_pred>


; <Start encoding FStar.ST.mref>

(declare-fun FStar.ST.mref (Term Term) Term)

(declare-fun FStar.ST.mref@tok () Term)
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name FStar.ST.mref; Namespace FStar.ST
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.ST.contains_pred@tok))
:named @kick_partial_app_ecc2873331cbcc22dfae3795dcb55413))
(declare-fun Tm_refine_e33ef751d600ad1c7f71142479103c47 (Term Term) Term)

; </end encoding FStar.ST.mref>


; <Start encoding FStar.ST.recall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.recall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.recall@tok () Term)

; </end encoding FStar.ST.recall>


; <Start encoding FStar.ST.alloc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.alloc (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.alloc@tok () Term)

; </end encoding FStar.ST.alloc>


; <Start encoding FStar.ST.read>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.read (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.read@tok () Term)

; </end encoding FStar.ST.read>


; <Start encoding FStar.ST.write>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.write (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.write@tok () Term)

; </end encoding FStar.ST.write>


; <Start encoding FStar.ST.get>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.get (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.get@tok () Term)

; </end encoding FStar.ST.get>


; <Start encoding FStar.ST.op_Bang>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.op_Bang (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.op_Bang@tok () Term)

; </end encoding FStar.ST.op_Bang>


; <Start encoding FStar.ST.op_Colon_Equals>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.op_Colon_Equals (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.op_Colon_Equals@tok () Term)

; </end encoding FStar.ST.op_Colon_Equals>


; <Start encoding FStar.ST.ref>

(declare-fun FStar.ST.ref (Term) Term)

(declare-fun FStar.ST.ref@tok () Term)

; </end encoding FStar.ST.ref>


; <Start encoding FStar.ST.modifies_none>

(declare-fun FStar.ST.modifies_none (Term Term) Term)

(declare-fun FStar.ST.modifies_none@tok () Term)

; </end encoding FStar.ST.modifies_none>


; End Externals for module FStar.ST


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End module FStar.ST (160 decls; total size 9389)

;;; Start module FStar.All

; Externals for module FStar.All


; <Start encoding FStar.All.all_pre>

(declare-fun FStar.All.all_pre () Term)

; </end encoding FStar.All.all_pre>


; <Start encoding FStar.All.all_post'>

(declare-fun FStar.All.all_post_ (Term Term) Term)

(declare-fun FStar.All.all_post_@tok () Term)

; </end encoding FStar.All.all_post'>


; <Start encoding FStar.All.all_post>

(declare-fun FStar.All.all_post (Term) Term)

(declare-fun FStar.All.all_post@tok () Term)

; </end encoding FStar.All.all_post>


; <Start encoding FStar.All.all_wp>

(declare-fun FStar.All.all_wp (Term) Term)

(declare-fun FStar.All.all_wp@tok () Term)

; </end encoding FStar.All.all_wp>


; <Skipped FStar.All.ALL/>


; <Start encoding FStar.All.lift_state_all>

(declare-fun FStar.All.lift_state_all (Term Term Term) Term)
;;;;;;;;;;;;;;;;a: Type -> wp: FStar.ST.st_wp a -> p: FStar.All.all_post a   -> FStar.Pervasives.st_pre_h FStar.Monotonic.Heap.heap
(declare-fun Tm_arrow_3e4fec12f1c8981f71096a48e2abdc84 () Term)
(declare-fun FStar.All.lift_state_all@tok () Term)
(declare-fun Tm_refine_298bc3bb6d69e8b09e25f0f52730a1aa () Term)
;;;;;;;;;;;;;;;;_: FStar.Monotonic.Heap.heap{Prims.l_True} -> Prims.GTot Type
(declare-fun Tm_arrow_0fb416478174b228abde05d827bd6313 () Term)
;;;;;;;;;;;;;;;;a: a -> _: FStar.Monotonic.Heap.heap{Prims.l_True} -> Prims.GTot Type
(declare-fun Tm_arrow_23b08cf81278f3c1bdae402318f6ccd9 (Term) Term)
(declare-fun Tm_abs_bdb21fd2b7ca1058c18a3e7e90881ef2 (Term Term) Term)

; </end encoding FStar.All.lift_state_all>


; <Skipped />


; <Start encoding FStar.All.lift_exn_all>

(declare-fun FStar.All.lift_exn_all (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;a: Type -> wp: FStar.Pervasives.ex_wp a -> p: FStar.All.all_post a -> h: FStar.Monotonic.Heap.heap   -> FStar.Pervasives.ex_pre
(declare-fun Tm_arrow_135df870f17e8c60e7945fbf1f54fc29 () Term)
(declare-fun FStar.All.lift_exn_all@tok () Term)

(declare-fun Tm_abs_a9ba63c9dfe5bf6c6b349a4bcc1b5528 (Term Term Term) Term)

; </end encoding FStar.All.lift_exn_all>


; <Skipped />


; <Skipped FStar.All.All/>


; <Skipped FStar.All.ML/>


; <Start encoding FStar.All.op_Bar_Greater>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.All.op_Bar_Greater (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.All.op_Bar_Greater@tok () Term)

; </end encoding FStar.All.op_Bar_Greater>


; <Start encoding FStar.All.pipe_right>

(declare-fun FStar.All.pipe_right (Term Term) Term)
(declare-fun Non_total_Tm_arrow_dbd48e54c09644d8ab949bdc03fcc73a () Term)
;;;;;;;;;;;;;;;;x: _ -> f: (_: _ -> FStar.All.ML _) -> FStar.All.ML _
(declare-fun Tm_arrow_cafb0df3e6d9d853af4359dc97ce96a6 () Term)
(declare-fun FStar.All.pipe_right@tok () Term)

;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name FStar.All.pipe_right; Namespace FStar.All
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.All.op_Bar_Greater@tok))
:named @kick_partial_app_4606f13a988298dd15c1c7a9b2694f36))

; </end encoding FStar.All.pipe_right>


; <Start encoding FStar.All.op_Less_Bar>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.All.op_Less_Bar (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.All.op_Less_Bar@tok () Term)

; </end encoding FStar.All.op_Less_Bar>


; <Start encoding FStar.All.pipe_left>

(declare-fun FStar.All.pipe_left (Term Term) Term)
(declare-fun Non_total_Tm_arrow_4a12d67662be486c76a67a71b05b982f () Term)
;;;;;;;;;;;;;;;;f: (_: _ -> FStar.All.ML _) -> x: _ -> FStar.All.ML _
(declare-fun Tm_arrow_aa4d5b76c2364fb2f3cd90a8bae7e992 () Term)
(declare-fun FStar.All.pipe_left@tok () Term)

;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name FStar.All.pipe_left; Namespace FStar.All
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.All.op_Less_Bar@tok))
:named @kick_partial_app_53c4af2fdc52bb263c3f6dffdda692c0))

; </end encoding FStar.All.pipe_left>


; <Start encoding FStar.All.exit>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.All.exit (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.All.exit@tok () Term)

; </end encoding FStar.All.exit>


; <Start encoding FStar.All.try_with>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.All.try_with (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.All.try_with@tok () Term)

; </end encoding FStar.All.try_with>


; <Start encoding FStar.All.Failure>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.All.Failure (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.All.Failure_uu___ (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Failure
(declare-fun FStar.All.Failure@tok () Term)


; <Start encoding FStar.All.Failure>


; <start constructor FStar.All.Failure>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.All.Failure ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
179)
(= __@x0
(FStar.All.Failure (FStar.All.Failure_uu___ __@x0)))))

; </end constructor FStar.All.Failure>


; </end encoding FStar.All.Failure>


; </end encoding FStar.All.Failure>


; <Start encoding FStar.All.uu___is_Failure>

(declare-fun FStar.All.uu___is_Failure (Term) Term)

(declare-fun FStar.All.uu___is_Failure@tok () Term)

; </end encoding FStar.All.uu___is_Failure>


; <Skipped FStar.All.uu___is_Failure/>


; <Start encoding FStar.All.__proj__Failure__item__uu___>

(declare-fun Tm_refine_149c6719f34c408becdf9120a4ae2d59 () Term)
(declare-fun FStar.All.__proj__Failure__item__uu___ (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: Prims.exn{Failure? _} -> Prims.string
(declare-fun Tm_arrow_931774599ca5f3ca7bd6eb18157a7dec () Term)
(declare-fun FStar.All.__proj__Failure__item__uu___@tok () Term)

; </end encoding FStar.All.__proj__Failure__item__uu___>


; <Skipped FStar.All.__proj__Failure__item__uu___/>


; <Start encoding FStar.All.failwith>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.All.failwith (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.All.failwith@tok () Term)

; </end encoding FStar.All.failwith>


; End Externals for module FStar.All


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End module FStar.All (103 decls; total size 7367)

;;; Start module FStar.List

; Externals for module FStar.List


; <Skipped FStar.List.hd/>


; <Start encoding FStar.List.hd>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.hd (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.hd@tok () Term)

; </end encoding FStar.List.hd>


; <Skipped FStar.List.tail/>


; <Start encoding FStar.List.tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.tail (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.tail@tok () Term)

; </end encoding FStar.List.tail>


; <Skipped FStar.List.tl/>


; <Start encoding FStar.List.tl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.tl (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.tl@tok () Term)

; </end encoding FStar.List.tl>


; <Skipped FStar.List.last/>


; <Start encoding FStar.List.last>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.last (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.last@tok () Term)

; </end encoding FStar.List.last>


; <Skipped FStar.List.init/>


; <Start encoding FStar.List.init>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.init (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.init@tok () Term)

; </end encoding FStar.List.init>


; <Skipped FStar.List.nth/>


; <Start encoding FStar.List.nth>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.nth (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.nth@tok () Term)

; </end encoding FStar.List.nth>


; <Skipped FStar.List.iter/>


; <Start encoding FStar.List.iter>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.iter (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.iter@tok () Term)

; </end encoding FStar.List.iter>


; <Skipped FStar.List.iteri_aux/>


; <Start encoding FStar.List.iteri_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.iteri_aux (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.iteri_aux@tok () Term)

; </end encoding FStar.List.iteri_aux>


; <Skipped FStar.List.iteri/>


; <Start encoding FStar.List.iteri>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.iteri (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.iteri@tok () Term)

; </end encoding FStar.List.iteri>


; <Skipped FStar.List.map/>


; <Start encoding FStar.List.map>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.map (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.map@tok () Term)

; </end encoding FStar.List.map>


; <Skipped FStar.List.mapT/>


; <Start encoding FStar.List.mapT>


(declare-fun FStar.List.mapT (Term Term Term Term) Term)


(declare-fun FStar.List.mapT@tok () Term)


; </end encoding FStar.List.mapT>


; <Skipped FStar.List.mapi_init/>


; <Start encoding FStar.List.mapi_init>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.mapi_init (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.mapi_init@tok () Term)

; </end encoding FStar.List.mapi_init>


; <Skipped FStar.List.mapi/>


; <Start encoding FStar.List.mapi>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.mapi (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.mapi@tok () Term)

; </end encoding FStar.List.mapi>


; <Skipped FStar.List.concatMap/>


; <Start encoding FStar.List.concatMap>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.concatMap (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.concatMap@tok () Term)

; </end encoding FStar.List.concatMap>


; <Skipped FStar.List.map2/>


; <Start encoding FStar.List.map2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.map2 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.map2@tok () Term)

; </end encoding FStar.List.map2>


; <Skipped FStar.List.map3/>


; <Start encoding FStar.List.map3>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.map3 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.map3@tok () Term)

; </end encoding FStar.List.map3>


; <Skipped FStar.List.fold_left/>


; <Start encoding FStar.List.fold_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.fold_left (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.fold_left@tok () Term)

; </end encoding FStar.List.fold_left>


; <Skipped FStar.List.fold_left2/>


; <Start encoding FStar.List.fold_left2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.fold_left2 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.fold_left2@tok () Term)

; </end encoding FStar.List.fold_left2>


; <Skipped FStar.List.fold_right/>


; <Start encoding FStar.List.fold_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.fold_right (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.fold_right@tok () Term)

; </end encoding FStar.List.fold_right>


; <Skipped FStar.List.filter/>


; <Start encoding FStar.List.filter>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.filter (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.filter@tok () Term)

; </end encoding FStar.List.filter>


; <Skipped FStar.List.for_all/>


; <Start encoding FStar.List.for_all>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.for_all (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.for_all@tok () Term)

; </end encoding FStar.List.for_all>


; <Skipped FStar.List.forall2/>


; <Start encoding FStar.List.forall2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.forall2 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.forall2@tok () Term)

; </end encoding FStar.List.forall2>


; <Skipped FStar.List.collect/>


; <Start encoding FStar.List.collect>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.collect (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.collect@tok () Term)

; </end encoding FStar.List.collect>


; <Skipped FStar.List.tryFind/>


; <Start encoding FStar.List.tryFind>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.tryFind (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.tryFind@tok () Term)

; </end encoding FStar.List.tryFind>


; <Skipped FStar.List.tryPick/>


; <Start encoding FStar.List.tryPick>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.tryPick (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.tryPick@tok () Term)

; </end encoding FStar.List.tryPick>


; <Skipped FStar.List.choose/>


; <Start encoding FStar.List.choose>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.choose (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.choose@tok () Term)

; </end encoding FStar.List.choose>


; <Skipped FStar.List.partition/>


; <Start encoding FStar.List.partition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.partition (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.partition@tok () Term)

; </end encoding FStar.List.partition>


; <Skipped FStar.List.zip/>


; <Start encoding FStar.List.zip>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.zip (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.zip@tok () Term)

; </end encoding FStar.List.zip>


; <Skipped FStar.List.sortWith/>


; <Start encoding FStar.List.sortWith>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.sortWith (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.sortWith@tok () Term)

; </end encoding FStar.List.sortWith>


; <Skipped FStar.List.splitAt/>


; <Start encoding FStar.List.splitAt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.splitAt (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.splitAt@tok () Term)

; </end encoding FStar.List.splitAt>


; <Start encoding FStar.List.filter_map>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.filter_map (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.filter_map@tok () Term)

; </end encoding FStar.List.filter_map>


; <Skipped FStar.List.index/>


; <Start encoding FStar.List.index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.index@tok () Term)

; </end encoding FStar.List.index>


; End Externals for module FStar.List


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End module FStar.List (166 decls; total size 11641)

;;; Start interface FStar.BV

; Externals for interface FStar.BV


; <Start encoding FStar.BV.bv_t>

(declare-fun FStar.BV.bv_t (Term) Term)
;;;;;;;;;;;;;;;;n: Prims.nat -> Prims.eqtype
(declare-fun Tm_arrow_c5d86fb0d75b77cc2c34a8ca4931c392 () Term)
(declare-fun FStar.BV.bv_t@tok () Term)

; </end encoding FStar.BV.bv_t>


; <Start encoding FStar.BV.bv_uext>

(declare-fun FStar.BV.bv_uext (Term Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.BV.bv_t n -> FStar.BV.bv_t (m + n)
(declare-fun Tm_arrow_40075a511a11eaa7c4901d2e847c2062 () Term)
(declare-fun FStar.BV.bv_uext@tok () Term)

; </end encoding FStar.BV.bv_uext>


; <Start encoding FStar.BV.int2bv>

(declare-fun FStar.BV.int2bv (Term Term) Term)
;;;;;;;;;;;;;;;;num: FStar.UInt.uint_t n -> FStar.BV.bv_t n
(declare-fun Tm_arrow_23f8a702aee5963933294fb1167d15e8 () Term)
(declare-fun FStar.BV.int2bv@tok () Term)

; </end encoding FStar.BV.int2bv>


; <Start encoding FStar.BV.bv2int>

(declare-fun FStar.BV.bv2int (Term Term) Term)
;;;;;;;;;;;;;;;;vec: FStar.BV.bv_t n -> FStar.UInt.uint_t n
(declare-fun Tm_arrow_d3bb1b0204248f0a6b3f47492c563330 () Term)
(declare-fun FStar.BV.bv2int@tok () Term)

; </end encoding FStar.BV.bv2int>


; <Start encoding FStar.BV.int2bv_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BV.int2bv_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BV.int2bv_lemma_1@tok () Term)

; </end encoding FStar.BV.int2bv_lemma_1>


; <Start encoding FStar.BV.int2bv_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BV.int2bv_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BV.int2bv_lemma_2@tok () Term)

; </end encoding FStar.BV.int2bv_lemma_2>


; <Start encoding FStar.BV.inverse_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BV.inverse_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BV.inverse_vec_lemma@tok () Term)

; </end encoding FStar.BV.inverse_vec_lemma>


; <Start encoding FStar.BV.inverse_num_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BV.inverse_num_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BV.inverse_num_lemma@tok () Term)

; </end encoding FStar.BV.inverse_num_lemma>


; <Start encoding FStar.BV.list2bv>


(declare-fun Tm_refine_95256b532c59ed5361cc8e821a95025b (Term) Term)
(declare-fun FStar.BV.list2bv (Term Term) Term)


;;;;;;;;;;;;;;;;l: Prims.list Prims.bool {FStar.List.Tot.Base.length l = n} -> FStar.BV.bv_t n
(declare-fun Tm_arrow_91417f144c8ca500e7ac66fa1940f6a1 () Term)
(declare-fun FStar.BV.list2bv@tok () Term)

; </end encoding FStar.BV.list2bv>


; <Start encoding FStar.BV.bv2list>

(declare-fun FStar.BV.bv2list (Term Term) Term)


;;;;;;;;;;;;;;;;_: FStar.BV.bv_t n -> l: Prims.list Prims.bool {FStar.List.Tot.Base.length l = n}
(declare-fun Tm_arrow_d98623c28aef85d20544761c373a9f08 () Term)
(declare-fun FStar.BV.bv2list@tok () Term)



; </end encoding FStar.BV.bv2list>


; <Start encoding FStar.BV.list2bv_bij>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BV.list2bv_bij (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BV.list2bv_bij@tok () Term)

; </end encoding FStar.BV.list2bv_bij>


; <Start encoding FStar.BV.bv2list_bij>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BV.bv2list_bij (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BV.bv2list_bij@tok () Term)

; </end encoding FStar.BV.bv2list_bij>


; <Start encoding FStar.BV.bvand>

(declare-fun FStar.BV.bvand (Term Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.BV.bv_t n -> b: FStar.BV.bv_t n -> FStar.BV.bv_t n
(declare-fun Tm_arrow_8f41b8c6734c3586c4ae60bf26dcd783 () Term)
(declare-fun FStar.BV.bvand@tok () Term)

; </end encoding FStar.BV.bvand>


; <Start encoding FStar.BV.int2bv_logand>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BV.int2bv_logand (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BV.int2bv_logand@tok () Term)

; </end encoding FStar.BV.int2bv_logand>


; <Start encoding FStar.BV.bvxor>

(declare-fun FStar.BV.bvxor (Term Term Term) Term)

(declare-fun FStar.BV.bvxor@tok () Term)

; </end encoding FStar.BV.bvxor>


; <Start encoding FStar.BV.int2bv_logxor>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BV.int2bv_logxor (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BV.int2bv_logxor@tok () Term)

; </end encoding FStar.BV.int2bv_logxor>


; <Start encoding FStar.BV.bvor>

(declare-fun FStar.BV.bvor (Term Term Term) Term)

(declare-fun FStar.BV.bvor@tok () Term)

; </end encoding FStar.BV.bvor>


; <Start encoding FStar.BV.int2bv_logor>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BV.int2bv_logor (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BV.int2bv_logor@tok () Term)

; </end encoding FStar.BV.int2bv_logor>


; <Start encoding FStar.BV.bvnot>

(declare-fun FStar.BV.bvnot (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.BV.bv_t n -> FStar.BV.bv_t n
(declare-fun Tm_arrow_4249046fa9a47614c4f58eac92292efd () Term)
(declare-fun FStar.BV.bvnot@tok () Term)

; </end encoding FStar.BV.bvnot>


; <Start encoding FStar.BV.int2bv_lognot>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BV.int2bv_lognot (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BV.int2bv_lognot@tok () Term)

; </end encoding FStar.BV.int2bv_lognot>


; <Start encoding FStar.BV.bvshl>

(declare-fun FStar.BV.bvshl (Term Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.BV.bv_t n -> s: Prims.nat -> FStar.BV.bv_t n
(declare-fun Tm_arrow_a8bfe689db5ea0e285c979ac6b29514c () Term)
(declare-fun FStar.BV.bvshl@tok () Term)

; </end encoding FStar.BV.bvshl>


; <Start encoding FStar.BV.int2bv_shl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BV.int2bv_shl (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BV.int2bv_shl@tok () Term)

; </end encoding FStar.BV.int2bv_shl>


; <Start encoding FStar.BV.bvshr>

(declare-fun FStar.BV.bvshr (Term Term Term) Term)

(declare-fun FStar.BV.bvshr@tok () Term)

; </end encoding FStar.BV.bvshr>


; <Start encoding FStar.BV.int2bv_shr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BV.int2bv_shr (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BV.int2bv_shr@tok () Term)

; </end encoding FStar.BV.int2bv_shr>


; <Start encoding FStar.BV.bv_zero>

(declare-fun FStar.BV.bv_zero (Term) Term)
;;;;;;;;;;;;;;;;FStar.BV.bv_t n
(declare-fun Tm_arrow_e8ad09a8abdc5d024b8f6b3750e44853 () Term)
(declare-fun FStar.BV.bv_zero@tok () Term)

; </end encoding FStar.BV.bv_zero>


; <Start encoding FStar.BV.bvult>

(declare-fun FStar.BV.bvult (Term Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.BV.bv_t n -> b: FStar.BV.bv_t n -> Prims.bool
(declare-fun Tm_arrow_67e36e7bf367e396bb3a1a1c4f8b2c78 () Term)
(declare-fun FStar.BV.bvult@tok () Term)

; </end encoding FStar.BV.bvult>


; <Start encoding FStar.BV.int2bv_lemma_ult_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BV.int2bv_lemma_ult_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BV.int2bv_lemma_ult_1@tok () Term)

; </end encoding FStar.BV.int2bv_lemma_ult_1>


; <Start encoding FStar.BV.int2bv_lemma_ult_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BV.int2bv_lemma_ult_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BV.int2bv_lemma_ult_2@tok () Term)

; </end encoding FStar.BV.int2bv_lemma_ult_2>


; <Start encoding FStar.BV.bvadd>

(declare-fun FStar.BV.bvadd (Term Term Term) Term)

(declare-fun FStar.BV.bvadd@tok () Term)

; </end encoding FStar.BV.bvadd>


; <Start encoding FStar.BV.int2bv_add>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BV.int2bv_add (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BV.int2bv_add@tok () Term)

; </end encoding FStar.BV.int2bv_add>


; <Start encoding FStar.BV.bvsub>

(declare-fun FStar.BV.bvsub (Term Term Term) Term)

(declare-fun FStar.BV.bvsub@tok () Term)

; </end encoding FStar.BV.bvsub>


; <Start encoding FStar.BV.int2bv_sub>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BV.int2bv_sub (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BV.int2bv_sub@tok () Term)

; </end encoding FStar.BV.int2bv_sub>


; <Start encoding FStar.BV.bvdiv>


(declare-fun FStar.BV.bvdiv (Term Term Term) Term)

;;;;;;;;;;;;;;;;a: FStar.BV.bv_t n -> b: FStar.UInt.uint_t n {b <> 0} -> FStar.BV.bv_t n
(declare-fun Tm_arrow_54ca0cf7413d0c50af8adb243c61f67c () Term)
(declare-fun FStar.BV.bvdiv@tok () Term)

; </end encoding FStar.BV.bvdiv>


; <Start encoding FStar.BV.int2bv_div>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BV.int2bv_div (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BV.int2bv_div@tok () Term)

; </end encoding FStar.BV.int2bv_div>


; <Start encoding FStar.BV.bvmod>


(declare-fun FStar.BV.bvmod (Term Term Term) Term)


(declare-fun FStar.BV.bvmod@tok () Term)

; </end encoding FStar.BV.bvmod>


; <Start encoding FStar.BV.int2bv_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BV.int2bv_mod (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BV.int2bv_mod@tok () Term)

; </end encoding FStar.BV.int2bv_mod>


; <Start encoding FStar.BV.bvmul>

(declare-fun FStar.BV.bvmul (Term Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.BV.bv_t n -> b: FStar.UInt.uint_t n -> FStar.BV.bv_t n
(declare-fun Tm_arrow_47069acdb1afc7788115a14a78a224dc () Term)
(declare-fun FStar.BV.bvmul@tok () Term)

; </end encoding FStar.BV.bvmul>


; <Start encoding FStar.BV.int2bv_mul>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BV.int2bv_mul (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BV.int2bv_mul@tok () Term)

; </end encoding FStar.BV.int2bv_mul>


; End Externals for interface FStar.BV


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End interface FStar.BV (186 decls; total size 12101)

;;; Start module FStar.Order

; Externals for module FStar.Order


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Order.order () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Order.Lt () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Lt
(declare-fun FStar.Order.Lt@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Order.Eq () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Eq
(declare-fun FStar.Order.Eq@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Order.Gt () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Gt
(declare-fun FStar.Order.Gt@tok () Term)

; <Start encoding FStar.Order.order>


; <start constructor FStar.Order.order>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Order.order ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(= __@x0
FStar.Order.order)))

; </end constructor FStar.Order.order>


; </end encoding FStar.Order.order>


; <Start encoding FStar.Order.Lt>


; <start constructor FStar.Order.Lt>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Order.Lt ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
107)
(= __@x0
FStar.Order.Lt)))

; </end constructor FStar.Order.Lt>


; </end encoding FStar.Order.Lt>


; <Start encoding FStar.Order.Eq>


; <start constructor FStar.Order.Eq>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Order.Eq ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
109)
(= __@x0
FStar.Order.Eq)))

; </end constructor FStar.Order.Eq>


; </end encoding FStar.Order.Eq>


; <Start encoding FStar.Order.Gt>


; <start constructor FStar.Order.Gt>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Order.Gt ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
111)
(= __@x0
FStar.Order.Gt)))

; </end constructor FStar.Order.Gt>


; </end encoding FStar.Order.Gt>


; </end encoding >


; <Start encoding FStar.Order.order__uu___haseq>


; </end encoding FStar.Order.order__uu___haseq>


; <Start encoding FStar.Order.uu___is_Lt>

(declare-fun FStar.Order.uu___is_Lt (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Order.order -> Prims.bool
(declare-fun Tm_arrow_f4733f9ca94c256fc110aab69c684315 () Term)
(declare-fun FStar.Order.uu___is_Lt@tok () Term)

; </end encoding FStar.Order.uu___is_Lt>


; <Skipped FStar.Order.uu___is_Lt/>


; <Start encoding FStar.Order.uu___is_Eq>

(declare-fun FStar.Order.uu___is_Eq (Term) Term)

(declare-fun FStar.Order.uu___is_Eq@tok () Term)

; </end encoding FStar.Order.uu___is_Eq>


; <Skipped FStar.Order.uu___is_Eq/>


; <Start encoding FStar.Order.uu___is_Gt>

(declare-fun FStar.Order.uu___is_Gt (Term) Term)

(declare-fun FStar.Order.uu___is_Gt@tok () Term)

; </end encoding FStar.Order.uu___is_Gt>


; <Skipped FStar.Order.uu___is_Gt/>


; <Skipped FStar.Order.ge/>


; <Start encoding FStar.Order.ge>

(declare-fun FStar.Order.ge (Term) Term)

(declare-fun FStar.Order.ge@tok () Term)

; </end encoding FStar.Order.ge>


; <Skipped FStar.Order.le/>


; <Start encoding FStar.Order.le>

(declare-fun FStar.Order.le (Term) Term)

(declare-fun FStar.Order.le@tok () Term)

; </end encoding FStar.Order.le>


; <Skipped FStar.Order.ne/>


; <Start encoding FStar.Order.ne>

(declare-fun FStar.Order.ne (Term) Term)

(declare-fun FStar.Order.ne@tok () Term)

; </end encoding FStar.Order.ne>


; <Skipped FStar.Order.gt/>


; <Start encoding FStar.Order.gt>

(declare-fun FStar.Order.gt (Term) Term)

(declare-fun FStar.Order.gt@tok () Term)

; </end encoding FStar.Order.gt>


; <Skipped FStar.Order.lt/>


; <Start encoding FStar.Order.lt>

(declare-fun FStar.Order.lt (Term) Term)

(declare-fun FStar.Order.lt@tok () Term)

; </end encoding FStar.Order.lt>


; <Skipped FStar.Order.eq/>


; <Start encoding FStar.Order.eq>

(declare-fun FStar.Order.eq (Term) Term)

(declare-fun FStar.Order.eq@tok () Term)

; </end encoding FStar.Order.eq>


; <Skipped FStar.Order.lex/>


; <Start encoding FStar.Order.lex>

;;;;;;;;;;;;;;;;_: Prims.unit -> FStar.Order.order
(declare-fun Tm_arrow_d033f7df6f155778bf181d0a4bdfb5f0 () Term)
(declare-fun FStar.Order.lex (Term Term) Term)

;;;;;;;;;;;;;;;;o1: FStar.Order.order -> o2: (_: Prims.unit -> FStar.Order.order) -> FStar.Order.order
(declare-fun Tm_arrow_231731d350f71bf65fc5e4ecede26541 () Term)
(declare-fun FStar.Order.lex@tok () Term)


; </end encoding FStar.Order.lex>


; <Skipped FStar.Order.order_from_int/>


; <Start encoding FStar.Order.order_from_int>

(declare-fun FStar.Order.order_from_int (Term) Term)
;;;;;;;;;;;;;;;;i: Prims.int -> FStar.Order.order
(declare-fun Tm_arrow_31eae5dcff218f899aa0b20c8d50d0f2 () Term)
(declare-fun FStar.Order.order_from_int@tok () Term)

; </end encoding FStar.Order.order_from_int>


; <Skipped FStar.Order.int_of_order/>


; <Start encoding FStar.Order.int_of_order>

(declare-fun FStar.Order.int_of_order (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Order.order -> Prims.int
(declare-fun Tm_arrow_10db853014bf42255ab4fb43c484cc2f () Term)
(declare-fun FStar.Order.int_of_order@tok () Term)

; </end encoding FStar.Order.int_of_order>


; <Skipped FStar.Order.compare_int/>


; <Start encoding FStar.Order.compare_int>

(declare-fun FStar.Order.compare_int (Term Term) Term)
;;;;;;;;;;;;;;;;i: Prims.int -> j: Prims.int -> FStar.Order.order
(declare-fun Tm_arrow_6dc5617877ea21824a3786c54945e754 () Term)
(declare-fun FStar.Order.compare_int@tok () Term)

; </end encoding FStar.Order.compare_int>


; <Start encoding FStar.Order.compare_list>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Order.compare_list.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Order.compare_list.fuel_instrumented_token () Term)
(declare-fun FStar.Order.compare_list (Term Term Term Term) Term)
(declare-fun FStar.Order.compare_list@tok () Term)
(declare-fun Tm_refine_c4ca0045c23e9d6917d9058bb1a95736 (Term Term) Term)

;;;;;;;;;;;;;;;;x: a{x << l1} -> y: a{y << l2} -> FStar.Order.order
(declare-fun Tm_arrow_e58951d4c03bef7faba3cf2bbc2bc6c9 (Term Term Term) Term)

(declare-fun Tm_abs_119e643a5c05187801d1e234c8b74e97 (Fuel Term Term Term) Term)






;;;;;;;;;;;;;;;;l1: Prims.list a -> l2: Prims.list a -> f: (x: a{x << l1} -> y: a{y << l2} -> FStar.Order.order)   -> FStar.Order.order
(declare-fun Tm_arrow_0cf8a3f58c3073b99b5547c8ff90ce24 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Order.compare_list; Namespace FStar.Order
(assert (! 
;; def=FStar.Order.fst(69,8-69,20); use=FStar.Order.fst(69,8-69,20)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (FStar.Order.compare_list.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4)
(FStar.Order.compare_list.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4))
 

:pattern ((FStar.Order.compare_list.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4))
:qid @fuel_irrelevance_FStar.Order.compare_list.fuel_instrumented))

:named @fuel_irrelevance_FStar.Order.compare_list.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Order.compare_list; Namespace FStar.Order
(assert (! 
;; def=FStar.Order.fst(69,8-69,20); use=FStar.Order.fst(69,8-69,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Order.compare_list @x0
@x1
@x2
@x3)
(FStar.Order.compare_list.fuel_instrumented MaxFuel
@x0
@x1
@x2
@x3))
 

:pattern ((FStar.Order.compare_list @x0
@x1
@x2
@x3))
:qid @fuel_correspondence_FStar.Order.compare_list.fuel_instrumented))

:named @fuel_correspondence_FStar.Order.compare_list.fuel_instrumented))

; </end encoding FStar.Order.compare_list>


; <Skipped FStar.Order.compare_option/>


; <Start encoding FStar.Order.compare_option>

;;;;;;;;;;;;;;;;_: 'a -> _: 'a -> FStar.Order.order
(declare-fun Tm_arrow_ccb3ed22b175455b00531b67b5c7d856 (Term) Term)
(declare-fun FStar.Order.compare_option (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;f: (_: 'a -> _: 'a -> FStar.Order.order) ->     x: FStar.Pervasives.Native.option 'a ->     y: FStar.Pervasives.Native.option 'a   -> FStar.Order.order
(declare-fun Tm_arrow_c05924edaff2b70dddf604252cd68f59 () Term)
(declare-fun FStar.Order.compare_option@tok () Term)


; </end encoding FStar.Order.compare_option>


; End Externals for module FStar.Order


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End module FStar.Order (144 decls; total size 9296)

;;; Start interface FStar.VConfig

; Externals for interface FStar.VConfig


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.VConfig.vconfig () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.VConfig.Mkvconfig (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.VConfig.Mkvconfig_initial_fuel (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.VConfig.Mkvconfig_max_fuel (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.VConfig.Mkvconfig_initial_ifuel (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.VConfig.Mkvconfig_max_ifuel (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.VConfig.Mkvconfig_detail_errors (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.VConfig.Mkvconfig_detail_hint_replay (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.VConfig.Mkvconfig_no_smt (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.VConfig.Mkvconfig_quake_lo (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.VConfig.Mkvconfig_quake_hi (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.VConfig.Mkvconfig_quake_keep (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.VConfig.Mkvconfig_retry (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.VConfig.Mkvconfig_smtencoding_elim_box (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.VConfig.Mkvconfig_smtencoding_nl_arith_repr (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.VConfig.Mkvconfig_smtencoding_l_arith_repr (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.VConfig.Mkvconfig_smtencoding_valid_intro (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.VConfig.Mkvconfig_smtencoding_valid_elim (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.VConfig.Mkvconfig_tcnorm (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.VConfig.Mkvconfig_no_plugins (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.VConfig.Mkvconfig_no_tactics (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.VConfig.Mkvconfig_z3cliopt (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.VConfig.Mkvconfig_z3smtopt (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.VConfig.Mkvconfig_z3refresh (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.VConfig.Mkvconfig_z3rlimit (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.VConfig.Mkvconfig_z3rlimit_factor (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.VConfig.Mkvconfig_z3seed (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.VConfig.Mkvconfig_trivial_pre_for_unannotated_effectful_fns (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.VConfig.Mkvconfig_reuse_hint_for (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mkvconfig
(declare-fun FStar.VConfig.Mkvconfig@tok () Term)
;;;;;;;;;;;;;;;;initial_fuel: Prims.int ->     max_fuel: Prims.int ->     initial_ifuel: Prims.int ->     max_ifuel: Prims.int ->     detail_errors: Prims.bool ->     detail_hint_replay: Prims.bool ->     no_smt: Prims.bool ->     quake_lo: Prims.int ->     quake_hi: Prims.int ->     quake_keep: Prims.bool ->     retry: Prims.bool ->     smtencoding_elim_box: Prims.bool ->     smtencoding_nl_arith_repr: Prims.string ->     smtencoding_l_arith_repr: Prims.string ->     smtencoding_valid_intro: Prims.bool ->     smtencoding_valid_elim: Prims.bool ->     tcnorm: Prims.bool ->     no_plugins: Prims.bool ->     no_tactics: Prims.bool ->     z3cliopt: Prims.list Prims.string ->     z3smtopt: Prims.list Prims.string ->     z3refresh: Prims.bool ->     z3rlimit: Prims.int ->     z3rlimit_factor: Prims.int ->     z3seed: Prims.int ->     trivial_pre_for_unannotated_effectful_fns: Prims.bool ->     reuse_hint_for: FStar.Pervasives.Native.option Prims.string   -> FStar.VConfig.vconfig
(declare-fun Tm_arrow_e18e03452fb0a9d23a39c5b0b087de8f () Term)

; <Start encoding FStar.VConfig.vconfig>


; <start constructor FStar.VConfig.vconfig>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.VConfig.vconfig ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(= __@x0
FStar.VConfig.vconfig)))

; </end constructor FStar.VConfig.vconfig>


; </end encoding FStar.VConfig.vconfig>


; <Start encoding FStar.VConfig.Mkvconfig>


; <start constructor FStar.VConfig.Mkvconfig>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.VConfig.Mkvconfig ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
107)
(= __@x0
(FStar.VConfig.Mkvconfig (FStar.VConfig.Mkvconfig_initial_fuel __@x0)
(FStar.VConfig.Mkvconfig_max_fuel __@x0)
(FStar.VConfig.Mkvconfig_initial_ifuel __@x0)
(FStar.VConfig.Mkvconfig_max_ifuel __@x0)
(FStar.VConfig.Mkvconfig_detail_errors __@x0)
(FStar.VConfig.Mkvconfig_detail_hint_replay __@x0)
(FStar.VConfig.Mkvconfig_no_smt __@x0)
(FStar.VConfig.Mkvconfig_quake_lo __@x0)
(FStar.VConfig.Mkvconfig_quake_hi __@x0)
(FStar.VConfig.Mkvconfig_quake_keep __@x0)
(FStar.VConfig.Mkvconfig_retry __@x0)
(FStar.VConfig.Mkvconfig_smtencoding_elim_box __@x0)
(FStar.VConfig.Mkvconfig_smtencoding_nl_arith_repr __@x0)
(FStar.VConfig.Mkvconfig_smtencoding_l_arith_repr __@x0)
(FStar.VConfig.Mkvconfig_smtencoding_valid_intro __@x0)
(FStar.VConfig.Mkvconfig_smtencoding_valid_elim __@x0)
(FStar.VConfig.Mkvconfig_tcnorm __@x0)
(FStar.VConfig.Mkvconfig_no_plugins __@x0)
(FStar.VConfig.Mkvconfig_no_tactics __@x0)
(FStar.VConfig.Mkvconfig_z3cliopt __@x0)
(FStar.VConfig.Mkvconfig_z3smtopt __@x0)
(FStar.VConfig.Mkvconfig_z3refresh __@x0)
(FStar.VConfig.Mkvconfig_z3rlimit __@x0)
(FStar.VConfig.Mkvconfig_z3rlimit_factor __@x0)
(FStar.VConfig.Mkvconfig_z3seed __@x0)
(FStar.VConfig.Mkvconfig_trivial_pre_for_unannotated_effectful_fns __@x0)
(FStar.VConfig.Mkvconfig_reuse_hint_for __@x0)))))

; </end constructor FStar.VConfig.Mkvconfig>


; </end encoding FStar.VConfig.Mkvconfig>


; </end encoding >


; <Start encoding FStar.VConfig.vconfig__uu___haseq>


; </end encoding FStar.VConfig.vconfig__uu___haseq>


; <Start encoding FStar.VConfig.__proj__Mkvconfig__item__initial_fuel>

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__initial_fuel (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.VConfig.vconfig -> Prims.int
(declare-fun Tm_arrow_fa60819ba83b157f126e827263ef2930 () Term)
(declare-fun FStar.VConfig.__proj__Mkvconfig__item__initial_fuel@tok () Term)

; </end encoding FStar.VConfig.__proj__Mkvconfig__item__initial_fuel>


; <Skipped FStar.VConfig.__proj__Mkvconfig__item__initial_fuel/>


; <Start encoding FStar.VConfig.__proj__Mkvconfig__item__max_fuel>

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__max_fuel (Term) Term)

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__max_fuel@tok () Term)

; </end encoding FStar.VConfig.__proj__Mkvconfig__item__max_fuel>


; <Skipped FStar.VConfig.__proj__Mkvconfig__item__max_fuel/>


; <Start encoding FStar.VConfig.__proj__Mkvconfig__item__initial_ifuel>

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__initial_ifuel (Term) Term)

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__initial_ifuel@tok () Term)

; </end encoding FStar.VConfig.__proj__Mkvconfig__item__initial_ifuel>


; <Skipped FStar.VConfig.__proj__Mkvconfig__item__initial_ifuel/>


; <Start encoding FStar.VConfig.__proj__Mkvconfig__item__max_ifuel>

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__max_ifuel (Term) Term)

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__max_ifuel@tok () Term)

; </end encoding FStar.VConfig.__proj__Mkvconfig__item__max_ifuel>


; <Skipped FStar.VConfig.__proj__Mkvconfig__item__max_ifuel/>


; <Start encoding FStar.VConfig.__proj__Mkvconfig__item__detail_errors>

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__detail_errors (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.VConfig.vconfig -> Prims.bool
(declare-fun Tm_arrow_b3060ac86e17feb35458ee8476877f2b () Term)
(declare-fun FStar.VConfig.__proj__Mkvconfig__item__detail_errors@tok () Term)

; </end encoding FStar.VConfig.__proj__Mkvconfig__item__detail_errors>


; <Skipped FStar.VConfig.__proj__Mkvconfig__item__detail_errors/>


; <Start encoding FStar.VConfig.__proj__Mkvconfig__item__detail_hint_replay>

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__detail_hint_replay (Term) Term)

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__detail_hint_replay@tok () Term)

; </end encoding FStar.VConfig.__proj__Mkvconfig__item__detail_hint_replay>


; <Skipped FStar.VConfig.__proj__Mkvconfig__item__detail_hint_replay/>


; <Start encoding FStar.VConfig.__proj__Mkvconfig__item__no_smt>

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__no_smt (Term) Term)

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__no_smt@tok () Term)

; </end encoding FStar.VConfig.__proj__Mkvconfig__item__no_smt>


; <Skipped FStar.VConfig.__proj__Mkvconfig__item__no_smt/>


; <Start encoding FStar.VConfig.__proj__Mkvconfig__item__quake_lo>

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__quake_lo (Term) Term)

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__quake_lo@tok () Term)

; </end encoding FStar.VConfig.__proj__Mkvconfig__item__quake_lo>


; <Skipped FStar.VConfig.__proj__Mkvconfig__item__quake_lo/>


; <Start encoding FStar.VConfig.__proj__Mkvconfig__item__quake_hi>

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__quake_hi (Term) Term)

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__quake_hi@tok () Term)

; </end encoding FStar.VConfig.__proj__Mkvconfig__item__quake_hi>


; <Skipped FStar.VConfig.__proj__Mkvconfig__item__quake_hi/>


; <Start encoding FStar.VConfig.__proj__Mkvconfig__item__quake_keep>

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__quake_keep (Term) Term)

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__quake_keep@tok () Term)

; </end encoding FStar.VConfig.__proj__Mkvconfig__item__quake_keep>


; <Skipped FStar.VConfig.__proj__Mkvconfig__item__quake_keep/>


; <Start encoding FStar.VConfig.__proj__Mkvconfig__item__retry>

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__retry (Term) Term)

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__retry@tok () Term)

; </end encoding FStar.VConfig.__proj__Mkvconfig__item__retry>


; <Skipped FStar.VConfig.__proj__Mkvconfig__item__retry/>


; <Start encoding FStar.VConfig.__proj__Mkvconfig__item__smtencoding_elim_box>

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__smtencoding_elim_box (Term) Term)

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__smtencoding_elim_box@tok () Term)

; </end encoding FStar.VConfig.__proj__Mkvconfig__item__smtencoding_elim_box>


; <Skipped FStar.VConfig.__proj__Mkvconfig__item__smtencoding_elim_box/>


; <Start encoding FStar.VConfig.__proj__Mkvconfig__item__smtencoding_nl_arith_repr>

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__smtencoding_nl_arith_repr (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.VConfig.vconfig -> Prims.string
(declare-fun Tm_arrow_97e95fa845d3a10a3ffa3d28ae212a7c () Term)
(declare-fun FStar.VConfig.__proj__Mkvconfig__item__smtencoding_nl_arith_repr@tok () Term)

; </end encoding FStar.VConfig.__proj__Mkvconfig__item__smtencoding_nl_arith_repr>


; <Skipped FStar.VConfig.__proj__Mkvconfig__item__smtencoding_nl_arith_repr/>


; <Start encoding FStar.VConfig.__proj__Mkvconfig__item__smtencoding_l_arith_repr>

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__smtencoding_l_arith_repr (Term) Term)

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__smtencoding_l_arith_repr@tok () Term)

; </end encoding FStar.VConfig.__proj__Mkvconfig__item__smtencoding_l_arith_repr>


; <Skipped FStar.VConfig.__proj__Mkvconfig__item__smtencoding_l_arith_repr/>


; <Start encoding FStar.VConfig.__proj__Mkvconfig__item__smtencoding_valid_intro>

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__smtencoding_valid_intro (Term) Term)

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__smtencoding_valid_intro@tok () Term)

; </end encoding FStar.VConfig.__proj__Mkvconfig__item__smtencoding_valid_intro>


; <Skipped FStar.VConfig.__proj__Mkvconfig__item__smtencoding_valid_intro/>


; <Start encoding FStar.VConfig.__proj__Mkvconfig__item__smtencoding_valid_elim>

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__smtencoding_valid_elim (Term) Term)

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__smtencoding_valid_elim@tok () Term)

; </end encoding FStar.VConfig.__proj__Mkvconfig__item__smtencoding_valid_elim>


; <Skipped FStar.VConfig.__proj__Mkvconfig__item__smtencoding_valid_elim/>


; <Start encoding FStar.VConfig.__proj__Mkvconfig__item__tcnorm>

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__tcnorm (Term) Term)

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__tcnorm@tok () Term)

; </end encoding FStar.VConfig.__proj__Mkvconfig__item__tcnorm>


; <Skipped FStar.VConfig.__proj__Mkvconfig__item__tcnorm/>


; <Start encoding FStar.VConfig.__proj__Mkvconfig__item__no_plugins>

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__no_plugins (Term) Term)

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__no_plugins@tok () Term)

; </end encoding FStar.VConfig.__proj__Mkvconfig__item__no_plugins>


; <Skipped FStar.VConfig.__proj__Mkvconfig__item__no_plugins/>


; <Start encoding FStar.VConfig.__proj__Mkvconfig__item__no_tactics>

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__no_tactics (Term) Term)

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__no_tactics@tok () Term)

; </end encoding FStar.VConfig.__proj__Mkvconfig__item__no_tactics>


; <Skipped FStar.VConfig.__proj__Mkvconfig__item__no_tactics/>


; <Start encoding FStar.VConfig.__proj__Mkvconfig__item__z3cliopt>

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__z3cliopt (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.VConfig.vconfig -> Prims.list Prims.string
(declare-fun Tm_arrow_236c39ab22335aded9cf3e1b6e4f0f1f () Term)
(declare-fun FStar.VConfig.__proj__Mkvconfig__item__z3cliopt@tok () Term)

; </end encoding FStar.VConfig.__proj__Mkvconfig__item__z3cliopt>


; <Skipped FStar.VConfig.__proj__Mkvconfig__item__z3cliopt/>


; <Start encoding FStar.VConfig.__proj__Mkvconfig__item__z3smtopt>

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__z3smtopt (Term) Term)

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__z3smtopt@tok () Term)

; </end encoding FStar.VConfig.__proj__Mkvconfig__item__z3smtopt>


; <Skipped FStar.VConfig.__proj__Mkvconfig__item__z3smtopt/>


; <Start encoding FStar.VConfig.__proj__Mkvconfig__item__z3refresh>

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__z3refresh (Term) Term)

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__z3refresh@tok () Term)

; </end encoding FStar.VConfig.__proj__Mkvconfig__item__z3refresh>


; <Skipped FStar.VConfig.__proj__Mkvconfig__item__z3refresh/>


; <Start encoding FStar.VConfig.__proj__Mkvconfig__item__z3rlimit>

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__z3rlimit (Term) Term)

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__z3rlimit@tok () Term)

; </end encoding FStar.VConfig.__proj__Mkvconfig__item__z3rlimit>


; <Skipped FStar.VConfig.__proj__Mkvconfig__item__z3rlimit/>


; <Start encoding FStar.VConfig.__proj__Mkvconfig__item__z3rlimit_factor>

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__z3rlimit_factor (Term) Term)

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__z3rlimit_factor@tok () Term)

; </end encoding FStar.VConfig.__proj__Mkvconfig__item__z3rlimit_factor>


; <Skipped FStar.VConfig.__proj__Mkvconfig__item__z3rlimit_factor/>


; <Start encoding FStar.VConfig.__proj__Mkvconfig__item__z3seed>

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__z3seed (Term) Term)

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__z3seed@tok () Term)

; </end encoding FStar.VConfig.__proj__Mkvconfig__item__z3seed>


; <Skipped FStar.VConfig.__proj__Mkvconfig__item__z3seed/>


; <Start encoding FStar.VConfig.__proj__Mkvconfig__item__trivial_pre_for_unannotated_effectful_fns>

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__trivial_pre_for_unannotated_effectful_fns (Term) Term)

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__trivial_pre_for_unannotated_effectful_fns@tok () Term)

; </end encoding FStar.VConfig.__proj__Mkvconfig__item__trivial_pre_for_unannotated_effectful_fns>


; <Skipped FStar.VConfig.__proj__Mkvconfig__item__trivial_pre_for_unannotated_effectful_fns/>


; <Start encoding FStar.VConfig.__proj__Mkvconfig__item__reuse_hint_for>

(declare-fun FStar.VConfig.__proj__Mkvconfig__item__reuse_hint_for (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.VConfig.vconfig -> FStar.Pervasives.Native.option Prims.string
(declare-fun Tm_arrow_791b16da19e7ad1d2e4273201de3fa50 () Term)
(declare-fun FStar.VConfig.__proj__Mkvconfig__item__reuse_hint_for@tok () Term)

; </end encoding FStar.VConfig.__proj__Mkvconfig__item__reuse_hint_for>


; <Skipped FStar.VConfig.__proj__Mkvconfig__item__reuse_hint_for/>


; <Start encoding FStar.VConfig.check_with>

(declare-fun FStar.VConfig.check_with (Term) Term)
;;;;;;;;;;;;;;;;vcfg: FStar.VConfig.vconfig -> Prims.unit
(declare-fun Tm_arrow_4eaa1e3ddbb9985bb2fb206c91c61984 () Term)
(declare-fun FStar.VConfig.check_with@tok () Term)

; </end encoding FStar.VConfig.check_with>


; End Externals for interface FStar.VConfig


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End interface FStar.VConfig (215 decls; total size 18261)

;;; Start module FStar.Sealed.Inhabited

; Externals for module FStar.Sealed.Inhabited


; <Start encoding FStar.Sealed.Inhabited.sealed_>

(declare-fun FStar.Sealed.Inhabited.sealed_ (Term Term) Term)

(declare-fun FStar.Sealed.Inhabited.sealed_@tok () Term)

; </end encoding FStar.Sealed.Inhabited.sealed_>


; <Start encoding FStar.Sealed.Inhabited.is_sealed>

(declare-fun FStar.Sealed.Inhabited.is_sealed (Term Term Term) Term)
;;;;;;;;;;;;;;;;x: FStar.Sealed.Inhabited.sealed_ witness -> Prims.prop
(declare-fun Tm_arrow_7b4cc4d4df9da58519ba6828186ddd69 () Term)
(declare-fun FStar.Sealed.Inhabited.is_sealed@tok () Term)

; </end encoding FStar.Sealed.Inhabited.is_sealed>


; <Start encoding FStar.Sealed.Inhabited.sealed>

(declare-fun FStar.Sealed.Inhabited.sealed (Term Term) Term)

(declare-fun FStar.Sealed.Inhabited.sealed@tok () Term)
(declare-fun Tm_refine_25fe9861b42cf97d961ff4c8f44eb399 (Term Term) Term)

; </end encoding FStar.Sealed.Inhabited.sealed>


; <Start encoding FStar.Sealed.Inhabited.seal>

(declare-fun FStar.Sealed.Inhabited.seal (Term Term Term) Term)
;;;;;;;;;;;;;;;;x: a -> FStar.Sealed.Inhabited.sealed w
(declare-fun Tm_arrow_4cdc2d8c9a72a03857fe78dec70286c9 () Term)
(declare-fun FStar.Sealed.Inhabited.seal@tok () Term)

; </end encoding FStar.Sealed.Inhabited.seal>


; <Start encoding FStar.Sealed.Inhabited.sealed_singleton>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Sealed.Inhabited.sealed_singleton (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Sealed.Inhabited.sealed_singleton@tok () Term)

; </end encoding FStar.Sealed.Inhabited.sealed_singleton>


; End Externals for module FStar.Sealed.Inhabited


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End module FStar.Sealed.Inhabited (28 decls; total size 2772)

;;; Start interface FStar.Stubs.Syntax.Syntax

; Externals for interface FStar.Stubs.Syntax.Syntax


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Syntax.Syntax.subst_elt () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Syntax.Syntax.DB (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Syntax.Syntax.DB__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Syntax.Syntax.DB__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: DB
(declare-fun FStar.Stubs.Syntax.Syntax.DB@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Syntax.Syntax.DT (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Syntax.Syntax.DT__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Syntax.Syntax.DT__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: DT
(declare-fun FStar.Stubs.Syntax.Syntax.DT@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Syntax.Syntax.NM (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Syntax.Syntax.NM__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Syntax.Syntax.NM__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: NM
(declare-fun FStar.Stubs.Syntax.Syntax.NM@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Syntax.Syntax.NT (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Syntax.Syntax.NT__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Syntax.Syntax.NT__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: NT
(declare-fun FStar.Stubs.Syntax.Syntax.NT@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Syntax.Syntax.UN (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Syntax.Syntax.UN__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Syntax.Syntax.UN__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: UN
(declare-fun FStar.Stubs.Syntax.Syntax.UN@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Stubs.Syntax.Syntax.UD (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Syntax.Syntax.UD__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Stubs.Syntax.Syntax.UD__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: UD
(declare-fun FStar.Stubs.Syntax.Syntax.UD@tok () Term)
;;;;;;;;;;;;;;;;_0: Prims.int -> _1: FStar.Reflection.Types.namedv -> FStar.Stubs.Syntax.Syntax.subst_elt
(declare-fun Tm_arrow_26b247961058524be562a85ebb127df5 () Term)
;;;;;;;;;;;;;;;;_0: Prims.int -> _1: FStar.Reflection.Types.term -> FStar.Stubs.Syntax.Syntax.subst_elt
(declare-fun Tm_arrow_814d90b233065e671dd9c9f10d0e2ee4 () Term)
;;;;;;;;;;;;;;;;_0: FStar.Reflection.Types.namedv -> _1: Prims.int -> FStar.Stubs.Syntax.Syntax.subst_elt
(declare-fun Tm_arrow_1eb3f60ee606552ac2b4b0f2d30831e8 () Term)
;;;;;;;;;;;;;;;;_0: FStar.Reflection.Types.namedv -> _1: FStar.Reflection.Types.term   -> FStar.Stubs.Syntax.Syntax.subst_elt
(declare-fun Tm_arrow_4f9704238097185c094b543b683ae3d7 () Term)
;;;;;;;;;;;;;;;;_0: Prims.int -> _1: FStar.Reflection.Types.universe -> FStar.Stubs.Syntax.Syntax.subst_elt
(declare-fun Tm_arrow_c4c4b6b101d0e46a36807cebb257eb07 () Term)
;;;;;;;;;;;;;;;;_0: FStar.Reflection.Types.ident -> _1: Prims.int -> FStar.Stubs.Syntax.Syntax.subst_elt
(declare-fun Tm_arrow_97fe9ad0d645cfaf6258d5938ec935de () Term)

; <Start encoding FStar.Stubs.Syntax.Syntax.subst_elt>


; <start constructor FStar.Stubs.Syntax.Syntax.subst_elt>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Syntax.Syntax.subst_elt ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(= __@x0
FStar.Stubs.Syntax.Syntax.subst_elt)))

; </end constructor FStar.Stubs.Syntax.Syntax.subst_elt>


; </end encoding FStar.Stubs.Syntax.Syntax.subst_elt>


; <Start encoding FStar.Stubs.Syntax.Syntax.DB>


; <start constructor FStar.Stubs.Syntax.Syntax.DB>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Syntax.Syntax.DB ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
107)
(= __@x0
(FStar.Stubs.Syntax.Syntax.DB (FStar.Stubs.Syntax.Syntax.DB__0 __@x0)
(FStar.Stubs.Syntax.Syntax.DB__1 __@x0)))))

; </end constructor FStar.Stubs.Syntax.Syntax.DB>


; </end encoding FStar.Stubs.Syntax.Syntax.DB>


; <Start encoding FStar.Stubs.Syntax.Syntax.DT>


; <start constructor FStar.Stubs.Syntax.Syntax.DT>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Syntax.Syntax.DT ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
112)
(= __@x0
(FStar.Stubs.Syntax.Syntax.DT (FStar.Stubs.Syntax.Syntax.DT__0 __@x0)
(FStar.Stubs.Syntax.Syntax.DT__1 __@x0)))))

; </end constructor FStar.Stubs.Syntax.Syntax.DT>


; </end encoding FStar.Stubs.Syntax.Syntax.DT>


; <Start encoding FStar.Stubs.Syntax.Syntax.NM>


; <start constructor FStar.Stubs.Syntax.Syntax.NM>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Syntax.Syntax.NM ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
117)
(= __@x0
(FStar.Stubs.Syntax.Syntax.NM (FStar.Stubs.Syntax.Syntax.NM__0 __@x0)
(FStar.Stubs.Syntax.Syntax.NM__1 __@x0)))))

; </end constructor FStar.Stubs.Syntax.Syntax.NM>


; </end encoding FStar.Stubs.Syntax.Syntax.NM>


; <Start encoding FStar.Stubs.Syntax.Syntax.NT>


; <start constructor FStar.Stubs.Syntax.Syntax.NT>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Syntax.Syntax.NT ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
122)
(= __@x0
(FStar.Stubs.Syntax.Syntax.NT (FStar.Stubs.Syntax.Syntax.NT__0 __@x0)
(FStar.Stubs.Syntax.Syntax.NT__1 __@x0)))))

; </end constructor FStar.Stubs.Syntax.Syntax.NT>


; </end encoding FStar.Stubs.Syntax.Syntax.NT>


; <Start encoding FStar.Stubs.Syntax.Syntax.UN>


; <start constructor FStar.Stubs.Syntax.Syntax.UN>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Syntax.Syntax.UN ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
127)
(= __@x0
(FStar.Stubs.Syntax.Syntax.UN (FStar.Stubs.Syntax.Syntax.UN__0 __@x0)
(FStar.Stubs.Syntax.Syntax.UN__1 __@x0)))))

; </end constructor FStar.Stubs.Syntax.Syntax.UN>


; </end encoding FStar.Stubs.Syntax.Syntax.UN>


; <Start encoding FStar.Stubs.Syntax.Syntax.UD>


; <start constructor FStar.Stubs.Syntax.Syntax.UD>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Stubs.Syntax.Syntax.UD ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
132)
(= __@x0
(FStar.Stubs.Syntax.Syntax.UD (FStar.Stubs.Syntax.Syntax.UD__0 __@x0)
(FStar.Stubs.Syntax.Syntax.UD__1 __@x0)))))

; </end constructor FStar.Stubs.Syntax.Syntax.UD>


; </end encoding FStar.Stubs.Syntax.Syntax.UD>


; </end encoding >


; <Start encoding FStar.Stubs.Syntax.Syntax.uu___is_DB>

(declare-fun FStar.Stubs.Syntax.Syntax.uu___is_DB (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Stubs.Syntax.Syntax.subst_elt -> Prims.bool
(declare-fun Tm_arrow_ff864b6401b5fc78e14a15c40c1b4753 () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.uu___is_DB@tok () Term)

; </end encoding FStar.Stubs.Syntax.Syntax.uu___is_DB>


; <Skipped FStar.Stubs.Syntax.Syntax.uu___is_DB/>


; <Start encoding FStar.Stubs.Syntax.Syntax.__proj__DB__item___0>

(declare-fun Tm_refine_a60c1955d846f28c14f0dccba675d567 () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__DB__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Stubs.Syntax.Syntax.subst_elt{DB? _} -> Prims.int
(declare-fun Tm_arrow_fbe5c1d2ec49b638fafab35efe4cb7fc () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__DB__item___0@tok () Term)

; </end encoding FStar.Stubs.Syntax.Syntax.__proj__DB__item___0>


; <Skipped FStar.Stubs.Syntax.Syntax.__proj__DB__item___0/>


; <Start encoding FStar.Stubs.Syntax.Syntax.__proj__DB__item___1>


(declare-fun FStar.Stubs.Syntax.Syntax.__proj__DB__item___1 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Stubs.Syntax.Syntax.subst_elt{DB? _} -> FStar.Reflection.Types.namedv
(declare-fun Tm_arrow_6c5383e74129959454468b800da9e6a1 () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__DB__item___1@tok () Term)

; </end encoding FStar.Stubs.Syntax.Syntax.__proj__DB__item___1>


; <Skipped FStar.Stubs.Syntax.Syntax.__proj__DB__item___1/>


; <Start encoding FStar.Stubs.Syntax.Syntax.uu___is_DT>

(declare-fun FStar.Stubs.Syntax.Syntax.uu___is_DT (Term) Term)

(declare-fun FStar.Stubs.Syntax.Syntax.uu___is_DT@tok () Term)

; </end encoding FStar.Stubs.Syntax.Syntax.uu___is_DT>


; <Skipped FStar.Stubs.Syntax.Syntax.uu___is_DT/>


; <Start encoding FStar.Stubs.Syntax.Syntax.__proj__DT__item___0>

(declare-fun Tm_refine_ae77d74f5b6921008dc31af9e75a50f5 () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__DT__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Stubs.Syntax.Syntax.subst_elt{DT? _} -> Prims.int
(declare-fun Tm_arrow_ec80e358e0b6c3126a190adc2e7ed82f () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__DT__item___0@tok () Term)

; </end encoding FStar.Stubs.Syntax.Syntax.__proj__DT__item___0>


; <Skipped FStar.Stubs.Syntax.Syntax.__proj__DT__item___0/>


; <Start encoding FStar.Stubs.Syntax.Syntax.__proj__DT__item___1>


(declare-fun FStar.Stubs.Syntax.Syntax.__proj__DT__item___1 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Stubs.Syntax.Syntax.subst_elt{DT? _} -> FStar.Reflection.Types.term
(declare-fun Tm_arrow_aa12a5ec50fae265c889d0a0113b831c () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__DT__item___1@tok () Term)

; </end encoding FStar.Stubs.Syntax.Syntax.__proj__DT__item___1>


; <Skipped FStar.Stubs.Syntax.Syntax.__proj__DT__item___1/>


; <Start encoding FStar.Stubs.Syntax.Syntax.uu___is_NM>

(declare-fun FStar.Stubs.Syntax.Syntax.uu___is_NM (Term) Term)

(declare-fun FStar.Stubs.Syntax.Syntax.uu___is_NM@tok () Term)

; </end encoding FStar.Stubs.Syntax.Syntax.uu___is_NM>


; <Skipped FStar.Stubs.Syntax.Syntax.uu___is_NM/>


; <Start encoding FStar.Stubs.Syntax.Syntax.__proj__NM__item___0>

(declare-fun Tm_refine_0267269f45d6fd12cdc74fb6d004d04b () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__NM__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Stubs.Syntax.Syntax.subst_elt{NM? _} -> FStar.Reflection.Types.namedv
(declare-fun Tm_arrow_0db18be4814ec316d584e13fba47ea10 () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__NM__item___0@tok () Term)

; </end encoding FStar.Stubs.Syntax.Syntax.__proj__NM__item___0>


; <Skipped FStar.Stubs.Syntax.Syntax.__proj__NM__item___0/>


; <Start encoding FStar.Stubs.Syntax.Syntax.__proj__NM__item___1>


(declare-fun FStar.Stubs.Syntax.Syntax.__proj__NM__item___1 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Stubs.Syntax.Syntax.subst_elt{NM? _} -> Prims.int
(declare-fun Tm_arrow_e5d6161c1e6c19b7586b9d39cf764b0b () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__NM__item___1@tok () Term)

; </end encoding FStar.Stubs.Syntax.Syntax.__proj__NM__item___1>


; <Skipped FStar.Stubs.Syntax.Syntax.__proj__NM__item___1/>


; <Start encoding FStar.Stubs.Syntax.Syntax.uu___is_NT>

(declare-fun FStar.Stubs.Syntax.Syntax.uu___is_NT (Term) Term)

(declare-fun FStar.Stubs.Syntax.Syntax.uu___is_NT@tok () Term)

; </end encoding FStar.Stubs.Syntax.Syntax.uu___is_NT>


; <Skipped FStar.Stubs.Syntax.Syntax.uu___is_NT/>


; <Start encoding FStar.Stubs.Syntax.Syntax.__proj__NT__item___0>

(declare-fun Tm_refine_99c151968ce40534e3fb9a4c963b1a19 () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__NT__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Stubs.Syntax.Syntax.subst_elt{NT? _} -> FStar.Reflection.Types.namedv
(declare-fun Tm_arrow_93ffb746e7d9544fc4298c7b60767610 () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__NT__item___0@tok () Term)

; </end encoding FStar.Stubs.Syntax.Syntax.__proj__NT__item___0>


; <Skipped FStar.Stubs.Syntax.Syntax.__proj__NT__item___0/>


; <Start encoding FStar.Stubs.Syntax.Syntax.__proj__NT__item___1>


(declare-fun FStar.Stubs.Syntax.Syntax.__proj__NT__item___1 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Stubs.Syntax.Syntax.subst_elt{NT? _} -> FStar.Reflection.Types.term
(declare-fun Tm_arrow_3cfce5be3d045253665990f9d32cca70 () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__NT__item___1@tok () Term)

; </end encoding FStar.Stubs.Syntax.Syntax.__proj__NT__item___1>


; <Skipped FStar.Stubs.Syntax.Syntax.__proj__NT__item___1/>


; <Start encoding FStar.Stubs.Syntax.Syntax.uu___is_UN>

(declare-fun FStar.Stubs.Syntax.Syntax.uu___is_UN (Term) Term)

(declare-fun FStar.Stubs.Syntax.Syntax.uu___is_UN@tok () Term)

; </end encoding FStar.Stubs.Syntax.Syntax.uu___is_UN>


; <Skipped FStar.Stubs.Syntax.Syntax.uu___is_UN/>


; <Start encoding FStar.Stubs.Syntax.Syntax.__proj__UN__item___0>

(declare-fun Tm_refine_7f643c5eb6d5b9ca17fe4c5e0fdbe65e () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__UN__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Stubs.Syntax.Syntax.subst_elt{UN? _} -> Prims.int
(declare-fun Tm_arrow_d5a928ef007e0924ae61bff0f755601a () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__UN__item___0@tok () Term)

; </end encoding FStar.Stubs.Syntax.Syntax.__proj__UN__item___0>


; <Skipped FStar.Stubs.Syntax.Syntax.__proj__UN__item___0/>


; <Start encoding FStar.Stubs.Syntax.Syntax.__proj__UN__item___1>


(declare-fun FStar.Stubs.Syntax.Syntax.__proj__UN__item___1 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Stubs.Syntax.Syntax.subst_elt{UN? _} -> FStar.Reflection.Types.universe
(declare-fun Tm_arrow_61ed28075181ef2b287a1a51dccad172 () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__UN__item___1@tok () Term)

; </end encoding FStar.Stubs.Syntax.Syntax.__proj__UN__item___1>


; <Skipped FStar.Stubs.Syntax.Syntax.__proj__UN__item___1/>


; <Start encoding FStar.Stubs.Syntax.Syntax.uu___is_UD>

(declare-fun FStar.Stubs.Syntax.Syntax.uu___is_UD (Term) Term)

(declare-fun FStar.Stubs.Syntax.Syntax.uu___is_UD@tok () Term)

; </end encoding FStar.Stubs.Syntax.Syntax.uu___is_UD>


; <Skipped FStar.Stubs.Syntax.Syntax.uu___is_UD/>


; <Start encoding FStar.Stubs.Syntax.Syntax.__proj__UD__item___0>

(declare-fun Tm_refine_c8eb10759a737b8258f5bbb6f7ed1381 () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__UD__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Stubs.Syntax.Syntax.subst_elt{UD? _} -> FStar.Reflection.Types.ident
(declare-fun Tm_arrow_c30aee98abc436ddee0602838b0645e8 () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__UD__item___0@tok () Term)

; </end encoding FStar.Stubs.Syntax.Syntax.__proj__UD__item___0>


; <Skipped FStar.Stubs.Syntax.Syntax.__proj__UD__item___0/>


; <Start encoding FStar.Stubs.Syntax.Syntax.__proj__UD__item___1>


(declare-fun FStar.Stubs.Syntax.Syntax.__proj__UD__item___1 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Stubs.Syntax.Syntax.subst_elt{UD? _} -> Prims.int
(declare-fun Tm_arrow_70d9cc9e254749c84727be5bbadd656e () Term)
(declare-fun FStar.Stubs.Syntax.Syntax.__proj__UD__item___1@tok () Term)

; </end encoding FStar.Stubs.Syntax.Syntax.__proj__UD__item___1>


; <Skipped FStar.Stubs.Syntax.Syntax.__proj__UD__item___1/>


; <Start encoding FStar.Stubs.Syntax.Syntax.subst_t>

(declare-fun FStar.Stubs.Syntax.Syntax.subst_t () Term)

; </end encoding FStar.Stubs.Syntax.Syntax.subst_t>


; End Externals for interface FStar.Stubs.Syntax.Syntax


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End interface FStar.Stubs.Syntax.Syntax (206 decls; total size 16243)

;;; Start interface FStar.Reflection.V2.Data

; Externals for interface FStar.Reflection.V2.Data


; <Start encoding FStar.Reflection.V2.Data.ppname_t>

(declare-fun FStar.Reflection.V2.Data.ppname_t () Term)

; </end encoding FStar.Reflection.V2.Data.ppname_t>


; <Start encoding FStar.Reflection.V2.Data.as_ppname>

(declare-fun FStar.Reflection.V2.Data.as_ppname (Term) Term)
;;;;;;;;;;;;;;;;x: Prims.string -> FStar.Reflection.V2.Data.ppname_t
(declare-fun Tm_arrow_5e997437df59f2f0116ef3fa1e01aaec () Term)
(declare-fun FStar.Reflection.V2.Data.as_ppname@tok () Term)

; </end encoding FStar.Reflection.V2.Data.as_ppname>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.vconst () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.C_Unit () Term)
;;;;;;;;;;;;;;;;data constructor proxy: C_Unit
(declare-fun FStar.Reflection.V2.Data.C_Unit@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.C_Int (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.C_Int__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: C_Int
(declare-fun FStar.Reflection.V2.Data.C_Int@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.C_True () Term)
;;;;;;;;;;;;;;;;data constructor proxy: C_True
(declare-fun FStar.Reflection.V2.Data.C_True@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.C_False () Term)
;;;;;;;;;;;;;;;;data constructor proxy: C_False
(declare-fun FStar.Reflection.V2.Data.C_False@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.C_String (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.C_String__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: C_String
(declare-fun FStar.Reflection.V2.Data.C_String@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.C_Range (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.C_Range__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: C_Range
(declare-fun FStar.Reflection.V2.Data.C_Range@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.C_Reify () Term)
;;;;;;;;;;;;;;;;data constructor proxy: C_Reify
(declare-fun FStar.Reflection.V2.Data.C_Reify@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.C_Reflect (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.C_Reflect__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: C_Reflect
(declare-fun FStar.Reflection.V2.Data.C_Reflect@tok () Term)
;;;;;;;;;;;;;;;;_0: Prims.int -> FStar.Reflection.V2.Data.vconst
(declare-fun Tm_arrow_0536ed8565fab4d02e450e8618a258c8 () Term)
;;;;;;;;;;;;;;;;_0: Prims.string -> FStar.Reflection.V2.Data.vconst
(declare-fun Tm_arrow_df0a17c66e4674742643002e3cc47104 () Term)
;;;;;;;;;;;;;;;;_0: FStar.Range.range -> FStar.Reflection.V2.Data.vconst
(declare-fun Tm_arrow_b0c668b63a48effec9300ef1c315419f () Term)
;;;;;;;;;;;;;;;;_0: FStar.Reflection.Types.name -> FStar.Reflection.V2.Data.vconst
(declare-fun Tm_arrow_56217857b97a2bc42c8fa5e71f102b0f () Term)

; <Start encoding FStar.Reflection.V2.Data.vconst>


; <start constructor FStar.Reflection.V2.Data.vconst>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.vconst ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
103)
(= __@x0
FStar.Reflection.V2.Data.vconst)))

; </end constructor FStar.Reflection.V2.Data.vconst>


; </end encoding FStar.Reflection.V2.Data.vconst>


; <Start encoding FStar.Reflection.V2.Data.C_Unit>


; <start constructor FStar.Reflection.V2.Data.C_Unit>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.C_Unit ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
109)
(= __@x0
FStar.Reflection.V2.Data.C_Unit)))

; </end constructor FStar.Reflection.V2.Data.C_Unit>


; </end encoding FStar.Reflection.V2.Data.C_Unit>


; <Start encoding FStar.Reflection.V2.Data.C_Int>


; <start constructor FStar.Reflection.V2.Data.C_Int>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.C_Int ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
111)
(= __@x0
(FStar.Reflection.V2.Data.C_Int (FStar.Reflection.V2.Data.C_Int__0 __@x0)))))

; </end constructor FStar.Reflection.V2.Data.C_Int>


; </end encoding FStar.Reflection.V2.Data.C_Int>


; <Start encoding FStar.Reflection.V2.Data.C_True>


; <start constructor FStar.Reflection.V2.Data.C_True>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.C_True ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
116)
(= __@x0
FStar.Reflection.V2.Data.C_True)))

; </end constructor FStar.Reflection.V2.Data.C_True>


; </end encoding FStar.Reflection.V2.Data.C_True>


; <Start encoding FStar.Reflection.V2.Data.C_False>


; <start constructor FStar.Reflection.V2.Data.C_False>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.C_False ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
118)
(= __@x0
FStar.Reflection.V2.Data.C_False)))

; </end constructor FStar.Reflection.V2.Data.C_False>


; </end encoding FStar.Reflection.V2.Data.C_False>


; <Start encoding FStar.Reflection.V2.Data.C_String>


; <start constructor FStar.Reflection.V2.Data.C_String>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.C_String ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
120)
(= __@x0
(FStar.Reflection.V2.Data.C_String (FStar.Reflection.V2.Data.C_String__0 __@x0)))))

; </end constructor FStar.Reflection.V2.Data.C_String>


; </end encoding FStar.Reflection.V2.Data.C_String>


; <Start encoding FStar.Reflection.V2.Data.C_Range>


; <start constructor FStar.Reflection.V2.Data.C_Range>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.C_Range ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
125)
(= __@x0
(FStar.Reflection.V2.Data.C_Range (FStar.Reflection.V2.Data.C_Range__0 __@x0)))))

; </end constructor FStar.Reflection.V2.Data.C_Range>


; </end encoding FStar.Reflection.V2.Data.C_Range>


; <Start encoding FStar.Reflection.V2.Data.C_Reify>


; <start constructor FStar.Reflection.V2.Data.C_Reify>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.C_Reify ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
130)
(= __@x0
FStar.Reflection.V2.Data.C_Reify)))

; </end constructor FStar.Reflection.V2.Data.C_Reify>


; </end encoding FStar.Reflection.V2.Data.C_Reify>


; <Start encoding FStar.Reflection.V2.Data.C_Reflect>


; <start constructor FStar.Reflection.V2.Data.C_Reflect>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.C_Reflect ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
132)
(= __@x0
(FStar.Reflection.V2.Data.C_Reflect (FStar.Reflection.V2.Data.C_Reflect__0 __@x0)))))

; </end constructor FStar.Reflection.V2.Data.C_Reflect>


; </end encoding FStar.Reflection.V2.Data.C_Reflect>


; </end encoding >


; <Start encoding FStar.Reflection.V2.Data.uu___is_C_Unit>

(declare-fun FStar.Reflection.V2.Data.uu___is_C_Unit (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V2.Data.vconst -> Prims.bool
(declare-fun Tm_arrow_0aab3cbd3c1a6c17bf140eda32be7ae2 () Term)
(declare-fun FStar.Reflection.V2.Data.uu___is_C_Unit@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_C_Unit>


; <Skipped FStar.Reflection.V2.Data.uu___is_C_Unit/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_C_Int>

(declare-fun FStar.Reflection.V2.Data.uu___is_C_Int (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_C_Int@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_C_Int>


; <Skipped FStar.Reflection.V2.Data.uu___is_C_Int/>


; <Start encoding FStar.Reflection.V2.Data.__proj__C_Int__item___0>

(declare-fun Tm_refine_6be356e2d3262378324df07f656f3972 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__C_Int__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.vconst{C_Int? _} -> Prims.int
(declare-fun Tm_arrow_2048aa9c00c04e62754977ca4df88aaf () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__C_Int__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__C_Int__item___0>


; <Skipped FStar.Reflection.V2.Data.__proj__C_Int__item___0/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_C_True>

(declare-fun FStar.Reflection.V2.Data.uu___is_C_True (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_C_True@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_C_True>


; <Skipped FStar.Reflection.V2.Data.uu___is_C_True/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_C_False>

(declare-fun FStar.Reflection.V2.Data.uu___is_C_False (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_C_False@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_C_False>


; <Skipped FStar.Reflection.V2.Data.uu___is_C_False/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_C_String>

(declare-fun FStar.Reflection.V2.Data.uu___is_C_String (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_C_String@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_C_String>


; <Skipped FStar.Reflection.V2.Data.uu___is_C_String/>


; <Start encoding FStar.Reflection.V2.Data.__proj__C_String__item___0>

(declare-fun Tm_refine_2d1236ac07f5c1a5f222016082cc5d12 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__C_String__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.vconst{C_String? _} -> Prims.string
(declare-fun Tm_arrow_b7488c05669b8bcb0584a2159bf86be4 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__C_String__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__C_String__item___0>


; <Skipped FStar.Reflection.V2.Data.__proj__C_String__item___0/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_C_Range>

(declare-fun FStar.Reflection.V2.Data.uu___is_C_Range (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_C_Range@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_C_Range>


; <Skipped FStar.Reflection.V2.Data.uu___is_C_Range/>


; <Start encoding FStar.Reflection.V2.Data.__proj__C_Range__item___0>

(declare-fun Tm_refine_5e55ce2f71b276b57532062470143e92 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__C_Range__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.vconst{C_Range? _} -> FStar.Range.range
(declare-fun Tm_arrow_36442e7babda689c4bd7fd30dd33eaec () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__C_Range__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__C_Range__item___0>


; <Skipped FStar.Reflection.V2.Data.__proj__C_Range__item___0/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_C_Reify>

(declare-fun FStar.Reflection.V2.Data.uu___is_C_Reify (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_C_Reify@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_C_Reify>


; <Skipped FStar.Reflection.V2.Data.uu___is_C_Reify/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_C_Reflect>

(declare-fun FStar.Reflection.V2.Data.uu___is_C_Reflect (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_C_Reflect@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_C_Reflect>


; <Skipped FStar.Reflection.V2.Data.uu___is_C_Reflect/>


; <Start encoding FStar.Reflection.V2.Data.__proj__C_Reflect__item___0>

(declare-fun Tm_refine_389bb6501589b62293c9cf3799a4595f () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__C_Reflect__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.vconst{C_Reflect? _} -> FStar.Reflection.Types.name
(declare-fun Tm_arrow_2829f953f01b26759221312a67ef0e77 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__C_Reflect__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__C_Reflect__item___0>


; <Skipped FStar.Reflection.V2.Data.__proj__C_Reflect__item___0/>


; <Start encoding FStar.Reflection.V2.Data.universes>

(declare-fun FStar.Reflection.V2.Data.universes () Term)

; </end encoding FStar.Reflection.V2.Data.universes>


; <Start encoding FStar.Reflection.V2.Data.ident_view>

(declare-fun FStar.Reflection.V2.Data.ident_view () Term)

; </end encoding FStar.Reflection.V2.Data.ident_view>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.pattern () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Pat_Constant (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Pat_Constant_c (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Pat_Constant
(declare-fun FStar.Reflection.V2.Data.Pat_Constant@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Pat_Cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Pat_Cons_head (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Pat_Cons_univs (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Pat_Cons_subpats (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Pat_Cons
(declare-fun FStar.Reflection.V2.Data.Pat_Cons@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Pat_Var (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Pat_Var_sort (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Pat_Var_ppname (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Pat_Var
(declare-fun FStar.Reflection.V2.Data.Pat_Var@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Pat_Dot_Term (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Pat_Dot_Term_t (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Pat_Dot_Term
(declare-fun FStar.Reflection.V2.Data.Pat_Dot_Term@tok () Term)
;;;;;;;;;;;;;;;;c: FStar.Reflection.V2.Data.vconst -> FStar.Reflection.V2.Data.pattern
(declare-fun Tm_arrow_8638a8b2672db885bde2740372ba90e8 () Term)
;;;;;;;;;;;;;;;;head: FStar.Reflection.Types.fv ->     univs: FStar.Pervasives.Native.option FStar.Reflection.V2.Data.universes ->     subpats: Prims.list (FStar.Reflection.V2.Data.pattern * Prims.bool)   -> FStar.Reflection.V2.Data.pattern
(declare-fun Tm_arrow_28dddbd7cdc5553a11fb7435ce8413a4 () Term)
;;;;;;;;;;;;;;;;sort: FStar.Sealed.sealed FStar.Reflection.Types.term -> ppname: FStar.Reflection.V2.Data.ppname_t   -> FStar.Reflection.V2.Data.pattern
(declare-fun Tm_arrow_3367145eb1cdc9f2721842b489b6eb1a () Term)
;;;;;;;;;;;;;;;;t: FStar.Pervasives.Native.option FStar.Reflection.Types.term -> FStar.Reflection.V2.Data.pattern
(declare-fun Tm_arrow_73ea40fb7a0d597f118d9e0511758d58 () Term)

; <Start encoding FStar.Reflection.V2.Data.pattern>


; <start constructor FStar.Reflection.V2.Data.pattern>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.pattern ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
168)
(= __@x0
FStar.Reflection.V2.Data.pattern)))

; </end constructor FStar.Reflection.V2.Data.pattern>


; </end encoding FStar.Reflection.V2.Data.pattern>


; <Start encoding FStar.Reflection.V2.Data.Pat_Constant>


; <start constructor FStar.Reflection.V2.Data.Pat_Constant>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Pat_Constant ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
174)
(= __@x0
(FStar.Reflection.V2.Data.Pat_Constant (FStar.Reflection.V2.Data.Pat_Constant_c __@x0)))))

; </end constructor FStar.Reflection.V2.Data.Pat_Constant>


; </end encoding FStar.Reflection.V2.Data.Pat_Constant>


; <Start encoding FStar.Reflection.V2.Data.Pat_Cons>


; <start constructor FStar.Reflection.V2.Data.Pat_Cons>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Pat_Cons ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
179)
(= __@x0
(FStar.Reflection.V2.Data.Pat_Cons (FStar.Reflection.V2.Data.Pat_Cons_head __@x0)
(FStar.Reflection.V2.Data.Pat_Cons_univs __@x0)
(FStar.Reflection.V2.Data.Pat_Cons_subpats __@x0)))))

; </end constructor FStar.Reflection.V2.Data.Pat_Cons>


; </end encoding FStar.Reflection.V2.Data.Pat_Cons>


; <Start encoding FStar.Reflection.V2.Data.Pat_Var>


; <start constructor FStar.Reflection.V2.Data.Pat_Var>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Pat_Var ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
184)
(= __@x0
(FStar.Reflection.V2.Data.Pat_Var (FStar.Reflection.V2.Data.Pat_Var_sort __@x0)
(FStar.Reflection.V2.Data.Pat_Var_ppname __@x0)))))

; </end constructor FStar.Reflection.V2.Data.Pat_Var>


; </end encoding FStar.Reflection.V2.Data.Pat_Var>


; <Start encoding FStar.Reflection.V2.Data.Pat_Dot_Term>


; <start constructor FStar.Reflection.V2.Data.Pat_Dot_Term>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Pat_Dot_Term ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
189)
(= __@x0
(FStar.Reflection.V2.Data.Pat_Dot_Term (FStar.Reflection.V2.Data.Pat_Dot_Term_t __@x0)))))

; </end constructor FStar.Reflection.V2.Data.Pat_Dot_Term>


; </end encoding FStar.Reflection.V2.Data.Pat_Dot_Term>


; </end encoding >


; <Start encoding FStar.Reflection.V2.Data.uu___is_Pat_Constant>

(declare-fun FStar.Reflection.V2.Data.uu___is_Pat_Constant (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V2.Data.pattern -> Prims.bool
(declare-fun Tm_arrow_54dd3c6420df0bd92f3e11ad3a11e43c () Term)
(declare-fun FStar.Reflection.V2.Data.uu___is_Pat_Constant@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Pat_Constant>


; <Skipped FStar.Reflection.V2.Data.uu___is_Pat_Constant/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Pat_Constant__item__c>

(declare-fun Tm_refine_4a76ec556b4bf99037514e037a779342 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Pat_Constant__item__c (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.pattern{Pat_Constant? _} -> FStar.Reflection.V2.Data.vconst
(declare-fun Tm_arrow_e497ed2e299aaf83c2ac0937f50387a4 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Pat_Constant__item__c@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Pat_Constant__item__c>


; <Skipped FStar.Reflection.V2.Data.__proj__Pat_Constant__item__c/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_Pat_Cons>

(declare-fun FStar.Reflection.V2.Data.uu___is_Pat_Cons (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_Pat_Cons@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Pat_Cons>


; <Skipped FStar.Reflection.V2.Data.uu___is_Pat_Cons/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Pat_Cons__item__head>

(declare-fun Tm_refine_12f3e54c7afdd8d641ac1bb415c0176e () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Pat_Cons__item__head (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.pattern{Pat_Cons? _} -> FStar.Reflection.Types.fv
(declare-fun Tm_arrow_baa49a6bdf6faae23d44dcee96da99c8 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Pat_Cons__item__head@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Pat_Cons__item__head>


; <Skipped FStar.Reflection.V2.Data.__proj__Pat_Cons__item__head/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Pat_Cons__item__univs>


(declare-fun FStar.Reflection.V2.Data.__proj__Pat_Cons__item__univs (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.pattern{Pat_Cons? _}   -> FStar.Pervasives.Native.option FStar.Reflection.V2.Data.universes
(declare-fun Tm_arrow_0494555f1c603c8efcab259758e1193f () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Pat_Cons__item__univs@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Pat_Cons__item__univs>


; <Skipped FStar.Reflection.V2.Data.__proj__Pat_Cons__item__univs/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Pat_Cons__item__subpats>


(declare-fun FStar.Reflection.V2.Data.__proj__Pat_Cons__item__subpats (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.pattern{Pat_Cons? _}   -> Prims.list (FStar.Reflection.V2.Data.pattern * Prims.bool)
(declare-fun Tm_arrow_3a5a22f6d3d98b57d1955bbb03ccba4e () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Pat_Cons__item__subpats@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Pat_Cons__item__subpats>


; <Skipped FStar.Reflection.V2.Data.__proj__Pat_Cons__item__subpats/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_Pat_Var>

(declare-fun FStar.Reflection.V2.Data.uu___is_Pat_Var (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_Pat_Var@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Pat_Var>


; <Skipped FStar.Reflection.V2.Data.uu___is_Pat_Var/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Pat_Var__item__sort>

(declare-fun Tm_refine_2356eda57bdc3bcf754347c953797405 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Pat_Var__item__sort (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.pattern{Pat_Var? _}   -> FStar.Sealed.sealed FStar.Reflection.Types.term
(declare-fun Tm_arrow_8bf937e9f7cb7692842f1fbf602b04b5 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Pat_Var__item__sort@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Pat_Var__item__sort>


; <Skipped FStar.Reflection.V2.Data.__proj__Pat_Var__item__sort/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Pat_Var__item__ppname>


(declare-fun FStar.Reflection.V2.Data.__proj__Pat_Var__item__ppname (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.pattern{Pat_Var? _} -> FStar.Reflection.V2.Data.ppname_t
(declare-fun Tm_arrow_4313c7a0c0e8cd25f8539e1b3b01eedc () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Pat_Var__item__ppname@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Pat_Var__item__ppname>


; <Skipped FStar.Reflection.V2.Data.__proj__Pat_Var__item__ppname/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_Pat_Dot_Term>

(declare-fun FStar.Reflection.V2.Data.uu___is_Pat_Dot_Term (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_Pat_Dot_Term@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Pat_Dot_Term>


; <Skipped FStar.Reflection.V2.Data.uu___is_Pat_Dot_Term/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Pat_Dot_Term__item__t>

(declare-fun Tm_refine_387ae430d416ff57f80544f744ed1bba () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Pat_Dot_Term__item__t (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.pattern{Pat_Dot_Term? _}   -> FStar.Pervasives.Native.option FStar.Reflection.Types.term
(declare-fun Tm_arrow_01a4d3cddffe47963a5dd338ebc30c63 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Pat_Dot_Term__item__t@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Pat_Dot_Term__item__t>


; <Skipped FStar.Reflection.V2.Data.__proj__Pat_Dot_Term__item__t/>


; <Start encoding FStar.Reflection.V2.Data.branch>

(declare-fun FStar.Reflection.V2.Data.branch () Term)

; </end encoding FStar.Reflection.V2.Data.branch>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.aqualv () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Q_Implicit () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Q_Implicit
(declare-fun FStar.Reflection.V2.Data.Q_Implicit@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Q_Explicit () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Q_Explicit
(declare-fun FStar.Reflection.V2.Data.Q_Explicit@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Q_Meta (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Q_Meta__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Q_Meta
(declare-fun FStar.Reflection.V2.Data.Q_Meta@tok () Term)
;;;;;;;;;;;;;;;;_0: FStar.Reflection.Types.term -> FStar.Reflection.V2.Data.aqualv
(declare-fun Tm_arrow_4fdf97995a557af65f215d49a7c13f6c () Term)

; <Start encoding FStar.Reflection.V2.Data.aqualv>


; <start constructor FStar.Reflection.V2.Data.aqualv>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.aqualv ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
229)
(= __@x0
FStar.Reflection.V2.Data.aqualv)))

; </end constructor FStar.Reflection.V2.Data.aqualv>


; </end encoding FStar.Reflection.V2.Data.aqualv>


; <Start encoding FStar.Reflection.V2.Data.Q_Implicit>


; <start constructor FStar.Reflection.V2.Data.Q_Implicit>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Q_Implicit ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
235)
(= __@x0
FStar.Reflection.V2.Data.Q_Implicit)))

; </end constructor FStar.Reflection.V2.Data.Q_Implicit>


; </end encoding FStar.Reflection.V2.Data.Q_Implicit>


; <Start encoding FStar.Reflection.V2.Data.Q_Explicit>


; <start constructor FStar.Reflection.V2.Data.Q_Explicit>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Q_Explicit ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
237)
(= __@x0
FStar.Reflection.V2.Data.Q_Explicit)))

; </end constructor FStar.Reflection.V2.Data.Q_Explicit>


; </end encoding FStar.Reflection.V2.Data.Q_Explicit>


; <Start encoding FStar.Reflection.V2.Data.Q_Meta>


; <start constructor FStar.Reflection.V2.Data.Q_Meta>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Q_Meta ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
239)
(= __@x0
(FStar.Reflection.V2.Data.Q_Meta (FStar.Reflection.V2.Data.Q_Meta__0 __@x0)))))

; </end constructor FStar.Reflection.V2.Data.Q_Meta>


; </end encoding FStar.Reflection.V2.Data.Q_Meta>


; </end encoding >


; <Start encoding FStar.Reflection.V2.Data.uu___is_Q_Implicit>

(declare-fun FStar.Reflection.V2.Data.uu___is_Q_Implicit (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V2.Data.aqualv -> Prims.bool
(declare-fun Tm_arrow_512877db13e4b9926a8e3afe9c0da25b () Term)
(declare-fun FStar.Reflection.V2.Data.uu___is_Q_Implicit@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Q_Implicit>


; <Skipped FStar.Reflection.V2.Data.uu___is_Q_Implicit/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_Q_Explicit>

(declare-fun FStar.Reflection.V2.Data.uu___is_Q_Explicit (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_Q_Explicit@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Q_Explicit>


; <Skipped FStar.Reflection.V2.Data.uu___is_Q_Explicit/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_Q_Meta>

(declare-fun FStar.Reflection.V2.Data.uu___is_Q_Meta (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_Q_Meta@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Q_Meta>


; <Skipped FStar.Reflection.V2.Data.uu___is_Q_Meta/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Q_Meta__item___0>

(declare-fun Tm_refine_3c9a44d9ca06063db843084f6233446a () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Q_Meta__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.aqualv{Q_Meta? _} -> FStar.Reflection.Types.term
(declare-fun Tm_arrow_d50f6914fc0bdeaaed276466197b37d7 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Q_Meta__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Q_Meta__item___0>


; <Skipped FStar.Reflection.V2.Data.__proj__Q_Meta__item___0/>


; <Start encoding FStar.Reflection.V2.Data.argv>

(declare-fun FStar.Reflection.V2.Data.argv () Term)

; </end encoding FStar.Reflection.V2.Data.argv>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.namedv_view () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Mknamedv_view (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Mknamedv_view_uniq (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Mknamedv_view_sort (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Mknamedv_view_ppname (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mknamedv_view
(declare-fun FStar.Reflection.V2.Data.Mknamedv_view@tok () Term)
;;;;;;;;;;;;;;;;uniq: Prims.nat ->     sort: FStar.Sealed.sealed FStar.Reflection.Types.typ ->     ppname: FStar.Reflection.V2.Data.ppname_t   -> FStar.Reflection.V2.Data.namedv_view
(declare-fun Tm_arrow_9cf58a7370c3f7ff996defbeccc41be6 () Term)

; <Start encoding FStar.Reflection.V2.Data.namedv_view>


; <start constructor FStar.Reflection.V2.Data.namedv_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.namedv_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
253)
(= __@x0
FStar.Reflection.V2.Data.namedv_view)))

; </end constructor FStar.Reflection.V2.Data.namedv_view>


; </end encoding FStar.Reflection.V2.Data.namedv_view>


; <Start encoding FStar.Reflection.V2.Data.Mknamedv_view>


; <start constructor FStar.Reflection.V2.Data.Mknamedv_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Mknamedv_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
259)
(= __@x0
(FStar.Reflection.V2.Data.Mknamedv_view (FStar.Reflection.V2.Data.Mknamedv_view_uniq __@x0)
(FStar.Reflection.V2.Data.Mknamedv_view_sort __@x0)
(FStar.Reflection.V2.Data.Mknamedv_view_ppname __@x0)))))

; </end constructor FStar.Reflection.V2.Data.Mknamedv_view>


; </end encoding FStar.Reflection.V2.Data.Mknamedv_view>


; </end encoding >


; <Start encoding FStar.Reflection.V2.Data.__proj__Mknamedv_view__item__uniq>

(declare-fun FStar.Reflection.V2.Data.__proj__Mknamedv_view__item__uniq (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V2.Data.namedv_view -> Prims.nat
(declare-fun Tm_arrow_5f5d9441708dbdab2baa4d8d0bbf2c65 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Mknamedv_view__item__uniq@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Mknamedv_view__item__uniq>


; <Skipped FStar.Reflection.V2.Data.__proj__Mknamedv_view__item__uniq/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Mknamedv_view__item__sort>

(declare-fun FStar.Reflection.V2.Data.__proj__Mknamedv_view__item__sort (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V2.Data.namedv_view -> FStar.Sealed.sealed FStar.Reflection.Types.typ
(declare-fun Tm_arrow_0eb220c4c3df8ba1e175e6e3707db1fa () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Mknamedv_view__item__sort@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Mknamedv_view__item__sort>


; <Skipped FStar.Reflection.V2.Data.__proj__Mknamedv_view__item__sort/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Mknamedv_view__item__ppname>

(declare-fun FStar.Reflection.V2.Data.__proj__Mknamedv_view__item__ppname (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V2.Data.namedv_view -> FStar.Reflection.V2.Data.ppname_t
(declare-fun Tm_arrow_08016a0b1668f322b651356b28042774 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Mknamedv_view__item__ppname@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Mknamedv_view__item__ppname>


; <Skipped FStar.Reflection.V2.Data.__proj__Mknamedv_view__item__ppname/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.bv_view () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Mkbv_view (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Mkbv_view_index (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Mkbv_view_sort (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Mkbv_view_ppname (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mkbv_view
(declare-fun FStar.Reflection.V2.Data.Mkbv_view@tok () Term)
;;;;;;;;;;;;;;;;index: Prims.nat ->     sort: FStar.Sealed.sealed FStar.Reflection.Types.typ ->     ppname: FStar.Reflection.V2.Data.ppname_t   -> FStar.Reflection.V2.Data.bv_view
(declare-fun Tm_arrow_f47d04ed92710f7dd7c242c87b6f8113 () Term)

; <Start encoding FStar.Reflection.V2.Data.bv_view>


; <start constructor FStar.Reflection.V2.Data.bv_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.bv_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
269)
(= __@x0
FStar.Reflection.V2.Data.bv_view)))

; </end constructor FStar.Reflection.V2.Data.bv_view>


; </end encoding FStar.Reflection.V2.Data.bv_view>


; <Start encoding FStar.Reflection.V2.Data.Mkbv_view>


; <start constructor FStar.Reflection.V2.Data.Mkbv_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Mkbv_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
275)
(= __@x0
(FStar.Reflection.V2.Data.Mkbv_view (FStar.Reflection.V2.Data.Mkbv_view_index __@x0)
(FStar.Reflection.V2.Data.Mkbv_view_sort __@x0)
(FStar.Reflection.V2.Data.Mkbv_view_ppname __@x0)))))

; </end constructor FStar.Reflection.V2.Data.Mkbv_view>


; </end encoding FStar.Reflection.V2.Data.Mkbv_view>


; </end encoding >


; <Start encoding FStar.Reflection.V2.Data.__proj__Mkbv_view__item__index>

(declare-fun FStar.Reflection.V2.Data.__proj__Mkbv_view__item__index (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V2.Data.bv_view -> Prims.nat
(declare-fun Tm_arrow_edc1c82662f5b1633eb5f08d8e6de262 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Mkbv_view__item__index@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Mkbv_view__item__index>


; <Skipped FStar.Reflection.V2.Data.__proj__Mkbv_view__item__index/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Mkbv_view__item__sort>

(declare-fun FStar.Reflection.V2.Data.__proj__Mkbv_view__item__sort (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V2.Data.bv_view -> FStar.Sealed.sealed FStar.Reflection.Types.typ
(declare-fun Tm_arrow_f8c1f64ad0e6dcbc124557ae5918b432 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Mkbv_view__item__sort@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Mkbv_view__item__sort>


; <Skipped FStar.Reflection.V2.Data.__proj__Mkbv_view__item__sort/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Mkbv_view__item__ppname>

(declare-fun FStar.Reflection.V2.Data.__proj__Mkbv_view__item__ppname (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V2.Data.bv_view -> FStar.Reflection.V2.Data.ppname_t
(declare-fun Tm_arrow_3818e93dc61d49a621202d46179d6456 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Mkbv_view__item__ppname@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Mkbv_view__item__ppname>


; <Skipped FStar.Reflection.V2.Data.__proj__Mkbv_view__item__ppname/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.binder_view () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Mkbinder_view (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Mkbinder_view_sort (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Mkbinder_view_qual (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Mkbinder_view_attrs (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Mkbinder_view_ppname (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mkbinder_view
(declare-fun FStar.Reflection.V2.Data.Mkbinder_view@tok () Term)
;;;;;;;;;;;;;;;;sort: FStar.Reflection.Types.typ ->     qual: FStar.Reflection.V2.Data.aqualv ->     attrs: Prims.list FStar.Reflection.Types.term ->     ppname: FStar.Reflection.V2.Data.ppname_t   -> FStar.Reflection.V2.Data.binder_view
(declare-fun Tm_arrow_65a68c80a602ee3460c203793a072465 () Term)

; <Start encoding FStar.Reflection.V2.Data.binder_view>


; <start constructor FStar.Reflection.V2.Data.binder_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.binder_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
285)
(= __@x0
FStar.Reflection.V2.Data.binder_view)))

; </end constructor FStar.Reflection.V2.Data.binder_view>


; </end encoding FStar.Reflection.V2.Data.binder_view>


; <Start encoding FStar.Reflection.V2.Data.Mkbinder_view>


; <start constructor FStar.Reflection.V2.Data.Mkbinder_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Mkbinder_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
291)
(= __@x0
(FStar.Reflection.V2.Data.Mkbinder_view (FStar.Reflection.V2.Data.Mkbinder_view_sort __@x0)
(FStar.Reflection.V2.Data.Mkbinder_view_qual __@x0)
(FStar.Reflection.V2.Data.Mkbinder_view_attrs __@x0)
(FStar.Reflection.V2.Data.Mkbinder_view_ppname __@x0)))))

; </end constructor FStar.Reflection.V2.Data.Mkbinder_view>


; </end encoding FStar.Reflection.V2.Data.Mkbinder_view>


; </end encoding >


; <Start encoding FStar.Reflection.V2.Data.__proj__Mkbinder_view__item__sort>

(declare-fun FStar.Reflection.V2.Data.__proj__Mkbinder_view__item__sort (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V2.Data.binder_view -> FStar.Reflection.Types.typ
(declare-fun Tm_arrow_76ba39fe6551569c9f17b8b71a655b6c () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Mkbinder_view__item__sort@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Mkbinder_view__item__sort>


; <Skipped FStar.Reflection.V2.Data.__proj__Mkbinder_view__item__sort/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Mkbinder_view__item__qual>

(declare-fun FStar.Reflection.V2.Data.__proj__Mkbinder_view__item__qual (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V2.Data.binder_view -> FStar.Reflection.V2.Data.aqualv
(declare-fun Tm_arrow_3994565603c4d2b2b01795bf13d55259 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Mkbinder_view__item__qual@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Mkbinder_view__item__qual>


; <Skipped FStar.Reflection.V2.Data.__proj__Mkbinder_view__item__qual/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Mkbinder_view__item__attrs>

(declare-fun FStar.Reflection.V2.Data.__proj__Mkbinder_view__item__attrs (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V2.Data.binder_view -> Prims.list FStar.Reflection.Types.term
(declare-fun Tm_arrow_9239d0bd7b00863acde6b3065caa6649 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Mkbinder_view__item__attrs@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Mkbinder_view__item__attrs>


; <Skipped FStar.Reflection.V2.Data.__proj__Mkbinder_view__item__attrs/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Mkbinder_view__item__ppname>

(declare-fun FStar.Reflection.V2.Data.__proj__Mkbinder_view__item__ppname (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V2.Data.binder_view -> FStar.Reflection.V2.Data.ppname_t
(declare-fun Tm_arrow_04a372af15a7226027b6307f7146570a () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Mkbinder_view__item__ppname@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Mkbinder_view__item__ppname>


; <Skipped FStar.Reflection.V2.Data.__proj__Mkbinder_view__item__ppname/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.binding () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Mkbinding (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Mkbinding_uniq (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Mkbinding_sort (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Mkbinding_ppname (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mkbinding
(declare-fun FStar.Reflection.V2.Data.Mkbinding@tok () Term)
;;;;;;;;;;;;;;;;uniq: Prims.nat -> sort: FStar.Reflection.Types.typ -> ppname: FStar.Reflection.V2.Data.ppname_t   -> FStar.Reflection.V2.Data.binding
(declare-fun Tm_arrow_50d792d51d0d1a896bbb2ee29b38988e () Term)

; <Start encoding FStar.Reflection.V2.Data.binding>


; <start constructor FStar.Reflection.V2.Data.binding>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.binding ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
303)
(= __@x0
FStar.Reflection.V2.Data.binding)))

; </end constructor FStar.Reflection.V2.Data.binding>


; </end encoding FStar.Reflection.V2.Data.binding>


; <Start encoding FStar.Reflection.V2.Data.Mkbinding>


; <start constructor FStar.Reflection.V2.Data.Mkbinding>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Mkbinding ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
309)
(= __@x0
(FStar.Reflection.V2.Data.Mkbinding (FStar.Reflection.V2.Data.Mkbinding_uniq __@x0)
(FStar.Reflection.V2.Data.Mkbinding_sort __@x0)
(FStar.Reflection.V2.Data.Mkbinding_ppname __@x0)))))

; </end constructor FStar.Reflection.V2.Data.Mkbinding>


; </end encoding FStar.Reflection.V2.Data.Mkbinding>


; </end encoding >


; <Start encoding FStar.Reflection.V2.Data.__proj__Mkbinding__item__uniq>

(declare-fun FStar.Reflection.V2.Data.__proj__Mkbinding__item__uniq (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V2.Data.binding -> Prims.nat
(declare-fun Tm_arrow_beba2559c95b3dfb671e4896b7aefc16 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Mkbinding__item__uniq@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Mkbinding__item__uniq>


; <Skipped FStar.Reflection.V2.Data.__proj__Mkbinding__item__uniq/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Mkbinding__item__sort>

(declare-fun FStar.Reflection.V2.Data.__proj__Mkbinding__item__sort (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V2.Data.binding -> FStar.Reflection.Types.typ
(declare-fun Tm_arrow_dde26cb50413e1c2bb13c8dbc06be7f5 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Mkbinding__item__sort@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Mkbinding__item__sort>


; <Skipped FStar.Reflection.V2.Data.__proj__Mkbinding__item__sort/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Mkbinding__item__ppname>

(declare-fun FStar.Reflection.V2.Data.__proj__Mkbinding__item__ppname (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V2.Data.binding -> FStar.Reflection.V2.Data.ppname_t
(declare-fun Tm_arrow_49e171f96ab9efc97927b19e8550a2fb () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Mkbinding__item__ppname@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Mkbinding__item__ppname>


; <Skipped FStar.Reflection.V2.Data.__proj__Mkbinding__item__ppname/>


; <Start encoding FStar.Reflection.V2.Data.bindings>

(declare-fun FStar.Reflection.V2.Data.bindings () Term)

; </end encoding FStar.Reflection.V2.Data.bindings>


; <Start encoding FStar.Reflection.V2.Data.binder_is_simple>

(declare-fun FStar.Reflection.V2.Data.binder_is_simple (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Reflection.Types.binder -> Prims.bool
(declare-fun Tm_arrow_bb26eef9b2a773a7cbe8046f85d67c95 () Term)
(declare-fun FStar.Reflection.V2.Data.binder_is_simple@tok () Term)

; </end encoding FStar.Reflection.V2.Data.binder_is_simple>


; <Start encoding FStar.Reflection.V2.Data.simple_binder>

(declare-fun FStar.Reflection.V2.Data.simple_binder () Term)
(declare-fun Tm_refine_59ec70b79e7a0b94aa012278910238fd () Term)

; </end encoding FStar.Reflection.V2.Data.simple_binder>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.universe_view () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Uv_Zero () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Uv_Zero
(declare-fun FStar.Reflection.V2.Data.Uv_Zero@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Uv_Succ (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Uv_Succ__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Uv_Succ
(declare-fun FStar.Reflection.V2.Data.Uv_Succ@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Uv_Max (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Uv_Max__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Uv_Max
(declare-fun FStar.Reflection.V2.Data.Uv_Max@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Uv_BVar (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Uv_BVar__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Uv_BVar
(declare-fun FStar.Reflection.V2.Data.Uv_BVar@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Uv_Name (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Uv_Name__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Uv_Name
(declare-fun FStar.Reflection.V2.Data.Uv_Name@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Uv_Unif (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Uv_Unif__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Uv_Unif
(declare-fun FStar.Reflection.V2.Data.Uv_Unif@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Uv_Unk () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Uv_Unk
(declare-fun FStar.Reflection.V2.Data.Uv_Unk@tok () Term)
;;;;;;;;;;;;;;;;_0: FStar.Reflection.Types.universe -> FStar.Reflection.V2.Data.universe_view
(declare-fun Tm_arrow_48a211f2f73fa96d206c90c78fa391dc () Term)
;;;;;;;;;;;;;;;;_0: FStar.Reflection.V2.Data.universes -> FStar.Reflection.V2.Data.universe_view
(declare-fun Tm_arrow_db2072ba0369525e0f09f5eeec2fc9e3 () Term)
;;;;;;;;;;;;;;;;_0: Prims.nat -> FStar.Reflection.V2.Data.universe_view
(declare-fun Tm_arrow_6a12aaadcc0a2fa015d869fbdb6877be () Term)
;;;;;;;;;;;;;;;;_0: FStar.Reflection.Types.univ_name -> FStar.Reflection.V2.Data.universe_view
(declare-fun Tm_arrow_124418f10e15f200c1d841e7c10069b9 () Term)
;;;;;;;;;;;;;;;;_0: FStar.Reflection.Types.universe_uvar -> FStar.Reflection.V2.Data.universe_view
(declare-fun Tm_arrow_b25d0b5030a1cc7f58e6532d339847ee () Term)

; <Start encoding FStar.Reflection.V2.Data.universe_view>


; <start constructor FStar.Reflection.V2.Data.universe_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.universe_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
322)
(= __@x0
FStar.Reflection.V2.Data.universe_view)))

; </end constructor FStar.Reflection.V2.Data.universe_view>


; </end encoding FStar.Reflection.V2.Data.universe_view>


; <Start encoding FStar.Reflection.V2.Data.Uv_Zero>


; <start constructor FStar.Reflection.V2.Data.Uv_Zero>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Uv_Zero ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
328)
(= __@x0
FStar.Reflection.V2.Data.Uv_Zero)))

; </end constructor FStar.Reflection.V2.Data.Uv_Zero>


; </end encoding FStar.Reflection.V2.Data.Uv_Zero>


; <Start encoding FStar.Reflection.V2.Data.Uv_Succ>


; <start constructor FStar.Reflection.V2.Data.Uv_Succ>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Uv_Succ ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
330)
(= __@x0
(FStar.Reflection.V2.Data.Uv_Succ (FStar.Reflection.V2.Data.Uv_Succ__0 __@x0)))))

; </end constructor FStar.Reflection.V2.Data.Uv_Succ>


; </end encoding FStar.Reflection.V2.Data.Uv_Succ>


; <Start encoding FStar.Reflection.V2.Data.Uv_Max>


; <start constructor FStar.Reflection.V2.Data.Uv_Max>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Uv_Max ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
335)
(= __@x0
(FStar.Reflection.V2.Data.Uv_Max (FStar.Reflection.V2.Data.Uv_Max__0 __@x0)))))

; </end constructor FStar.Reflection.V2.Data.Uv_Max>


; </end encoding FStar.Reflection.V2.Data.Uv_Max>


; <Start encoding FStar.Reflection.V2.Data.Uv_BVar>


; <start constructor FStar.Reflection.V2.Data.Uv_BVar>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Uv_BVar ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
340)
(= __@x0
(FStar.Reflection.V2.Data.Uv_BVar (FStar.Reflection.V2.Data.Uv_BVar__0 __@x0)))))

; </end constructor FStar.Reflection.V2.Data.Uv_BVar>


; </end encoding FStar.Reflection.V2.Data.Uv_BVar>


; <Start encoding FStar.Reflection.V2.Data.Uv_Name>


; <start constructor FStar.Reflection.V2.Data.Uv_Name>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Uv_Name ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
345)
(= __@x0
(FStar.Reflection.V2.Data.Uv_Name (FStar.Reflection.V2.Data.Uv_Name__0 __@x0)))))

; </end constructor FStar.Reflection.V2.Data.Uv_Name>


; </end encoding FStar.Reflection.V2.Data.Uv_Name>


; <Start encoding FStar.Reflection.V2.Data.Uv_Unif>


; <start constructor FStar.Reflection.V2.Data.Uv_Unif>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Uv_Unif ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
350)
(= __@x0
(FStar.Reflection.V2.Data.Uv_Unif (FStar.Reflection.V2.Data.Uv_Unif__0 __@x0)))))

; </end constructor FStar.Reflection.V2.Data.Uv_Unif>


; </end encoding FStar.Reflection.V2.Data.Uv_Unif>


; <Start encoding FStar.Reflection.V2.Data.Uv_Unk>


; <start constructor FStar.Reflection.V2.Data.Uv_Unk>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Uv_Unk ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
355)
(= __@x0
FStar.Reflection.V2.Data.Uv_Unk)))

; </end constructor FStar.Reflection.V2.Data.Uv_Unk>


; </end encoding FStar.Reflection.V2.Data.Uv_Unk>


; </end encoding >


; <Start encoding FStar.Reflection.V2.Data.uu___is_Uv_Zero>

(declare-fun FStar.Reflection.V2.Data.uu___is_Uv_Zero (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V2.Data.universe_view -> Prims.bool
(declare-fun Tm_arrow_e2fb264d89490caa94c446fc011f06e8 () Term)
(declare-fun FStar.Reflection.V2.Data.uu___is_Uv_Zero@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Uv_Zero>


; <Skipped FStar.Reflection.V2.Data.uu___is_Uv_Zero/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_Uv_Succ>

(declare-fun FStar.Reflection.V2.Data.uu___is_Uv_Succ (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_Uv_Succ@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Uv_Succ>


; <Skipped FStar.Reflection.V2.Data.uu___is_Uv_Succ/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Uv_Succ__item___0>

(declare-fun Tm_refine_3d2e18d696ea885e89812e0a1e51f17f () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Uv_Succ__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.universe_view{Uv_Succ? _} -> FStar.Reflection.Types.universe
(declare-fun Tm_arrow_65df266b7a8282935520df98be110b6e () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Uv_Succ__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Uv_Succ__item___0>


; <Skipped FStar.Reflection.V2.Data.__proj__Uv_Succ__item___0/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_Uv_Max>

(declare-fun FStar.Reflection.V2.Data.uu___is_Uv_Max (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_Uv_Max@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Uv_Max>


; <Skipped FStar.Reflection.V2.Data.uu___is_Uv_Max/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Uv_Max__item___0>

(declare-fun Tm_refine_fc83228c78c497ac3a79dac3be8fd5f4 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Uv_Max__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.universe_view{Uv_Max? _}   -> FStar.Reflection.V2.Data.universes
(declare-fun Tm_arrow_383a9e80f216cf0e4fbfb81aab07df90 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Uv_Max__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Uv_Max__item___0>


; <Skipped FStar.Reflection.V2.Data.__proj__Uv_Max__item___0/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_Uv_BVar>

(declare-fun FStar.Reflection.V2.Data.uu___is_Uv_BVar (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_Uv_BVar@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Uv_BVar>


; <Skipped FStar.Reflection.V2.Data.uu___is_Uv_BVar/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Uv_BVar__item___0>

(declare-fun Tm_refine_700f8e3926c7ea91d2785ee86adb092a () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Uv_BVar__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.universe_view{Uv_BVar? _} -> Prims.nat
(declare-fun Tm_arrow_7fbcd82625dfee6d2b9f2771b210d8b1 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Uv_BVar__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Uv_BVar__item___0>


; <Skipped FStar.Reflection.V2.Data.__proj__Uv_BVar__item___0/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_Uv_Name>

(declare-fun FStar.Reflection.V2.Data.uu___is_Uv_Name (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_Uv_Name@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Uv_Name>


; <Skipped FStar.Reflection.V2.Data.uu___is_Uv_Name/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Uv_Name__item___0>

(declare-fun Tm_refine_8c650428eb0484934d8e20645914363f () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Uv_Name__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.universe_view{Uv_Name? _} -> FStar.Reflection.Types.univ_name
(declare-fun Tm_arrow_368ba533d6b30cf5994360dd145d3c01 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Uv_Name__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Uv_Name__item___0>


; <Skipped FStar.Reflection.V2.Data.__proj__Uv_Name__item___0/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_Uv_Unif>

(declare-fun FStar.Reflection.V2.Data.uu___is_Uv_Unif (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_Uv_Unif@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Uv_Unif>


; <Skipped FStar.Reflection.V2.Data.uu___is_Uv_Unif/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Uv_Unif__item___0>

(declare-fun Tm_refine_d3f730547e5fd1a70a8d1ecdde6b35b4 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Uv_Unif__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.universe_view{Uv_Unif? _}   -> FStar.Reflection.Types.universe_uvar
(declare-fun Tm_arrow_5869386f7566eae8623811911b527c1d () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Uv_Unif__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Uv_Unif__item___0>


; <Skipped FStar.Reflection.V2.Data.__proj__Uv_Unif__item___0/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_Uv_Unk>

(declare-fun FStar.Reflection.V2.Data.uu___is_Uv_Unk (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_Uv_Unk@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Uv_Unk>


; <Skipped FStar.Reflection.V2.Data.uu___is_Uv_Unk/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.term_view () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Tv_Var (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Tv_Var_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_Var
(declare-fun FStar.Reflection.V2.Data.Tv_Var@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Tv_BVar (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Tv_BVar_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_BVar
(declare-fun FStar.Reflection.V2.Data.Tv_BVar@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Tv_FVar (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Tv_FVar_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_FVar
(declare-fun FStar.Reflection.V2.Data.Tv_FVar@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Tv_UInst (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Tv_UInst_v (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Tv_UInst_us (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_UInst
(declare-fun FStar.Reflection.V2.Data.Tv_UInst@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Tv_App (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Tv_App_hd (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Tv_App_a (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_App
(declare-fun FStar.Reflection.V2.Data.Tv_App@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Tv_Abs (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Tv_Abs_bv (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Tv_Abs_body (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_Abs
(declare-fun FStar.Reflection.V2.Data.Tv_Abs@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Tv_Arrow (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Tv_Arrow_bv (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Tv_Arrow_c (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_Arrow
(declare-fun FStar.Reflection.V2.Data.Tv_Arrow@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Tv_Type (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Tv_Type__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_Type
(declare-fun FStar.Reflection.V2.Data.Tv_Type@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Tv_Refine (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Tv_Refine_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Tv_Refine_ref (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_Refine
(declare-fun FStar.Reflection.V2.Data.Tv_Refine@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Tv_Const (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Tv_Const__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_Const
(declare-fun FStar.Reflection.V2.Data.Tv_Const@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Tv_Uvar (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Tv_Uvar__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Tv_Uvar__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_Uvar
(declare-fun FStar.Reflection.V2.Data.Tv_Uvar@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Tv_Let (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Tv_Let_recf (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Tv_Let_attrs (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Tv_Let_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Tv_Let_def (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Tv_Let_body (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_Let
(declare-fun FStar.Reflection.V2.Data.Tv_Let@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Tv_Match (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Tv_Match_scrutinee (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Tv_Match_ret (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Tv_Match_brs (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_Match
(declare-fun FStar.Reflection.V2.Data.Tv_Match@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Tv_AscribedT (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Tv_AscribedT_e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Tv_AscribedT_t (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Tv_AscribedT_tac (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Tv_AscribedT_use_eq (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_AscribedT
(declare-fun FStar.Reflection.V2.Data.Tv_AscribedT@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Tv_AscribedC (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Tv_AscribedC_e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Tv_AscribedC_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Tv_AscribedC_tac (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Tv_AscribedC_use_eq (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_AscribedC
(declare-fun FStar.Reflection.V2.Data.Tv_AscribedC@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Tv_Unknown () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_Unknown
(declare-fun FStar.Reflection.V2.Data.Tv_Unknown@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Tv_Unsupp () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_Unsupp
(declare-fun FStar.Reflection.V2.Data.Tv_Unsupp@tok () Term)
;;;;;;;;;;;;;;;;v: FStar.Reflection.Types.namedv -> FStar.Reflection.V2.Data.term_view
(declare-fun Tm_arrow_aaf5699d22d830423c1083e9252cfd17 () Term)
;;;;;;;;;;;;;;;;v: FStar.Reflection.Types.bv -> FStar.Reflection.V2.Data.term_view
(declare-fun Tm_arrow_b2fc3ae6dcec562e48e0221d97679b0a () Term)
;;;;;;;;;;;;;;;;v: FStar.Reflection.Types.fv -> FStar.Reflection.V2.Data.term_view
(declare-fun Tm_arrow_b04bac593460a0b2ac621d97fe3f6502 () Term)
;;;;;;;;;;;;;;;;v: FStar.Reflection.Types.fv -> us: FStar.Reflection.V2.Data.universes   -> FStar.Reflection.V2.Data.term_view
(declare-fun Tm_arrow_bd3a0048413fc0993524e887e408d1c6 () Term)
;;;;;;;;;;;;;;;;hd: FStar.Reflection.Types.term -> a: FStar.Reflection.V2.Data.argv   -> FStar.Reflection.V2.Data.term_view
(declare-fun Tm_arrow_ac57ce40b4a40eaa4643b104360e8961 () Term)
;;;;;;;;;;;;;;;;bv: FStar.Reflection.Types.binder -> body: FStar.Reflection.Types.term   -> FStar.Reflection.V2.Data.term_view
(declare-fun Tm_arrow_7210d4be8d36caa34c0da62024cee065 () Term)
;;;;;;;;;;;;;;;;bv: FStar.Reflection.Types.binder -> c: FStar.Reflection.Types.comp   -> FStar.Reflection.V2.Data.term_view
(declare-fun Tm_arrow_016035c4c1bde953a8d33c03253c0b02 () Term)
;;;;;;;;;;;;;;;;_0: FStar.Reflection.Types.universe -> FStar.Reflection.V2.Data.term_view
(declare-fun Tm_arrow_134bfc747ca819b55b5c3172fdc990f6 () Term)
;;;;;;;;;;;;;;;;b: FStar.Reflection.V2.Data.simple_binder -> ref: FStar.Reflection.Types.term   -> FStar.Reflection.V2.Data.term_view
(declare-fun Tm_arrow_8e9ab3eded7dc99ad5cc7f3e9a18d1f1 () Term)
;;;;;;;;;;;;;;;;_0: FStar.Reflection.V2.Data.vconst -> FStar.Reflection.V2.Data.term_view
(declare-fun Tm_arrow_7c3e2f057e7576273898cd833beed476 () Term)
;;;;;;;;;;;;;;;;_0: Prims.nat -> _1: FStar.Reflection.Types.ctx_uvar_and_subst -> FStar.Reflection.V2.Data.term_view
(declare-fun Tm_arrow_ff98ed217c1ccacc2f8ec283bdd18fe8 () Term)
;;;;;;;;;;;;;;;;recf: Prims.bool ->     attrs: Prims.list FStar.Reflection.Types.term ->     b: FStar.Reflection.V2.Data.simple_binder ->     def: FStar.Reflection.Types.term ->     body: FStar.Reflection.Types.term   -> FStar.Reflection.V2.Data.term_view
(declare-fun Tm_arrow_64b2ab28ecb7fc95f3e2663d268c1fcb () Term)
;;;;;;;;;;;;;;;;scrutinee: FStar.Reflection.Types.term ->     ret: FStar.Pervasives.Native.option FStar.Reflection.Types.match_returns_ascription ->     brs: Prims.list FStar.Reflection.V2.Data.branch   -> FStar.Reflection.V2.Data.term_view
(declare-fun Tm_arrow_e9ffbc2a84991b845aa17e00f865f3ad () Term)
;;;;;;;;;;;;;;;;e: FStar.Reflection.Types.term ->     t: FStar.Reflection.Types.term ->     tac: FStar.Pervasives.Native.option FStar.Reflection.Types.term ->     use_eq: Prims.bool   -> FStar.Reflection.V2.Data.term_view
(declare-fun Tm_arrow_4927a64e0af03510819a84445248a752 () Term)
;;;;;;;;;;;;;;;;e: FStar.Reflection.Types.term ->     c: FStar.Reflection.Types.comp ->     tac: FStar.Pervasives.Native.option FStar.Reflection.Types.term ->     use_eq: Prims.bool   -> FStar.Reflection.V2.Data.term_view
(declare-fun Tm_arrow_fdf7c5e2df8da7f93fdf33730ab96f64 () Term)

; <Start encoding FStar.Reflection.V2.Data.term_view>


; <start constructor FStar.Reflection.V2.Data.term_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.term_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
390)
(= __@x0
FStar.Reflection.V2.Data.term_view)))

; </end constructor FStar.Reflection.V2.Data.term_view>


; </end encoding FStar.Reflection.V2.Data.term_view>


; <Start encoding FStar.Reflection.V2.Data.Tv_Var>


; <start constructor FStar.Reflection.V2.Data.Tv_Var>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Tv_Var ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
396)
(= __@x0
(FStar.Reflection.V2.Data.Tv_Var (FStar.Reflection.V2.Data.Tv_Var_v __@x0)))))

; </end constructor FStar.Reflection.V2.Data.Tv_Var>


; </end encoding FStar.Reflection.V2.Data.Tv_Var>


; <Start encoding FStar.Reflection.V2.Data.Tv_BVar>


; <start constructor FStar.Reflection.V2.Data.Tv_BVar>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Tv_BVar ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
401)
(= __@x0
(FStar.Reflection.V2.Data.Tv_BVar (FStar.Reflection.V2.Data.Tv_BVar_v __@x0)))))

; </end constructor FStar.Reflection.V2.Data.Tv_BVar>


; </end encoding FStar.Reflection.V2.Data.Tv_BVar>


; <Start encoding FStar.Reflection.V2.Data.Tv_FVar>


; <start constructor FStar.Reflection.V2.Data.Tv_FVar>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Tv_FVar ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
406)
(= __@x0
(FStar.Reflection.V2.Data.Tv_FVar (FStar.Reflection.V2.Data.Tv_FVar_v __@x0)))))

; </end constructor FStar.Reflection.V2.Data.Tv_FVar>


; </end encoding FStar.Reflection.V2.Data.Tv_FVar>


; <Start encoding FStar.Reflection.V2.Data.Tv_UInst>


; <start constructor FStar.Reflection.V2.Data.Tv_UInst>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Tv_UInst ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
411)
(= __@x0
(FStar.Reflection.V2.Data.Tv_UInst (FStar.Reflection.V2.Data.Tv_UInst_v __@x0)
(FStar.Reflection.V2.Data.Tv_UInst_us __@x0)))))

; </end constructor FStar.Reflection.V2.Data.Tv_UInst>


; </end encoding FStar.Reflection.V2.Data.Tv_UInst>


; <Start encoding FStar.Reflection.V2.Data.Tv_App>


; <start constructor FStar.Reflection.V2.Data.Tv_App>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Tv_App ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
416)
(= __@x0
(FStar.Reflection.V2.Data.Tv_App (FStar.Reflection.V2.Data.Tv_App_hd __@x0)
(FStar.Reflection.V2.Data.Tv_App_a __@x0)))))

; </end constructor FStar.Reflection.V2.Data.Tv_App>


; </end encoding FStar.Reflection.V2.Data.Tv_App>


; <Start encoding FStar.Reflection.V2.Data.Tv_Abs>


; <start constructor FStar.Reflection.V2.Data.Tv_Abs>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Tv_Abs ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
421)
(= __@x0
(FStar.Reflection.V2.Data.Tv_Abs (FStar.Reflection.V2.Data.Tv_Abs_bv __@x0)
(FStar.Reflection.V2.Data.Tv_Abs_body __@x0)))))

; </end constructor FStar.Reflection.V2.Data.Tv_Abs>


; </end encoding FStar.Reflection.V2.Data.Tv_Abs>


; <Start encoding FStar.Reflection.V2.Data.Tv_Arrow>


; <start constructor FStar.Reflection.V2.Data.Tv_Arrow>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Tv_Arrow ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
426)
(= __@x0
(FStar.Reflection.V2.Data.Tv_Arrow (FStar.Reflection.V2.Data.Tv_Arrow_bv __@x0)
(FStar.Reflection.V2.Data.Tv_Arrow_c __@x0)))))

; </end constructor FStar.Reflection.V2.Data.Tv_Arrow>


; </end encoding FStar.Reflection.V2.Data.Tv_Arrow>


; <Start encoding FStar.Reflection.V2.Data.Tv_Type>


; <start constructor FStar.Reflection.V2.Data.Tv_Type>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Tv_Type ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
431)
(= __@x0
(FStar.Reflection.V2.Data.Tv_Type (FStar.Reflection.V2.Data.Tv_Type__0 __@x0)))))

; </end constructor FStar.Reflection.V2.Data.Tv_Type>


; </end encoding FStar.Reflection.V2.Data.Tv_Type>


; <Start encoding FStar.Reflection.V2.Data.Tv_Refine>


; <start constructor FStar.Reflection.V2.Data.Tv_Refine>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Tv_Refine ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
436)
(= __@x0
(FStar.Reflection.V2.Data.Tv_Refine (FStar.Reflection.V2.Data.Tv_Refine_b __@x0)
(FStar.Reflection.V2.Data.Tv_Refine_ref __@x0)))))

; </end constructor FStar.Reflection.V2.Data.Tv_Refine>


; </end encoding FStar.Reflection.V2.Data.Tv_Refine>


; <Start encoding FStar.Reflection.V2.Data.Tv_Const>


; <start constructor FStar.Reflection.V2.Data.Tv_Const>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Tv_Const ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
441)
(= __@x0
(FStar.Reflection.V2.Data.Tv_Const (FStar.Reflection.V2.Data.Tv_Const__0 __@x0)))))

; </end constructor FStar.Reflection.V2.Data.Tv_Const>


; </end encoding FStar.Reflection.V2.Data.Tv_Const>


; <Start encoding FStar.Reflection.V2.Data.Tv_Uvar>


; <start constructor FStar.Reflection.V2.Data.Tv_Uvar>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Tv_Uvar ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
446)
(= __@x0
(FStar.Reflection.V2.Data.Tv_Uvar (FStar.Reflection.V2.Data.Tv_Uvar__0 __@x0)
(FStar.Reflection.V2.Data.Tv_Uvar__1 __@x0)))))

; </end constructor FStar.Reflection.V2.Data.Tv_Uvar>


; </end encoding FStar.Reflection.V2.Data.Tv_Uvar>


; <Start encoding FStar.Reflection.V2.Data.Tv_Let>


; <start constructor FStar.Reflection.V2.Data.Tv_Let>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Tv_Let ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
451)
(= __@x0
(FStar.Reflection.V2.Data.Tv_Let (FStar.Reflection.V2.Data.Tv_Let_recf __@x0)
(FStar.Reflection.V2.Data.Tv_Let_attrs __@x0)
(FStar.Reflection.V2.Data.Tv_Let_b __@x0)
(FStar.Reflection.V2.Data.Tv_Let_def __@x0)
(FStar.Reflection.V2.Data.Tv_Let_body __@x0)))))

; </end constructor FStar.Reflection.V2.Data.Tv_Let>


; </end encoding FStar.Reflection.V2.Data.Tv_Let>


; <Start encoding FStar.Reflection.V2.Data.Tv_Match>


; <start constructor FStar.Reflection.V2.Data.Tv_Match>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Tv_Match ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
456)
(= __@x0
(FStar.Reflection.V2.Data.Tv_Match (FStar.Reflection.V2.Data.Tv_Match_scrutinee __@x0)
(FStar.Reflection.V2.Data.Tv_Match_ret __@x0)
(FStar.Reflection.V2.Data.Tv_Match_brs __@x0)))))

; </end constructor FStar.Reflection.V2.Data.Tv_Match>


; </end encoding FStar.Reflection.V2.Data.Tv_Match>


; <Start encoding FStar.Reflection.V2.Data.Tv_AscribedT>


; <start constructor FStar.Reflection.V2.Data.Tv_AscribedT>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Tv_AscribedT ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
461)
(= __@x0
(FStar.Reflection.V2.Data.Tv_AscribedT (FStar.Reflection.V2.Data.Tv_AscribedT_e __@x0)
(FStar.Reflection.V2.Data.Tv_AscribedT_t __@x0)
(FStar.Reflection.V2.Data.Tv_AscribedT_tac __@x0)
(FStar.Reflection.V2.Data.Tv_AscribedT_use_eq __@x0)))))

; </end constructor FStar.Reflection.V2.Data.Tv_AscribedT>


; </end encoding FStar.Reflection.V2.Data.Tv_AscribedT>


; <Start encoding FStar.Reflection.V2.Data.Tv_AscribedC>


; <start constructor FStar.Reflection.V2.Data.Tv_AscribedC>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Tv_AscribedC ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
466)
(= __@x0
(FStar.Reflection.V2.Data.Tv_AscribedC (FStar.Reflection.V2.Data.Tv_AscribedC_e __@x0)
(FStar.Reflection.V2.Data.Tv_AscribedC_c __@x0)
(FStar.Reflection.V2.Data.Tv_AscribedC_tac __@x0)
(FStar.Reflection.V2.Data.Tv_AscribedC_use_eq __@x0)))))

; </end constructor FStar.Reflection.V2.Data.Tv_AscribedC>


; </end encoding FStar.Reflection.V2.Data.Tv_AscribedC>


; <Start encoding FStar.Reflection.V2.Data.Tv_Unknown>


; <start constructor FStar.Reflection.V2.Data.Tv_Unknown>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Tv_Unknown ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
471)
(= __@x0
FStar.Reflection.V2.Data.Tv_Unknown)))

; </end constructor FStar.Reflection.V2.Data.Tv_Unknown>


; </end encoding FStar.Reflection.V2.Data.Tv_Unknown>


; <Start encoding FStar.Reflection.V2.Data.Tv_Unsupp>


; <start constructor FStar.Reflection.V2.Data.Tv_Unsupp>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Tv_Unsupp ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
473)
(= __@x0
FStar.Reflection.V2.Data.Tv_Unsupp)))

; </end constructor FStar.Reflection.V2.Data.Tv_Unsupp>


; </end encoding FStar.Reflection.V2.Data.Tv_Unsupp>


; </end encoding >


; <Start encoding FStar.Reflection.V2.Data.uu___is_Tv_Var>

(declare-fun FStar.Reflection.V2.Data.uu___is_Tv_Var (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V2.Data.term_view -> Prims.bool
(declare-fun Tm_arrow_9fe70d4430c9b88b20843566ef48e51f () Term)
(declare-fun FStar.Reflection.V2.Data.uu___is_Tv_Var@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Tv_Var>


; <Skipped FStar.Reflection.V2.Data.uu___is_Tv_Var/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Tv_Var__item__v>

(declare-fun Tm_refine_6d64cac7b01f4e2a37161b5ce0092877 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_Var__item__v (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.term_view{Tv_Var? _} -> FStar.Reflection.Types.namedv
(declare-fun Tm_arrow_fb0574a8f024a184897ede079720e715 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_Var__item__v@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Tv_Var__item__v>


; <Skipped FStar.Reflection.V2.Data.__proj__Tv_Var__item__v/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_Tv_BVar>

(declare-fun FStar.Reflection.V2.Data.uu___is_Tv_BVar (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_Tv_BVar@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Tv_BVar>


; <Skipped FStar.Reflection.V2.Data.uu___is_Tv_BVar/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Tv_BVar__item__v>

(declare-fun Tm_refine_167f57cafb10466c9a923215f5dcee95 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_BVar__item__v (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.term_view{Tv_BVar? _} -> FStar.Reflection.Types.bv
(declare-fun Tm_arrow_7bdb4d8560678516563dfd7cf6eb9ce6 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_BVar__item__v@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Tv_BVar__item__v>


; <Skipped FStar.Reflection.V2.Data.__proj__Tv_BVar__item__v/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_Tv_FVar>

(declare-fun FStar.Reflection.V2.Data.uu___is_Tv_FVar (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_Tv_FVar@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Tv_FVar>


; <Skipped FStar.Reflection.V2.Data.uu___is_Tv_FVar/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Tv_FVar__item__v>

(declare-fun Tm_refine_4f8d94b223b5511ae2a8e8e745f8445d () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_FVar__item__v (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.term_view{Tv_FVar? _} -> FStar.Reflection.Types.fv
(declare-fun Tm_arrow_69b1d66ac43f3548eaaa3a7a29cc657c () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_FVar__item__v@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Tv_FVar__item__v>


; <Skipped FStar.Reflection.V2.Data.__proj__Tv_FVar__item__v/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_Tv_UInst>

(declare-fun FStar.Reflection.V2.Data.uu___is_Tv_UInst (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_Tv_UInst@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Tv_UInst>


; <Skipped FStar.Reflection.V2.Data.uu___is_Tv_UInst/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Tv_UInst__item__v>

(declare-fun Tm_refine_12656f290add948c5951fc42d873fb4a () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_UInst__item__v (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.term_view{Tv_UInst? _} -> FStar.Reflection.Types.fv
(declare-fun Tm_arrow_3e18186f78d14df3f79186b325746b95 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_UInst__item__v@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Tv_UInst__item__v>


; <Skipped FStar.Reflection.V2.Data.__proj__Tv_UInst__item__v/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Tv_UInst__item__us>


(declare-fun FStar.Reflection.V2.Data.__proj__Tv_UInst__item__us (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.term_view{Tv_UInst? _} -> FStar.Reflection.V2.Data.universes
(declare-fun Tm_arrow_8942e2c9d73917de28ce80f2b8157883 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_UInst__item__us@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Tv_UInst__item__us>


; <Skipped FStar.Reflection.V2.Data.__proj__Tv_UInst__item__us/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_Tv_App>

(declare-fun FStar.Reflection.V2.Data.uu___is_Tv_App (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_Tv_App@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Tv_App>


; <Skipped FStar.Reflection.V2.Data.uu___is_Tv_App/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Tv_App__item__hd>

(declare-fun Tm_refine_951ac029fda48e901ba9be5a3d33eea4 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_App__item__hd (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.term_view{Tv_App? _} -> FStar.Reflection.Types.term
(declare-fun Tm_arrow_9ea2dfc2e4ae5f5e801ea81f5363c944 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_App__item__hd@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Tv_App__item__hd>


; <Skipped FStar.Reflection.V2.Data.__proj__Tv_App__item__hd/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Tv_App__item__a>


(declare-fun FStar.Reflection.V2.Data.__proj__Tv_App__item__a (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.term_view{Tv_App? _} -> FStar.Reflection.V2.Data.argv
(declare-fun Tm_arrow_6d986fe1478ce419f06fc3f7e4c17bfc () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_App__item__a@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Tv_App__item__a>


; <Skipped FStar.Reflection.V2.Data.__proj__Tv_App__item__a/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_Tv_Abs>

(declare-fun FStar.Reflection.V2.Data.uu___is_Tv_Abs (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_Tv_Abs@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Tv_Abs>


; <Skipped FStar.Reflection.V2.Data.uu___is_Tv_Abs/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Tv_Abs__item__bv>

(declare-fun Tm_refine_f4e917e41325d00fb9d67b91ad853353 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_Abs__item__bv (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.term_view{Tv_Abs? _} -> FStar.Reflection.Types.binder
(declare-fun Tm_arrow_e7532169964956b9c13f256860c040df () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_Abs__item__bv@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Tv_Abs__item__bv>


; <Skipped FStar.Reflection.V2.Data.__proj__Tv_Abs__item__bv/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Tv_Abs__item__body>


(declare-fun FStar.Reflection.V2.Data.__proj__Tv_Abs__item__body (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.term_view{Tv_Abs? _} -> FStar.Reflection.Types.term
(declare-fun Tm_arrow_5f3086bc027a973085e3f2c3d2e0ee2d () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_Abs__item__body@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Tv_Abs__item__body>


; <Skipped FStar.Reflection.V2.Data.__proj__Tv_Abs__item__body/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_Tv_Arrow>

(declare-fun FStar.Reflection.V2.Data.uu___is_Tv_Arrow (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_Tv_Arrow@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Tv_Arrow>


; <Skipped FStar.Reflection.V2.Data.uu___is_Tv_Arrow/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Tv_Arrow__item__bv>

(declare-fun Tm_refine_b2cb78fcbe22047d5d9216ec2f5a39fb () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_Arrow__item__bv (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.term_view{Tv_Arrow? _} -> FStar.Reflection.Types.binder
(declare-fun Tm_arrow_3f2520f209ba623467c5bd3873e5a96b () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_Arrow__item__bv@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Tv_Arrow__item__bv>


; <Skipped FStar.Reflection.V2.Data.__proj__Tv_Arrow__item__bv/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Tv_Arrow__item__c>


(declare-fun FStar.Reflection.V2.Data.__proj__Tv_Arrow__item__c (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.term_view{Tv_Arrow? _} -> FStar.Reflection.Types.comp
(declare-fun Tm_arrow_e1a42dedee121ee6d657a57e666cec02 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_Arrow__item__c@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Tv_Arrow__item__c>


; <Skipped FStar.Reflection.V2.Data.__proj__Tv_Arrow__item__c/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_Tv_Type>

(declare-fun FStar.Reflection.V2.Data.uu___is_Tv_Type (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_Tv_Type@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Tv_Type>


; <Skipped FStar.Reflection.V2.Data.uu___is_Tv_Type/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Tv_Type__item___0>

(declare-fun Tm_refine_ee69c83b3142905f71ce0f1bd6c66441 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_Type__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.term_view{Tv_Type? _} -> FStar.Reflection.Types.universe
(declare-fun Tm_arrow_7df884a0f98f2e8b61c83bffa48046bd () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_Type__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Tv_Type__item___0>


; <Skipped FStar.Reflection.V2.Data.__proj__Tv_Type__item___0/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_Tv_Refine>

(declare-fun FStar.Reflection.V2.Data.uu___is_Tv_Refine (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_Tv_Refine@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Tv_Refine>


; <Skipped FStar.Reflection.V2.Data.uu___is_Tv_Refine/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Tv_Refine__item__b>

(declare-fun Tm_refine_36b308fa2e0b310a6017d44e463537fe () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_Refine__item__b (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.term_view{Tv_Refine? _}   -> FStar.Reflection.V2.Data.simple_binder
(declare-fun Tm_arrow_dcc21ee3169287040b0e48a571ee737d () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_Refine__item__b@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Tv_Refine__item__b>


; <Skipped FStar.Reflection.V2.Data.__proj__Tv_Refine__item__b/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Tv_Refine__item__ref>


(declare-fun FStar.Reflection.V2.Data.__proj__Tv_Refine__item__ref (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.term_view{Tv_Refine? _} -> FStar.Reflection.Types.term
(declare-fun Tm_arrow_d5c36e8d1e25eb97c4ff4d7f822a16ea () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_Refine__item__ref@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Tv_Refine__item__ref>


; <Skipped FStar.Reflection.V2.Data.__proj__Tv_Refine__item__ref/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_Tv_Const>

(declare-fun FStar.Reflection.V2.Data.uu___is_Tv_Const (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_Tv_Const@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Tv_Const>


; <Skipped FStar.Reflection.V2.Data.uu___is_Tv_Const/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Tv_Const__item___0>

(declare-fun Tm_refine_f94f746aa79ae69a0c55091da50680ee () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_Const__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.term_view{Tv_Const? _} -> FStar.Reflection.V2.Data.vconst
(declare-fun Tm_arrow_54a83116011d721fc4f1d5e21efa2c83 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_Const__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Tv_Const__item___0>


; <Skipped FStar.Reflection.V2.Data.__proj__Tv_Const__item___0/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_Tv_Uvar>

(declare-fun FStar.Reflection.V2.Data.uu___is_Tv_Uvar (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_Tv_Uvar@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Tv_Uvar>


; <Skipped FStar.Reflection.V2.Data.uu___is_Tv_Uvar/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Tv_Uvar__item___0>

(declare-fun Tm_refine_ae69eaba9b4210515ba06c4d809aa02a () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_Uvar__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.term_view{Tv_Uvar? _} -> Prims.nat
(declare-fun Tm_arrow_7871a751734b31ac2cfe88a76a269493 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_Uvar__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Tv_Uvar__item___0>


; <Skipped FStar.Reflection.V2.Data.__proj__Tv_Uvar__item___0/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Tv_Uvar__item___1>


(declare-fun FStar.Reflection.V2.Data.__proj__Tv_Uvar__item___1 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.term_view{Tv_Uvar? _}   -> FStar.Reflection.Types.ctx_uvar_and_subst
(declare-fun Tm_arrow_9b927a92743b78ef8e403ec0ab007f70 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_Uvar__item___1@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Tv_Uvar__item___1>


; <Skipped FStar.Reflection.V2.Data.__proj__Tv_Uvar__item___1/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_Tv_Let>

(declare-fun FStar.Reflection.V2.Data.uu___is_Tv_Let (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_Tv_Let@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Tv_Let>


; <Skipped FStar.Reflection.V2.Data.uu___is_Tv_Let/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Tv_Let__item__recf>

(declare-fun Tm_refine_48f7c3fe4b02546ed2ffc503dbc3eec7 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_Let__item__recf (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.term_view{Tv_Let? _} -> Prims.bool
(declare-fun Tm_arrow_dea11492f005f76c968202b163733c76 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_Let__item__recf@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Tv_Let__item__recf>


; <Skipped FStar.Reflection.V2.Data.__proj__Tv_Let__item__recf/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Tv_Let__item__attrs>


(declare-fun FStar.Reflection.V2.Data.__proj__Tv_Let__item__attrs (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.term_view{Tv_Let? _}   -> Prims.list FStar.Reflection.Types.term
(declare-fun Tm_arrow_f4ac6af49792b7676f5a4d400f513bb0 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_Let__item__attrs@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Tv_Let__item__attrs>


; <Skipped FStar.Reflection.V2.Data.__proj__Tv_Let__item__attrs/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Tv_Let__item__b>


(declare-fun FStar.Reflection.V2.Data.__proj__Tv_Let__item__b (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.term_view{Tv_Let? _}   -> FStar.Reflection.V2.Data.simple_binder
(declare-fun Tm_arrow_b49c4d595f2ac79163ffcab456cdd7ea () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_Let__item__b@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Tv_Let__item__b>


; <Skipped FStar.Reflection.V2.Data.__proj__Tv_Let__item__b/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Tv_Let__item__def>


(declare-fun FStar.Reflection.V2.Data.__proj__Tv_Let__item__def (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.term_view{Tv_Let? _} -> FStar.Reflection.Types.term
(declare-fun Tm_arrow_f4b7e30746c008d3cd928970098c896d () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_Let__item__def@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Tv_Let__item__def>


; <Skipped FStar.Reflection.V2.Data.__proj__Tv_Let__item__def/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Tv_Let__item__body>


(declare-fun FStar.Reflection.V2.Data.__proj__Tv_Let__item__body (Term) Term)


(declare-fun FStar.Reflection.V2.Data.__proj__Tv_Let__item__body@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Tv_Let__item__body>


; <Skipped FStar.Reflection.V2.Data.__proj__Tv_Let__item__body/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_Tv_Match>

(declare-fun FStar.Reflection.V2.Data.uu___is_Tv_Match (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_Tv_Match@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Tv_Match>


; <Skipped FStar.Reflection.V2.Data.uu___is_Tv_Match/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Tv_Match__item__scrutinee>

(declare-fun Tm_refine_90fa76f06316110176efb3f70075a236 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_Match__item__scrutinee (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.term_view{Tv_Match? _} -> FStar.Reflection.Types.term
(declare-fun Tm_arrow_db835be1502b8a781678c37e86bbf4c7 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_Match__item__scrutinee@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Tv_Match__item__scrutinee>


; <Skipped FStar.Reflection.V2.Data.__proj__Tv_Match__item__scrutinee/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Tv_Match__item__ret>


(declare-fun FStar.Reflection.V2.Data.__proj__Tv_Match__item__ret (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.term_view{Tv_Match? _}   -> FStar.Pervasives.Native.option FStar.Reflection.Types.match_returns_ascription
(declare-fun Tm_arrow_962c45ecb3bbd9b98455834faa3a34b8 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_Match__item__ret@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Tv_Match__item__ret>


; <Skipped FStar.Reflection.V2.Data.__proj__Tv_Match__item__ret/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Tv_Match__item__brs>


(declare-fun FStar.Reflection.V2.Data.__proj__Tv_Match__item__brs (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.term_view{Tv_Match? _}   -> Prims.list FStar.Reflection.V2.Data.branch
(declare-fun Tm_arrow_a6b286cdedf77fdec1f3f8299bc6bab4 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_Match__item__brs@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Tv_Match__item__brs>


; <Skipped FStar.Reflection.V2.Data.__proj__Tv_Match__item__brs/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_Tv_AscribedT>

(declare-fun FStar.Reflection.V2.Data.uu___is_Tv_AscribedT (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_Tv_AscribedT@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Tv_AscribedT>


; <Skipped FStar.Reflection.V2.Data.uu___is_Tv_AscribedT/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Tv_AscribedT__item__e>

(declare-fun Tm_refine_cf740ae1d9b29d77a8c1f9159f1f19fc () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_AscribedT__item__e (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.term_view{Tv_AscribedT? _} -> FStar.Reflection.Types.term
(declare-fun Tm_arrow_d764a48c8e031e06417516db17c7ce78 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_AscribedT__item__e@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Tv_AscribedT__item__e>


; <Skipped FStar.Reflection.V2.Data.__proj__Tv_AscribedT__item__e/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Tv_AscribedT__item__t>


(declare-fun FStar.Reflection.V2.Data.__proj__Tv_AscribedT__item__t (Term) Term)


(declare-fun FStar.Reflection.V2.Data.__proj__Tv_AscribedT__item__t@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Tv_AscribedT__item__t>


; <Skipped FStar.Reflection.V2.Data.__proj__Tv_AscribedT__item__t/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Tv_AscribedT__item__tac>


(declare-fun FStar.Reflection.V2.Data.__proj__Tv_AscribedT__item__tac (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.term_view{Tv_AscribedT? _}   -> FStar.Pervasives.Native.option FStar.Reflection.Types.term
(declare-fun Tm_arrow_962f318eccf9401361e02057c9c76225 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_AscribedT__item__tac@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Tv_AscribedT__item__tac>


; <Skipped FStar.Reflection.V2.Data.__proj__Tv_AscribedT__item__tac/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Tv_AscribedT__item__use_eq>


(declare-fun FStar.Reflection.V2.Data.__proj__Tv_AscribedT__item__use_eq (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.term_view{Tv_AscribedT? _} -> Prims.bool
(declare-fun Tm_arrow_fd1561ccfeb66c862049a69cbe90eb0a () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_AscribedT__item__use_eq@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Tv_AscribedT__item__use_eq>


; <Skipped FStar.Reflection.V2.Data.__proj__Tv_AscribedT__item__use_eq/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_Tv_AscribedC>

(declare-fun FStar.Reflection.V2.Data.uu___is_Tv_AscribedC (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_Tv_AscribedC@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Tv_AscribedC>


; <Skipped FStar.Reflection.V2.Data.uu___is_Tv_AscribedC/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Tv_AscribedC__item__e>

(declare-fun Tm_refine_df949aebd1ef18cb8915e9e74d74852b () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_AscribedC__item__e (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.term_view{Tv_AscribedC? _} -> FStar.Reflection.Types.term
(declare-fun Tm_arrow_a54f470cd2e21c879a74080a7b40b6ba () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_AscribedC__item__e@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Tv_AscribedC__item__e>


; <Skipped FStar.Reflection.V2.Data.__proj__Tv_AscribedC__item__e/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Tv_AscribedC__item__c>


(declare-fun FStar.Reflection.V2.Data.__proj__Tv_AscribedC__item__c (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.term_view{Tv_AscribedC? _} -> FStar.Reflection.Types.comp
(declare-fun Tm_arrow_875edb538e36ef153c94330eec972b77 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_AscribedC__item__c@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Tv_AscribedC__item__c>


; <Skipped FStar.Reflection.V2.Data.__proj__Tv_AscribedC__item__c/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Tv_AscribedC__item__tac>


(declare-fun FStar.Reflection.V2.Data.__proj__Tv_AscribedC__item__tac (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.term_view{Tv_AscribedC? _}   -> FStar.Pervasives.Native.option FStar.Reflection.Types.term
(declare-fun Tm_arrow_e0451bf5c25fbfca0b1c463215cf97bf () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_AscribedC__item__tac@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Tv_AscribedC__item__tac>


; <Skipped FStar.Reflection.V2.Data.__proj__Tv_AscribedC__item__tac/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Tv_AscribedC__item__use_eq>


(declare-fun FStar.Reflection.V2.Data.__proj__Tv_AscribedC__item__use_eq (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.term_view{Tv_AscribedC? _} -> Prims.bool
(declare-fun Tm_arrow_8d2692fa9b96c7477093e32821063750 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Tv_AscribedC__item__use_eq@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Tv_AscribedC__item__use_eq>


; <Skipped FStar.Reflection.V2.Data.__proj__Tv_AscribedC__item__use_eq/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_Tv_Unknown>

(declare-fun FStar.Reflection.V2.Data.uu___is_Tv_Unknown (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_Tv_Unknown@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Tv_Unknown>


; <Skipped FStar.Reflection.V2.Data.uu___is_Tv_Unknown/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_Tv_Unsupp>

(declare-fun FStar.Reflection.V2.Data.uu___is_Tv_Unsupp (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_Tv_Unsupp@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Tv_Unsupp>


; <Skipped FStar.Reflection.V2.Data.uu___is_Tv_Unsupp/>


; <Start encoding FStar.Reflection.V2.Data.notAscription>

(declare-fun FStar.Reflection.V2.Data.notAscription (Term) Term)

(declare-fun FStar.Reflection.V2.Data.notAscription@tok () Term)

; </end encoding FStar.Reflection.V2.Data.notAscription>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.comp_view () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.C_Total (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.C_Total_ret (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: C_Total
(declare-fun FStar.Reflection.V2.Data.C_Total@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.C_GTotal (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.C_GTotal_ret (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: C_GTotal
(declare-fun FStar.Reflection.V2.Data.C_GTotal@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.C_Lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.C_Lemma__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.C_Lemma__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.C_Lemma__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: C_Lemma
(declare-fun FStar.Reflection.V2.Data.C_Lemma@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.C_Eff (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.C_Eff_us (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.C_Eff_eff_name (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.C_Eff_result (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.C_Eff_eff_args (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.C_Eff_decrs (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: C_Eff
(declare-fun FStar.Reflection.V2.Data.C_Eff@tok () Term)
;;;;;;;;;;;;;;;;ret: FStar.Reflection.Types.typ -> FStar.Reflection.V2.Data.comp_view
(declare-fun Tm_arrow_b0ec41a7359e2962d99d9554a5a9da36 () Term)

;;;;;;;;;;;;;;;;_0: FStar.Reflection.Types.term ->     _1: FStar.Reflection.Types.term ->     _2: FStar.Reflection.Types.term   -> FStar.Reflection.V2.Data.comp_view
(declare-fun Tm_arrow_f226a68bc58547f19785b2a3a9dbb992 () Term)
;;;;;;;;;;;;;;;;us: FStar.Reflection.V2.Data.universes ->     eff_name: FStar.Reflection.Types.name ->     result: FStar.Reflection.Types.term ->     eff_args: Prims.list FStar.Reflection.V2.Data.argv ->     decrs: Prims.list FStar.Reflection.Types.term   -> FStar.Reflection.V2.Data.comp_view
(declare-fun Tm_arrow_9940afbd4ed083a62c8e1c7d240b7105 () Term)

; <Start encoding FStar.Reflection.V2.Data.comp_view>


; <start constructor FStar.Reflection.V2.Data.comp_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.comp_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
642)
(= __@x0
FStar.Reflection.V2.Data.comp_view)))

; </end constructor FStar.Reflection.V2.Data.comp_view>


; </end encoding FStar.Reflection.V2.Data.comp_view>


; <Start encoding FStar.Reflection.V2.Data.C_Total>


; <start constructor FStar.Reflection.V2.Data.C_Total>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.C_Total ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
648)
(= __@x0
(FStar.Reflection.V2.Data.C_Total (FStar.Reflection.V2.Data.C_Total_ret __@x0)))))

; </end constructor FStar.Reflection.V2.Data.C_Total>


; </end encoding FStar.Reflection.V2.Data.C_Total>


; <Start encoding FStar.Reflection.V2.Data.C_GTotal>


; <start constructor FStar.Reflection.V2.Data.C_GTotal>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.C_GTotal ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
653)
(= __@x0
(FStar.Reflection.V2.Data.C_GTotal (FStar.Reflection.V2.Data.C_GTotal_ret __@x0)))))

; </end constructor FStar.Reflection.V2.Data.C_GTotal>


; </end encoding FStar.Reflection.V2.Data.C_GTotal>


; <Start encoding FStar.Reflection.V2.Data.C_Lemma>


; <start constructor FStar.Reflection.V2.Data.C_Lemma>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.C_Lemma ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
658)
(= __@x0
(FStar.Reflection.V2.Data.C_Lemma (FStar.Reflection.V2.Data.C_Lemma__0 __@x0)
(FStar.Reflection.V2.Data.C_Lemma__1 __@x0)
(FStar.Reflection.V2.Data.C_Lemma__2 __@x0)))))

; </end constructor FStar.Reflection.V2.Data.C_Lemma>


; </end encoding FStar.Reflection.V2.Data.C_Lemma>


; <Start encoding FStar.Reflection.V2.Data.C_Eff>


; <start constructor FStar.Reflection.V2.Data.C_Eff>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.C_Eff ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
663)
(= __@x0
(FStar.Reflection.V2.Data.C_Eff (FStar.Reflection.V2.Data.C_Eff_us __@x0)
(FStar.Reflection.V2.Data.C_Eff_eff_name __@x0)
(FStar.Reflection.V2.Data.C_Eff_result __@x0)
(FStar.Reflection.V2.Data.C_Eff_eff_args __@x0)
(FStar.Reflection.V2.Data.C_Eff_decrs __@x0)))))

; </end constructor FStar.Reflection.V2.Data.C_Eff>


; </end encoding FStar.Reflection.V2.Data.C_Eff>


; </end encoding >


; <Start encoding FStar.Reflection.V2.Data.uu___is_C_Total>

(declare-fun FStar.Reflection.V2.Data.uu___is_C_Total (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V2.Data.comp_view -> Prims.bool
(declare-fun Tm_arrow_287c346fb8b3782d5c747ee947c9ae33 () Term)
(declare-fun FStar.Reflection.V2.Data.uu___is_C_Total@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_C_Total>


; <Skipped FStar.Reflection.V2.Data.uu___is_C_Total/>


; <Start encoding FStar.Reflection.V2.Data.__proj__C_Total__item__ret>

(declare-fun Tm_refine_ab0a58301bde52827a5e3798d7f038f5 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__C_Total__item__ret (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.comp_view{C_Total? _} -> FStar.Reflection.Types.typ
(declare-fun Tm_arrow_41089c2cd0168d3b1ef6b7327a39657b () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__C_Total__item__ret@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__C_Total__item__ret>


; <Skipped FStar.Reflection.V2.Data.__proj__C_Total__item__ret/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_C_GTotal>

(declare-fun FStar.Reflection.V2.Data.uu___is_C_GTotal (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_C_GTotal@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_C_GTotal>


; <Skipped FStar.Reflection.V2.Data.uu___is_C_GTotal/>


; <Start encoding FStar.Reflection.V2.Data.__proj__C_GTotal__item__ret>

(declare-fun Tm_refine_39e1128d4704579ed84abfe01d285c96 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__C_GTotal__item__ret (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.comp_view{C_GTotal? _} -> FStar.Reflection.Types.typ
(declare-fun Tm_arrow_c269474f820ec6a4b878f6b7446b8231 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__C_GTotal__item__ret@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__C_GTotal__item__ret>


; <Skipped FStar.Reflection.V2.Data.__proj__C_GTotal__item__ret/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_C_Lemma>

(declare-fun FStar.Reflection.V2.Data.uu___is_C_Lemma (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_C_Lemma@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_C_Lemma>


; <Skipped FStar.Reflection.V2.Data.uu___is_C_Lemma/>


; <Start encoding FStar.Reflection.V2.Data.__proj__C_Lemma__item___0>

(declare-fun Tm_refine_956bb717e170c55f0267ab9db08d405f () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__C_Lemma__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.comp_view{C_Lemma? _} -> FStar.Reflection.Types.term
(declare-fun Tm_arrow_7d55a1c9ee9077d5f2941284abd8a364 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__C_Lemma__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__C_Lemma__item___0>


; <Skipped FStar.Reflection.V2.Data.__proj__C_Lemma__item___0/>


; <Start encoding FStar.Reflection.V2.Data.__proj__C_Lemma__item___1>


(declare-fun FStar.Reflection.V2.Data.__proj__C_Lemma__item___1 (Term) Term)


(declare-fun FStar.Reflection.V2.Data.__proj__C_Lemma__item___1@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__C_Lemma__item___1>


; <Skipped FStar.Reflection.V2.Data.__proj__C_Lemma__item___1/>


; <Start encoding FStar.Reflection.V2.Data.__proj__C_Lemma__item___2>


(declare-fun FStar.Reflection.V2.Data.__proj__C_Lemma__item___2 (Term) Term)


(declare-fun FStar.Reflection.V2.Data.__proj__C_Lemma__item___2@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__C_Lemma__item___2>


; <Skipped FStar.Reflection.V2.Data.__proj__C_Lemma__item___2/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_C_Eff>

(declare-fun FStar.Reflection.V2.Data.uu___is_C_Eff (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_C_Eff@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_C_Eff>


; <Skipped FStar.Reflection.V2.Data.uu___is_C_Eff/>


; <Start encoding FStar.Reflection.V2.Data.__proj__C_Eff__item__us>

(declare-fun Tm_refine_73e24dec27bfe7032bf7f00abaf133e9 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__C_Eff__item__us (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.comp_view{C_Eff? _} -> FStar.Reflection.V2.Data.universes
(declare-fun Tm_arrow_a98a8b71d44fc701ed856a42c2a5112f () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__C_Eff__item__us@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__C_Eff__item__us>


; <Skipped FStar.Reflection.V2.Data.__proj__C_Eff__item__us/>


; <Start encoding FStar.Reflection.V2.Data.__proj__C_Eff__item__eff_name>


(declare-fun FStar.Reflection.V2.Data.__proj__C_Eff__item__eff_name (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.comp_view{C_Eff? _} -> FStar.Reflection.Types.name
(declare-fun Tm_arrow_d7ab6d3f69abeb57612b2324bc809351 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__C_Eff__item__eff_name@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__C_Eff__item__eff_name>


; <Skipped FStar.Reflection.V2.Data.__proj__C_Eff__item__eff_name/>


; <Start encoding FStar.Reflection.V2.Data.__proj__C_Eff__item__result>


(declare-fun FStar.Reflection.V2.Data.__proj__C_Eff__item__result (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.comp_view{C_Eff? _} -> FStar.Reflection.Types.term
(declare-fun Tm_arrow_d957299f0321ad75b492e9c18a2e9fd8 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__C_Eff__item__result@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__C_Eff__item__result>


; <Skipped FStar.Reflection.V2.Data.__proj__C_Eff__item__result/>


; <Start encoding FStar.Reflection.V2.Data.__proj__C_Eff__item__eff_args>


(declare-fun FStar.Reflection.V2.Data.__proj__C_Eff__item__eff_args (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.comp_view{C_Eff? _}   -> Prims.list FStar.Reflection.V2.Data.argv
(declare-fun Tm_arrow_ee0f4ae6f5fea5847d4fc6c5a4274141 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__C_Eff__item__eff_args@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__C_Eff__item__eff_args>


; <Skipped FStar.Reflection.V2.Data.__proj__C_Eff__item__eff_args/>


; <Start encoding FStar.Reflection.V2.Data.__proj__C_Eff__item__decrs>


(declare-fun FStar.Reflection.V2.Data.__proj__C_Eff__item__decrs (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.comp_view{C_Eff? _} -> Prims.list FStar.Reflection.Types.term
(declare-fun Tm_arrow_067555aaf67e7655d8529137780b8832 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__C_Eff__item__decrs@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__C_Eff__item__decrs>


; <Skipped FStar.Reflection.V2.Data.__proj__C_Eff__item__decrs/>


; <Start encoding FStar.Reflection.V2.Data.ctor>

(declare-fun FStar.Reflection.V2.Data.ctor () Term)

; </end encoding FStar.Reflection.V2.Data.ctor>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.lb_view () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Mklb_view (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Mklb_view_lb_fv (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Mklb_view_lb_us (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Mklb_view_lb_typ (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Mklb_view_lb_def (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mklb_view
(declare-fun FStar.Reflection.V2.Data.Mklb_view@tok () Term)
;;;;;;;;;;;;;;;;lb_fv: FStar.Reflection.Types.fv ->     lb_us: Prims.list FStar.Reflection.Types.univ_name ->     lb_typ: FStar.Reflection.Types.typ ->     lb_def: FStar.Reflection.Types.term   -> FStar.Reflection.V2.Data.lb_view
(declare-fun Tm_arrow_44b58647cf301be6dc75810babe6540a () Term)

; <Start encoding FStar.Reflection.V2.Data.lb_view>


; <start constructor FStar.Reflection.V2.Data.lb_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.lb_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
715)
(= __@x0
FStar.Reflection.V2.Data.lb_view)))

; </end constructor FStar.Reflection.V2.Data.lb_view>


; </end encoding FStar.Reflection.V2.Data.lb_view>


; <Start encoding FStar.Reflection.V2.Data.Mklb_view>


; <start constructor FStar.Reflection.V2.Data.Mklb_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Mklb_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
721)
(= __@x0
(FStar.Reflection.V2.Data.Mklb_view (FStar.Reflection.V2.Data.Mklb_view_lb_fv __@x0)
(FStar.Reflection.V2.Data.Mklb_view_lb_us __@x0)
(FStar.Reflection.V2.Data.Mklb_view_lb_typ __@x0)
(FStar.Reflection.V2.Data.Mklb_view_lb_def __@x0)))))

; </end constructor FStar.Reflection.V2.Data.Mklb_view>


; </end encoding FStar.Reflection.V2.Data.Mklb_view>


; </end encoding >


; <Start encoding FStar.Reflection.V2.Data.__proj__Mklb_view__item__lb_fv>

(declare-fun FStar.Reflection.V2.Data.__proj__Mklb_view__item__lb_fv (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V2.Data.lb_view -> FStar.Reflection.Types.fv
(declare-fun Tm_arrow_58b15a536f2a40e402d11bcdd59a72ee () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Mklb_view__item__lb_fv@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Mklb_view__item__lb_fv>


; <Skipped FStar.Reflection.V2.Data.__proj__Mklb_view__item__lb_fv/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Mklb_view__item__lb_us>

(declare-fun FStar.Reflection.V2.Data.__proj__Mklb_view__item__lb_us (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V2.Data.lb_view -> Prims.list FStar.Reflection.Types.univ_name
(declare-fun Tm_arrow_5f7eb46fa45b9e26da60cad8d128a2ef () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Mklb_view__item__lb_us@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Mklb_view__item__lb_us>


; <Skipped FStar.Reflection.V2.Data.__proj__Mklb_view__item__lb_us/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Mklb_view__item__lb_typ>

(declare-fun FStar.Reflection.V2.Data.__proj__Mklb_view__item__lb_typ (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V2.Data.lb_view -> FStar.Reflection.Types.typ
(declare-fun Tm_arrow_fa787c438d044f11070311e579b00e77 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Mklb_view__item__lb_typ@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Mklb_view__item__lb_typ>


; <Skipped FStar.Reflection.V2.Data.__proj__Mklb_view__item__lb_typ/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Mklb_view__item__lb_def>

(declare-fun FStar.Reflection.V2.Data.__proj__Mklb_view__item__lb_def (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V2.Data.lb_view -> FStar.Reflection.Types.term
(declare-fun Tm_arrow_6199fed9e8be106d1e5c361a86cfed3e () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Mklb_view__item__lb_def@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Mklb_view__item__lb_def>


; <Skipped FStar.Reflection.V2.Data.__proj__Mklb_view__item__lb_def/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.sigelt_view () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Sg_Let (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Sg_Let_r (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Sg_Let_lbs (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Sg_Let
(declare-fun FStar.Reflection.V2.Data.Sg_Let@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Sg_Inductive (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Sg_Inductive_nm (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Sg_Inductive_univs (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Sg_Inductive_params (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Sg_Inductive_typ (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Sg_Inductive_cts (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Sg_Inductive
(declare-fun FStar.Reflection.V2.Data.Sg_Inductive@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Sg_Val (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Sg_Val_nm (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Sg_Val_univs (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Sg_Val_typ (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Sg_Val
(declare-fun FStar.Reflection.V2.Data.Sg_Val@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Unk () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Unk
(declare-fun FStar.Reflection.V2.Data.Unk@tok () Term)
;;;;;;;;;;;;;;;;r: Prims.bool -> lbs: Prims.list FStar.Reflection.Types.letbinding   -> FStar.Reflection.V2.Data.sigelt_view
(declare-fun Tm_arrow_0ad7060dd97eb85de1034ac3d3038344 () Term)
;;;;;;;;;;;;;;;;nm: FStar.Reflection.Types.name ->     univs: Prims.list FStar.Reflection.Types.univ_name ->     params: FStar.Reflection.Types.binders ->     typ: FStar.Reflection.Types.typ ->     cts: Prims.list FStar.Reflection.V2.Data.ctor   -> FStar.Reflection.V2.Data.sigelt_view
(declare-fun Tm_arrow_d64f0dd5cdcef8ff565f07cef7105fd5 () Term)
;;;;;;;;;;;;;;;;nm: FStar.Reflection.Types.name ->     univs: Prims.list FStar.Reflection.Types.univ_name ->     typ: FStar.Reflection.Types.typ   -> FStar.Reflection.V2.Data.sigelt_view
(declare-fun Tm_arrow_cb116f955be9b3877a50b6ea510fb2b5 () Term)

; <Start encoding FStar.Reflection.V2.Data.sigelt_view>


; <start constructor FStar.Reflection.V2.Data.sigelt_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.sigelt_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
733)
(= __@x0
FStar.Reflection.V2.Data.sigelt_view)))

; </end constructor FStar.Reflection.V2.Data.sigelt_view>


; </end encoding FStar.Reflection.V2.Data.sigelt_view>


; <Start encoding FStar.Reflection.V2.Data.Sg_Let>


; <start constructor FStar.Reflection.V2.Data.Sg_Let>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Sg_Let ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
739)
(= __@x0
(FStar.Reflection.V2.Data.Sg_Let (FStar.Reflection.V2.Data.Sg_Let_r __@x0)
(FStar.Reflection.V2.Data.Sg_Let_lbs __@x0)))))

; </end constructor FStar.Reflection.V2.Data.Sg_Let>


; </end encoding FStar.Reflection.V2.Data.Sg_Let>


; <Start encoding FStar.Reflection.V2.Data.Sg_Inductive>


; <start constructor FStar.Reflection.V2.Data.Sg_Inductive>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Sg_Inductive ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
744)
(= __@x0
(FStar.Reflection.V2.Data.Sg_Inductive (FStar.Reflection.V2.Data.Sg_Inductive_nm __@x0)
(FStar.Reflection.V2.Data.Sg_Inductive_univs __@x0)
(FStar.Reflection.V2.Data.Sg_Inductive_params __@x0)
(FStar.Reflection.V2.Data.Sg_Inductive_typ __@x0)
(FStar.Reflection.V2.Data.Sg_Inductive_cts __@x0)))))

; </end constructor FStar.Reflection.V2.Data.Sg_Inductive>


; </end encoding FStar.Reflection.V2.Data.Sg_Inductive>


; <Start encoding FStar.Reflection.V2.Data.Sg_Val>


; <start constructor FStar.Reflection.V2.Data.Sg_Val>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Sg_Val ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
749)
(= __@x0
(FStar.Reflection.V2.Data.Sg_Val (FStar.Reflection.V2.Data.Sg_Val_nm __@x0)
(FStar.Reflection.V2.Data.Sg_Val_univs __@x0)
(FStar.Reflection.V2.Data.Sg_Val_typ __@x0)))))

; </end constructor FStar.Reflection.V2.Data.Sg_Val>


; </end encoding FStar.Reflection.V2.Data.Sg_Val>


; <Start encoding FStar.Reflection.V2.Data.Unk>


; <start constructor FStar.Reflection.V2.Data.Unk>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Unk ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
754)
(= __@x0
FStar.Reflection.V2.Data.Unk)))

; </end constructor FStar.Reflection.V2.Data.Unk>


; </end encoding FStar.Reflection.V2.Data.Unk>


; </end encoding >


; <Start encoding FStar.Reflection.V2.Data.uu___is_Sg_Let>

(declare-fun FStar.Reflection.V2.Data.uu___is_Sg_Let (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V2.Data.sigelt_view -> Prims.bool
(declare-fun Tm_arrow_ad3af9cbdcb7f3b2d1c4c9f4220cb75d () Term)
(declare-fun FStar.Reflection.V2.Data.uu___is_Sg_Let@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Sg_Let>


; <Skipped FStar.Reflection.V2.Data.uu___is_Sg_Let/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Sg_Let__item__r>

(declare-fun Tm_refine_6b0f1149e5806b325fffb1968ea02be7 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Sg_Let__item__r (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.sigelt_view{Sg_Let? _} -> Prims.bool
(declare-fun Tm_arrow_af25770828112ebef188b75bd3c2d221 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Sg_Let__item__r@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Sg_Let__item__r>


; <Skipped FStar.Reflection.V2.Data.__proj__Sg_Let__item__r/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Sg_Let__item__lbs>


(declare-fun FStar.Reflection.V2.Data.__proj__Sg_Let__item__lbs (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.sigelt_view{Sg_Let? _}   -> Prims.list FStar.Reflection.Types.letbinding
(declare-fun Tm_arrow_ad8e1a54f98ca84f83ada9a68a62c5c9 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Sg_Let__item__lbs@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Sg_Let__item__lbs>


; <Skipped FStar.Reflection.V2.Data.__proj__Sg_Let__item__lbs/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_Sg_Inductive>

(declare-fun FStar.Reflection.V2.Data.uu___is_Sg_Inductive (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_Sg_Inductive@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Sg_Inductive>


; <Skipped FStar.Reflection.V2.Data.uu___is_Sg_Inductive/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Sg_Inductive__item__nm>

(declare-fun Tm_refine_131384c8767953f31efe6162102a7c19 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Sg_Inductive__item__nm (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.sigelt_view{Sg_Inductive? _} -> FStar.Reflection.Types.name
(declare-fun Tm_arrow_a611afd79c468c9a338b8ba9fd9b0dea () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Sg_Inductive__item__nm@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Sg_Inductive__item__nm>


; <Skipped FStar.Reflection.V2.Data.__proj__Sg_Inductive__item__nm/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Sg_Inductive__item__univs>


(declare-fun FStar.Reflection.V2.Data.__proj__Sg_Inductive__item__univs (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.sigelt_view{Sg_Inductive? _}   -> Prims.list FStar.Reflection.Types.univ_name
(declare-fun Tm_arrow_cdee05bd8b7f23facae3e98f9c40f409 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Sg_Inductive__item__univs@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Sg_Inductive__item__univs>


; <Skipped FStar.Reflection.V2.Data.__proj__Sg_Inductive__item__univs/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Sg_Inductive__item__params>


(declare-fun FStar.Reflection.V2.Data.__proj__Sg_Inductive__item__params (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.sigelt_view{Sg_Inductive? _}   -> FStar.Reflection.Types.binders
(declare-fun Tm_arrow_de88c93f5881d62dda98d0b72fed768c () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Sg_Inductive__item__params@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Sg_Inductive__item__params>


; <Skipped FStar.Reflection.V2.Data.__proj__Sg_Inductive__item__params/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Sg_Inductive__item__typ>


(declare-fun FStar.Reflection.V2.Data.__proj__Sg_Inductive__item__typ (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.sigelt_view{Sg_Inductive? _} -> FStar.Reflection.Types.typ
(declare-fun Tm_arrow_ba39e275e79c6e797233c8b522f3b495 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Sg_Inductive__item__typ@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Sg_Inductive__item__typ>


; <Skipped FStar.Reflection.V2.Data.__proj__Sg_Inductive__item__typ/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Sg_Inductive__item__cts>


(declare-fun FStar.Reflection.V2.Data.__proj__Sg_Inductive__item__cts (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.sigelt_view{Sg_Inductive? _}   -> Prims.list FStar.Reflection.V2.Data.ctor
(declare-fun Tm_arrow_f76fc39e5cc79478f4d29ec28edc0184 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Sg_Inductive__item__cts@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Sg_Inductive__item__cts>


; <Skipped FStar.Reflection.V2.Data.__proj__Sg_Inductive__item__cts/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_Sg_Val>

(declare-fun FStar.Reflection.V2.Data.uu___is_Sg_Val (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_Sg_Val@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Sg_Val>


; <Skipped FStar.Reflection.V2.Data.uu___is_Sg_Val/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Sg_Val__item__nm>

(declare-fun Tm_refine_db661c5f66c1318e83edf956275b3f82 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Sg_Val__item__nm (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.sigelt_view{Sg_Val? _} -> FStar.Reflection.Types.name
(declare-fun Tm_arrow_b37ca9a85fcd4e450a6ad30fbfb9dd37 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Sg_Val__item__nm@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Sg_Val__item__nm>


; <Skipped FStar.Reflection.V2.Data.__proj__Sg_Val__item__nm/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Sg_Val__item__univs>


(declare-fun FStar.Reflection.V2.Data.__proj__Sg_Val__item__univs (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.sigelt_view{Sg_Val? _}   -> Prims.list FStar.Reflection.Types.univ_name
(declare-fun Tm_arrow_c50d49c8b8d60dbffeb77609870e37de () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Sg_Val__item__univs@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Sg_Val__item__univs>


; <Skipped FStar.Reflection.V2.Data.__proj__Sg_Val__item__univs/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Sg_Val__item__typ>


(declare-fun FStar.Reflection.V2.Data.__proj__Sg_Val__item__typ (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.sigelt_view{Sg_Val? _} -> FStar.Reflection.Types.typ
(declare-fun Tm_arrow_cfb31593a880a2b759634dfdb82ad6bb () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Sg_Val__item__typ@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Sg_Val__item__typ>


; <Skipped FStar.Reflection.V2.Data.__proj__Sg_Val__item__typ/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_Unk>

(declare-fun FStar.Reflection.V2.Data.uu___is_Unk (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_Unk@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Unk>


; <Skipped FStar.Reflection.V2.Data.uu___is_Unk/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.qualifier () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Assumption () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Assumption
(declare-fun FStar.Reflection.V2.Data.Assumption@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.InternalAssumption () Term)
;;;;;;;;;;;;;;;;data constructor proxy: InternalAssumption
(declare-fun FStar.Reflection.V2.Data.InternalAssumption@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.New () Term)
;;;;;;;;;;;;;;;;data constructor proxy: New
(declare-fun FStar.Reflection.V2.Data.New@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Private () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Private
(declare-fun FStar.Reflection.V2.Data.Private@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Unfold_for_unification_and_vcgen () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Unfold_for_unification_and_vcgen
(declare-fun FStar.Reflection.V2.Data.Unfold_for_unification_and_vcgen@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Visible_default () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Visible_default
(declare-fun FStar.Reflection.V2.Data.Visible_default@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Irreducible () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Irreducible
(declare-fun FStar.Reflection.V2.Data.Irreducible@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Inline_for_extraction () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Inline_for_extraction
(declare-fun FStar.Reflection.V2.Data.Inline_for_extraction@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.NoExtract () Term)
;;;;;;;;;;;;;;;;data constructor proxy: NoExtract
(declare-fun FStar.Reflection.V2.Data.NoExtract@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Noeq () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Noeq
(declare-fun FStar.Reflection.V2.Data.Noeq@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Unopteq () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Unopteq
(declare-fun FStar.Reflection.V2.Data.Unopteq@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.TotalEffect () Term)
;;;;;;;;;;;;;;;;data constructor proxy: TotalEffect
(declare-fun FStar.Reflection.V2.Data.TotalEffect@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Logic () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Logic
(declare-fun FStar.Reflection.V2.Data.Logic@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Reifiable () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Reifiable
(declare-fun FStar.Reflection.V2.Data.Reifiable@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Reflectable (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Reflectable__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Reflectable
(declare-fun FStar.Reflection.V2.Data.Reflectable@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Discriminator (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Discriminator__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Discriminator
(declare-fun FStar.Reflection.V2.Data.Discriminator@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Projector (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Projector__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Projector
(declare-fun FStar.Reflection.V2.Data.Projector@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.RecordType (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.RecordType__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: RecordType
(declare-fun FStar.Reflection.V2.Data.RecordType@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.RecordConstructor (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.RecordConstructor__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: RecordConstructor
(declare-fun FStar.Reflection.V2.Data.RecordConstructor@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Action (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Data.Action__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Action
(declare-fun FStar.Reflection.V2.Data.Action@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.ExceptionConstructor () Term)
;;;;;;;;;;;;;;;;data constructor proxy: ExceptionConstructor
(declare-fun FStar.Reflection.V2.Data.ExceptionConstructor@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.HasMaskedEffect () Term)
;;;;;;;;;;;;;;;;data constructor proxy: HasMaskedEffect
(declare-fun FStar.Reflection.V2.Data.HasMaskedEffect@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.Effect () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Effect
(declare-fun FStar.Reflection.V2.Data.Effect@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Data.OnlyName () Term)
;;;;;;;;;;;;;;;;data constructor proxy: OnlyName
(declare-fun FStar.Reflection.V2.Data.OnlyName@tok () Term)
;;;;;;;;;;;;;;;;_0: FStar.Reflection.Types.name -> FStar.Reflection.V2.Data.qualifier
(declare-fun Tm_arrow_ee6289d6dd3e2cf9cf005248b85c14dc () Term)

;;;;;;;;;;;;;;;;_0: (FStar.Reflection.Types.name * FStar.Reflection.Types.ident)   -> FStar.Reflection.V2.Data.qualifier
(declare-fun Tm_arrow_630b5789ea823bf2f6cffc877a4ba029 () Term)
;;;;;;;;;;;;;;;;_0: (Prims.list FStar.Reflection.Types.ident * Prims.list FStar.Reflection.Types.ident)   -> FStar.Reflection.V2.Data.qualifier
(declare-fun Tm_arrow_751317f34627974a5a3b477a6a665f4f () Term)



; <Start encoding FStar.Reflection.V2.Data.qualifier>


; <start constructor FStar.Reflection.V2.Data.qualifier>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.qualifier ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
803)
(= __@x0
FStar.Reflection.V2.Data.qualifier)))

; </end constructor FStar.Reflection.V2.Data.qualifier>


; </end encoding FStar.Reflection.V2.Data.qualifier>


; <Start encoding FStar.Reflection.V2.Data.Assumption>


; <start constructor FStar.Reflection.V2.Data.Assumption>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Assumption ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
809)
(= __@x0
FStar.Reflection.V2.Data.Assumption)))

; </end constructor FStar.Reflection.V2.Data.Assumption>


; </end encoding FStar.Reflection.V2.Data.Assumption>


; <Start encoding FStar.Reflection.V2.Data.InternalAssumption>


; <start constructor FStar.Reflection.V2.Data.InternalAssumption>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.InternalAssumption ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
811)
(= __@x0
FStar.Reflection.V2.Data.InternalAssumption)))

; </end constructor FStar.Reflection.V2.Data.InternalAssumption>


; </end encoding FStar.Reflection.V2.Data.InternalAssumption>


; <Start encoding FStar.Reflection.V2.Data.New>


; <start constructor FStar.Reflection.V2.Data.New>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.New ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
813)
(= __@x0
FStar.Reflection.V2.Data.New)))

; </end constructor FStar.Reflection.V2.Data.New>


; </end encoding FStar.Reflection.V2.Data.New>


; <Start encoding FStar.Reflection.V2.Data.Private>


; <start constructor FStar.Reflection.V2.Data.Private>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Private ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
815)
(= __@x0
FStar.Reflection.V2.Data.Private)))

; </end constructor FStar.Reflection.V2.Data.Private>


; </end encoding FStar.Reflection.V2.Data.Private>


; <Start encoding FStar.Reflection.V2.Data.Unfold_for_unification_and_vcgen>


; <start constructor FStar.Reflection.V2.Data.Unfold_for_unification_and_vcgen>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Unfold_for_unification_and_vcgen ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
817)
(= __@x0
FStar.Reflection.V2.Data.Unfold_for_unification_and_vcgen)))

; </end constructor FStar.Reflection.V2.Data.Unfold_for_unification_and_vcgen>


; </end encoding FStar.Reflection.V2.Data.Unfold_for_unification_and_vcgen>


; <Start encoding FStar.Reflection.V2.Data.Visible_default>


; <start constructor FStar.Reflection.V2.Data.Visible_default>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Visible_default ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
819)
(= __@x0
FStar.Reflection.V2.Data.Visible_default)))

; </end constructor FStar.Reflection.V2.Data.Visible_default>


; </end encoding FStar.Reflection.V2.Data.Visible_default>


; <Start encoding FStar.Reflection.V2.Data.Irreducible>


; <start constructor FStar.Reflection.V2.Data.Irreducible>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Irreducible ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
821)
(= __@x0
FStar.Reflection.V2.Data.Irreducible)))

; </end constructor FStar.Reflection.V2.Data.Irreducible>


; </end encoding FStar.Reflection.V2.Data.Irreducible>


; <Start encoding FStar.Reflection.V2.Data.Inline_for_extraction>


; <start constructor FStar.Reflection.V2.Data.Inline_for_extraction>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Inline_for_extraction ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
823)
(= __@x0
FStar.Reflection.V2.Data.Inline_for_extraction)))

; </end constructor FStar.Reflection.V2.Data.Inline_for_extraction>


; </end encoding FStar.Reflection.V2.Data.Inline_for_extraction>


; <Start encoding FStar.Reflection.V2.Data.NoExtract>


; <start constructor FStar.Reflection.V2.Data.NoExtract>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.NoExtract ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
825)
(= __@x0
FStar.Reflection.V2.Data.NoExtract)))

; </end constructor FStar.Reflection.V2.Data.NoExtract>


; </end encoding FStar.Reflection.V2.Data.NoExtract>


; <Start encoding FStar.Reflection.V2.Data.Noeq>


; <start constructor FStar.Reflection.V2.Data.Noeq>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Noeq ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
827)
(= __@x0
FStar.Reflection.V2.Data.Noeq)))

; </end constructor FStar.Reflection.V2.Data.Noeq>


; </end encoding FStar.Reflection.V2.Data.Noeq>


; <Start encoding FStar.Reflection.V2.Data.Unopteq>


; <start constructor FStar.Reflection.V2.Data.Unopteq>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Unopteq ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
829)
(= __@x0
FStar.Reflection.V2.Data.Unopteq)))

; </end constructor FStar.Reflection.V2.Data.Unopteq>


; </end encoding FStar.Reflection.V2.Data.Unopteq>


; <Start encoding FStar.Reflection.V2.Data.TotalEffect>


; <start constructor FStar.Reflection.V2.Data.TotalEffect>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.TotalEffect ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
831)
(= __@x0
FStar.Reflection.V2.Data.TotalEffect)))

; </end constructor FStar.Reflection.V2.Data.TotalEffect>


; </end encoding FStar.Reflection.V2.Data.TotalEffect>


; <Start encoding FStar.Reflection.V2.Data.Logic>


; <start constructor FStar.Reflection.V2.Data.Logic>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Logic ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
833)
(= __@x0
FStar.Reflection.V2.Data.Logic)))

; </end constructor FStar.Reflection.V2.Data.Logic>


; </end encoding FStar.Reflection.V2.Data.Logic>


; <Start encoding FStar.Reflection.V2.Data.Reifiable>


; <start constructor FStar.Reflection.V2.Data.Reifiable>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Reifiable ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
835)
(= __@x0
FStar.Reflection.V2.Data.Reifiable)))

; </end constructor FStar.Reflection.V2.Data.Reifiable>


; </end encoding FStar.Reflection.V2.Data.Reifiable>


; <Start encoding FStar.Reflection.V2.Data.Reflectable>


; <start constructor FStar.Reflection.V2.Data.Reflectable>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Reflectable ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
837)
(= __@x0
(FStar.Reflection.V2.Data.Reflectable (FStar.Reflection.V2.Data.Reflectable__0 __@x0)))))

; </end constructor FStar.Reflection.V2.Data.Reflectable>


; </end encoding FStar.Reflection.V2.Data.Reflectable>


; <Start encoding FStar.Reflection.V2.Data.Discriminator>


; <start constructor FStar.Reflection.V2.Data.Discriminator>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Discriminator ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
842)
(= __@x0
(FStar.Reflection.V2.Data.Discriminator (FStar.Reflection.V2.Data.Discriminator__0 __@x0)))))

; </end constructor FStar.Reflection.V2.Data.Discriminator>


; </end encoding FStar.Reflection.V2.Data.Discriminator>


; <Start encoding FStar.Reflection.V2.Data.Projector>


; <start constructor FStar.Reflection.V2.Data.Projector>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Projector ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
847)
(= __@x0
(FStar.Reflection.V2.Data.Projector (FStar.Reflection.V2.Data.Projector__0 __@x0)))))

; </end constructor FStar.Reflection.V2.Data.Projector>


; </end encoding FStar.Reflection.V2.Data.Projector>


; <Start encoding FStar.Reflection.V2.Data.RecordType>


; <start constructor FStar.Reflection.V2.Data.RecordType>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.RecordType ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
852)
(= __@x0
(FStar.Reflection.V2.Data.RecordType (FStar.Reflection.V2.Data.RecordType__0 __@x0)))))

; </end constructor FStar.Reflection.V2.Data.RecordType>


; </end encoding FStar.Reflection.V2.Data.RecordType>


; <Start encoding FStar.Reflection.V2.Data.RecordConstructor>


; <start constructor FStar.Reflection.V2.Data.RecordConstructor>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.RecordConstructor ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
857)
(= __@x0
(FStar.Reflection.V2.Data.RecordConstructor (FStar.Reflection.V2.Data.RecordConstructor__0 __@x0)))))

; </end constructor FStar.Reflection.V2.Data.RecordConstructor>


; </end encoding FStar.Reflection.V2.Data.RecordConstructor>


; <Start encoding FStar.Reflection.V2.Data.Action>


; <start constructor FStar.Reflection.V2.Data.Action>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Action ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
862)
(= __@x0
(FStar.Reflection.V2.Data.Action (FStar.Reflection.V2.Data.Action__0 __@x0)))))

; </end constructor FStar.Reflection.V2.Data.Action>


; </end encoding FStar.Reflection.V2.Data.Action>


; <Start encoding FStar.Reflection.V2.Data.ExceptionConstructor>


; <start constructor FStar.Reflection.V2.Data.ExceptionConstructor>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.ExceptionConstructor ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
867)
(= __@x0
FStar.Reflection.V2.Data.ExceptionConstructor)))

; </end constructor FStar.Reflection.V2.Data.ExceptionConstructor>


; </end encoding FStar.Reflection.V2.Data.ExceptionConstructor>


; <Start encoding FStar.Reflection.V2.Data.HasMaskedEffect>


; <start constructor FStar.Reflection.V2.Data.HasMaskedEffect>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.HasMaskedEffect ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
869)
(= __@x0
FStar.Reflection.V2.Data.HasMaskedEffect)))

; </end constructor FStar.Reflection.V2.Data.HasMaskedEffect>


; </end encoding FStar.Reflection.V2.Data.HasMaskedEffect>


; <Start encoding FStar.Reflection.V2.Data.Effect>


; <start constructor FStar.Reflection.V2.Data.Effect>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.Effect ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
871)
(= __@x0
FStar.Reflection.V2.Data.Effect)))

; </end constructor FStar.Reflection.V2.Data.Effect>


; </end encoding FStar.Reflection.V2.Data.Effect>


; <Start encoding FStar.Reflection.V2.Data.OnlyName>


; <start constructor FStar.Reflection.V2.Data.OnlyName>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Data.OnlyName ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
873)
(= __@x0
FStar.Reflection.V2.Data.OnlyName)))

; </end constructor FStar.Reflection.V2.Data.OnlyName>


; </end encoding FStar.Reflection.V2.Data.OnlyName>


; </end encoding >


; <Start encoding FStar.Reflection.V2.Data.uu___is_Assumption>

(declare-fun FStar.Reflection.V2.Data.uu___is_Assumption (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V2.Data.qualifier -> Prims.bool
(declare-fun Tm_arrow_df2a07bd599fae92f67bc5e71e782965 () Term)
(declare-fun FStar.Reflection.V2.Data.uu___is_Assumption@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Assumption>


; <Skipped FStar.Reflection.V2.Data.uu___is_Assumption/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_InternalAssumption>

(declare-fun FStar.Reflection.V2.Data.uu___is_InternalAssumption (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_InternalAssumption@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_InternalAssumption>


; <Skipped FStar.Reflection.V2.Data.uu___is_InternalAssumption/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_New>

(declare-fun FStar.Reflection.V2.Data.uu___is_New (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_New@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_New>


; <Skipped FStar.Reflection.V2.Data.uu___is_New/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_Private>

(declare-fun FStar.Reflection.V2.Data.uu___is_Private (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_Private@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Private>


; <Skipped FStar.Reflection.V2.Data.uu___is_Private/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_Unfold_for_unification_and_vcgen>

(declare-fun FStar.Reflection.V2.Data.uu___is_Unfold_for_unification_and_vcgen (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_Unfold_for_unification_and_vcgen@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Unfold_for_unification_and_vcgen>


; <Skipped FStar.Reflection.V2.Data.uu___is_Unfold_for_unification_and_vcgen/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_Visible_default>

(declare-fun FStar.Reflection.V2.Data.uu___is_Visible_default (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_Visible_default@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Visible_default>


; <Skipped FStar.Reflection.V2.Data.uu___is_Visible_default/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_Irreducible>

(declare-fun FStar.Reflection.V2.Data.uu___is_Irreducible (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_Irreducible@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Irreducible>


; <Skipped FStar.Reflection.V2.Data.uu___is_Irreducible/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_Inline_for_extraction>

(declare-fun FStar.Reflection.V2.Data.uu___is_Inline_for_extraction (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_Inline_for_extraction@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Inline_for_extraction>


; <Skipped FStar.Reflection.V2.Data.uu___is_Inline_for_extraction/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_NoExtract>

(declare-fun FStar.Reflection.V2.Data.uu___is_NoExtract (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_NoExtract@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_NoExtract>


; <Skipped FStar.Reflection.V2.Data.uu___is_NoExtract/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_Noeq>

(declare-fun FStar.Reflection.V2.Data.uu___is_Noeq (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_Noeq@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Noeq>


; <Skipped FStar.Reflection.V2.Data.uu___is_Noeq/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_Unopteq>

(declare-fun FStar.Reflection.V2.Data.uu___is_Unopteq (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_Unopteq@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Unopteq>


; <Skipped FStar.Reflection.V2.Data.uu___is_Unopteq/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_TotalEffect>

(declare-fun FStar.Reflection.V2.Data.uu___is_TotalEffect (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_TotalEffect@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_TotalEffect>


; <Skipped FStar.Reflection.V2.Data.uu___is_TotalEffect/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_Logic>

(declare-fun FStar.Reflection.V2.Data.uu___is_Logic (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_Logic@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Logic>


; <Skipped FStar.Reflection.V2.Data.uu___is_Logic/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_Reifiable>

(declare-fun FStar.Reflection.V2.Data.uu___is_Reifiable (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_Reifiable@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Reifiable>


; <Skipped FStar.Reflection.V2.Data.uu___is_Reifiable/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_Reflectable>

(declare-fun FStar.Reflection.V2.Data.uu___is_Reflectable (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_Reflectable@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Reflectable>


; <Skipped FStar.Reflection.V2.Data.uu___is_Reflectable/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Reflectable__item___0>

(declare-fun Tm_refine_1bab3add8001cce44f45d9d72cc5b475 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Reflectable__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.qualifier{Reflectable? _} -> FStar.Reflection.Types.name
(declare-fun Tm_arrow_645c1ea636a79cb4a94290267bff7a6a () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Reflectable__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Reflectable__item___0>


; <Skipped FStar.Reflection.V2.Data.__proj__Reflectable__item___0/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_Discriminator>

(declare-fun FStar.Reflection.V2.Data.uu___is_Discriminator (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_Discriminator@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Discriminator>


; <Skipped FStar.Reflection.V2.Data.uu___is_Discriminator/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Discriminator__item___0>

(declare-fun Tm_refine_3e5becfd0ed33d3ac4fe41d798543126 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Discriminator__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.qualifier{Discriminator? _} -> FStar.Reflection.Types.name
(declare-fun Tm_arrow_20621acef3dea88d97d2aa4937d38c62 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Discriminator__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Discriminator__item___0>


; <Skipped FStar.Reflection.V2.Data.__proj__Discriminator__item___0/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_Projector>

(declare-fun FStar.Reflection.V2.Data.uu___is_Projector (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_Projector@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Projector>


; <Skipped FStar.Reflection.V2.Data.uu___is_Projector/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Projector__item___0>

(declare-fun Tm_refine_d04cdfc31aca373e407c773e3095a97e () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Projector__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.qualifier{Projector? _}   -> FStar.Reflection.Types.name * FStar.Reflection.Types.ident
(declare-fun Tm_arrow_51adbb68c5ad8c643eeef7fd06942e04 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Projector__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Projector__item___0>


; <Skipped FStar.Reflection.V2.Data.__proj__Projector__item___0/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_RecordType>

(declare-fun FStar.Reflection.V2.Data.uu___is_RecordType (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_RecordType@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_RecordType>


; <Skipped FStar.Reflection.V2.Data.uu___is_RecordType/>


; <Start encoding FStar.Reflection.V2.Data.__proj__RecordType__item___0>

(declare-fun Tm_refine_e8393432eb95d8105417944d85a15c53 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__RecordType__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.qualifier{RecordType? _}   -> Prims.list FStar.Reflection.Types.ident * Prims.list FStar.Reflection.Types.ident
(declare-fun Tm_arrow_571d010a09574c02a0eb5b6f4797ff3c () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__RecordType__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__RecordType__item___0>


; <Skipped FStar.Reflection.V2.Data.__proj__RecordType__item___0/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_RecordConstructor>

(declare-fun FStar.Reflection.V2.Data.uu___is_RecordConstructor (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_RecordConstructor@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_RecordConstructor>


; <Skipped FStar.Reflection.V2.Data.uu___is_RecordConstructor/>


; <Start encoding FStar.Reflection.V2.Data.__proj__RecordConstructor__item___0>

(declare-fun Tm_refine_9fb3770f24c7a88933fd4961c07e1f04 () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__RecordConstructor__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.qualifier{RecordConstructor? _}   -> Prims.list FStar.Reflection.Types.ident * Prims.list FStar.Reflection.Types.ident
(declare-fun Tm_arrow_2b6411576fe92da85a3aa110345bc5df () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__RecordConstructor__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__RecordConstructor__item___0>


; <Skipped FStar.Reflection.V2.Data.__proj__RecordConstructor__item___0/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_Action>

(declare-fun FStar.Reflection.V2.Data.uu___is_Action (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_Action@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Action>


; <Skipped FStar.Reflection.V2.Data.uu___is_Action/>


; <Start encoding FStar.Reflection.V2.Data.__proj__Action__item___0>

(declare-fun Tm_refine_910bbca2fc98f2793cad0274b041431c () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Action__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Data.qualifier{Action? _} -> FStar.Reflection.Types.name
(declare-fun Tm_arrow_3b9ab46856219cdcce4ef21420b4bc9d () Term)
(declare-fun FStar.Reflection.V2.Data.__proj__Action__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Data.__proj__Action__item___0>


; <Skipped FStar.Reflection.V2.Data.__proj__Action__item___0/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_ExceptionConstructor>

(declare-fun FStar.Reflection.V2.Data.uu___is_ExceptionConstructor (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_ExceptionConstructor@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_ExceptionConstructor>


; <Skipped FStar.Reflection.V2.Data.uu___is_ExceptionConstructor/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_HasMaskedEffect>

(declare-fun FStar.Reflection.V2.Data.uu___is_HasMaskedEffect (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_HasMaskedEffect@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_HasMaskedEffect>


; <Skipped FStar.Reflection.V2.Data.uu___is_HasMaskedEffect/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_Effect>

(declare-fun FStar.Reflection.V2.Data.uu___is_Effect (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_Effect@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_Effect>


; <Skipped FStar.Reflection.V2.Data.uu___is_Effect/>


; <Start encoding FStar.Reflection.V2.Data.uu___is_OnlyName>

(declare-fun FStar.Reflection.V2.Data.uu___is_OnlyName (Term) Term)

(declare-fun FStar.Reflection.V2.Data.uu___is_OnlyName@tok () Term)

; </end encoding FStar.Reflection.V2.Data.uu___is_OnlyName>


; <Skipped FStar.Reflection.V2.Data.uu___is_OnlyName/>


; <Start encoding FStar.Reflection.V2.Data.var>

(declare-fun FStar.Reflection.V2.Data.var (Dummy_sort) Term)

; </end encoding FStar.Reflection.V2.Data.var>


; End Externals for interface FStar.Reflection.V2.Data


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End interface FStar.Reflection.V2.Data (1958 decls; total size 157710)

;;; Start interface FStar.Reflection.V2.Builtins

; Externals for interface FStar.Reflection.V2.Builtins


; <Start encoding FStar.Reflection.V2.Builtins.inspect_ln>

(declare-fun FStar.Reflection.V2.Builtins.inspect_ln (Term) Term)
(declare-fun Tm_refine_2ec6ce5a1e7a7fbf7c3d0a16c7b15719 (Term) Term)
;;;;;;;;;;;;;;;;t: FStar.Reflection.Types.term -> tv: FStar.Reflection.V2.Data.term_view{tv << t}
(declare-fun Tm_arrow_984a4b9d1cf07ba9751be5902317705a () Term)
(declare-fun FStar.Reflection.V2.Builtins.inspect_ln@tok () Term)


; </end encoding FStar.Reflection.V2.Builtins.inspect_ln>


; <Start encoding FStar.Reflection.V2.Builtins.pack_ln>

(declare-fun FStar.Reflection.V2.Builtins.pack_ln (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Reflection.V2.Data.term_view -> FStar.Reflection.Types.term
(declare-fun Tm_arrow_512cb7f1a8e80ee11af0ad935090eb47 () Term)
(declare-fun FStar.Reflection.V2.Builtins.pack_ln@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.pack_ln>


; <Start encoding FStar.Reflection.V2.Builtins.inspect_comp>

(declare-fun FStar.Reflection.V2.Builtins.inspect_comp (Term) Term)
(declare-fun Tm_refine_d18ff27796a0bc9f3abc9a0780da76bd (Term) Term)
;;;;;;;;;;;;;;;;c: FStar.Reflection.Types.comp -> cv: FStar.Reflection.V2.Data.comp_view{cv << c}
(declare-fun Tm_arrow_ffadf7a26e155324a4825bc36ba05831 () Term)
(declare-fun FStar.Reflection.V2.Builtins.inspect_comp@tok () Term)


; </end encoding FStar.Reflection.V2.Builtins.inspect_comp>


; <Start encoding FStar.Reflection.V2.Builtins.pack_comp>

(declare-fun FStar.Reflection.V2.Builtins.pack_comp (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Reflection.V2.Data.comp_view -> FStar.Reflection.Types.comp
(declare-fun Tm_arrow_1680c415beaee1d79e27369079c21f75 () Term)
(declare-fun FStar.Reflection.V2.Builtins.pack_comp@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.pack_comp>


; <Start encoding FStar.Reflection.V2.Builtins.inspect_sigelt>

(declare-fun FStar.Reflection.V2.Builtins.inspect_sigelt (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Reflection.Types.sigelt -> FStar.Reflection.V2.Data.sigelt_view
(declare-fun Tm_arrow_5c44326ff457a936ed845e422df44f65 () Term)
(declare-fun FStar.Reflection.V2.Builtins.inspect_sigelt@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.inspect_sigelt>


; <Start encoding FStar.Reflection.V2.Builtins.pack_sigelt>

(declare-fun Tm_refine_bf6c41eb763d024f548e8789bbe6e080 () Term)
(declare-fun FStar.Reflection.V2.Builtins.pack_sigelt (Term) Term)

;;;;;;;;;;;;;;;;sv: FStar.Reflection.V2.Data.sigelt_view{~(Unk? sv)} -> FStar.Reflection.Types.sigelt
(declare-fun Tm_arrow_3c31381e75e535ab8c61687f7330e586 () Term)
(declare-fun FStar.Reflection.V2.Builtins.pack_sigelt@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.pack_sigelt>


; <Start encoding FStar.Reflection.V2.Builtins.inspect_fv>

(declare-fun FStar.Reflection.V2.Builtins.inspect_fv (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Reflection.Types.fv -> FStar.Reflection.Types.name
(declare-fun Tm_arrow_59a09a4de860d8a940ca355ec49fbd3f () Term)
(declare-fun FStar.Reflection.V2.Builtins.inspect_fv@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.inspect_fv>


; <Start encoding FStar.Reflection.V2.Builtins.pack_fv>

(declare-fun FStar.Reflection.V2.Builtins.pack_fv (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Reflection.Types.name -> FStar.Reflection.Types.fv
(declare-fun Tm_arrow_b9aab9db863e3a615252339d04a99f49 () Term)
(declare-fun FStar.Reflection.V2.Builtins.pack_fv@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.pack_fv>


; <Start encoding FStar.Reflection.V2.Builtins.inspect_namedv>

(declare-fun FStar.Reflection.V2.Builtins.inspect_namedv (Term) Term)
(declare-fun Tm_refine_b57ff77ab369c4726d7787717ccd613f (Term) Term)
;;;;;;;;;;;;;;;;v: FStar.Reflection.Types.namedv -> nv: FStar.Reflection.V2.Data.namedv_view{nv << v}
(declare-fun Tm_arrow_437ff836200fc0b78011d9482df4b93e () Term)
(declare-fun FStar.Reflection.V2.Builtins.inspect_namedv@tok () Term)


; </end encoding FStar.Reflection.V2.Builtins.inspect_namedv>


; <Start encoding FStar.Reflection.V2.Builtins.pack_namedv>

(declare-fun FStar.Reflection.V2.Builtins.pack_namedv (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Reflection.V2.Data.namedv_view -> FStar.Reflection.Types.namedv
(declare-fun Tm_arrow_912e8ce899f03d95f157a367ce3d708e () Term)
(declare-fun FStar.Reflection.V2.Builtins.pack_namedv@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.pack_namedv>


; <Start encoding FStar.Reflection.V2.Builtins.inspect_bv>

(declare-fun FStar.Reflection.V2.Builtins.inspect_bv (Term) Term)
(declare-fun Tm_refine_bb1c8313568d41d3ee9f6bb4150c7795 (Term) Term)
;;;;;;;;;;;;;;;;v: FStar.Reflection.Types.bv -> bvv: FStar.Reflection.V2.Data.bv_view{bvv << v}
(declare-fun Tm_arrow_699b8e237ff61ca1c9362139df9238e8 () Term)
(declare-fun FStar.Reflection.V2.Builtins.inspect_bv@tok () Term)


; </end encoding FStar.Reflection.V2.Builtins.inspect_bv>


; <Start encoding FStar.Reflection.V2.Builtins.pack_bv>

(declare-fun FStar.Reflection.V2.Builtins.pack_bv (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Reflection.V2.Data.bv_view -> FStar.Reflection.Types.bv
(declare-fun Tm_arrow_c8c64ab4385b3efb9512166f2de88b1a () Term)
(declare-fun FStar.Reflection.V2.Builtins.pack_bv@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.pack_bv>


; <Start encoding FStar.Reflection.V2.Builtins.inspect_lb>

(declare-fun FStar.Reflection.V2.Builtins.inspect_lb (Term) Term)
(declare-fun Tm_refine_c39ac2ca7f5155677afeec79024791c2 (Term) Term)
;;;;;;;;;;;;;;;;lb: FStar.Reflection.Types.letbinding -> lbv: FStar.Reflection.V2.Data.lb_view{lbv << lb}
(declare-fun Tm_arrow_e463ff924ed569dbf291a2fb94997429 () Term)
(declare-fun FStar.Reflection.V2.Builtins.inspect_lb@tok () Term)


; </end encoding FStar.Reflection.V2.Builtins.inspect_lb>


; <Start encoding FStar.Reflection.V2.Builtins.pack_lb>

(declare-fun FStar.Reflection.V2.Builtins.pack_lb (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Reflection.V2.Data.lb_view -> FStar.Reflection.Types.letbinding
(declare-fun Tm_arrow_0191943658e90338f75ff7f845e602e2 () Term)
(declare-fun FStar.Reflection.V2.Builtins.pack_lb@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.pack_lb>


; <Start encoding FStar.Reflection.V2.Builtins.inspect_binder>

(declare-fun FStar.Reflection.V2.Builtins.inspect_binder (Term) Term)
(declare-fun Tm_refine_f8add969ed520f10123d9e882319340e (Term) Term)
;;;;;;;;;;;;;;;;b: FStar.Reflection.Types.binder -> bv: FStar.Reflection.V2.Data.binder_view{bv << b}
(declare-fun Tm_arrow_767f08844b82b844167654f90fa85649 () Term)
(declare-fun FStar.Reflection.V2.Builtins.inspect_binder@tok () Term)


; </end encoding FStar.Reflection.V2.Builtins.inspect_binder>


; <Start encoding FStar.Reflection.V2.Builtins.pack_binder>

(declare-fun FStar.Reflection.V2.Builtins.pack_binder (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Reflection.V2.Data.binder_view -> FStar.Reflection.Types.binder
(declare-fun Tm_arrow_b24fc0a00ddd54c71ba6107b1c205c21 () Term)
(declare-fun FStar.Reflection.V2.Builtins.pack_binder@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.pack_binder>


; <Start encoding FStar.Reflection.V2.Builtins.inspect_universe>

(declare-fun FStar.Reflection.V2.Builtins.inspect_universe (Term) Term)
(declare-fun Tm_refine_efb5a8e775a62f8500dd162848701b2b (Term) Term)
;;;;;;;;;;;;;;;;u3137: FStar.Reflection.Types.universe -> uv: FStar.Reflection.V2.Data.universe_view{uv << u3137}
(declare-fun Tm_arrow_4bf68d517b6874806412a1d77a057b92 () Term)
(declare-fun FStar.Reflection.V2.Builtins.inspect_universe@tok () Term)


; </end encoding FStar.Reflection.V2.Builtins.inspect_universe>


; <Start encoding FStar.Reflection.V2.Builtins.pack_universe>

(declare-fun FStar.Reflection.V2.Builtins.pack_universe (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Reflection.V2.Data.universe_view -> FStar.Reflection.Types.universe
(declare-fun Tm_arrow_97610fa54fc14fa4fd7bd1d3f7d9b01b () Term)
(declare-fun FStar.Reflection.V2.Builtins.pack_universe@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.pack_universe>


; <Start encoding FStar.Reflection.V2.Builtins.inspect_ident>

(declare-fun FStar.Reflection.V2.Builtins.inspect_ident (Term) Term)
(declare-fun Tm_refine_0786a59c2f9ee5c5aa1c38d1d5abe8dd (Term) Term)
;;;;;;;;;;;;;;;;i: FStar.Reflection.Types.ident -> iv: FStar.Reflection.V2.Data.ident_view{iv << i}
(declare-fun Tm_arrow_71b3f1dab69ec1f77a1a31e381d4b3a9 () Term)
(declare-fun FStar.Reflection.V2.Builtins.inspect_ident@tok () Term)


; </end encoding FStar.Reflection.V2.Builtins.inspect_ident>


; <Start encoding FStar.Reflection.V2.Builtins.pack_ident>

(declare-fun FStar.Reflection.V2.Builtins.pack_ident (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Reflection.V2.Data.ident_view -> FStar.Reflection.Types.ident
(declare-fun Tm_arrow_7a505013cc64013f148b764f67a84d44 () Term)
(declare-fun FStar.Reflection.V2.Builtins.pack_ident@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.pack_ident>


; <Start encoding FStar.Reflection.V2.Builtins.pack_inspect_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Builtins.pack_inspect_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Builtins.pack_inspect_inv@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.pack_inspect_inv>


; <Start encoding FStar.Reflection.V2.Builtins.inspect_pack_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Builtins.inspect_pack_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Builtins.inspect_pack_inv@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.inspect_pack_inv>


; <Start encoding FStar.Reflection.V2.Builtins.pack_inspect_comp_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Builtins.pack_inspect_comp_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Builtins.pack_inspect_comp_inv@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.pack_inspect_comp_inv>


; <Start encoding FStar.Reflection.V2.Builtins.inspect_pack_comp_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Builtins.inspect_pack_comp_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Builtins.inspect_pack_comp_inv@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.inspect_pack_comp_inv>


; <Start encoding FStar.Reflection.V2.Builtins.inspect_pack_namedv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Builtins.inspect_pack_namedv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Builtins.inspect_pack_namedv@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.inspect_pack_namedv>


; <Start encoding FStar.Reflection.V2.Builtins.pack_inspect_namedv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Builtins.pack_inspect_namedv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Builtins.pack_inspect_namedv@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.pack_inspect_namedv>


; <Start encoding FStar.Reflection.V2.Builtins.inspect_pack_bv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Builtins.inspect_pack_bv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Builtins.inspect_pack_bv@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.inspect_pack_bv>


; <Start encoding FStar.Reflection.V2.Builtins.pack_inspect_bv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Builtins.pack_inspect_bv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Builtins.pack_inspect_bv@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.pack_inspect_bv>


; <Start encoding FStar.Reflection.V2.Builtins.inspect_pack_binder>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Builtins.inspect_pack_binder (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Builtins.inspect_pack_binder@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.inspect_pack_binder>


; <Start encoding FStar.Reflection.V2.Builtins.pack_inspect_binder>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Builtins.pack_inspect_binder (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Builtins.pack_inspect_binder@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.pack_inspect_binder>


; <Start encoding FStar.Reflection.V2.Builtins.pack_inspect_fv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Builtins.pack_inspect_fv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Builtins.pack_inspect_fv@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.pack_inspect_fv>


; <Start encoding FStar.Reflection.V2.Builtins.inspect_pack_fv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Builtins.inspect_pack_fv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Builtins.inspect_pack_fv@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.inspect_pack_fv>


; <Start encoding FStar.Reflection.V2.Builtins.pack_inspect_universe>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Builtins.pack_inspect_universe (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Builtins.pack_inspect_universe@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.pack_inspect_universe>


; <Start encoding FStar.Reflection.V2.Builtins.inspect_pack_universe>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Builtins.inspect_pack_universe (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Builtins.inspect_pack_universe@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.inspect_pack_universe>


; <Start encoding FStar.Reflection.V2.Builtins.pack_inspect_ident>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Builtins.pack_inspect_ident (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Builtins.pack_inspect_ident@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.pack_inspect_ident>


; <Start encoding FStar.Reflection.V2.Builtins.inspect_pack_ident>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Builtins.inspect_pack_ident (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Builtins.inspect_pack_ident@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.inspect_pack_ident>


; <Start encoding FStar.Reflection.V2.Builtins.simple_binder_defn>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Builtins.simple_binder_defn (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Builtins.simple_binder_defn@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.simple_binder_defn>


; <Start encoding FStar.Reflection.V2.Builtins.implode_qn>

(declare-fun FStar.Reflection.V2.Builtins.implode_qn (Term) Term)
;;;;;;;;;;;;;;;;_: Prims.list Prims.string -> Prims.string
(declare-fun Tm_arrow_340d345a08463dfae3b944609ae2f0c0 () Term)
(declare-fun FStar.Reflection.V2.Builtins.implode_qn@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.implode_qn>


; <Start encoding FStar.Reflection.V2.Builtins.explode_qn>

(declare-fun FStar.Reflection.V2.Builtins.explode_qn (Term) Term)
;;;;;;;;;;;;;;;;_: Prims.string -> Prims.list Prims.string
(declare-fun Tm_arrow_26e764d0304e639834937407731051a4 () Term)
(declare-fun FStar.Reflection.V2.Builtins.explode_qn@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.explode_qn>


; <Start encoding FStar.Reflection.V2.Builtins.compare_string>

(declare-fun FStar.Reflection.V2.Builtins.compare_string (Term Term) Term)
(declare-fun Tm_refine_e49224ef1fa94f244a92062dcdd52678 (Term Term) Term)
;;;;;;;;;;;;;;;;s1: Prims.string -> s2: Prims.string -> x: Prims.int{x == 0 <==> s1 == s2}
(declare-fun Tm_arrow_01ac862b139f8e45b0b814099dfdc270 () Term)
(declare-fun FStar.Reflection.V2.Builtins.compare_string@tok () Term)


; </end encoding FStar.Reflection.V2.Builtins.compare_string>


; <Start encoding FStar.Reflection.V2.Builtins.lookup_typ>

(declare-fun FStar.Reflection.V2.Builtins.lookup_typ (Term Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Reflection.Types.env -> _: FStar.Reflection.Types.name   -> FStar.Pervasives.Native.option FStar.Reflection.Types.sigelt
(declare-fun Tm_arrow_b3b52f275af7af7c3dd92ceba31789fe () Term)
(declare-fun FStar.Reflection.V2.Builtins.lookup_typ@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.lookup_typ>


; <Start encoding FStar.Reflection.V2.Builtins.compare_bv>

(declare-fun FStar.Reflection.V2.Builtins.compare_bv (Term Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Reflection.Types.bv -> _: FStar.Reflection.Types.bv -> FStar.Order.order
(declare-fun Tm_arrow_f320c4b213e39ac694f15a5e9a0ee65f () Term)
(declare-fun FStar.Reflection.V2.Builtins.compare_bv@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.compare_bv>


; <Start encoding FStar.Reflection.V2.Builtins.compare_namedv>

(declare-fun FStar.Reflection.V2.Builtins.compare_namedv (Term Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Reflection.Types.namedv -> _: FStar.Reflection.Types.namedv -> FStar.Order.order
(declare-fun Tm_arrow_be26dbee797033b0693834de9b0ea41a () Term)
(declare-fun FStar.Reflection.V2.Builtins.compare_namedv@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.compare_namedv>


; <Start encoding FStar.Reflection.V2.Builtins.vars_of_env>

(declare-fun FStar.Reflection.V2.Builtins.vars_of_env (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Reflection.Types.env -> Prims.list FStar.Reflection.V2.Data.binding
(declare-fun Tm_arrow_62167b663c377b88f9902d3d238a89b4 () Term)
(declare-fun FStar.Reflection.V2.Builtins.vars_of_env@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.vars_of_env>


; <Start encoding FStar.Reflection.V2.Builtins.moduleof>

(declare-fun FStar.Reflection.V2.Builtins.moduleof (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Reflection.Types.env -> FStar.Reflection.Types.name
(declare-fun Tm_arrow_be673cd632af22851c67a71e5c547678 () Term)
(declare-fun FStar.Reflection.V2.Builtins.moduleof@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.moduleof>


; <Start encoding FStar.Reflection.V2.Builtins.lookup_attr>

(declare-fun FStar.Reflection.V2.Builtins.lookup_attr (Term Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Reflection.Types.term -> _: FStar.Reflection.Types.env   -> Prims.list FStar.Reflection.Types.fv
(declare-fun Tm_arrow_1b11069b1d5bdfd6c4e49ec04128d1df () Term)
(declare-fun FStar.Reflection.V2.Builtins.lookup_attr@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.lookup_attr>


; <Start encoding FStar.Reflection.V2.Builtins.all_defs_in_env>

(declare-fun FStar.Reflection.V2.Builtins.all_defs_in_env (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Reflection.Types.env -> Prims.list FStar.Reflection.Types.fv
(declare-fun Tm_arrow_945240e74188da05b6422fdc2f33259f () Term)
(declare-fun FStar.Reflection.V2.Builtins.all_defs_in_env@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.all_defs_in_env>


; <Start encoding FStar.Reflection.V2.Builtins.defs_in_module>

(declare-fun FStar.Reflection.V2.Builtins.defs_in_module (Term Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Reflection.Types.env -> _: FStar.Reflection.Types.name   -> Prims.list FStar.Reflection.Types.fv
(declare-fun Tm_arrow_7b0dd6142f9e58dde7fab3f2cf130fea () Term)
(declare-fun FStar.Reflection.V2.Builtins.defs_in_module@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.defs_in_module>


; <Start encoding FStar.Reflection.V2.Builtins.term_eq>

(declare-fun FStar.Reflection.V2.Builtins.term_eq (Term Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Reflection.Types.term -> _: FStar.Reflection.Types.term -> Prims.bool
(declare-fun Tm_arrow_bc0311d06811c7443939d05fd12cfc85 () Term)
(declare-fun FStar.Reflection.V2.Builtins.term_eq@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.term_eq>


; <Start encoding FStar.Reflection.V2.Builtins.env_open_modules>

(declare-fun FStar.Reflection.V2.Builtins.env_open_modules (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Reflection.Types.env -> Prims.list FStar.Reflection.Types.name
(declare-fun Tm_arrow_0140555873d7e73de5abfc22a03d33ba () Term)
(declare-fun FStar.Reflection.V2.Builtins.env_open_modules@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.env_open_modules>


; <Start encoding FStar.Reflection.V2.Builtins.push_namedv>

(declare-fun FStar.Reflection.V2.Builtins.push_namedv (Term Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Reflection.Types.env -> _: FStar.Reflection.Types.namedv -> FStar.Reflection.Types.env
(declare-fun Tm_arrow_72f2701cf010ec51bc159a2815cd1aba () Term)
(declare-fun FStar.Reflection.V2.Builtins.push_namedv@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.push_namedv>


; <Start encoding FStar.Reflection.V2.Builtins.sigelt_attrs>

(declare-fun FStar.Reflection.V2.Builtins.sigelt_attrs (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Reflection.Types.sigelt -> Prims.list FStar.Reflection.Types.term
(declare-fun Tm_arrow_f809f8679170fc1cf26e414d75d037dd () Term)
(declare-fun FStar.Reflection.V2.Builtins.sigelt_attrs@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.sigelt_attrs>


; <Start encoding FStar.Reflection.V2.Builtins.set_sigelt_attrs>

(declare-fun FStar.Reflection.V2.Builtins.set_sigelt_attrs (Term Term) Term)
;;;;;;;;;;;;;;;;_: Prims.list FStar.Reflection.Types.term -> _: FStar.Reflection.Types.sigelt   -> FStar.Reflection.Types.sigelt
(declare-fun Tm_arrow_71498d2bb20afeacdc2e62be274ed244 () Term)
(declare-fun FStar.Reflection.V2.Builtins.set_sigelt_attrs@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.set_sigelt_attrs>


; <Start encoding FStar.Reflection.V2.Builtins.sigelt_quals>

(declare-fun FStar.Reflection.V2.Builtins.sigelt_quals (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Reflection.Types.sigelt -> Prims.list FStar.Reflection.V2.Data.qualifier
(declare-fun Tm_arrow_4bd7e4b20b31da2e34905b263a2298be () Term)
(declare-fun FStar.Reflection.V2.Builtins.sigelt_quals@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.sigelt_quals>


; <Start encoding FStar.Reflection.V2.Builtins.set_sigelt_quals>

(declare-fun FStar.Reflection.V2.Builtins.set_sigelt_quals (Term Term) Term)
;;;;;;;;;;;;;;;;_: Prims.list FStar.Reflection.V2.Data.qualifier -> _: FStar.Reflection.Types.sigelt   -> FStar.Reflection.Types.sigelt
(declare-fun Tm_arrow_15e0ecf11cc7975fe5ed5b877ed254ae () Term)
(declare-fun FStar.Reflection.V2.Builtins.set_sigelt_quals@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.set_sigelt_quals>


; <Start encoding FStar.Reflection.V2.Builtins.sigelt_opts>

(declare-fun FStar.Reflection.V2.Builtins.sigelt_opts (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Reflection.Types.sigelt -> FStar.Pervasives.Native.option FStar.VConfig.vconfig
(declare-fun Tm_arrow_2107e4fada434a8f3a2ab7537699f992 () Term)
(declare-fun FStar.Reflection.V2.Builtins.sigelt_opts@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.sigelt_opts>


; <Start encoding FStar.Reflection.V2.Builtins.embed_vconfig>

(declare-fun FStar.Reflection.V2.Builtins.embed_vconfig (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.VConfig.vconfig -> FStar.Reflection.Types.term
(declare-fun Tm_arrow_9821159200ec417ce8abd994f4ea7479 () Term)
(declare-fun FStar.Reflection.V2.Builtins.embed_vconfig@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.embed_vconfig>


; <Start encoding FStar.Reflection.V2.Builtins.subst_term>

(declare-fun FStar.Reflection.V2.Builtins.subst_term (Term Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Stubs.Syntax.Syntax.subst_t -> _: FStar.Reflection.Types.term   -> FStar.Reflection.Types.term
(declare-fun Tm_arrow_b252df2b60d7f9fb3854382805a84fec () Term)
(declare-fun FStar.Reflection.V2.Builtins.subst_term@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.subst_term>


; <Start encoding FStar.Reflection.V2.Builtins.subst_comp>

(declare-fun FStar.Reflection.V2.Builtins.subst_comp (Term Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Stubs.Syntax.Syntax.subst_t -> _: FStar.Reflection.Types.comp   -> FStar.Reflection.Types.comp
(declare-fun Tm_arrow_163293734907998d33d6093388c3b92d () Term)
(declare-fun FStar.Reflection.V2.Builtins.subst_comp@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.subst_comp>


; <Start encoding FStar.Reflection.V2.Builtins.range_of_term>

(declare-fun FStar.Reflection.V2.Builtins.range_of_term (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Reflection.Types.term -> FStar.Range.range
(declare-fun Tm_arrow_b012d0899ef37bfa9682fcf5ad77d1d8 () Term)
(declare-fun FStar.Reflection.V2.Builtins.range_of_term@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.range_of_term>


; <Start encoding FStar.Reflection.V2.Builtins.range_of_sigelt>

(declare-fun FStar.Reflection.V2.Builtins.range_of_sigelt (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Reflection.Types.sigelt -> FStar.Range.range
(declare-fun Tm_arrow_2521479854337d809039940c9c7e8df8 () Term)
(declare-fun FStar.Reflection.V2.Builtins.range_of_sigelt@tok () Term)

; </end encoding FStar.Reflection.V2.Builtins.range_of_sigelt>


; End Externals for interface FStar.Reflection.V2.Builtins


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End interface FStar.Reflection.V2.Builtins (311 decls; total size 27275)

;;; Start module FStar.Reflection.Const

; Externals for module FStar.Reflection.Const


; <Start encoding FStar.Reflection.Const.imp_qn>

(declare-fun FStar.Reflection.Const.imp_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.imp_qn>


; <Start encoding FStar.Reflection.Const.and_qn>

(declare-fun FStar.Reflection.Const.and_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.and_qn>


; <Start encoding FStar.Reflection.Const.or_qn>

(declare-fun FStar.Reflection.Const.or_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.or_qn>


; <Start encoding FStar.Reflection.Const.not_qn>

(declare-fun FStar.Reflection.Const.not_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.not_qn>


; <Start encoding FStar.Reflection.Const.iff_qn>

(declare-fun FStar.Reflection.Const.iff_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.iff_qn>


; <Start encoding FStar.Reflection.Const.eq2_qn>

(declare-fun FStar.Reflection.Const.eq2_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.eq2_qn>


; <Start encoding FStar.Reflection.Const.eq1_qn>

(declare-fun FStar.Reflection.Const.eq1_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.eq1_qn>


; <Start encoding FStar.Reflection.Const.true_qn>

(declare-fun FStar.Reflection.Const.true_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.true_qn>


; <Start encoding FStar.Reflection.Const.false_qn>

(declare-fun FStar.Reflection.Const.false_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.false_qn>


; <Start encoding FStar.Reflection.Const.b2t_qn>

(declare-fun FStar.Reflection.Const.b2t_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.b2t_qn>


; <Start encoding FStar.Reflection.Const.forall_qn>

(declare-fun FStar.Reflection.Const.forall_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.forall_qn>


; <Start encoding FStar.Reflection.Const.exists_qn>

(declare-fun FStar.Reflection.Const.exists_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.exists_qn>


; <Start encoding FStar.Reflection.Const.squash_qn>

(declare-fun FStar.Reflection.Const.squash_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.squash_qn>


; <Start encoding FStar.Reflection.Const.prop_qn>

(declare-fun FStar.Reflection.Const.prop_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.prop_qn>


; <Start encoding FStar.Reflection.Const.bool_true_qn>

(declare-fun FStar.Reflection.Const.bool_true_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.bool_true_qn>


; <Start encoding FStar.Reflection.Const.bool_false_qn>

(declare-fun FStar.Reflection.Const.bool_false_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.bool_false_qn>


; <Start encoding FStar.Reflection.Const.int_lid>

(declare-fun FStar.Reflection.Const.int_lid (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.int_lid>


; <Start encoding FStar.Reflection.Const.bool_lid>

(declare-fun FStar.Reflection.Const.bool_lid (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.bool_lid>


; <Start encoding FStar.Reflection.Const.unit_lid>

(declare-fun FStar.Reflection.Const.unit_lid (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.unit_lid>


; <Start encoding FStar.Reflection.Const.string_lid>

(declare-fun FStar.Reflection.Const.string_lid (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.string_lid>


; <Start encoding FStar.Reflection.Const.add_qn>

(declare-fun FStar.Reflection.Const.add_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.add_qn>


; <Start encoding FStar.Reflection.Const.neg_qn>

(declare-fun FStar.Reflection.Const.neg_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.neg_qn>


; <Start encoding FStar.Reflection.Const.minus_qn>

(declare-fun FStar.Reflection.Const.minus_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.minus_qn>


; <Start encoding FStar.Reflection.Const.mult_qn>

(declare-fun FStar.Reflection.Const.mult_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.mult_qn>


; <Start encoding FStar.Reflection.Const.mult'_qn>

(declare-fun FStar.Reflection.Const.mult__qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.mult'_qn>


; <Start encoding FStar.Reflection.Const.div_qn>

(declare-fun FStar.Reflection.Const.div_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.div_qn>


; <Start encoding FStar.Reflection.Const.lt_qn>

(declare-fun FStar.Reflection.Const.lt_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.lt_qn>


; <Start encoding FStar.Reflection.Const.lte_qn>

(declare-fun FStar.Reflection.Const.lte_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.lte_qn>


; <Start encoding FStar.Reflection.Const.gt_qn>

(declare-fun FStar.Reflection.Const.gt_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.gt_qn>


; <Start encoding FStar.Reflection.Const.gte_qn>

(declare-fun FStar.Reflection.Const.gte_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.gte_qn>


; <Start encoding FStar.Reflection.Const.mod_qn>

(declare-fun FStar.Reflection.Const.mod_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.mod_qn>


; <Start encoding FStar.Reflection.Const.nil_qn>

(declare-fun FStar.Reflection.Const.nil_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.nil_qn>


; <Start encoding FStar.Reflection.Const.cons_qn>

(declare-fun FStar.Reflection.Const.cons_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.cons_qn>


; <Start encoding FStar.Reflection.Const.mktuple2_qn>

(declare-fun FStar.Reflection.Const.mktuple2_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.mktuple2_qn>


; <Start encoding FStar.Reflection.Const.mktuple3_qn>

(declare-fun FStar.Reflection.Const.mktuple3_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.mktuple3_qn>


; <Start encoding FStar.Reflection.Const.mktuple4_qn>

(declare-fun FStar.Reflection.Const.mktuple4_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.mktuple4_qn>


; <Start encoding FStar.Reflection.Const.mktuple5_qn>

(declare-fun FStar.Reflection.Const.mktuple5_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.mktuple5_qn>


; <Start encoding FStar.Reflection.Const.mktuple6_qn>

(declare-fun FStar.Reflection.Const.mktuple6_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.mktuple6_qn>


; <Start encoding FStar.Reflection.Const.mktuple7_qn>

(declare-fun FStar.Reflection.Const.mktuple7_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.mktuple7_qn>


; <Start encoding FStar.Reflection.Const.mktuple8_qn>

(declare-fun FStar.Reflection.Const.mktuple8_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.mktuple8_qn>


; <Start encoding FStar.Reflection.Const.land_qn>

(declare-fun FStar.Reflection.Const.land_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.land_qn>


; <Start encoding FStar.Reflection.Const.lxor_qn>

(declare-fun FStar.Reflection.Const.lxor_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.lxor_qn>


; <Start encoding FStar.Reflection.Const.lor_qn>

(declare-fun FStar.Reflection.Const.lor_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.lor_qn>


; <Start encoding FStar.Reflection.Const.ladd_qn>

(declare-fun FStar.Reflection.Const.ladd_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.ladd_qn>


; <Start encoding FStar.Reflection.Const.lsub_qn>

(declare-fun FStar.Reflection.Const.lsub_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.lsub_qn>


; <Start encoding FStar.Reflection.Const.shiftl_qn>

(declare-fun FStar.Reflection.Const.shiftl_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.shiftl_qn>


; <Start encoding FStar.Reflection.Const.shiftr_qn>

(declare-fun FStar.Reflection.Const.shiftr_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.shiftr_qn>


; <Start encoding FStar.Reflection.Const.udiv_qn>

(declare-fun FStar.Reflection.Const.udiv_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.udiv_qn>


; <Start encoding FStar.Reflection.Const.umod_qn>

(declare-fun FStar.Reflection.Const.umod_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.umod_qn>


; <Start encoding FStar.Reflection.Const.mul_mod_qn>

(declare-fun FStar.Reflection.Const.mul_mod_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.mul_mod_qn>


; <Start encoding FStar.Reflection.Const.nat_bv_qn>

(declare-fun FStar.Reflection.Const.nat_bv_qn (Dummy_sort) Term)

; </end encoding FStar.Reflection.Const.nat_bv_qn>


; End Externals for module FStar.Reflection.Const


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End module FStar.Reflection.Const (156 decls; total size 9755)

;;; Start module FStar.Reflection.V2.Derived

; Externals for module FStar.Reflection.V2.Derived


; <Start encoding FStar.Reflection.V2.Derived.inspect_ln_unascribe>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Derived.inspect_ln_unascribe.fuel_instrumented (Fuel Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Derived.inspect_ln_unascribe.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Derived.inspect_ln_unascribe (Term) Term)
(declare-fun FStar.Reflection.V2.Derived.inspect_ln_unascribe@tok () Term)
(declare-fun Tm_refine_6dfd1fb84e5f203b89f41bebbf787ad0 (Term) Term)

;;;;;;;;;;;;;;;;t: FStar.Reflection.Types.term   -> tv: FStar.Reflection.V2.Data.term_view{tv << t /\ FStar.Reflection.V2.Data.notAscription tv}
(declare-fun Tm_arrow_7e7df9398ee2ed94739d2db91cd2b1e2 () Term)

;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Reflection.V2.Derived.inspect_ln_unascribe; Namespace FStar.Reflection.V2.Derived
(assert (! 
;; def=FStar.Reflection.V2.Derived.fst(25,8-25,28); use=FStar.Reflection.V2.Derived.fst(25,8-25,28)
(forall ((@u0 Fuel) (@x1 Term))
 (! (= (FStar.Reflection.V2.Derived.inspect_ln_unascribe.fuel_instrumented (SFuel @u0)
@x1)
(FStar.Reflection.V2.Derived.inspect_ln_unascribe.fuel_instrumented ZFuel
@x1))
 

:pattern ((FStar.Reflection.V2.Derived.inspect_ln_unascribe.fuel_instrumented (SFuel @u0)
@x1))
:qid @fuel_irrelevance_FStar.Reflection.V2.Derived.inspect_ln_unascribe.fuel_instrumented))

:named @fuel_irrelevance_FStar.Reflection.V2.Derived.inspect_ln_unascribe.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Reflection.V2.Derived.inspect_ln_unascribe; Namespace FStar.Reflection.V2.Derived
(assert (! 
;; def=FStar.Reflection.V2.Derived.fst(25,8-25,28); use=FStar.Reflection.V2.Derived.fst(25,8-25,28)
(forall ((@x0 Term))
 (! (= (FStar.Reflection.V2.Derived.inspect_ln_unascribe @x0)
(FStar.Reflection.V2.Derived.inspect_ln_unascribe.fuel_instrumented MaxFuel
@x0))
 

:pattern ((FStar.Reflection.V2.Derived.inspect_ln_unascribe @x0))
:qid @fuel_correspondence_FStar.Reflection.V2.Derived.inspect_ln_unascribe.fuel_instrumented))

:named @fuel_correspondence_FStar.Reflection.V2.Derived.inspect_ln_unascribe.fuel_instrumented))

; </end encoding FStar.Reflection.V2.Derived.inspect_ln_unascribe>


; <Start encoding FStar.Reflection.V2.Derived.shift>

(declare-fun FStar.Reflection.V2.Derived.shift (Term Term) Term)
;;;;;;;;;;;;;;;;n: Prims.int -> s: FStar.Stubs.Syntax.Syntax.subst_elt -> FStar.Stubs.Syntax.Syntax.subst_elt
(declare-fun Tm_arrow_585e2901c9c8656a4d7198125fd6631a () Term)
(declare-fun FStar.Reflection.V2.Derived.shift@tok () Term)

; </end encoding FStar.Reflection.V2.Derived.shift>


; <Start encoding FStar.Reflection.V2.Derived.shift_subst>

(declare-fun FStar.Reflection.V2.Derived.shift_subst (Term Term) Term)
;;;;;;;;;;;;;;;;n: Prims.int -> s: Prims.list FStar.Stubs.Syntax.Syntax.subst_elt   -> Prims.list FStar.Stubs.Syntax.Syntax.subst_elt
(declare-fun Tm_arrow_2f00219871d1cccc694fd8620951814a () Term)
(declare-fun FStar.Reflection.V2.Derived.shift_subst@tok () Term)
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name FStar.Reflection.V2.Derived.shift_subst; Namespace FStar.Reflection.V2.Derived
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.Reflection.V2.Derived.shift@tok))
:named @kick_partial_app_95bfef6e71845f29d663a0de9a06e3c8))

; </end encoding FStar.Reflection.V2.Derived.shift_subst>


; <Start encoding FStar.Reflection.V2.Derived.subst1>

(declare-fun FStar.Reflection.V2.Derived.subst1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;n: FStar.Reflection.Types.namedv ->     t1: FStar.Reflection.Types.term ->     t2: FStar.Reflection.Types.term   -> FStar.Reflection.Types.term
(declare-fun Tm_arrow_065ea8c7a4295761f8a51e2f8f0139ed () Term)
(declare-fun FStar.Reflection.V2.Derived.subst1@tok () Term)

; </end encoding FStar.Reflection.V2.Derived.subst1>


; <Start encoding FStar.Reflection.V2.Derived.mk_binder>

(declare-fun FStar.Reflection.V2.Derived.mk_binder (Term Term) Term)
;;;;;;;;;;;;;;;;nm: Prims.string -> sort: FStar.Reflection.Types.typ -> FStar.Reflection.V2.Data.simple_binder
(declare-fun Tm_arrow_a24d5893ccaa67a71aed6d10448b9955 () Term)
(declare-fun FStar.Reflection.V2.Derived.mk_binder@tok () Term)

; </end encoding FStar.Reflection.V2.Derived.mk_binder>


; <Start encoding FStar.Reflection.V2.Derived.mk_implicit_binder>

(declare-fun FStar.Reflection.V2.Derived.mk_implicit_binder (Term Term) Term)
;;;;;;;;;;;;;;;;nm: Prims.string -> sort: FStar.Reflection.Types.typ -> FStar.Reflection.Types.binder
(declare-fun Tm_arrow_93e23213ab65d23bff7cd216b2af9bb2 () Term)
(declare-fun FStar.Reflection.V2.Derived.mk_implicit_binder@tok () Term)

; </end encoding FStar.Reflection.V2.Derived.mk_implicit_binder>


; <Start encoding FStar.Reflection.V2.Derived.push_binding>

(declare-fun FStar.Reflection.V2.Derived.push_binding (Term Term) Term)
;;;;;;;;;;;;;;;;e: FStar.Reflection.Types.env -> b: FStar.Reflection.V2.Data.binding -> FStar.Reflection.Types.env
(declare-fun Tm_arrow_aba26994f2d7c6544032c63a72372ceb () Term)
(declare-fun FStar.Reflection.V2.Derived.push_binding@tok () Term)

; </end encoding FStar.Reflection.V2.Derived.push_binding>


; <Start encoding FStar.Reflection.V2.Derived.type_of_binder>

(declare-fun FStar.Reflection.V2.Derived.type_of_binder (Term) Term)
;;;;;;;;;;;;;;;;b: FStar.Reflection.Types.binder -> FStar.Reflection.Types.typ
(declare-fun Tm_arrow_756e7bf9e9e8f9eecc1e4f6a844cdf61 () Term)
(declare-fun FStar.Reflection.V2.Derived.type_of_binder@tok () Term)

; </end encoding FStar.Reflection.V2.Derived.type_of_binder>


; <Skipped FStar.Reflection.V2.Derived.flatten_name/>


; <Start encoding FStar.Reflection.V2.Derived.flatten_name>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Derived.flatten_name.fuel_instrumented (Fuel Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Derived.flatten_name.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Derived.flatten_name (Term) Term)
(declare-fun FStar.Reflection.V2.Derived.flatten_name@tok () Term)
;;;;;;;;;;;;;;;;ns: FStar.Reflection.Types.name -> Prims.string
(declare-fun Tm_arrow_d50b444f2615dba71cb83d42b9eb1dc0 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Reflection.V2.Derived.flatten_name; Namespace FStar.Reflection.V2.Derived
(assert (! 
;; def=FStar.Reflection.V2.Derived.fst(78,8-78,20); use=FStar.Reflection.V2.Derived.fst(78,8-78,20)
(forall ((@u0 Fuel) (@x1 Term))
 (! (= (FStar.Reflection.V2.Derived.flatten_name.fuel_instrumented (SFuel @u0)
@x1)
(FStar.Reflection.V2.Derived.flatten_name.fuel_instrumented ZFuel
@x1))
 

:pattern ((FStar.Reflection.V2.Derived.flatten_name.fuel_instrumented (SFuel @u0)
@x1))
:qid @fuel_irrelevance_FStar.Reflection.V2.Derived.flatten_name.fuel_instrumented))

:named @fuel_irrelevance_FStar.Reflection.V2.Derived.flatten_name.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Reflection.V2.Derived.flatten_name; Namespace FStar.Reflection.V2.Derived
(assert (! 
;; def=FStar.Reflection.V2.Derived.fst(78,8-78,20); use=FStar.Reflection.V2.Derived.fst(78,8-78,20)
(forall ((@x0 Term))
 (! (= (FStar.Reflection.V2.Derived.flatten_name @x0)
(FStar.Reflection.V2.Derived.flatten_name.fuel_instrumented MaxFuel
@x0))
 

:pattern ((FStar.Reflection.V2.Derived.flatten_name @x0))
:qid @fuel_correspondence_FStar.Reflection.V2.Derived.flatten_name.fuel_instrumented))

:named @fuel_correspondence_FStar.Reflection.V2.Derived.flatten_name.fuel_instrumented))

; </end encoding FStar.Reflection.V2.Derived.flatten_name>


; <Start encoding FStar.Reflection.V2.Derived.collect_app_ln'>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Derived.collect_app_ln_.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Derived.collect_app_ln_.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Derived.collect_app_ln_ (Term Term) Term)
(declare-fun FStar.Reflection.V2.Derived.collect_app_ln_@tok () Term)
;;;;;;;;;;;;;;;;args: Prims.list FStar.Reflection.V2.Data.argv -> t: FStar.Reflection.Types.term   -> Prims.Tot (FStar.Reflection.Types.term * Prims.list FStar.Reflection.V2.Data.argv)
(declare-fun Tm_arrow_0d1767def607b784f94ece83a0aefbe8 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Reflection.V2.Derived.collect_app_ln'; Namespace FStar.Reflection.V2.Derived
(assert (! 
;; def=FStar.Reflection.V2.Derived.fst(85,8-85,23); use=FStar.Reflection.V2.Derived.fst(85,8-85,23)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.Reflection.V2.Derived.collect_app_ln_.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.Reflection.V2.Derived.collect_app_ln_.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.Reflection.V2.Derived.collect_app_ln_.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.Reflection.V2.Derived.collect_app_ln_.fuel_instrumented))

:named @fuel_irrelevance_FStar.Reflection.V2.Derived.collect_app_ln_.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Reflection.V2.Derived.collect_app_ln'; Namespace FStar.Reflection.V2.Derived
(assert (! 
;; def=FStar.Reflection.V2.Derived.fst(85,8-85,23); use=FStar.Reflection.V2.Derived.fst(85,8-85,23)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Reflection.V2.Derived.collect_app_ln_ @x0
@x1)
(FStar.Reflection.V2.Derived.collect_app_ln_.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.Reflection.V2.Derived.collect_app_ln_ @x0
@x1))
:qid @fuel_correspondence_FStar.Reflection.V2.Derived.collect_app_ln_.fuel_instrumented))

:named @fuel_correspondence_FStar.Reflection.V2.Derived.collect_app_ln_.fuel_instrumented))

; </end encoding FStar.Reflection.V2.Derived.collect_app_ln'>


; <Skipped FStar.Reflection.V2.Derived.collect_app_ln/>


; <Start encoding FStar.Reflection.V2.Derived.collect_app_ln>

(declare-fun FStar.Reflection.V2.Derived.collect_app_ln (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Reflection.Types.term   -> FStar.Reflection.Types.term * Prims.list FStar.Reflection.V2.Data.argv
(declare-fun Tm_arrow_a167927c47edb20b1c16ac74b5da71aa () Term)
(declare-fun FStar.Reflection.V2.Derived.collect_app_ln@tok () Term)

; </end encoding FStar.Reflection.V2.Derived.collect_app_ln>


; <Start encoding FStar.Reflection.V2.Derived.mk_app>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Derived.mk_app.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Derived.mk_app.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Derived.mk_app (Term Term) Term)
(declare-fun FStar.Reflection.V2.Derived.mk_app@tok () Term)
;;;;;;;;;;;;;;;;t: FStar.Reflection.Types.term -> args: Prims.list FStar.Reflection.V2.Data.argv   -> Prims.Tot FStar.Reflection.Types.term
(declare-fun Tm_arrow_997938fc5d96b5020bcb536072a4917e () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Reflection.V2.Derived.mk_app; Namespace FStar.Reflection.V2.Derived
(assert (! 
;; def=FStar.Reflection.V2.Derived.fst(94,8-94,14); use=FStar.Reflection.V2.Derived.fst(94,8-94,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.Reflection.V2.Derived.mk_app.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.Reflection.V2.Derived.mk_app.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.Reflection.V2.Derived.mk_app.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.Reflection.V2.Derived.mk_app.fuel_instrumented))

:named @fuel_irrelevance_FStar.Reflection.V2.Derived.mk_app.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Reflection.V2.Derived.mk_app; Namespace FStar.Reflection.V2.Derived
(assert (! 
;; def=FStar.Reflection.V2.Derived.fst(94,8-94,14); use=FStar.Reflection.V2.Derived.fst(94,8-94,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Reflection.V2.Derived.mk_app @x0
@x1)
(FStar.Reflection.V2.Derived.mk_app.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.Reflection.V2.Derived.mk_app @x0
@x1))
:qid @fuel_correspondence_FStar.Reflection.V2.Derived.mk_app.fuel_instrumented))

:named @fuel_correspondence_FStar.Reflection.V2.Derived.mk_app.fuel_instrumented))

; </end encoding FStar.Reflection.V2.Derived.mk_app>


; <Start encoding FStar.Reflection.V2.Derived.mk_e_app>

(declare-fun FStar.Reflection.V2.Derived.mk_e_app (Term Term) Term)
;;;;;;;;;;;;;;;;t: FStar.Reflection.Types.term -> args: Prims.list FStar.Reflection.Types.term   -> FStar.Reflection.Types.term
(declare-fun Tm_arrow_7791fa6e4170f27ace5e8069780e5243 () Term)
(declare-fun FStar.Reflection.V2.Derived.mk_e_app@tok () Term)
;;;;;;;;;;;;;;;;t: FStar.Reflection.Types.term -> FStar.Reflection.Types.term * FStar.Reflection.V2.Data.aqualv
(declare-fun Tm_arrow_60069f6e2fec0178af7d7174550438f4 () Term)
(declare-fun Tm_abs_d5a9a59eb3b14e6524f855ac4461b506 () Term)

; </end encoding FStar.Reflection.V2.Derived.mk_e_app>


; <Start encoding FStar.Reflection.V2.Derived.u_unk>

(declare-fun FStar.Reflection.V2.Derived.u_unk (Dummy_sort) Term)

; </end encoding FStar.Reflection.V2.Derived.u_unk>


; <Start encoding FStar.Reflection.V2.Derived.mk_tot_arr_ln>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Derived.mk_tot_arr_ln.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Derived.mk_tot_arr_ln.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Derived.mk_tot_arr_ln (Term Term) Term)
(declare-fun FStar.Reflection.V2.Derived.mk_tot_arr_ln@tok () Term)
;;;;;;;;;;;;;;;;bs: Prims.list FStar.Reflection.Types.binder -> cod: FStar.Reflection.Types.term   -> Prims.Tot FStar.Reflection.Types.term
(declare-fun Tm_arrow_9a1d3769ba595318666288702082c683 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Reflection.V2.Derived.mk_tot_arr_ln; Namespace FStar.Reflection.V2.Derived
(assert (! 
;; def=FStar.Reflection.V2.Derived.fst(106,8-106,21); use=FStar.Reflection.V2.Derived.fst(106,8-106,21)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.Reflection.V2.Derived.mk_tot_arr_ln.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.Reflection.V2.Derived.mk_tot_arr_ln.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.Reflection.V2.Derived.mk_tot_arr_ln.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.Reflection.V2.Derived.mk_tot_arr_ln.fuel_instrumented))

:named @fuel_irrelevance_FStar.Reflection.V2.Derived.mk_tot_arr_ln.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Reflection.V2.Derived.mk_tot_arr_ln; Namespace FStar.Reflection.V2.Derived
(assert (! 
;; def=FStar.Reflection.V2.Derived.fst(106,8-106,21); use=FStar.Reflection.V2.Derived.fst(106,8-106,21)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Reflection.V2.Derived.mk_tot_arr_ln @x0
@x1)
(FStar.Reflection.V2.Derived.mk_tot_arr_ln.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.Reflection.V2.Derived.mk_tot_arr_ln @x0
@x1))
:qid @fuel_correspondence_FStar.Reflection.V2.Derived.mk_tot_arr_ln.fuel_instrumented))

:named @fuel_correspondence_FStar.Reflection.V2.Derived.mk_tot_arr_ln.fuel_instrumented))

; </end encoding FStar.Reflection.V2.Derived.mk_tot_arr_ln>


; <Start encoding FStar.Reflection.V2.Derived.collect_arr'>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Derived.collect_arr_.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Derived.collect_arr_.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Derived.collect_arr_ (Term Term) Term)
(declare-fun FStar.Reflection.V2.Derived.collect_arr_@tok () Term)
;;;;;;;;;;;;;;;;bs: Prims.list FStar.Reflection.Types.binder -> c: FStar.Reflection.Types.comp   -> Prims.Tot (Prims.list FStar.Reflection.Types.binder * FStar.Reflection.Types.comp)
(declare-fun Tm_arrow_699780bc3a16e1f939c969908145a16a () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Reflection.V2.Derived.collect_arr'; Namespace FStar.Reflection.V2.Derived
(assert (! 
;; def=FStar.Reflection.V2.Derived.fst(111,8-111,20); use=FStar.Reflection.V2.Derived.fst(111,8-111,20)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.Reflection.V2.Derived.collect_arr_.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.Reflection.V2.Derived.collect_arr_.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.Reflection.V2.Derived.collect_arr_.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.Reflection.V2.Derived.collect_arr_.fuel_instrumented))

:named @fuel_irrelevance_FStar.Reflection.V2.Derived.collect_arr_.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Reflection.V2.Derived.collect_arr'; Namespace FStar.Reflection.V2.Derived
(assert (! 
;; def=FStar.Reflection.V2.Derived.fst(111,8-111,20); use=FStar.Reflection.V2.Derived.fst(111,8-111,20)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Reflection.V2.Derived.collect_arr_ @x0
@x1)
(FStar.Reflection.V2.Derived.collect_arr_.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.Reflection.V2.Derived.collect_arr_ @x0
@x1))
:qid @fuel_correspondence_FStar.Reflection.V2.Derived.collect_arr_.fuel_instrumented))

:named @fuel_correspondence_FStar.Reflection.V2.Derived.collect_arr_.fuel_instrumented))

; </end encoding FStar.Reflection.V2.Derived.collect_arr'>


; <Skipped FStar.Reflection.V2.Derived.collect_arr_ln_bs/>


; <Start encoding FStar.Reflection.V2.Derived.collect_arr_ln_bs>

(declare-fun FStar.Reflection.V2.Derived.collect_arr_ln_bs (Term) Term)
;;;;;;;;;;;;;;;;t: FStar.Reflection.Types.typ   -> Prims.list FStar.Reflection.Types.binder * FStar.Reflection.Types.comp
(declare-fun Tm_arrow_dc934386dab8451b633945cfead2c626 () Term)
(declare-fun FStar.Reflection.V2.Derived.collect_arr_ln_bs@tok () Term)

; </end encoding FStar.Reflection.V2.Derived.collect_arr_ln_bs>


; <Skipped FStar.Reflection.V2.Derived.collect_arr_ln/>


; <Start encoding FStar.Reflection.V2.Derived.collect_arr_ln>

(declare-fun FStar.Reflection.V2.Derived.collect_arr_ln (Term) Term)
;;;;;;;;;;;;;;;;t: FStar.Reflection.Types.typ -> Prims.list FStar.Reflection.Types.typ * FStar.Reflection.Types.comp
(declare-fun Tm_arrow_174ef38f07b1296ea9c8fec545e5390c () Term)
(declare-fun FStar.Reflection.V2.Derived.collect_arr_ln@tok () Term)
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name FStar.Reflection.V2.Derived.collect_arr_ln; Namespace FStar.Reflection.V2.Derived
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.Reflection.V2.Derived.type_of_binder@tok))
:named @kick_partial_app_77240bc14ea3d485090ea01ba598bfda))

; </end encoding FStar.Reflection.V2.Derived.collect_arr_ln>


; <Start encoding FStar.Reflection.V2.Derived.collect_abs'>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Derived.collect_abs_.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Derived.collect_abs_.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Derived.collect_abs_ (Term Term) Term)
(declare-fun FStar.Reflection.V2.Derived.collect_abs_@tok () Term)
;;;;;;;;;;;;;;;;bs: Prims.list FStar.Reflection.Types.binder -> t: FStar.Reflection.Types.term   -> Prims.Tot (Prims.list FStar.Reflection.Types.binder * FStar.Reflection.Types.term)
(declare-fun Tm_arrow_21b9897e7c53428246bb3ec1f5f543f8 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Reflection.V2.Derived.collect_abs'; Namespace FStar.Reflection.V2.Derived
(assert (! 
;; def=FStar.Reflection.V2.Derived.fst(133,8-133,20); use=FStar.Reflection.V2.Derived.fst(133,8-133,20)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.Reflection.V2.Derived.collect_abs_.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.Reflection.V2.Derived.collect_abs_.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.Reflection.V2.Derived.collect_abs_.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.Reflection.V2.Derived.collect_abs_.fuel_instrumented))

:named @fuel_irrelevance_FStar.Reflection.V2.Derived.collect_abs_.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Reflection.V2.Derived.collect_abs'; Namespace FStar.Reflection.V2.Derived
(assert (! 
;; def=FStar.Reflection.V2.Derived.fst(133,8-133,20); use=FStar.Reflection.V2.Derived.fst(133,8-133,20)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Reflection.V2.Derived.collect_abs_ @x0
@x1)
(FStar.Reflection.V2.Derived.collect_abs_.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.Reflection.V2.Derived.collect_abs_ @x0
@x1))
:qid @fuel_correspondence_FStar.Reflection.V2.Derived.collect_abs_.fuel_instrumented))

:named @fuel_correspondence_FStar.Reflection.V2.Derived.collect_abs_.fuel_instrumented))

; </end encoding FStar.Reflection.V2.Derived.collect_abs'>


; <Skipped FStar.Reflection.V2.Derived.collect_abs_ln/>


; <Start encoding FStar.Reflection.V2.Derived.collect_abs_ln>

(declare-fun FStar.Reflection.V2.Derived.collect_abs_ln (Term) Term)
;;;;;;;;;;;;;;;;t: FStar.Reflection.Types.term   -> Prims.list FStar.Reflection.Types.binder * FStar.Reflection.Types.term
(declare-fun Tm_arrow_391fca305e2b9fb06bfd7340aaa88173 () Term)
(declare-fun FStar.Reflection.V2.Derived.collect_abs_ln@tok () Term)

; </end encoding FStar.Reflection.V2.Derived.collect_abs_ln>


; <Start encoding FStar.Reflection.V2.Derived.fv_to_string>

(declare-fun FStar.Reflection.V2.Derived.fv_to_string (Term) Term)
;;;;;;;;;;;;;;;;fv: FStar.Reflection.Types.fv -> Prims.string
(declare-fun Tm_arrow_031849dc6c8bf42be25134a269391820 () Term)
(declare-fun FStar.Reflection.V2.Derived.fv_to_string@tok () Term)

; </end encoding FStar.Reflection.V2.Derived.fv_to_string>


; <Start encoding FStar.Reflection.V2.Derived.mk_stringlit>

(declare-fun FStar.Reflection.V2.Derived.mk_stringlit (Term) Term)
;;;;;;;;;;;;;;;;s: Prims.string -> FStar.Reflection.Types.term
(declare-fun Tm_arrow_ca1c03060a96a27294df28b987ad81dd () Term)
(declare-fun FStar.Reflection.V2.Derived.mk_stringlit@tok () Term)

; </end encoding FStar.Reflection.V2.Derived.mk_stringlit>


; <Start encoding FStar.Reflection.V2.Derived.mk_strcat>

(declare-fun FStar.Reflection.V2.Derived.mk_strcat (Term Term) Term)
;;;;;;;;;;;;;;;;t1: FStar.Reflection.Types.term -> t2: FStar.Reflection.Types.term -> FStar.Reflection.Types.term
(declare-fun Tm_arrow_0bb91f0ca01040f1d92eb780e8ec7524 () Term)
(declare-fun FStar.Reflection.V2.Derived.mk_strcat@tok () Term)

; </end encoding FStar.Reflection.V2.Derived.mk_strcat>


; <Start encoding FStar.Reflection.V2.Derived.mk_cons>

(declare-fun FStar.Reflection.V2.Derived.mk_cons (Term Term) Term)

(declare-fun FStar.Reflection.V2.Derived.mk_cons@tok () Term)

; </end encoding FStar.Reflection.V2.Derived.mk_cons>


; <Start encoding FStar.Reflection.V2.Derived.mk_cons_t>

(declare-fun FStar.Reflection.V2.Derived.mk_cons_t (Term Term Term) Term)
;;;;;;;;;;;;;;;;ty: FStar.Reflection.Types.term -> h: FStar.Reflection.Types.term -> t: FStar.Reflection.Types.term   -> FStar.Reflection.Types.term
(declare-fun Tm_arrow_1584dbbee3716ccc38a92ba1ccf1af08 () Term)
(declare-fun FStar.Reflection.V2.Derived.mk_cons_t@tok () Term)

; </end encoding FStar.Reflection.V2.Derived.mk_cons_t>


; <Start encoding FStar.Reflection.V2.Derived.mk_list>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Derived.mk_list.fuel_instrumented (Fuel Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Derived.mk_list.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Derived.mk_list (Term) Term)
(declare-fun FStar.Reflection.V2.Derived.mk_list@tok () Term)
;;;;;;;;;;;;;;;;ts: Prims.list FStar.Reflection.Types.term -> FStar.Reflection.Types.term
(declare-fun Tm_arrow_72969f7629708e159801bc4ed42219f7 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Reflection.V2.Derived.mk_list; Namespace FStar.Reflection.V2.Derived
(assert (! 
;; def=FStar.Reflection.V2.Derived.fst(158,8-158,15); use=FStar.Reflection.V2.Derived.fst(158,8-158,15)
(forall ((@u0 Fuel) (@x1 Term))
 (! (= (FStar.Reflection.V2.Derived.mk_list.fuel_instrumented (SFuel @u0)
@x1)
(FStar.Reflection.V2.Derived.mk_list.fuel_instrumented ZFuel
@x1))
 

:pattern ((FStar.Reflection.V2.Derived.mk_list.fuel_instrumented (SFuel @u0)
@x1))
:qid @fuel_irrelevance_FStar.Reflection.V2.Derived.mk_list.fuel_instrumented))

:named @fuel_irrelevance_FStar.Reflection.V2.Derived.mk_list.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Reflection.V2.Derived.mk_list; Namespace FStar.Reflection.V2.Derived
(assert (! 
;; def=FStar.Reflection.V2.Derived.fst(158,8-158,15); use=FStar.Reflection.V2.Derived.fst(158,8-158,15)
(forall ((@x0 Term))
 (! (= (FStar.Reflection.V2.Derived.mk_list @x0)
(FStar.Reflection.V2.Derived.mk_list.fuel_instrumented MaxFuel
@x0))
 

:pattern ((FStar.Reflection.V2.Derived.mk_list @x0))
:qid @fuel_correspondence_FStar.Reflection.V2.Derived.mk_list.fuel_instrumented))

:named @fuel_correspondence_FStar.Reflection.V2.Derived.mk_list.fuel_instrumented))

; </end encoding FStar.Reflection.V2.Derived.mk_list>


; <Start encoding FStar.Reflection.V2.Derived.mktuple_n>

(declare-fun Tm_refine_7fdc6e9b6bcce2335cfa1ed7e2262154 () Term)
(declare-fun FStar.Reflection.V2.Derived.mktuple_n (Term) Term)

;;;;;;;;;;;;;;;;ts: Prims.list FStar.Reflection.Types.term {FStar.List.Tot.Base.length ts <= 8}   -> FStar.Reflection.Types.term
(declare-fun Tm_arrow_ea72e3ceb23430e6342f0aceae41d5bb () Term)
(declare-fun FStar.Reflection.V2.Derived.mktuple_n@tok () Term)


; </end encoding FStar.Reflection.V2.Derived.mktuple_n>


; <Start encoding FStar.Reflection.V2.Derived.destruct_tuple>

(declare-fun FStar.Reflection.V2.Derived.destruct_tuple (Term) Term)
;;;;;;;;;;;;;;;;t: FStar.Reflection.Types.term   -> FStar.Pervasives.Native.option (Prims.list FStar.Reflection.Types.term)
(declare-fun Tm_arrow_efba5c6c5d047f13ab986e309aed4b14 () Term)
(declare-fun FStar.Reflection.V2.Derived.destruct_tuple@tok () Term)
;;;;;;;;;;;;;;;;_: (FStar.Reflection.Types.term * FStar.Reflection.V2.Data.aqualv)   -> Prims.list FStar.Reflection.Types.term
(declare-fun Tm_arrow_2d99f56178f35a9a0a5aa3561e7fd090 () Term)
(declare-fun Tm_abs_e700587c649576aaf35c647ac3e688d3 () Term)

; </end encoding FStar.Reflection.V2.Derived.destruct_tuple>


; <Start encoding FStar.Reflection.V2.Derived.mkpair>

(declare-fun FStar.Reflection.V2.Derived.mkpair (Term Term) Term)

(declare-fun FStar.Reflection.V2.Derived.mkpair@tok () Term)

; </end encoding FStar.Reflection.V2.Derived.mkpair>


; <Start encoding FStar.Reflection.V2.Derived.head>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Derived.head.fuel_instrumented (Fuel Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Derived.head.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Derived.head (Term) Term)
(declare-fun FStar.Reflection.V2.Derived.head@tok () Term)
;;;;;;;;;;;;;;;;t: FStar.Reflection.Types.term -> FStar.Reflection.Types.term
(declare-fun Tm_arrow_1b88532c0ced286ac5d87234a5726109 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Reflection.V2.Derived.head; Namespace FStar.Reflection.V2.Derived
(assert (! 
;; def=FStar.Reflection.V2.Derived.fst(196,8-196,12); use=FStar.Reflection.V2.Derived.fst(196,8-196,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (= (FStar.Reflection.V2.Derived.head.fuel_instrumented (SFuel @u0)
@x1)
(FStar.Reflection.V2.Derived.head.fuel_instrumented ZFuel
@x1))
 

:pattern ((FStar.Reflection.V2.Derived.head.fuel_instrumented (SFuel @u0)
@x1))
:qid @fuel_irrelevance_FStar.Reflection.V2.Derived.head.fuel_instrumented))

:named @fuel_irrelevance_FStar.Reflection.V2.Derived.head.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Reflection.V2.Derived.head; Namespace FStar.Reflection.V2.Derived
(assert (! 
;; def=FStar.Reflection.V2.Derived.fst(196,8-196,12); use=FStar.Reflection.V2.Derived.fst(196,8-196,12)
(forall ((@x0 Term))
 (! (= (FStar.Reflection.V2.Derived.head @x0)
(FStar.Reflection.V2.Derived.head.fuel_instrumented MaxFuel
@x0))
 

:pattern ((FStar.Reflection.V2.Derived.head @x0))
:qid @fuel_correspondence_FStar.Reflection.V2.Derived.head.fuel_instrumented))

:named @fuel_correspondence_FStar.Reflection.V2.Derived.head.fuel_instrumented))

; </end encoding FStar.Reflection.V2.Derived.head>


; <Start encoding FStar.Reflection.V2.Derived.is_fvar>

(declare-fun FStar.Reflection.V2.Derived.is_fvar (Term Term) Term)
;;;;;;;;;;;;;;;;t: FStar.Reflection.Types.term -> nm: Prims.string -> Prims.bool
(declare-fun Tm_arrow_006a0a8bca32a77100baafa4907fdff6 () Term)
(declare-fun FStar.Reflection.V2.Derived.is_fvar@tok () Term)

; </end encoding FStar.Reflection.V2.Derived.is_fvar>


; <Start encoding FStar.Reflection.V2.Derived.is_any_fvar>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Derived.is_any_fvar.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Derived.is_any_fvar.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Derived.is_any_fvar (Term Term) Term)
(declare-fun FStar.Reflection.V2.Derived.is_any_fvar@tok () Term)
;;;;;;;;;;;;;;;;t: FStar.Reflection.Types.term -> nms: Prims.list Prims.string -> Prims.bool
(declare-fun Tm_arrow_e3793b13ee9cdb6232d3026ba84d64ad () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Reflection.V2.Derived.is_any_fvar; Namespace FStar.Reflection.V2.Derived
(assert (! 
;; def=FStar.Reflection.V2.Derived.fst(227,8-227,19); use=FStar.Reflection.V2.Derived.fst(227,8-227,19)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.Reflection.V2.Derived.is_any_fvar.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.Reflection.V2.Derived.is_any_fvar.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.Reflection.V2.Derived.is_any_fvar.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.Reflection.V2.Derived.is_any_fvar.fuel_instrumented))

:named @fuel_irrelevance_FStar.Reflection.V2.Derived.is_any_fvar.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Reflection.V2.Derived.is_any_fvar; Namespace FStar.Reflection.V2.Derived
(assert (! 
;; def=FStar.Reflection.V2.Derived.fst(227,8-227,19); use=FStar.Reflection.V2.Derived.fst(227,8-227,19)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Reflection.V2.Derived.is_any_fvar @x0
@x1)
(FStar.Reflection.V2.Derived.is_any_fvar.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.Reflection.V2.Derived.is_any_fvar @x0
@x1))
:qid @fuel_correspondence_FStar.Reflection.V2.Derived.is_any_fvar.fuel_instrumented))

:named @fuel_correspondence_FStar.Reflection.V2.Derived.is_any_fvar.fuel_instrumented))

; </end encoding FStar.Reflection.V2.Derived.is_any_fvar>


; <Start encoding FStar.Reflection.V2.Derived.is_uvar>

(declare-fun FStar.Reflection.V2.Derived.is_uvar (Term) Term)
;;;;;;;;;;;;;;;;t: FStar.Reflection.Types.term -> Prims.bool
(declare-fun Tm_arrow_77979d89227e8ab4ed6cec971eb53311 () Term)
(declare-fun FStar.Reflection.V2.Derived.is_uvar@tok () Term)

; </end encoding FStar.Reflection.V2.Derived.is_uvar>


; <Start encoding FStar.Reflection.V2.Derived.binder_set_qual>

(declare-fun FStar.Reflection.V2.Derived.binder_set_qual (Term Term) Term)
;;;;;;;;;;;;;;;;q: FStar.Reflection.V2.Data.aqualv -> b: FStar.Reflection.Types.binder   -> FStar.Reflection.Types.binder
(declare-fun Tm_arrow_b0cc4ec8f0a5edc234acfa17f6cbbad2 () Term)
(declare-fun FStar.Reflection.V2.Derived.binder_set_qual@tok () Term)

; </end encoding FStar.Reflection.V2.Derived.binder_set_qual>


; <Skipped FStar.Reflection.V2.Derived.add_check_with/>


; <Start encoding FStar.Reflection.V2.Derived.add_check_with>

(declare-fun FStar.Reflection.V2.Derived.add_check_with (Term Term) Term)
;;;;;;;;;;;;;;;;vcfg: FStar.VConfig.vconfig -> se: FStar.Reflection.Types.sigelt -> FStar.Reflection.Types.sigelt
(declare-fun Tm_arrow_a6566e49c6ffea04b03a3a4bfd5fcfd8 () Term)
(declare-fun FStar.Reflection.V2.Derived.add_check_with@tok () Term)

; </end encoding FStar.Reflection.V2.Derived.add_check_with>


; <Start encoding FStar.Reflection.V2.Derived.un_uinst>

(declare-fun FStar.Reflection.V2.Derived.un_uinst (Term) Term)

(declare-fun FStar.Reflection.V2.Derived.un_uinst@tok () Term)

; </end encoding FStar.Reflection.V2.Derived.un_uinst>


; <Start encoding FStar.Reflection.V2.Derived.is_name_imp>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Derived.is_name_imp.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Derived.is_name_imp.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Derived.is_name_imp (Term Term) Term)
(declare-fun FStar.Reflection.V2.Derived.is_name_imp@tok () Term)
;;;;;;;;;;;;;;;;nm: FStar.Reflection.Types.name -> t: FStar.Reflection.Types.term -> Prims.bool
(declare-fun Tm_arrow_d93183e221b10a28b146420a8dd74be2 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Reflection.V2.Derived.is_name_imp; Namespace FStar.Reflection.V2.Derived
(assert (! 
;; def=FStar.Reflection.V2.Derived.fst(257,8-257,19); use=FStar.Reflection.V2.Derived.fst(257,8-257,19)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.Reflection.V2.Derived.is_name_imp.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.Reflection.V2.Derived.is_name_imp.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.Reflection.V2.Derived.is_name_imp.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.Reflection.V2.Derived.is_name_imp.fuel_instrumented))

:named @fuel_irrelevance_FStar.Reflection.V2.Derived.is_name_imp.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Reflection.V2.Derived.is_name_imp; Namespace FStar.Reflection.V2.Derived
(assert (! 
;; def=FStar.Reflection.V2.Derived.fst(257,8-257,19); use=FStar.Reflection.V2.Derived.fst(257,8-257,19)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Reflection.V2.Derived.is_name_imp @x0
@x1)
(FStar.Reflection.V2.Derived.is_name_imp.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.Reflection.V2.Derived.is_name_imp @x0
@x1))
:qid @fuel_correspondence_FStar.Reflection.V2.Derived.is_name_imp.fuel_instrumented))

:named @fuel_correspondence_FStar.Reflection.V2.Derived.is_name_imp.fuel_instrumented))

; </end encoding FStar.Reflection.V2.Derived.is_name_imp>


; <Start encoding FStar.Reflection.V2.Derived.unsquash_term>

(declare-fun FStar.Reflection.V2.Derived.unsquash_term (Term) Term)
;;;;;;;;;;;;;;;;t: FStar.Reflection.Types.term -> FStar.Pervasives.Native.option FStar.Reflection.Types.term
(declare-fun Tm_arrow_5b11ff715abbf3aae0b5c42a26fbb520 () Term)
(declare-fun FStar.Reflection.V2.Derived.unsquash_term@tok () Term)

; </end encoding FStar.Reflection.V2.Derived.unsquash_term>


; <Start encoding FStar.Reflection.V2.Derived.maybe_unsquash_term>

(declare-fun FStar.Reflection.V2.Derived.maybe_unsquash_term (Term) Term)

(declare-fun FStar.Reflection.V2.Derived.maybe_unsquash_term@tok () Term)

; </end encoding FStar.Reflection.V2.Derived.maybe_unsquash_term>


; End Externals for module FStar.Reflection.V2.Derived


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End module FStar.Reflection.V2.Derived (258 decls; total size 37317)

;;; Start module FStar.Reflection.V2.Compare

; Externals for module FStar.Reflection.V2.Compare


; <Start encoding FStar.Reflection.V2.Compare.compare_name>

(declare-fun FStar.Reflection.V2.Compare.compare_name (Term Term) Term)
;;;;;;;;;;;;;;;;n1: FStar.Reflection.Types.name -> n2: FStar.Reflection.Types.name -> FStar.Order.order
(declare-fun Tm_arrow_9a38dd83b3ba15c3e4c6bffbb777db0b () Term)
(declare-fun FStar.Reflection.V2.Compare.compare_name@tok () Term)
(declare-fun Tm_refine_2f560cd059fce3ab600fcdafe6f32c0d (Term) Term)



;;;;;;;;;;;;;;;;s1: x: Prims.string{x << n1} -> s2: y: Prims.string{y << n2} -> FStar.Order.order
(declare-fun Tm_arrow_3ff58bf14c770f322a65639a70261102 (Term Term) Term)
(declare-fun Tm_abs_0d2c5859cd8a39ced2cba489d5b74934 (Term Term) Term)

; </end encoding FStar.Reflection.V2.Compare.compare_name>


; <Start encoding FStar.Reflection.V2.Compare.compare_fv>

(declare-fun FStar.Reflection.V2.Compare.compare_fv (Term Term) Term)
;;;;;;;;;;;;;;;;f1: FStar.Reflection.Types.fv -> f2: FStar.Reflection.Types.fv -> FStar.Order.order
(declare-fun Tm_arrow_848ac667249b0e674449ec557faec6aa () Term)
(declare-fun FStar.Reflection.V2.Compare.compare_fv@tok () Term)

; </end encoding FStar.Reflection.V2.Compare.compare_fv>


; <Start encoding FStar.Reflection.V2.Compare.compare_const>

(declare-fun FStar.Reflection.V2.Compare.compare_const (Term Term) Term)
;;;;;;;;;;;;;;;;c1: FStar.Reflection.V2.Data.vconst -> c2: FStar.Reflection.V2.Data.vconst -> FStar.Order.order
(declare-fun Tm_arrow_f680f031dfc07b9f3352a8fe18f3123c () Term)
(declare-fun FStar.Reflection.V2.Compare.compare_const@tok () Term)

; </end encoding FStar.Reflection.V2.Compare.compare_const>


; <Start encoding FStar.Reflection.V2.Compare.compare_ident>

(declare-fun FStar.Reflection.V2.Compare.compare_ident (Term Term) Term)
;;;;;;;;;;;;;;;;i1: FStar.Reflection.Types.ident -> i2: FStar.Reflection.Types.ident -> FStar.Order.order
(declare-fun Tm_arrow_40466e5ec97ad2557dfe2e632aaf2863 () Term)
(declare-fun FStar.Reflection.V2.Compare.compare_ident@tok () Term)

; </end encoding FStar.Reflection.V2.Compare.compare_ident>


; <Start encoding FStar.Reflection.V2.Compare.compare_universe>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Compare.compare_universe.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Compare.compare_universe.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Compare.compare_universe (Term Term) Term)
(declare-fun FStar.Reflection.V2.Compare.compare_universe@tok () Term)
(declare-fun Tm_refine_0bff89f9dddcce8da3a85a72114a643f (Term) Term)
(declare-fun Tm_refine_6af1f26a77a741151e174d856f9ce22a (Term) Term)


;;;;;;;;;;;;;;;;x: FStar.Reflection.Types.universe{x << us1} -> y: FStar.Reflection.Types.universe{y << us2}   -> FStar.Order.order
(declare-fun Tm_arrow_42d253cceffb68351c7585750d98184f (Term) Term)
(declare-fun Tm_abs_25fb322c14700bf1a3607212cfcf5af8 (Fuel Term) Term)
;;;;;;;;;;;;;;;;u1: FStar.Reflection.Types.universe -> u2: FStar.Reflection.Types.universe -> FStar.Order.order
(declare-fun Tm_arrow_b884c2a9480579f0151e97bdcca5990b () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Reflection.V2.Compare.compare_universe; Namespace FStar.Reflection.V2.Compare
(assert (! 
;; def=FStar.Reflection.V2.Compare.fst(54,8-54,24); use=FStar.Reflection.V2.Compare.fst(54,8-54,24)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.Reflection.V2.Compare.compare_universe.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.Reflection.V2.Compare.compare_universe.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.Reflection.V2.Compare.compare_universe.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.Reflection.V2.Compare.compare_universe.fuel_instrumented))

:named @fuel_irrelevance_FStar.Reflection.V2.Compare.compare_universe.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Reflection.V2.Compare.compare_universe; Namespace FStar.Reflection.V2.Compare
(assert (! 
;; def=FStar.Reflection.V2.Compare.fst(54,8-54,24); use=FStar.Reflection.V2.Compare.fst(54,8-54,24)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Reflection.V2.Compare.compare_universe @x0
@x1)
(FStar.Reflection.V2.Compare.compare_universe.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.Reflection.V2.Compare.compare_universe @x0
@x1))
:qid @fuel_correspondence_FStar.Reflection.V2.Compare.compare_universe.fuel_instrumented))

:named @fuel_correspondence_FStar.Reflection.V2.Compare.compare_universe.fuel_instrumented))

; </end encoding FStar.Reflection.V2.Compare.compare_universe>


; <Start encoding FStar.Reflection.V2.Compare.compare_universes>

(declare-fun FStar.Reflection.V2.Compare.compare_universes (Term Term) Term)
;;;;;;;;;;;;;;;;us1: FStar.Reflection.V2.Data.universes -> us2: FStar.Reflection.V2.Data.universes   -> FStar.Order.order
(declare-fun Tm_arrow_d9ef0fdb24a611c76b2d1f69a1291425 () Term)
(declare-fun FStar.Reflection.V2.Compare.compare_universes@tok () Term)
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name FStar.Reflection.V2.Compare.compare_universes; Namespace FStar.Reflection.V2.Compare
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.Reflection.V2.Compare.compare_universe@tok))
:named @kick_partial_app_cfca44b69b4a44409ef579f798b82a56))

; </end encoding FStar.Reflection.V2.Compare.compare_universes>


; <Start encoding >

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Compare.compare_binder.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Compare.compare_binder.fuel_instrumented_token () Term)
;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Compare.compare_comp.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Compare.compare_comp.fuel_instrumented_token () Term)
;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Compare.compare_argv.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Compare.compare_argv.fuel_instrumented_token () Term)
;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Compare.compare_term_list.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Compare.compare_term_list.fuel_instrumented_token () Term)
;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Compare.compare_term.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Compare.compare_term.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Compare.compare_term (Term Term) Term)
(declare-fun FStar.Reflection.V2.Compare.compare_term@tok () Term)
(declare-fun FStar.Reflection.V2.Compare.compare_term_list (Term Term) Term)
(declare-fun FStar.Reflection.V2.Compare.compare_term_list@tok () Term)
(declare-fun FStar.Reflection.V2.Compare.compare_argv (Term Term) Term)
(declare-fun FStar.Reflection.V2.Compare.compare_argv@tok () Term)
(declare-fun FStar.Reflection.V2.Compare.compare_comp (Term Term) Term)
(declare-fun FStar.Reflection.V2.Compare.compare_comp@tok () Term)
(declare-fun FStar.Reflection.V2.Compare.compare_binder (Term Term) Term)
(declare-fun FStar.Reflection.V2.Compare.compare_binder@tok () Term)

(declare-fun Tm_abs_d7ab7538b41eeaee162338c93b7b6de2 (Fuel Term) Term)

(declare-fun Tm_abs_0571e2763108bbd47e7cc6ed8ff4be8e (Term Fuel) Term)

(declare-fun Tm_abs_6b80da9d7754c3fd603522970eea89d2 (Fuel Term) Term)

(declare-fun Tm_abs_2ed90edc40641b2f1221ab4322833467 (Fuel Term) Term)

(declare-fun Tm_abs_ab1393c31bcf77f870068f94d21e363a (Fuel Term) Term)

(declare-fun Tm_abs_33e3da813ad69989c4d4d1cfa95dde96 (Fuel Term) Term)

(declare-fun Tm_abs_2ffdc3c894724f9ccdc28568ef7e0142 (Fuel Term) Term)

(declare-fun Tm_abs_d40111ac434a7254cc5864d9c1cbabb1 (Fuel Term) Term)

(declare-fun Tm_abs_60d973de7c4fd46ca3e66adb3800577c (Fuel Term) Term)

(declare-fun Tm_abs_268ff12b028341646ccc3ed2a76cb53a (Fuel Term) Term)

(declare-fun Tm_abs_9c4da6cb6c5c68f63b6a1c5db749f25e (Fuel Term) Term)

(declare-fun Tm_abs_6060442f0fdc5d33b1e7cbd0f1177e42 (Fuel Term) Term)

(declare-fun Tm_abs_b3bb36fd8543e80dd13941b6a472624c (Fuel Term) Term)

(declare-fun Tm_abs_b789eb4bf63868d5b563a69c12b65046 (Fuel Term) Term)

(declare-fun Tm_abs_741981da4ba904ec46ad8d8aecc9875b (Fuel Term) Term)

(declare-fun Tm_abs_29957088617e9cbf112c343d7c8b34b3 (Term) Term)
;;;;;;;;;;;;;;;;s: FStar.Reflection.Types.term -> t: FStar.Reflection.Types.term -> Prims.Tot FStar.Order.order
(declare-fun Tm_arrow_b9bd8ff467856ed543cafbff5f85f841 () Term)
;;;;;;;;;;;;;;;;l1: Prims.list FStar.Reflection.Types.term -> l2: Prims.list FStar.Reflection.Types.term   -> Prims.Tot FStar.Order.order
(declare-fun Tm_arrow_3dbbcb1c0f76756c94c6e5f271e1509f () Term)
;;;;;;;;;;;;;;;;a1: FStar.Reflection.V2.Data.argv -> a2: FStar.Reflection.V2.Data.argv   -> Prims.Tot FStar.Order.order
(declare-fun Tm_arrow_5f24f79d1b17666ff5a2780093f944f9 () Term)
;;;;;;;;;;;;;;;;c1: FStar.Reflection.Types.comp -> c2: FStar.Reflection.Types.comp -> Prims.Tot FStar.Order.order
(declare-fun Tm_arrow_d8ecc3b1714cb2a7d229e7a15f62fdcd () Term)
;;;;;;;;;;;;;;;;b1: FStar.Reflection.Types.binder -> b2: FStar.Reflection.Types.binder -> FStar.Order.order
(declare-fun Tm_arrow_0181bdd7fa57cf251b6fbcf9d72eaaee () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Reflection.V2.Compare.compare_term; Namespace FStar.Reflection.V2.Compare; Name FStar.Reflection.V2.Compare.compare_term_list; Namespace FStar.Reflection.V2.Compare; Name FStar.Reflection.V2.Compare.compare_argv; Namespace FStar.Reflection.V2.Compare; Name FStar.Reflection.V2.Compare.compare_comp; Namespace FStar.Reflection.V2.Compare; Name FStar.Reflection.V2.Compare.compare_binder; Namespace FStar.Reflection.V2.Compare
(assert (! 
;; def=FStar.Reflection.V2.Compare.fst(75,8-75,20); use=FStar.Reflection.V2.Compare.fst(75,8-75,20)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.Reflection.V2.Compare.compare_term.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.Reflection.V2.Compare.compare_term.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.Reflection.V2.Compare.compare_term.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.Reflection.V2.Compare.compare_term.fuel_instrumented))

:named @fuel_irrelevance_FStar.Reflection.V2.Compare.compare_term.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Reflection.V2.Compare.compare_term; Namespace FStar.Reflection.V2.Compare; Name FStar.Reflection.V2.Compare.compare_term_list; Namespace FStar.Reflection.V2.Compare; Name FStar.Reflection.V2.Compare.compare_argv; Namespace FStar.Reflection.V2.Compare; Name FStar.Reflection.V2.Compare.compare_comp; Namespace FStar.Reflection.V2.Compare; Name FStar.Reflection.V2.Compare.compare_binder; Namespace FStar.Reflection.V2.Compare
(assert (! 
;; def=FStar.Reflection.V2.Compare.fst(75,8-75,20); use=FStar.Reflection.V2.Compare.fst(75,8-75,20)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Reflection.V2.Compare.compare_term @x0
@x1)
(FStar.Reflection.V2.Compare.compare_term.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.Reflection.V2.Compare.compare_term @x0
@x1))
:qid @fuel_correspondence_FStar.Reflection.V2.Compare.compare_term.fuel_instrumented))

:named @fuel_correspondence_FStar.Reflection.V2.Compare.compare_term.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Reflection.V2.Compare.compare_term; Namespace FStar.Reflection.V2.Compare; Name FStar.Reflection.V2.Compare.compare_term_list; Namespace FStar.Reflection.V2.Compare; Name FStar.Reflection.V2.Compare.compare_argv; Namespace FStar.Reflection.V2.Compare; Name FStar.Reflection.V2.Compare.compare_comp; Namespace FStar.Reflection.V2.Compare; Name FStar.Reflection.V2.Compare.compare_binder; Namespace FStar.Reflection.V2.Compare
(assert (! 
;; def=FStar.Reflection.V2.Compare.fst(160,4-160,21); use=FStar.Reflection.V2.Compare.fst(160,4-160,21)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.Reflection.V2.Compare.compare_term_list.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.Reflection.V2.Compare.compare_term_list.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.Reflection.V2.Compare.compare_term_list.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.Reflection.V2.Compare.compare_term_list.fuel_instrumented))

:named @fuel_irrelevance_FStar.Reflection.V2.Compare.compare_term_list.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Reflection.V2.Compare.compare_term; Namespace FStar.Reflection.V2.Compare; Name FStar.Reflection.V2.Compare.compare_term_list; Namespace FStar.Reflection.V2.Compare; Name FStar.Reflection.V2.Compare.compare_argv; Namespace FStar.Reflection.V2.Compare; Name FStar.Reflection.V2.Compare.compare_comp; Namespace FStar.Reflection.V2.Compare; Name FStar.Reflection.V2.Compare.compare_binder; Namespace FStar.Reflection.V2.Compare
(assert (! 
;; def=FStar.Reflection.V2.Compare.fst(160,4-160,21); use=FStar.Reflection.V2.Compare.fst(160,4-160,21)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Reflection.V2.Compare.compare_term_list @x0
@x1)
(FStar.Reflection.V2.Compare.compare_term_list.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.Reflection.V2.Compare.compare_term_list @x0
@x1))
:qid @fuel_correspondence_FStar.Reflection.V2.Compare.compare_term_list.fuel_instrumented))

:named @fuel_correspondence_FStar.Reflection.V2.Compare.compare_term_list.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Reflection.V2.Compare.compare_term; Namespace FStar.Reflection.V2.Compare; Name FStar.Reflection.V2.Compare.compare_term_list; Namespace FStar.Reflection.V2.Compare; Name FStar.Reflection.V2.Compare.compare_argv; Namespace FStar.Reflection.V2.Compare; Name FStar.Reflection.V2.Compare.compare_comp; Namespace FStar.Reflection.V2.Compare; Name FStar.Reflection.V2.Compare.compare_binder; Namespace FStar.Reflection.V2.Compare
(assert (! 
;; def=FStar.Reflection.V2.Compare.fst(168,4-168,16); use=FStar.Reflection.V2.Compare.fst(168,4-168,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.Reflection.V2.Compare.compare_argv.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.Reflection.V2.Compare.compare_argv.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.Reflection.V2.Compare.compare_argv.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.Reflection.V2.Compare.compare_argv.fuel_instrumented))

:named @fuel_irrelevance_FStar.Reflection.V2.Compare.compare_argv.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Reflection.V2.Compare.compare_term; Namespace FStar.Reflection.V2.Compare; Name FStar.Reflection.V2.Compare.compare_term_list; Namespace FStar.Reflection.V2.Compare; Name FStar.Reflection.V2.Compare.compare_argv; Namespace FStar.Reflection.V2.Compare; Name FStar.Reflection.V2.Compare.compare_comp; Namespace FStar.Reflection.V2.Compare; Name FStar.Reflection.V2.Compare.compare_binder; Namespace FStar.Reflection.V2.Compare
(assert (! 
;; def=FStar.Reflection.V2.Compare.fst(168,4-168,16); use=FStar.Reflection.V2.Compare.fst(168,4-168,16)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Reflection.V2.Compare.compare_argv @x0
@x1)
(FStar.Reflection.V2.Compare.compare_argv.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.Reflection.V2.Compare.compare_argv @x0
@x1))
:qid @fuel_correspondence_FStar.Reflection.V2.Compare.compare_argv.fuel_instrumented))

:named @fuel_correspondence_FStar.Reflection.V2.Compare.compare_argv.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Reflection.V2.Compare.compare_term; Namespace FStar.Reflection.V2.Compare; Name FStar.Reflection.V2.Compare.compare_term_list; Namespace FStar.Reflection.V2.Compare; Name FStar.Reflection.V2.Compare.compare_argv; Namespace FStar.Reflection.V2.Compare; Name FStar.Reflection.V2.Compare.compare_comp; Namespace FStar.Reflection.V2.Compare; Name FStar.Reflection.V2.Compare.compare_binder; Namespace FStar.Reflection.V2.Compare
(assert (! 
;; def=FStar.Reflection.V2.Compare.fst(176,4-176,16); use=FStar.Reflection.V2.Compare.fst(176,4-176,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.Reflection.V2.Compare.compare_comp.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.Reflection.V2.Compare.compare_comp.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.Reflection.V2.Compare.compare_comp.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.Reflection.V2.Compare.compare_comp.fuel_instrumented))

:named @fuel_irrelevance_FStar.Reflection.V2.Compare.compare_comp.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Reflection.V2.Compare.compare_term; Namespace FStar.Reflection.V2.Compare; Name FStar.Reflection.V2.Compare.compare_term_list; Namespace FStar.Reflection.V2.Compare; Name FStar.Reflection.V2.Compare.compare_argv; Namespace FStar.Reflection.V2.Compare; Name FStar.Reflection.V2.Compare.compare_comp; Namespace FStar.Reflection.V2.Compare; Name FStar.Reflection.V2.Compare.compare_binder; Namespace FStar.Reflection.V2.Compare
(assert (! 
;; def=FStar.Reflection.V2.Compare.fst(176,4-176,16); use=FStar.Reflection.V2.Compare.fst(176,4-176,16)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Reflection.V2.Compare.compare_comp @x0
@x1)
(FStar.Reflection.V2.Compare.compare_comp.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.Reflection.V2.Compare.compare_comp @x0
@x1))
:qid @fuel_correspondence_FStar.Reflection.V2.Compare.compare_comp.fuel_instrumented))

:named @fuel_correspondence_FStar.Reflection.V2.Compare.compare_comp.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Reflection.V2.Compare.compare_term; Namespace FStar.Reflection.V2.Compare; Name FStar.Reflection.V2.Compare.compare_term_list; Namespace FStar.Reflection.V2.Compare; Name FStar.Reflection.V2.Compare.compare_argv; Namespace FStar.Reflection.V2.Compare; Name FStar.Reflection.V2.Compare.compare_comp; Namespace FStar.Reflection.V2.Compare; Name FStar.Reflection.V2.Compare.compare_binder; Namespace FStar.Reflection.V2.Compare
(assert (! 
;; def=FStar.Reflection.V2.Compare.fst(203,4-203,18); use=FStar.Reflection.V2.Compare.fst(203,4-203,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.Reflection.V2.Compare.compare_binder.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.Reflection.V2.Compare.compare_binder.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.Reflection.V2.Compare.compare_binder.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.Reflection.V2.Compare.compare_binder.fuel_instrumented))

:named @fuel_irrelevance_FStar.Reflection.V2.Compare.compare_binder.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Reflection.V2.Compare.compare_term; Namespace FStar.Reflection.V2.Compare; Name FStar.Reflection.V2.Compare.compare_term_list; Namespace FStar.Reflection.V2.Compare; Name FStar.Reflection.V2.Compare.compare_argv; Namespace FStar.Reflection.V2.Compare; Name FStar.Reflection.V2.Compare.compare_comp; Namespace FStar.Reflection.V2.Compare; Name FStar.Reflection.V2.Compare.compare_binder; Namespace FStar.Reflection.V2.Compare
(assert (! 
;; def=FStar.Reflection.V2.Compare.fst(203,4-203,18); use=FStar.Reflection.V2.Compare.fst(203,4-203,18)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Reflection.V2.Compare.compare_binder @x0
@x1)
(FStar.Reflection.V2.Compare.compare_binder.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.Reflection.V2.Compare.compare_binder @x0
@x1))
:qid @fuel_correspondence_FStar.Reflection.V2.Compare.compare_binder.fuel_instrumented))

:named @fuel_correspondence_FStar.Reflection.V2.Compare.compare_binder.fuel_instrumented))

; </end encoding >


; End Externals for module FStar.Reflection.V2.Compare


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End module FStar.Reflection.V2.Compare (119 decls; total size 21594)

;;; Start module FStar.Reflection.V2.Derived.Lemmas

; Externals for module FStar.Reflection.V2.Derived.Lemmas


; <Start encoding FStar.Reflection.V2.Derived.Lemmas.forall_list>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Derived.Lemmas.forall_list.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Derived.Lemmas.forall_list.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Derived.Lemmas.forall_list (Term Term Term) Term)
(declare-fun FStar.Reflection.V2.Derived.Lemmas.forall_list@tok () Term)



;;;;;;;;;;;;;;;;p: (_: 'a -> Type) -> l: Prims.list 'a -> Type
(declare-fun Tm_arrow_e873d8ceceaa83cda2609338157fecb6 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Reflection.V2.Derived.Lemmas.forall_list; Namespace FStar.Reflection.V2.Derived.Lemmas
(assert (! 
;; def=FStar.Reflection.V2.Derived.Lemmas.fst(24,8-24,19); use=FStar.Reflection.V2.Derived.Lemmas.fst(24,8-24,19)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Reflection.V2.Derived.Lemmas.forall_list.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.Reflection.V2.Derived.Lemmas.forall_list.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.Reflection.V2.Derived.Lemmas.forall_list.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.Reflection.V2.Derived.Lemmas.forall_list.fuel_instrumented))

:named @fuel_irrelevance_FStar.Reflection.V2.Derived.Lemmas.forall_list.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Reflection.V2.Derived.Lemmas.forall_list; Namespace FStar.Reflection.V2.Derived.Lemmas
(assert (! 
;; def=FStar.Reflection.V2.Derived.Lemmas.fst(24,8-24,19); use=FStar.Reflection.V2.Derived.Lemmas.fst(24,8-24,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Reflection.V2.Derived.Lemmas.forall_list @x0
@x1
@x2)
(FStar.Reflection.V2.Derived.Lemmas.forall_list.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.Reflection.V2.Derived.Lemmas.forall_list @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.Reflection.V2.Derived.Lemmas.forall_list.fuel_instrumented))

:named @fuel_correspondence_FStar.Reflection.V2.Derived.Lemmas.forall_list.fuel_instrumented))

; </end encoding FStar.Reflection.V2.Derived.Lemmas.forall_list>


; <Start encoding FStar.Reflection.V2.Derived.Lemmas.forallP>


(declare-fun FStar.Reflection.V2.Derived.Lemmas.forallP (Term Term Term) Term)


(declare-fun FStar.Reflection.V2.Derived.Lemmas.forallP@tok () Term)


(declare-fun Tm_abs_9230ca22f5e9d8c75e71948d8d581dc0 (Term Term Term) Term)

; </end encoding FStar.Reflection.V2.Derived.Lemmas.forallP>


; <Start encoding FStar.Reflection.V2.Derived.Lemmas.op_Less_Less_Colon>

(declare-fun FStar.Reflection.V2.Derived.Lemmas.op_Less_Less_Colon (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;l: Prims.list 'a -> r: 'r -> Type
(declare-fun Tm_arrow_eb48ab9869915f554b37a1284d8d27df () Term)
(declare-fun FStar.Reflection.V2.Derived.Lemmas.op_Less_Less_Colon@tok () Term)

(declare-fun Tm_abs_9f6092a14a151272f288f334302ef9b0 (Term Term Term) Term)

; </end encoding FStar.Reflection.V2.Derived.Lemmas.op_Less_Less_Colon>


; <Skipped FStar.Reflection.V2.Derived.Lemmas.list_ref/>


; <Start encoding FStar.Reflection.V2.Derived.Lemmas.list_ref>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Derived.Lemmas.list_ref.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Derived.Lemmas.list_ref.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Derived.Lemmas.list_ref (Term Term Term) Term)
(declare-fun FStar.Reflection.V2.Derived.Lemmas.list_ref@tok () Term)




(declare-fun Tm_refine_136684b854bab8ef1ab7df664a942cb7 (Term Term) Term)




;;;;;;;;;;;;;;;;l: Prims.list a -> Prims.Pure (Prims.list (x: a{p x}))
(declare-fun Tm_arrow_824002ecc09891a10902cdd4b737c346 () Term)


;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Reflection.V2.Derived.Lemmas.list_ref; Namespace FStar.Reflection.V2.Derived.Lemmas
(assert (! 
;; def=FStar.Reflection.V2.Derived.Lemmas.fst(40,8-40,16); use=FStar.Reflection.V2.Derived.Lemmas.fst(40,8-40,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Reflection.V2.Derived.Lemmas.list_ref.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.Reflection.V2.Derived.Lemmas.list_ref.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.Reflection.V2.Derived.Lemmas.list_ref.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.Reflection.V2.Derived.Lemmas.list_ref.fuel_instrumented))

:named @fuel_irrelevance_FStar.Reflection.V2.Derived.Lemmas.list_ref.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Reflection.V2.Derived.Lemmas.list_ref; Namespace FStar.Reflection.V2.Derived.Lemmas
(assert (! 
;; def=FStar.Reflection.V2.Derived.Lemmas.fst(40,8-40,16); use=FStar.Reflection.V2.Derived.Lemmas.fst(40,8-40,16)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Reflection.V2.Derived.Lemmas.list_ref @x0
@x1
@x2)
(FStar.Reflection.V2.Derived.Lemmas.list_ref.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.Reflection.V2.Derived.Lemmas.list_ref @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.Reflection.V2.Derived.Lemmas.list_ref.fuel_instrumented))

:named @fuel_correspondence_FStar.Reflection.V2.Derived.Lemmas.list_ref.fuel_instrumented))

; </end encoding FStar.Reflection.V2.Derived.Lemmas.list_ref>


; <Skipped FStar.Reflection.V2.Derived.Lemmas.collect_app_order'/>


; <Start encoding FStar.Reflection.V2.Derived.Lemmas.collect_app_order'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_app_order_ (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_app_order_@tok () Term)

; </end encoding FStar.Reflection.V2.Derived.Lemmas.collect_app_order'>


; <Skipped FStar.Reflection.V2.Derived.Lemmas.collect_app_order/>


; <Start encoding FStar.Reflection.V2.Derived.Lemmas.collect_app_order>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_app_order (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_app_order@tok () Term)

; </end encoding FStar.Reflection.V2.Derived.Lemmas.collect_app_order>


; <Skipped FStar.Reflection.V2.Derived.Lemmas.collect_app_ref/>


; <Start encoding FStar.Reflection.V2.Derived.Lemmas.collect_app_ref>

(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_app_ref (Term) Term)
(declare-fun Tm_refine_64a04c0bc8ba5167728b1ed209f8ae32 (Term) Term)
(declare-fun Tm_refine_a9eb28bae5304df4483d9f8092c233b3 (Term) Term)
;;;;;;;;;;;;;;;;t: FStar.Reflection.Types.term   -> h:     FStar.Reflection.Types.term{h == t \/ h << t} *     Prims.list (a: FStar.Reflection.V2.Data.argv{FStar.Pervasives.Native.fst a << t})
(declare-fun Tm_arrow_6e0a3f4777106c4877e944c7fa545dba () Term)
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_app_ref@tok () Term)




;;;;;;;;;;;;;;;;x: FStar.Reflection.V2.Data.argv -> Type
(declare-fun Tm_arrow_92c25590acb11558c1c015b6df5a7698 () Term)
(declare-fun Tm_abs_fafdfdb80259932c3ace8a59506d55f6 (Term) Term)

; </end encoding FStar.Reflection.V2.Derived.Lemmas.collect_app_ref>


; <Start encoding FStar.Reflection.V2.Derived.Lemmas.collect_abs_order'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_abs_order_ (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_abs_order_@tok () Term)

; </end encoding FStar.Reflection.V2.Derived.Lemmas.collect_abs_order'>


; <Skipped FStar.Reflection.V2.Derived.Lemmas.collect_abs_ln_order/>


; <Start encoding FStar.Reflection.V2.Derived.Lemmas.collect_abs_ln_order>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_abs_ln_order (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_abs_ln_order@tok () Term)

; </end encoding FStar.Reflection.V2.Derived.Lemmas.collect_abs_ln_order>


; <Skipped FStar.Reflection.V2.Derived.Lemmas.collect_abs_ln_ref/>


; <Start encoding FStar.Reflection.V2.Derived.Lemmas.collect_abs_ln_ref>

(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_abs_ln_ref (Term) Term)
(declare-fun Tm_refine_7ede085ae644b25ab15d8e7ef5996e03 (Term) Term)

;;;;;;;;;;;;;;;;t: FStar.Reflection.Types.term   -> Prims.list (bd: FStar.Reflection.Types.binder{bd << t}) *     body:     FStar.Reflection.Types.term{body == t \/ body << t}
(declare-fun Tm_arrow_51352493c78b026d3e3ba05df45523df () Term)
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_abs_ln_ref@tok () Term)




;;;;;;;;;;;;;;;;x: FStar.Reflection.Types.binder -> Type
(declare-fun Tm_arrow_b1569d3ad9e86357ad0c6265867b35fd () Term)
(declare-fun Tm_abs_a82480bae6989a45d8b80861ded2fdba (Term) Term)

; </end encoding FStar.Reflection.V2.Derived.Lemmas.collect_abs_ln_ref>


; <Start encoding FStar.Reflection.V2.Derived.Lemmas.collect_arr_order'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_arr_order_ (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_arr_order_@tok () Term)

; </end encoding FStar.Reflection.V2.Derived.Lemmas.collect_arr_order'>


; <Skipped FStar.Reflection.V2.Derived.Lemmas.collect_arr_ln_bs_order/>


; <Start encoding FStar.Reflection.V2.Derived.Lemmas.collect_arr_ln_bs_order>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_arr_ln_bs_order (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_arr_ln_bs_order@tok () Term)

; </end encoding FStar.Reflection.V2.Derived.Lemmas.collect_arr_ln_bs_order>


; <Skipped FStar.Reflection.V2.Derived.Lemmas.collect_arr_ln_bs_ref/>


; <Start encoding FStar.Reflection.V2.Derived.Lemmas.collect_arr_ln_bs_ref>

(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_arr_ln_bs_ref (Term) Term)

(declare-fun Tm_refine_fff6437516c6eca74da38682d0286f89 (Term) Term)
;;;;;;;;;;;;;;;;t: FStar.Reflection.Types.term   -> Prims.list (bd: FStar.Reflection.Types.binder{bd << t}) *     c:     FStar.Reflection.Types.comp       {c == FStar.Reflection.V2.Builtins.pack_comp (FStar.Reflection.V2.Data.C_Total t) \/ c << t}
(declare-fun Tm_arrow_fb256f6882b6cc6309561a0e48802dd4 () Term)
(declare-fun FStar.Reflection.V2.Derived.Lemmas.collect_arr_ln_bs_ref@tok () Term)







; </end encoding FStar.Reflection.V2.Derived.Lemmas.collect_arr_ln_bs_ref>


; End Externals for module FStar.Reflection.V2.Derived.Lemmas


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End module FStar.Reflection.V2.Derived.Lemmas (123 decls; total size 12296)

;;; Start module FStar.Reflection.V2

; Externals for module FStar.Reflection.V2


; End Externals for module FStar.Reflection.V2


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End module FStar.Reflection.V2 (3 decls; total size 1160)

;;; Start interface FStar.Squash

; Externals for interface FStar.Squash


; <Start encoding FStar.Squash.return_squash>

(declare-fun FStar.Squash.return_squash (Term Term) Term)
;;;;;;;;;;;;;;;;x: a -> Prims.squash a
(declare-fun Tm_arrow_66188dd3b00b7ac9b3910d6e97360d1e () Term)
(declare-fun FStar.Squash.return_squash@tok () Term)

; </end encoding FStar.Squash.return_squash>


; <Start encoding FStar.Squash.bind_squash>

;;;;;;;;;;;;;;;;_: a -> Prims.GTot (Prims.squash b)
(declare-fun Tm_arrow_50bc60bebdf75c69c78dc800e0364d6b (Term Term) Term)
(declare-fun FStar.Squash.bind_squash (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;x: Prims.squash a -> f: (_: a -> Prims.GTot (Prims.squash b)) -> Prims.squash b
(declare-fun Tm_arrow_dd301c13dceb52611925e3e0985c3aa8 () Term)
(declare-fun FStar.Squash.bind_squash@tok () Term)

; </end encoding FStar.Squash.bind_squash>


; <Start encoding FStar.Squash.push_squash>



(declare-fun FStar.Squash.push_squash (Term Term Term) Term)



;;;;;;;;;;;;;;;;f: (x: a -> Prims.squash (b x)) -> Prims.squash (x: a -> Prims.GTot (b x))
(declare-fun Tm_arrow_897bf5c14b806d39ad41e0bfef45d28a () Term)
(declare-fun FStar.Squash.push_squash@tok () Term)


; </end encoding FStar.Squash.push_squash>


; <Start encoding FStar.Squash.get_proof>

(declare-fun FStar.Squash.get_proof (Term) Term)
(declare-fun Tm_refine_7fdd091adbcfc3810a61ff266cf2272b (Term) Term)
;;;;;;;;;;;;;;;;p: Type -> Prims.Pure (Prims.squash p)
(declare-fun Tm_arrow_92023635b661ef4cb5183e1ccd313c6b () Term)
(declare-fun FStar.Squash.get_proof@tok () Term)


; </end encoding FStar.Squash.get_proof>


; <Start encoding FStar.Squash.give_proof>

(declare-fun FStar.Squash.give_proof (Term Term) Term)

;;;;;;;;;;;;;;;;x: Prims.squash p -> Prims.Pure Prims.unit
(declare-fun Tm_arrow_d002f3b74726aef4cc35f50b77083fcc () Term)
(declare-fun FStar.Squash.give_proof@tok () Term)


; </end encoding FStar.Squash.give_proof>


; <Start encoding FStar.Squash.proof_irrelevance>

(declare-fun FStar.Squash.proof_irrelevance (Term Term Term) Term)

;;;;;;;;;;;;;;;;p: Type -> x: Prims.squash p -> y: Prims.squash p -> Prims.squash (x == y)
(declare-fun Tm_arrow_78ff335c3696d8f05c99466a60d0bf7d () Term)
(declare-fun FStar.Squash.proof_irrelevance@tok () Term)


; </end encoding FStar.Squash.proof_irrelevance>


; <Start encoding FStar.Squash.squash_double_arrow>



(declare-fun FStar.Squash.squash_double_arrow (Term Term Term) Term)



;;;;;;;;;;;;;;;;$f: Prims.squash (x: a -> Prims.GTot (Prims.squash (p x)))   -> Prims.GTot (Prims.squash (x: a -> Prims.GTot (p x)))
(declare-fun Tm_arrow_4135086bd057eee0b1997d9de0b75d33 () Term)
(declare-fun FStar.Squash.squash_double_arrow@tok () Term)


; </end encoding FStar.Squash.squash_double_arrow>


; <Start encoding FStar.Squash.push_sum>



(declare-fun Tm_abs_ecb85cab59105fe548fc5ca9d671c8f9 (Term Term) Term)
(declare-fun FStar.Squash.push_sum (Term Term Term) Term)



;;;;;;;;;;;;;;;;$p: Prims.dtuple2 a (fun x -> Prims.squash (b x)) -> Prims.squash (Prims.dtuple2 a b)
(declare-fun Tm_arrow_c6e83d6817933b3336a5e86b07e67062 () Term)
(declare-fun FStar.Squash.push_sum@tok () Term)

; </end encoding FStar.Squash.push_sum>


; <Start encoding FStar.Squash.squash_double_sum>




(declare-fun FStar.Squash.squash_double_sum (Term Term Term) Term)



;;;;;;;;;;;;;;;;$p: Prims.squash (Prims.dtuple2 a (fun x -> Prims.squash (b x))) -> Prims.squash (Prims.dtuple2 a b)
(declare-fun Tm_arrow_a0b7ea9677fa75d0acf0c901c148bbdc () Term)
(declare-fun FStar.Squash.squash_double_sum@tok () Term)

; </end encoding FStar.Squash.squash_double_sum>


; <Start encoding FStar.Squash.map_squash>


(declare-fun FStar.Squash.map_squash (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;x: Prims.squash a -> f: (_: a -> Prims.GTot b) -> Prims.squash b
(declare-fun Tm_arrow_f71a078a3b73bb8e8cddd83bc4ca236a () Term)
(declare-fun FStar.Squash.map_squash@tok () Term)

; </end encoding FStar.Squash.map_squash>


; <Start encoding FStar.Squash.join_squash>

(declare-fun FStar.Squash.join_squash (Term Term) Term)
;;;;;;;;;;;;;;;;x: Prims.squash (Prims.squash a) -> Prims.squash a
(declare-fun Tm_arrow_b9fdb1273189be7b55b74e1c4ecfb366 () Term)
(declare-fun FStar.Squash.join_squash@tok () Term)

; </end encoding FStar.Squash.join_squash>


; End Externals for interface FStar.Squash


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End interface FStar.Squash (92 decls; total size 5361)

;;; Start interface FStar.Tactics.Typeclasses

; Externals for interface FStar.Tactics.Typeclasses


; <Start encoding FStar.Tactics.Typeclasses.tcclass>

(declare-fun FStar.Tactics.Typeclasses.tcclass (Dummy_sort) Term)

; </end encoding FStar.Tactics.Typeclasses.tcclass>


; <Start encoding FStar.Tactics.Typeclasses.tcinstance>

(declare-fun FStar.Tactics.Typeclasses.tcinstance (Dummy_sort) Term)

; </end encoding FStar.Tactics.Typeclasses.tcinstance>


; <Start encoding FStar.Tactics.Typeclasses.no_method>

(declare-fun FStar.Tactics.Typeclasses.no_method (Dummy_sort) Term)

; </end encoding FStar.Tactics.Typeclasses.no_method>


; <Start encoding FStar.Tactics.Typeclasses.tcresolve>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Typeclasses.tcresolve (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Typeclasses.tcresolve@tok () Term)

; </end encoding FStar.Tactics.Typeclasses.tcresolve>


; <Start encoding FStar.Tactics.Typeclasses.mk_class>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Typeclasses.mk_class (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Typeclasses.mk_class@tok () Term)

; </end encoding FStar.Tactics.Typeclasses.mk_class>


; <Start encoding FStar.Tactics.Typeclasses.solve>

(declare-fun FStar.Tactics.Typeclasses.solve (Term Term) Term)

(declare-fun FStar.Tactics.Typeclasses.solve@tok () Term)

; </end encoding FStar.Tactics.Typeclasses.solve>


; End Externals for interface FStar.Tactics.Typeclasses


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End interface FStar.Tactics.Typeclasses (25 decls; total size 2657)

;;; Start interface FStar.Tactics.NamedView

; Externals for interface FStar.Tactics.NamedView


; <Start encoding FStar.Tactics.NamedView.namedv>

(declare-fun FStar.Tactics.NamedView.namedv () Term)

; </end encoding FStar.Tactics.NamedView.namedv>


; <Start encoding FStar.Tactics.NamedView.bv>

(declare-fun FStar.Tactics.NamedView.bv () Term)

; </end encoding FStar.Tactics.NamedView.bv>


; <Start encoding FStar.Tactics.NamedView.comp>

(declare-fun FStar.Tactics.NamedView.comp () Term)

; </end encoding FStar.Tactics.NamedView.comp>


; <Start encoding FStar.Tactics.NamedView.binding>

(declare-fun FStar.Tactics.NamedView.binding () Term)

; </end encoding FStar.Tactics.NamedView.binding>


; <Start encoding FStar.Tactics.NamedView.term>

(declare-fun FStar.Tactics.NamedView.term () Term)

; </end encoding FStar.Tactics.NamedView.term>


; <Start encoding FStar.Tactics.NamedView.universe>

(declare-fun FStar.Tactics.NamedView.universe () Term)

; </end encoding FStar.Tactics.NamedView.universe>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.binder () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Mkbinder (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkbinder_uniq (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkbinder_ppname (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkbinder_sort (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkbinder_qual (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkbinder_attrs (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mkbinder
(declare-fun FStar.Tactics.NamedView.Mkbinder@tok () Term)
;;;;;;;;;;;;;;;;uniq: Prims.nat ->     ppname: FStar.Reflection.V2.Data.ppname_t ->     sort: FStar.Reflection.Types.typ ->     qual: FStar.Reflection.V2.Data.aqualv ->     attrs: Prims.list FStar.Tactics.NamedView.term   -> FStar.Tactics.NamedView.binder
(declare-fun Tm_arrow_4fbabb5ac3e0ac29cd1583fee2118a37 () Term)

; <Start encoding FStar.Tactics.NamedView.binder>


; <start constructor FStar.Tactics.NamedView.binder>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.binder ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(= __@x0
FStar.Tactics.NamedView.binder)))

; </end constructor FStar.Tactics.NamedView.binder>


; </end encoding FStar.Tactics.NamedView.binder>


; <Start encoding FStar.Tactics.NamedView.Mkbinder>


; <start constructor FStar.Tactics.NamedView.Mkbinder>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Mkbinder ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
107)
(= __@x0
(FStar.Tactics.NamedView.Mkbinder (FStar.Tactics.NamedView.Mkbinder_uniq __@x0)
(FStar.Tactics.NamedView.Mkbinder_ppname __@x0)
(FStar.Tactics.NamedView.Mkbinder_sort __@x0)
(FStar.Tactics.NamedView.Mkbinder_qual __@x0)
(FStar.Tactics.NamedView.Mkbinder_attrs __@x0)))))

; </end constructor FStar.Tactics.NamedView.Mkbinder>


; </end encoding FStar.Tactics.NamedView.Mkbinder>


; </end encoding >


; <Start encoding FStar.Tactics.NamedView.__proj__Mkbinder__item__uniq>

(declare-fun FStar.Tactics.NamedView.__proj__Mkbinder__item__uniq (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Tactics.NamedView.binder -> Prims.nat
(declare-fun Tm_arrow_08a39d13d139efc327cbda171f647074 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkbinder__item__uniq@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Mkbinder__item__uniq>


; <Skipped FStar.Tactics.NamedView.__proj__Mkbinder__item__uniq/>


; <Start encoding FStar.Tactics.NamedView.__proj__Mkbinder__item__ppname>

(declare-fun FStar.Tactics.NamedView.__proj__Mkbinder__item__ppname (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Tactics.NamedView.binder -> FStar.Reflection.V2.Data.ppname_t
(declare-fun Tm_arrow_c76687c8e774043019fc9026b6000b0b () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkbinder__item__ppname@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Mkbinder__item__ppname>


; <Skipped FStar.Tactics.NamedView.__proj__Mkbinder__item__ppname/>


; <Start encoding FStar.Tactics.NamedView.__proj__Mkbinder__item__sort>

(declare-fun FStar.Tactics.NamedView.__proj__Mkbinder__item__sort (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Tactics.NamedView.binder -> FStar.Reflection.Types.typ
(declare-fun Tm_arrow_41e345f749c7b16b9bf3f70ddafaa501 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkbinder__item__sort@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Mkbinder__item__sort>


; <Skipped FStar.Tactics.NamedView.__proj__Mkbinder__item__sort/>


; <Start encoding FStar.Tactics.NamedView.__proj__Mkbinder__item__qual>

(declare-fun FStar.Tactics.NamedView.__proj__Mkbinder__item__qual (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Tactics.NamedView.binder -> FStar.Reflection.V2.Data.aqualv
(declare-fun Tm_arrow_be49cc86a5f1e901b25b0db258194c7a () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkbinder__item__qual@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Mkbinder__item__qual>


; <Skipped FStar.Tactics.NamedView.__proj__Mkbinder__item__qual/>


; <Start encoding FStar.Tactics.NamedView.__proj__Mkbinder__item__attrs>

(declare-fun FStar.Tactics.NamedView.__proj__Mkbinder__item__attrs (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Tactics.NamedView.binder -> Prims.list FStar.Tactics.NamedView.term
(declare-fun Tm_arrow_aa263730cc5f78ee1837f0ce69b57ecf () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkbinder__item__attrs@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Mkbinder__item__attrs>


; <Skipped FStar.Tactics.NamedView.__proj__Mkbinder__item__attrs/>


; <Start encoding FStar.Tactics.NamedView.binders>

(declare-fun FStar.Tactics.NamedView.binders () Term)

; </end encoding FStar.Tactics.NamedView.binders>


; <Start encoding FStar.Tactics.NamedView.is_simple_binder>

(declare-fun FStar.Tactics.NamedView.is_simple_binder (Term) Term)
;;;;;;;;;;;;;;;;b: FStar.Tactics.NamedView.binder -> Prims.logical
(declare-fun Tm_arrow_0ac347260142cc85ff8e54f143e64273 () Term)
(declare-fun FStar.Tactics.NamedView.is_simple_binder@tok () Term)

; </end encoding FStar.Tactics.NamedView.is_simple_binder>


; <Start encoding FStar.Tactics.NamedView.simple_binder>

(declare-fun FStar.Tactics.NamedView.simple_binder () Term)
(declare-fun Tm_refine_b26ca2aff6a22929fb21b63f378a437f () Term)

; </end encoding FStar.Tactics.NamedView.simple_binder>


; <Start encoding FStar.Tactics.NamedView.univ_name>

(declare-fun FStar.Tactics.NamedView.univ_name () Term)

; </end encoding FStar.Tactics.NamedView.univ_name>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.named_universe_view () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Uv_Zero () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Uv_Zero
(declare-fun FStar.Tactics.NamedView.Uv_Zero@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Uv_Succ (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Uv_Succ__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Uv_Succ
(declare-fun FStar.Tactics.NamedView.Uv_Succ@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Uv_Max (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Uv_Max__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Uv_Max
(declare-fun FStar.Tactics.NamedView.Uv_Max@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Uv_BVar (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Uv_BVar__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Uv_BVar
(declare-fun FStar.Tactics.NamedView.Uv_BVar@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Uv_Name (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Uv_Name__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Uv_Name
(declare-fun FStar.Tactics.NamedView.Uv_Name@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Uv_Unif (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Uv_Unif__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Uv_Unif
(declare-fun FStar.Tactics.NamedView.Uv_Unif@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Uv_Unk () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Uv_Unk
(declare-fun FStar.Tactics.NamedView.Uv_Unk@tok () Term)
;;;;;;;;;;;;;;;;_0: FStar.Tactics.NamedView.universe -> FStar.Tactics.NamedView.named_universe_view
(declare-fun Tm_arrow_a5dc599a61c297d256a91a62224cf872 () Term)
;;;;;;;;;;;;;;;;_0: FStar.Reflection.V2.Data.universes -> FStar.Tactics.NamedView.named_universe_view
(declare-fun Tm_arrow_10ce5dd16f290ba9655f5c864fff02a7 () Term)
;;;;;;;;;;;;;;;;_0: Prims.nat -> FStar.Tactics.NamedView.named_universe_view
(declare-fun Tm_arrow_83b5bd77f42ddf88e128a037a91a1caa () Term)
;;;;;;;;;;;;;;;;_0: FStar.Tactics.NamedView.univ_name -> FStar.Tactics.NamedView.named_universe_view
(declare-fun Tm_arrow_f691cf6e2583caa2c655a3fd34affe28 () Term)
;;;;;;;;;;;;;;;;_0: FStar.Reflection.Types.universe_uvar -> FStar.Tactics.NamedView.named_universe_view
(declare-fun Tm_arrow_a03d5c49994fdb166310e9998ce9bb13 () Term)

; <Start encoding FStar.Tactics.NamedView.named_universe_view>


; <start constructor FStar.Tactics.NamedView.named_universe_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.named_universe_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
124)
(= __@x0
FStar.Tactics.NamedView.named_universe_view)))

; </end constructor FStar.Tactics.NamedView.named_universe_view>


; </end encoding FStar.Tactics.NamedView.named_universe_view>


; <Start encoding FStar.Tactics.NamedView.Uv_Zero>


; <start constructor FStar.Tactics.NamedView.Uv_Zero>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Uv_Zero ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
130)
(= __@x0
FStar.Tactics.NamedView.Uv_Zero)))

; </end constructor FStar.Tactics.NamedView.Uv_Zero>


; </end encoding FStar.Tactics.NamedView.Uv_Zero>


; <Start encoding FStar.Tactics.NamedView.Uv_Succ>


; <start constructor FStar.Tactics.NamedView.Uv_Succ>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Uv_Succ ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
132)
(= __@x0
(FStar.Tactics.NamedView.Uv_Succ (FStar.Tactics.NamedView.Uv_Succ__0 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Uv_Succ>


; </end encoding FStar.Tactics.NamedView.Uv_Succ>


; <Start encoding FStar.Tactics.NamedView.Uv_Max>


; <start constructor FStar.Tactics.NamedView.Uv_Max>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Uv_Max ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
137)
(= __@x0
(FStar.Tactics.NamedView.Uv_Max (FStar.Tactics.NamedView.Uv_Max__0 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Uv_Max>


; </end encoding FStar.Tactics.NamedView.Uv_Max>


; <Start encoding FStar.Tactics.NamedView.Uv_BVar>


; <start constructor FStar.Tactics.NamedView.Uv_BVar>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Uv_BVar ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
142)
(= __@x0
(FStar.Tactics.NamedView.Uv_BVar (FStar.Tactics.NamedView.Uv_BVar__0 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Uv_BVar>


; </end encoding FStar.Tactics.NamedView.Uv_BVar>


; <Start encoding FStar.Tactics.NamedView.Uv_Name>


; <start constructor FStar.Tactics.NamedView.Uv_Name>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Uv_Name ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
147)
(= __@x0
(FStar.Tactics.NamedView.Uv_Name (FStar.Tactics.NamedView.Uv_Name__0 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Uv_Name>


; </end encoding FStar.Tactics.NamedView.Uv_Name>


; <Start encoding FStar.Tactics.NamedView.Uv_Unif>


; <start constructor FStar.Tactics.NamedView.Uv_Unif>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Uv_Unif ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
152)
(= __@x0
(FStar.Tactics.NamedView.Uv_Unif (FStar.Tactics.NamedView.Uv_Unif__0 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Uv_Unif>


; </end encoding FStar.Tactics.NamedView.Uv_Unif>


; <Start encoding FStar.Tactics.NamedView.Uv_Unk>


; <start constructor FStar.Tactics.NamedView.Uv_Unk>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Uv_Unk ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
157)
(= __@x0
FStar.Tactics.NamedView.Uv_Unk)))

; </end constructor FStar.Tactics.NamedView.Uv_Unk>


; </end encoding FStar.Tactics.NamedView.Uv_Unk>


; </end encoding >


; <Start encoding FStar.Tactics.NamedView.uu___is_Uv_Zero>

(declare-fun FStar.Tactics.NamedView.uu___is_Uv_Zero (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Tactics.NamedView.named_universe_view -> Prims.bool
(declare-fun Tm_arrow_e916a0b037b2828ef3deb9a1be26cf82 () Term)
(declare-fun FStar.Tactics.NamedView.uu___is_Uv_Zero@tok () Term)

; </end encoding FStar.Tactics.NamedView.uu___is_Uv_Zero>


; <Skipped FStar.Tactics.NamedView.uu___is_Uv_Zero/>


; <Start encoding FStar.Tactics.NamedView.uu___is_Uv_Succ>

(declare-fun FStar.Tactics.NamedView.uu___is_Uv_Succ (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Uv_Succ@tok () Term)

; </end encoding FStar.Tactics.NamedView.uu___is_Uv_Succ>


; <Skipped FStar.Tactics.NamedView.uu___is_Uv_Succ/>


; <Start encoding FStar.Tactics.NamedView.__proj__Uv_Succ__item___0>

(declare-fun Tm_refine_82914602a13807f685e45dd78cc5636a () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Uv_Succ__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.NamedView.named_universe_view{Uv_Succ? _}   -> FStar.Tactics.NamedView.universe
(declare-fun Tm_arrow_86b6b5510e034ff9066d55ffd4a31409 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Uv_Succ__item___0@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Uv_Succ__item___0>


; <Skipped FStar.Tactics.NamedView.__proj__Uv_Succ__item___0/>


; <Start encoding FStar.Tactics.NamedView.uu___is_Uv_Max>

(declare-fun FStar.Tactics.NamedView.uu___is_Uv_Max (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Uv_Max@tok () Term)

; </end encoding FStar.Tactics.NamedView.uu___is_Uv_Max>


; <Skipped FStar.Tactics.NamedView.uu___is_Uv_Max/>


; <Start encoding FStar.Tactics.NamedView.__proj__Uv_Max__item___0>

(declare-fun Tm_refine_6078923c349de6ec41dd797ce0f793ee () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Uv_Max__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.NamedView.named_universe_view{Uv_Max? _}   -> FStar.Reflection.V2.Data.universes
(declare-fun Tm_arrow_f789a0b68e30be1c48914ba181e74989 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Uv_Max__item___0@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Uv_Max__item___0>


; <Skipped FStar.Tactics.NamedView.__proj__Uv_Max__item___0/>


; <Start encoding FStar.Tactics.NamedView.uu___is_Uv_BVar>

(declare-fun FStar.Tactics.NamedView.uu___is_Uv_BVar (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Uv_BVar@tok () Term)

; </end encoding FStar.Tactics.NamedView.uu___is_Uv_BVar>


; <Skipped FStar.Tactics.NamedView.uu___is_Uv_BVar/>


; <Start encoding FStar.Tactics.NamedView.__proj__Uv_BVar__item___0>

(declare-fun Tm_refine_47d91bede15db6781395bb141c3d640d () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Uv_BVar__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.NamedView.named_universe_view{Uv_BVar? _} -> Prims.nat
(declare-fun Tm_arrow_8f977daeff3acc578f224eb1f9725ad5 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Uv_BVar__item___0@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Uv_BVar__item___0>


; <Skipped FStar.Tactics.NamedView.__proj__Uv_BVar__item___0/>


; <Start encoding FStar.Tactics.NamedView.uu___is_Uv_Name>

(declare-fun FStar.Tactics.NamedView.uu___is_Uv_Name (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Uv_Name@tok () Term)

; </end encoding FStar.Tactics.NamedView.uu___is_Uv_Name>


; <Skipped FStar.Tactics.NamedView.uu___is_Uv_Name/>


; <Start encoding FStar.Tactics.NamedView.__proj__Uv_Name__item___0>

(declare-fun Tm_refine_69980a892705a9a64d8e676222efcd27 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Uv_Name__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.NamedView.named_universe_view{Uv_Name? _}   -> FStar.Tactics.NamedView.univ_name
(declare-fun Tm_arrow_a7c4abfc1b3c544a740643b441a3f5ac () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Uv_Name__item___0@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Uv_Name__item___0>


; <Skipped FStar.Tactics.NamedView.__proj__Uv_Name__item___0/>


; <Start encoding FStar.Tactics.NamedView.uu___is_Uv_Unif>

(declare-fun FStar.Tactics.NamedView.uu___is_Uv_Unif (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Uv_Unif@tok () Term)

; </end encoding FStar.Tactics.NamedView.uu___is_Uv_Unif>


; <Skipped FStar.Tactics.NamedView.uu___is_Uv_Unif/>


; <Start encoding FStar.Tactics.NamedView.__proj__Uv_Unif__item___0>

(declare-fun Tm_refine_46ecd4555b9cddd750f1c172ed151b64 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Uv_Unif__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.NamedView.named_universe_view{Uv_Unif? _}   -> FStar.Reflection.Types.universe_uvar
(declare-fun Tm_arrow_9f7aaa725eb325f979293fa63e936d10 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Uv_Unif__item___0@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Uv_Unif__item___0>


; <Skipped FStar.Tactics.NamedView.__proj__Uv_Unif__item___0/>


; <Start encoding FStar.Tactics.NamedView.uu___is_Uv_Unk>

(declare-fun FStar.Tactics.NamedView.uu___is_Uv_Unk (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Uv_Unk@tok () Term)

; </end encoding FStar.Tactics.NamedView.uu___is_Uv_Unk>


; <Skipped FStar.Tactics.NamedView.uu___is_Uv_Unk/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.pattern__Pat_Constant__payload () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.pattern__Pat_Cons__payload () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.pattern__Pat_Var__payload () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.pattern () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload_c (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mkpattern__Pat_Constant__payload
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload_head (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload_univs (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload_subpats (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mkpattern__Pat_Cons__payload
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload_v (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload_sort (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mkpattern__Pat_Var__payload
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload_t (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mkpattern__Pat_Dot_Term__payload
(declare-fun FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Pat_Constant (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Pat_Constant__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Pat_Constant
(declare-fun FStar.Tactics.NamedView.Pat_Constant@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Pat_Cons (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Pat_Cons__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Pat_Cons
(declare-fun FStar.Tactics.NamedView.Pat_Cons@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Pat_Var (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Pat_Var__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Pat_Var
(declare-fun FStar.Tactics.NamedView.Pat_Var@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Pat_Dot_Term (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Pat_Dot_Term__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Pat_Dot_Term
(declare-fun FStar.Tactics.NamedView.Pat_Dot_Term@tok () Term)
;;;;;;;;;;;;;;;;c: FStar.Reflection.V2.Data.vconst -> FStar.Tactics.NamedView.pattern__Pat_Constant__payload
(declare-fun Tm_arrow_f63b22cd730285dc1ac4de54ca4bc3cb () Term)
;;;;;;;;;;;;;;;;head: FStar.Reflection.Types.fv ->     univs: FStar.Pervasives.Native.option FStar.Reflection.V2.Data.universes ->     subpats: Prims.list (FStar.Tactics.NamedView.pattern * Prims.bool)   -> FStar.Tactics.NamedView.pattern__Pat_Cons__payload
(declare-fun Tm_arrow_639998d60445e26429ae5583bce8cb47 () Term)
;;;;;;;;;;;;;;;;v: FStar.Tactics.NamedView.namedv -> sort: FStar.Sealed.sealed FStar.Reflection.Types.typ   -> FStar.Tactics.NamedView.pattern__Pat_Var__payload
(declare-fun Tm_arrow_a6fe7f78e65aa02f52c7da6fd68e25a8 () Term)
;;;;;;;;;;;;;;;;t: FStar.Pervasives.Native.option FStar.Tactics.NamedView.term   -> FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload
(declare-fun Tm_arrow_e03f0a0f7e86d52a5702fc8aa7dae3ff () Term)
;;;;;;;;;;;;;;;;_0: FStar.Tactics.NamedView.pattern__Pat_Constant__payload -> FStar.Tactics.NamedView.pattern
(declare-fun Tm_arrow_8cd97a05fb7067b5274a12cabe306fe9 () Term)
;;;;;;;;;;;;;;;;_0: FStar.Tactics.NamedView.pattern__Pat_Cons__payload -> FStar.Tactics.NamedView.pattern
(declare-fun Tm_arrow_9fe372b4479ab15c100f1aa878d3645a () Term)
;;;;;;;;;;;;;;;;_0: FStar.Tactics.NamedView.pattern__Pat_Var__payload -> FStar.Tactics.NamedView.pattern
(declare-fun Tm_arrow_d631b9acc0e9c6e10dc5f3509d41050f () Term)
;;;;;;;;;;;;;;;;_0: FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload -> FStar.Tactics.NamedView.pattern
(declare-fun Tm_arrow_bb4c95c6d1ac5e3bc200c6b070f18283 () Term)

; <Start encoding FStar.Tactics.NamedView.pattern__Pat_Constant__payload>


; <start constructor FStar.Tactics.NamedView.pattern__Pat_Constant__payload>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.pattern__Pat_Constant__payload ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
192)
(= __@x0
FStar.Tactics.NamedView.pattern__Pat_Constant__payload)))

; </end constructor FStar.Tactics.NamedView.pattern__Pat_Constant__payload>


; </end encoding FStar.Tactics.NamedView.pattern__Pat_Constant__payload>


; <Start encoding FStar.Tactics.NamedView.pattern__Pat_Cons__payload>


; <start constructor FStar.Tactics.NamedView.pattern__Pat_Cons__payload>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.pattern__Pat_Cons__payload ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
197)
(= __@x0
FStar.Tactics.NamedView.pattern__Pat_Cons__payload)))

; </end constructor FStar.Tactics.NamedView.pattern__Pat_Cons__payload>


; </end encoding FStar.Tactics.NamedView.pattern__Pat_Cons__payload>


; <Start encoding FStar.Tactics.NamedView.pattern__Pat_Var__payload>


; <start constructor FStar.Tactics.NamedView.pattern__Pat_Var__payload>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.pattern__Pat_Var__payload ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
202)
(= __@x0
FStar.Tactics.NamedView.pattern__Pat_Var__payload)))

; </end constructor FStar.Tactics.NamedView.pattern__Pat_Var__payload>


; </end encoding FStar.Tactics.NamedView.pattern__Pat_Var__payload>


; <Start encoding FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload>


; <start constructor FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
207)
(= __@x0
FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload)))

; </end constructor FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload>


; </end encoding FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload>


; <Start encoding FStar.Tactics.NamedView.pattern>


; <start constructor FStar.Tactics.NamedView.pattern>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.pattern ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
212)
(= __@x0
FStar.Tactics.NamedView.pattern)))

; </end constructor FStar.Tactics.NamedView.pattern>


; </end encoding FStar.Tactics.NamedView.pattern>


; <Start encoding FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload>


; <start constructor FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
218)
(= __@x0
(FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload (FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload_c __@x0)))))

; </end constructor FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload>


; </end encoding FStar.Tactics.NamedView.Mkpattern__Pat_Constant__payload>


; <Start encoding FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload>


; <start constructor FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
223)
(= __@x0
(FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload (FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload_head __@x0)
(FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload_univs __@x0)
(FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload_subpats __@x0)))))

; </end constructor FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload>


; </end encoding FStar.Tactics.NamedView.Mkpattern__Pat_Cons__payload>


; <Start encoding FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload>


; <start constructor FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
228)
(= __@x0
(FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload (FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload_v __@x0)
(FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload_sort __@x0)))))

; </end constructor FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload>


; </end encoding FStar.Tactics.NamedView.Mkpattern__Pat_Var__payload>


; <Start encoding FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload>


; <start constructor FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
233)
(= __@x0
(FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload (FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload_t __@x0)))))

; </end constructor FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload>


; </end encoding FStar.Tactics.NamedView.Mkpattern__Pat_Dot_Term__payload>


; <Start encoding FStar.Tactics.NamedView.Pat_Constant>


; <start constructor FStar.Tactics.NamedView.Pat_Constant>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Pat_Constant ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
238)
(= __@x0
(FStar.Tactics.NamedView.Pat_Constant (FStar.Tactics.NamedView.Pat_Constant__0 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Pat_Constant>


; </end encoding FStar.Tactics.NamedView.Pat_Constant>


; <Start encoding FStar.Tactics.NamedView.Pat_Cons>


; <start constructor FStar.Tactics.NamedView.Pat_Cons>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Pat_Cons ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
243)
(= __@x0
(FStar.Tactics.NamedView.Pat_Cons (FStar.Tactics.NamedView.Pat_Cons__0 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Pat_Cons>


; </end encoding FStar.Tactics.NamedView.Pat_Cons>


; <Start encoding FStar.Tactics.NamedView.Pat_Var>


; <start constructor FStar.Tactics.NamedView.Pat_Var>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Pat_Var ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
248)
(= __@x0
(FStar.Tactics.NamedView.Pat_Var (FStar.Tactics.NamedView.Pat_Var__0 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Pat_Var>


; </end encoding FStar.Tactics.NamedView.Pat_Var>


; <Start encoding FStar.Tactics.NamedView.Pat_Dot_Term>


; <start constructor FStar.Tactics.NamedView.Pat_Dot_Term>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Pat_Dot_Term ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
253)
(= __@x0
(FStar.Tactics.NamedView.Pat_Dot_Term (FStar.Tactics.NamedView.Pat_Dot_Term__0 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Pat_Dot_Term>


; </end encoding FStar.Tactics.NamedView.Pat_Dot_Term>


; </end encoding >


; <Start encoding FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Constant__payload__item__c>

(declare-fun FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Constant__payload__item__c (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Tactics.NamedView.pattern__Pat_Constant__payload -> FStar.Reflection.V2.Data.vconst
(declare-fun Tm_arrow_307646b91a9e70ad47ea42fe44a39719 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Constant__payload__item__c@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Constant__payload__item__c>


; <Skipped FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Constant__payload__item__c/>


; <Start encoding FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Cons__payload__item__head>

(declare-fun FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Cons__payload__item__head (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Tactics.NamedView.pattern__Pat_Cons__payload -> FStar.Reflection.Types.fv
(declare-fun Tm_arrow_5081611afe26508956775e89d66c4fae () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Cons__payload__item__head@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Cons__payload__item__head>


; <Skipped FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Cons__payload__item__head/>


; <Start encoding FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Cons__payload__item__univs>

(declare-fun FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Cons__payload__item__univs (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Tactics.NamedView.pattern__Pat_Cons__payload   -> FStar.Pervasives.Native.option FStar.Reflection.V2.Data.universes
(declare-fun Tm_arrow_1fecffbde3217bc757eacb40cf317c21 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Cons__payload__item__univs@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Cons__payload__item__univs>


; <Skipped FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Cons__payload__item__univs/>


; <Start encoding FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Cons__payload__item__subpats>

(declare-fun FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Cons__payload__item__subpats (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Tactics.NamedView.pattern__Pat_Cons__payload   -> Prims.list (FStar.Tactics.NamedView.pattern * Prims.bool)
(declare-fun Tm_arrow_013b012219d5f86b87e86a52228f37ee () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Cons__payload__item__subpats@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Cons__payload__item__subpats>


; <Skipped FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Cons__payload__item__subpats/>


; <Start encoding FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Var__payload__item__v>

(declare-fun FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Var__payload__item__v (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Tactics.NamedView.pattern__Pat_Var__payload -> FStar.Tactics.NamedView.namedv
(declare-fun Tm_arrow_c5eb61aa8c75c93c411e2118222711bd () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Var__payload__item__v@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Var__payload__item__v>


; <Skipped FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Var__payload__item__v/>


; <Start encoding FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Var__payload__item__sort>

(declare-fun FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Var__payload__item__sort (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Tactics.NamedView.pattern__Pat_Var__payload   -> FStar.Sealed.sealed FStar.Reflection.Types.typ
(declare-fun Tm_arrow_27eeb0024b7199a0acbfb9c58a4a9f8a () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Var__payload__item__sort@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Var__payload__item__sort>


; <Skipped FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Var__payload__item__sort/>


; <Start encoding FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Dot_Term__payload__item__t>

(declare-fun FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Dot_Term__payload__item__t (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload   -> FStar.Pervasives.Native.option FStar.Tactics.NamedView.term
(declare-fun Tm_arrow_3bff8a953256246b4ca1722521469ae9 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Dot_Term__payload__item__t@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Dot_Term__payload__item__t>


; <Skipped FStar.Tactics.NamedView.__proj__Mkpattern__Pat_Dot_Term__payload__item__t/>


; <Start encoding FStar.Tactics.NamedView.uu___is_Pat_Constant>

(declare-fun FStar.Tactics.NamedView.uu___is_Pat_Constant (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Tactics.NamedView.pattern -> Prims.bool
(declare-fun Tm_arrow_7a91e5e1f35c852edab70b3e95b8d139 () Term)
(declare-fun FStar.Tactics.NamedView.uu___is_Pat_Constant@tok () Term)

; </end encoding FStar.Tactics.NamedView.uu___is_Pat_Constant>


; <Skipped FStar.Tactics.NamedView.uu___is_Pat_Constant/>


; <Start encoding FStar.Tactics.NamedView.__proj__Pat_Constant__item___0>

(declare-fun Tm_refine_760215d17bae6326cab536ca4b3b4619 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Pat_Constant__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.NamedView.pattern{Pat_Constant? _}   -> FStar.Tactics.NamedView.pattern__Pat_Constant__payload
(declare-fun Tm_arrow_422d85aa4e646a0fef8a09c3cca4294c () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Pat_Constant__item___0@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Pat_Constant__item___0>


; <Skipped FStar.Tactics.NamedView.__proj__Pat_Constant__item___0/>


; <Start encoding FStar.Tactics.NamedView.uu___is_Pat_Cons>

(declare-fun FStar.Tactics.NamedView.uu___is_Pat_Cons (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Pat_Cons@tok () Term)

; </end encoding FStar.Tactics.NamedView.uu___is_Pat_Cons>


; <Skipped FStar.Tactics.NamedView.uu___is_Pat_Cons/>


; <Start encoding FStar.Tactics.NamedView.__proj__Pat_Cons__item___0>

(declare-fun Tm_refine_1568b2d9001092df78423ad5031cadd0 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Pat_Cons__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.NamedView.pattern{Pat_Cons? _}   -> FStar.Tactics.NamedView.pattern__Pat_Cons__payload
(declare-fun Tm_arrow_df0caa47c66afdf8e0bd69017a9e531f () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Pat_Cons__item___0@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Pat_Cons__item___0>


; <Skipped FStar.Tactics.NamedView.__proj__Pat_Cons__item___0/>


; <Start encoding FStar.Tactics.NamedView.uu___is_Pat_Var>

(declare-fun FStar.Tactics.NamedView.uu___is_Pat_Var (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Pat_Var@tok () Term)

; </end encoding FStar.Tactics.NamedView.uu___is_Pat_Var>


; <Skipped FStar.Tactics.NamedView.uu___is_Pat_Var/>


; <Start encoding FStar.Tactics.NamedView.__proj__Pat_Var__item___0>

(declare-fun Tm_refine_5915aca42c70b204fb8abd23a0546bb3 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Pat_Var__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.NamedView.pattern{Pat_Var? _}   -> FStar.Tactics.NamedView.pattern__Pat_Var__payload
(declare-fun Tm_arrow_18c14393d644dada37b2233d850662eb () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Pat_Var__item___0@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Pat_Var__item___0>


; <Skipped FStar.Tactics.NamedView.__proj__Pat_Var__item___0/>


; <Start encoding FStar.Tactics.NamedView.uu___is_Pat_Dot_Term>

(declare-fun FStar.Tactics.NamedView.uu___is_Pat_Dot_Term (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Pat_Dot_Term@tok () Term)

; </end encoding FStar.Tactics.NamedView.uu___is_Pat_Dot_Term>


; <Skipped FStar.Tactics.NamedView.uu___is_Pat_Dot_Term/>


; <Start encoding FStar.Tactics.NamedView.__proj__Pat_Dot_Term__item___0>

(declare-fun Tm_refine_fd8d0efc3ead3b7a2f2a11433fff8eaa () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Pat_Dot_Term__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.NamedView.pattern{Pat_Dot_Term? _}   -> FStar.Tactics.NamedView.pattern__Pat_Dot_Term__payload
(declare-fun Tm_arrow_d908c4f3d32357c93a0576fc78c7bca2 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Pat_Dot_Term__item___0@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Pat_Dot_Term__item___0>


; <Skipped FStar.Tactics.NamedView.__proj__Pat_Dot_Term__item___0/>


; <Start encoding FStar.Tactics.NamedView.branch>

(declare-fun FStar.Tactics.NamedView.branch () Term)

; </end encoding FStar.Tactics.NamedView.branch>


; <Start encoding FStar.Tactics.NamedView.match_returns_ascription>

(declare-fun FStar.Tactics.NamedView.match_returns_ascription () Term)

; </end encoding FStar.Tactics.NamedView.match_returns_ascription>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.named_term_view () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_Var (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Var_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_Var
(declare-fun FStar.Tactics.NamedView.Tv_Var@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_BVar (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_BVar_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_BVar
(declare-fun FStar.Tactics.NamedView.Tv_BVar@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_FVar (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_FVar_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_FVar
(declare-fun FStar.Tactics.NamedView.Tv_FVar@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_UInst (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_UInst_v (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_UInst_us (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_UInst
(declare-fun FStar.Tactics.NamedView.Tv_UInst@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_App (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_App_hd (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_App_a (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_App
(declare-fun FStar.Tactics.NamedView.Tv_App@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_Abs (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Abs_bv (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Abs_body (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_Abs
(declare-fun FStar.Tactics.NamedView.Tv_Abs@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_Arrow (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Arrow_bv (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Arrow_c (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_Arrow
(declare-fun FStar.Tactics.NamedView.Tv_Arrow@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_Type (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Type__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_Type
(declare-fun FStar.Tactics.NamedView.Tv_Type@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_Refine (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Refine_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Refine_ref (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_Refine
(declare-fun FStar.Tactics.NamedView.Tv_Refine@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_Const (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Const__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_Const
(declare-fun FStar.Tactics.NamedView.Tv_Const@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_Uvar (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Uvar__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Uvar__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_Uvar
(declare-fun FStar.Tactics.NamedView.Tv_Uvar@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_Let (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Let_recf (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Let_attrs (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Let_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Let_def (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Let_body (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_Let
(declare-fun FStar.Tactics.NamedView.Tv_Let@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_Match (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Match_scrutinee (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Match_ret (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_Match_brs (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_Match
(declare-fun FStar.Tactics.NamedView.Tv_Match@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_AscribedT (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_AscribedT_e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_AscribedT_t (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_AscribedT_tac (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_AscribedT_use_eq (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_AscribedT
(declare-fun FStar.Tactics.NamedView.Tv_AscribedT@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_AscribedC (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_AscribedC_e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_AscribedC_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_AscribedC_tac (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Tv_AscribedC_use_eq (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_AscribedC
(declare-fun FStar.Tactics.NamedView.Tv_AscribedC@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_Unknown () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_Unknown
(declare-fun FStar.Tactics.NamedView.Tv_Unknown@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Tv_Unsupp () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_Unsupp
(declare-fun FStar.Tactics.NamedView.Tv_Unsupp@tok () Term)
;;;;;;;;;;;;;;;;v: FStar.Tactics.NamedView.namedv -> FStar.Tactics.NamedView.named_term_view
(declare-fun Tm_arrow_5c1f070e2c3f6aea1615ac72ff92f134 () Term)
;;;;;;;;;;;;;;;;v: FStar.Tactics.NamedView.bv -> FStar.Tactics.NamedView.named_term_view
(declare-fun Tm_arrow_aaa10438e13420dda77aa3ed15727e4f () Term)
;;;;;;;;;;;;;;;;v: FStar.Reflection.Types.fv -> FStar.Tactics.NamedView.named_term_view
(declare-fun Tm_arrow_46145e47222dd906114e356db9d53862 () Term)
;;;;;;;;;;;;;;;;v: FStar.Reflection.Types.fv -> us: FStar.Reflection.V2.Data.universes   -> FStar.Tactics.NamedView.named_term_view
(declare-fun Tm_arrow_4c16c48f036f4c3c701001ff406f8e95 () Term)
;;;;;;;;;;;;;;;;hd: FStar.Tactics.NamedView.term -> a: FStar.Reflection.V2.Data.argv   -> FStar.Tactics.NamedView.named_term_view
(declare-fun Tm_arrow_e4828454ccc348cc07ace7c26abae493 () Term)
;;;;;;;;;;;;;;;;bv: FStar.Tactics.NamedView.binder -> body: FStar.Tactics.NamedView.term   -> FStar.Tactics.NamedView.named_term_view
(declare-fun Tm_arrow_c466bfd390c5c2953a0b9c01aa2c0322 () Term)
;;;;;;;;;;;;;;;;bv: FStar.Tactics.NamedView.binder -> c: FStar.Tactics.NamedView.comp   -> FStar.Tactics.NamedView.named_term_view
(declare-fun Tm_arrow_583298f1189de1bc298fabe31fbced3a () Term)
;;;;;;;;;;;;;;;;_0: FStar.Tactics.NamedView.universe -> FStar.Tactics.NamedView.named_term_view
(declare-fun Tm_arrow_3e6a09cde00868268e5919de8a6657aa () Term)
;;;;;;;;;;;;;;;;b: FStar.Tactics.NamedView.simple_binder -> ref: FStar.Tactics.NamedView.term   -> FStar.Tactics.NamedView.named_term_view
(declare-fun Tm_arrow_6e92ffeaaa5d327976e53a059cd42f75 () Term)
;;;;;;;;;;;;;;;;_0: FStar.Reflection.V2.Data.vconst -> FStar.Tactics.NamedView.named_term_view
(declare-fun Tm_arrow_c81573e77abd7c0af47dc95bb63689ea () Term)
;;;;;;;;;;;;;;;;_0: Prims.nat -> _1: FStar.Reflection.Types.ctx_uvar_and_subst   -> FStar.Tactics.NamedView.named_term_view
(declare-fun Tm_arrow_4d4a94553d1d89892d6de6b8445e4e54 () Term)
;;;;;;;;;;;;;;;;recf: Prims.bool ->     attrs: Prims.list FStar.Tactics.NamedView.term ->     b: FStar.Tactics.NamedView.simple_binder ->     def: FStar.Tactics.NamedView.term ->     body: FStar.Tactics.NamedView.term   -> FStar.Tactics.NamedView.named_term_view
(declare-fun Tm_arrow_08012edb60a091ece3537a1d8f61a364 () Term)
;;;;;;;;;;;;;;;;scrutinee: FStar.Tactics.NamedView.term ->     ret: FStar.Pervasives.Native.option FStar.Tactics.NamedView.match_returns_ascription ->     brs: Prims.list FStar.Tactics.NamedView.branch   -> FStar.Tactics.NamedView.named_term_view
(declare-fun Tm_arrow_439cc7b7d6fca19547b77142f4ef5258 () Term)
;;;;;;;;;;;;;;;;e: FStar.Tactics.NamedView.term ->     t: FStar.Tactics.NamedView.term ->     tac: FStar.Pervasives.Native.option FStar.Tactics.NamedView.term ->     use_eq: Prims.bool   -> FStar.Tactics.NamedView.named_term_view
(declare-fun Tm_arrow_7308c93679c51dd735c2021e0a08790a () Term)
;;;;;;;;;;;;;;;;e: FStar.Tactics.NamedView.term ->     c: FStar.Tactics.NamedView.comp ->     tac: FStar.Pervasives.Native.option FStar.Tactics.NamedView.term ->     use_eq: Prims.bool   -> FStar.Tactics.NamedView.named_term_view
(declare-fun Tm_arrow_8e79e8a538e31266017e62070623d864 () Term)

; <Start encoding FStar.Tactics.NamedView.named_term_view>


; <start constructor FStar.Tactics.NamedView.named_term_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.named_term_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
295)
(= __@x0
FStar.Tactics.NamedView.named_term_view)))

; </end constructor FStar.Tactics.NamedView.named_term_view>


; </end encoding FStar.Tactics.NamedView.named_term_view>


; <Start encoding FStar.Tactics.NamedView.Tv_Var>


; <start constructor FStar.Tactics.NamedView.Tv_Var>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_Var ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
301)
(= __@x0
(FStar.Tactics.NamedView.Tv_Var (FStar.Tactics.NamedView.Tv_Var_v __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_Var>


; </end encoding FStar.Tactics.NamedView.Tv_Var>


; <Start encoding FStar.Tactics.NamedView.Tv_BVar>


; <start constructor FStar.Tactics.NamedView.Tv_BVar>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_BVar ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
306)
(= __@x0
(FStar.Tactics.NamedView.Tv_BVar (FStar.Tactics.NamedView.Tv_BVar_v __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_BVar>


; </end encoding FStar.Tactics.NamedView.Tv_BVar>


; <Start encoding FStar.Tactics.NamedView.Tv_FVar>


; <start constructor FStar.Tactics.NamedView.Tv_FVar>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_FVar ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
311)
(= __@x0
(FStar.Tactics.NamedView.Tv_FVar (FStar.Tactics.NamedView.Tv_FVar_v __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_FVar>


; </end encoding FStar.Tactics.NamedView.Tv_FVar>


; <Start encoding FStar.Tactics.NamedView.Tv_UInst>


; <start constructor FStar.Tactics.NamedView.Tv_UInst>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_UInst ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
316)
(= __@x0
(FStar.Tactics.NamedView.Tv_UInst (FStar.Tactics.NamedView.Tv_UInst_v __@x0)
(FStar.Tactics.NamedView.Tv_UInst_us __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_UInst>


; </end encoding FStar.Tactics.NamedView.Tv_UInst>


; <Start encoding FStar.Tactics.NamedView.Tv_App>


; <start constructor FStar.Tactics.NamedView.Tv_App>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_App ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
321)
(= __@x0
(FStar.Tactics.NamedView.Tv_App (FStar.Tactics.NamedView.Tv_App_hd __@x0)
(FStar.Tactics.NamedView.Tv_App_a __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_App>


; </end encoding FStar.Tactics.NamedView.Tv_App>


; <Start encoding FStar.Tactics.NamedView.Tv_Abs>


; <start constructor FStar.Tactics.NamedView.Tv_Abs>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_Abs ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
326)
(= __@x0
(FStar.Tactics.NamedView.Tv_Abs (FStar.Tactics.NamedView.Tv_Abs_bv __@x0)
(FStar.Tactics.NamedView.Tv_Abs_body __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_Abs>


; </end encoding FStar.Tactics.NamedView.Tv_Abs>


; <Start encoding FStar.Tactics.NamedView.Tv_Arrow>


; <start constructor FStar.Tactics.NamedView.Tv_Arrow>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_Arrow ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
331)
(= __@x0
(FStar.Tactics.NamedView.Tv_Arrow (FStar.Tactics.NamedView.Tv_Arrow_bv __@x0)
(FStar.Tactics.NamedView.Tv_Arrow_c __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_Arrow>


; </end encoding FStar.Tactics.NamedView.Tv_Arrow>


; <Start encoding FStar.Tactics.NamedView.Tv_Type>


; <start constructor FStar.Tactics.NamedView.Tv_Type>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_Type ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
336)
(= __@x0
(FStar.Tactics.NamedView.Tv_Type (FStar.Tactics.NamedView.Tv_Type__0 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_Type>


; </end encoding FStar.Tactics.NamedView.Tv_Type>


; <Start encoding FStar.Tactics.NamedView.Tv_Refine>


; <start constructor FStar.Tactics.NamedView.Tv_Refine>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_Refine ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
341)
(= __@x0
(FStar.Tactics.NamedView.Tv_Refine (FStar.Tactics.NamedView.Tv_Refine_b __@x0)
(FStar.Tactics.NamedView.Tv_Refine_ref __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_Refine>


; </end encoding FStar.Tactics.NamedView.Tv_Refine>


; <Start encoding FStar.Tactics.NamedView.Tv_Const>


; <start constructor FStar.Tactics.NamedView.Tv_Const>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_Const ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
346)
(= __@x0
(FStar.Tactics.NamedView.Tv_Const (FStar.Tactics.NamedView.Tv_Const__0 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_Const>


; </end encoding FStar.Tactics.NamedView.Tv_Const>


; <Start encoding FStar.Tactics.NamedView.Tv_Uvar>


; <start constructor FStar.Tactics.NamedView.Tv_Uvar>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_Uvar ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
351)
(= __@x0
(FStar.Tactics.NamedView.Tv_Uvar (FStar.Tactics.NamedView.Tv_Uvar__0 __@x0)
(FStar.Tactics.NamedView.Tv_Uvar__1 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_Uvar>


; </end encoding FStar.Tactics.NamedView.Tv_Uvar>


; <Start encoding FStar.Tactics.NamedView.Tv_Let>


; <start constructor FStar.Tactics.NamedView.Tv_Let>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_Let ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
356)
(= __@x0
(FStar.Tactics.NamedView.Tv_Let (FStar.Tactics.NamedView.Tv_Let_recf __@x0)
(FStar.Tactics.NamedView.Tv_Let_attrs __@x0)
(FStar.Tactics.NamedView.Tv_Let_b __@x0)
(FStar.Tactics.NamedView.Tv_Let_def __@x0)
(FStar.Tactics.NamedView.Tv_Let_body __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_Let>


; </end encoding FStar.Tactics.NamedView.Tv_Let>


; <Start encoding FStar.Tactics.NamedView.Tv_Match>


; <start constructor FStar.Tactics.NamedView.Tv_Match>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_Match ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
361)
(= __@x0
(FStar.Tactics.NamedView.Tv_Match (FStar.Tactics.NamedView.Tv_Match_scrutinee __@x0)
(FStar.Tactics.NamedView.Tv_Match_ret __@x0)
(FStar.Tactics.NamedView.Tv_Match_brs __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_Match>


; </end encoding FStar.Tactics.NamedView.Tv_Match>


; <Start encoding FStar.Tactics.NamedView.Tv_AscribedT>


; <start constructor FStar.Tactics.NamedView.Tv_AscribedT>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_AscribedT ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
366)
(= __@x0
(FStar.Tactics.NamedView.Tv_AscribedT (FStar.Tactics.NamedView.Tv_AscribedT_e __@x0)
(FStar.Tactics.NamedView.Tv_AscribedT_t __@x0)
(FStar.Tactics.NamedView.Tv_AscribedT_tac __@x0)
(FStar.Tactics.NamedView.Tv_AscribedT_use_eq __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_AscribedT>


; </end encoding FStar.Tactics.NamedView.Tv_AscribedT>


; <Start encoding FStar.Tactics.NamedView.Tv_AscribedC>


; <start constructor FStar.Tactics.NamedView.Tv_AscribedC>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_AscribedC ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
371)
(= __@x0
(FStar.Tactics.NamedView.Tv_AscribedC (FStar.Tactics.NamedView.Tv_AscribedC_e __@x0)
(FStar.Tactics.NamedView.Tv_AscribedC_c __@x0)
(FStar.Tactics.NamedView.Tv_AscribedC_tac __@x0)
(FStar.Tactics.NamedView.Tv_AscribedC_use_eq __@x0)))))

; </end constructor FStar.Tactics.NamedView.Tv_AscribedC>


; </end encoding FStar.Tactics.NamedView.Tv_AscribedC>


; <Start encoding FStar.Tactics.NamedView.Tv_Unknown>


; <start constructor FStar.Tactics.NamedView.Tv_Unknown>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_Unknown ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
376)
(= __@x0
FStar.Tactics.NamedView.Tv_Unknown)))

; </end constructor FStar.Tactics.NamedView.Tv_Unknown>


; </end encoding FStar.Tactics.NamedView.Tv_Unknown>


; <Start encoding FStar.Tactics.NamedView.Tv_Unsupp>


; <start constructor FStar.Tactics.NamedView.Tv_Unsupp>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Tv_Unsupp ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
378)
(= __@x0
FStar.Tactics.NamedView.Tv_Unsupp)))

; </end constructor FStar.Tactics.NamedView.Tv_Unsupp>


; </end encoding FStar.Tactics.NamedView.Tv_Unsupp>


; </end encoding >


; <Start encoding FStar.Tactics.NamedView.uu___is_Tv_Var>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Var (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Tactics.NamedView.named_term_view -> Prims.bool
(declare-fun Tm_arrow_b0134b51f4be4e72310d2f9fb37ce6ad () Term)
(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Var@tok () Term)

; </end encoding FStar.Tactics.NamedView.uu___is_Tv_Var>


; <Skipped FStar.Tactics.NamedView.uu___is_Tv_Var/>


; <Start encoding FStar.Tactics.NamedView.__proj__Tv_Var__item__v>

(declare-fun Tm_refine_87a3dba5453ef74fda9f0336086dad8a () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Var__item__v (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.NamedView.named_term_view{Tv_Var? _} -> FStar.Tactics.NamedView.namedv
(declare-fun Tm_arrow_c9328b6bd1807daa66bd2926d95e76f5 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Var__item__v@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Tv_Var__item__v>


; <Skipped FStar.Tactics.NamedView.__proj__Tv_Var__item__v/>


; <Start encoding FStar.Tactics.NamedView.uu___is_Tv_BVar>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_BVar (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_BVar@tok () Term)

; </end encoding FStar.Tactics.NamedView.uu___is_Tv_BVar>


; <Skipped FStar.Tactics.NamedView.uu___is_Tv_BVar/>


; <Start encoding FStar.Tactics.NamedView.__proj__Tv_BVar__item__v>

(declare-fun Tm_refine_2041770b714b0ea10869e92b575e16fd () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_BVar__item__v (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.NamedView.named_term_view{Tv_BVar? _} -> FStar.Tactics.NamedView.bv
(declare-fun Tm_arrow_c49fc6ef2dccc52996b9034f265f34b8 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_BVar__item__v@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Tv_BVar__item__v>


; <Skipped FStar.Tactics.NamedView.__proj__Tv_BVar__item__v/>


; <Start encoding FStar.Tactics.NamedView.uu___is_Tv_FVar>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_FVar (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_FVar@tok () Term)

; </end encoding FStar.Tactics.NamedView.uu___is_Tv_FVar>


; <Skipped FStar.Tactics.NamedView.uu___is_Tv_FVar/>


; <Start encoding FStar.Tactics.NamedView.__proj__Tv_FVar__item__v>

(declare-fun Tm_refine_7aae385a6086c7833dd8519240cd12b3 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_FVar__item__v (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.NamedView.named_term_view{Tv_FVar? _} -> FStar.Reflection.Types.fv
(declare-fun Tm_arrow_f629a2df93743a139639452bf151b6c4 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_FVar__item__v@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Tv_FVar__item__v>


; <Skipped FStar.Tactics.NamedView.__proj__Tv_FVar__item__v/>


; <Start encoding FStar.Tactics.NamedView.uu___is_Tv_UInst>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_UInst (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_UInst@tok () Term)

; </end encoding FStar.Tactics.NamedView.uu___is_Tv_UInst>


; <Skipped FStar.Tactics.NamedView.uu___is_Tv_UInst/>


; <Start encoding FStar.Tactics.NamedView.__proj__Tv_UInst__item__v>

(declare-fun Tm_refine_655439b8882f5161418b9e9a204ac9a0 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_UInst__item__v (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.NamedView.named_term_view{Tv_UInst? _} -> FStar.Reflection.Types.fv
(declare-fun Tm_arrow_3fecdedfb0d94c1a850f76c85b4d96ee () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_UInst__item__v@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Tv_UInst__item__v>


; <Skipped FStar.Tactics.NamedView.__proj__Tv_UInst__item__v/>


; <Start encoding FStar.Tactics.NamedView.__proj__Tv_UInst__item__us>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_UInst__item__us (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.NamedView.named_term_view{Tv_UInst? _}   -> FStar.Reflection.V2.Data.universes
(declare-fun Tm_arrow_67a58659afbd740ecaa4bb3e5096905b () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_UInst__item__us@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Tv_UInst__item__us>


; <Skipped FStar.Tactics.NamedView.__proj__Tv_UInst__item__us/>


; <Start encoding FStar.Tactics.NamedView.uu___is_Tv_App>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_App (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_App@tok () Term)

; </end encoding FStar.Tactics.NamedView.uu___is_Tv_App>


; <Skipped FStar.Tactics.NamedView.uu___is_Tv_App/>


; <Start encoding FStar.Tactics.NamedView.__proj__Tv_App__item__hd>

(declare-fun Tm_refine_cffc8fe5fb5b8b45155c826839a0836a () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_App__item__hd (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.NamedView.named_term_view{Tv_App? _} -> FStar.Tactics.NamedView.term
(declare-fun Tm_arrow_8846e221b3719edc894c953a1ba8378a () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_App__item__hd@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Tv_App__item__hd>


; <Skipped FStar.Tactics.NamedView.__proj__Tv_App__item__hd/>


; <Start encoding FStar.Tactics.NamedView.__proj__Tv_App__item__a>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_App__item__a (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.NamedView.named_term_view{Tv_App? _} -> FStar.Reflection.V2.Data.argv
(declare-fun Tm_arrow_a887f0600dde702c978f74410b6c33a2 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_App__item__a@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Tv_App__item__a>


; <Skipped FStar.Tactics.NamedView.__proj__Tv_App__item__a/>


; <Start encoding FStar.Tactics.NamedView.uu___is_Tv_Abs>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Abs (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Abs@tok () Term)

; </end encoding FStar.Tactics.NamedView.uu___is_Tv_Abs>


; <Skipped FStar.Tactics.NamedView.uu___is_Tv_Abs/>


; <Start encoding FStar.Tactics.NamedView.__proj__Tv_Abs__item__bv>

(declare-fun Tm_refine_5d3cef9f2193748f571d405779044e57 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Abs__item__bv (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.NamedView.named_term_view{Tv_Abs? _} -> FStar.Tactics.NamedView.binder
(declare-fun Tm_arrow_533a28ddfb46ecc82a01bbe48c31bd95 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Abs__item__bv@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Tv_Abs__item__bv>


; <Skipped FStar.Tactics.NamedView.__proj__Tv_Abs__item__bv/>


; <Start encoding FStar.Tactics.NamedView.__proj__Tv_Abs__item__body>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_Abs__item__body (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.NamedView.named_term_view{Tv_Abs? _} -> FStar.Tactics.NamedView.term
(declare-fun Tm_arrow_8ac939080effe0b960302d7d1c702fad () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Abs__item__body@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Tv_Abs__item__body>


; <Skipped FStar.Tactics.NamedView.__proj__Tv_Abs__item__body/>


; <Start encoding FStar.Tactics.NamedView.uu___is_Tv_Arrow>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Arrow (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Arrow@tok () Term)

; </end encoding FStar.Tactics.NamedView.uu___is_Tv_Arrow>


; <Skipped FStar.Tactics.NamedView.uu___is_Tv_Arrow/>


; <Start encoding FStar.Tactics.NamedView.__proj__Tv_Arrow__item__bv>

(declare-fun Tm_refine_f2276b7d8e23c26ee3ba9a535c3c060a () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Arrow__item__bv (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.NamedView.named_term_view{Tv_Arrow? _} -> FStar.Tactics.NamedView.binder
(declare-fun Tm_arrow_84eeab64ef961ed4b09155732e1a0f44 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Arrow__item__bv@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Tv_Arrow__item__bv>


; <Skipped FStar.Tactics.NamedView.__proj__Tv_Arrow__item__bv/>


; <Start encoding FStar.Tactics.NamedView.__proj__Tv_Arrow__item__c>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_Arrow__item__c (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.NamedView.named_term_view{Tv_Arrow? _} -> FStar.Tactics.NamedView.comp
(declare-fun Tm_arrow_eda0809078946fc4fc204af5aa4c5b64 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Arrow__item__c@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Tv_Arrow__item__c>


; <Skipped FStar.Tactics.NamedView.__proj__Tv_Arrow__item__c/>


; <Start encoding FStar.Tactics.NamedView.uu___is_Tv_Type>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Type (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Type@tok () Term)

; </end encoding FStar.Tactics.NamedView.uu___is_Tv_Type>


; <Skipped FStar.Tactics.NamedView.uu___is_Tv_Type/>


; <Start encoding FStar.Tactics.NamedView.__proj__Tv_Type__item___0>

(declare-fun Tm_refine_b305bae344c1a3fca91e8645cdcd9dd7 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Type__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.NamedView.named_term_view{Tv_Type? _}   -> FStar.Tactics.NamedView.universe
(declare-fun Tm_arrow_583e9c9e3efeee738c16adf7ba043152 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Type__item___0@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Tv_Type__item___0>


; <Skipped FStar.Tactics.NamedView.__proj__Tv_Type__item___0/>


; <Start encoding FStar.Tactics.NamedView.uu___is_Tv_Refine>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Refine (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Refine@tok () Term)

; </end encoding FStar.Tactics.NamedView.uu___is_Tv_Refine>


; <Skipped FStar.Tactics.NamedView.uu___is_Tv_Refine/>


; <Start encoding FStar.Tactics.NamedView.__proj__Tv_Refine__item__b>

(declare-fun Tm_refine_1c7ad8d12925c022661dbfe6bb0e51a3 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Refine__item__b (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.NamedView.named_term_view{Tv_Refine? _}   -> FStar.Tactics.NamedView.simple_binder
(declare-fun Tm_arrow_659b4038825ae53b9e315e2e0a5a9de5 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Refine__item__b@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Tv_Refine__item__b>


; <Skipped FStar.Tactics.NamedView.__proj__Tv_Refine__item__b/>


; <Start encoding FStar.Tactics.NamedView.__proj__Tv_Refine__item__ref>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_Refine__item__ref (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.NamedView.named_term_view{Tv_Refine? _} -> FStar.Tactics.NamedView.term
(declare-fun Tm_arrow_0816d3b11d85c3f2303944343eb3e1fe () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Refine__item__ref@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Tv_Refine__item__ref>


; <Skipped FStar.Tactics.NamedView.__proj__Tv_Refine__item__ref/>


; <Start encoding FStar.Tactics.NamedView.uu___is_Tv_Const>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Const (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Const@tok () Term)

; </end encoding FStar.Tactics.NamedView.uu___is_Tv_Const>


; <Skipped FStar.Tactics.NamedView.uu___is_Tv_Const/>


; <Start encoding FStar.Tactics.NamedView.__proj__Tv_Const__item___0>

(declare-fun Tm_refine_e43528237c88eee4c4a7209fbfece30a () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Const__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.NamedView.named_term_view{Tv_Const? _}   -> FStar.Reflection.V2.Data.vconst
(declare-fun Tm_arrow_8cd222e2c3b85970f5a9e4727f3d2ca7 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Const__item___0@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Tv_Const__item___0>


; <Skipped FStar.Tactics.NamedView.__proj__Tv_Const__item___0/>


; <Start encoding FStar.Tactics.NamedView.uu___is_Tv_Uvar>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Uvar (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Uvar@tok () Term)

; </end encoding FStar.Tactics.NamedView.uu___is_Tv_Uvar>


; <Skipped FStar.Tactics.NamedView.uu___is_Tv_Uvar/>


; <Start encoding FStar.Tactics.NamedView.__proj__Tv_Uvar__item___0>

(declare-fun Tm_refine_2dfafc08974a66f04ebf362802f0a508 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Uvar__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.NamedView.named_term_view{Tv_Uvar? _} -> Prims.nat
(declare-fun Tm_arrow_ec7bb113cc94ec4876ca7ad0476bef43 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Uvar__item___0@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Tv_Uvar__item___0>


; <Skipped FStar.Tactics.NamedView.__proj__Tv_Uvar__item___0/>


; <Start encoding FStar.Tactics.NamedView.__proj__Tv_Uvar__item___1>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_Uvar__item___1 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.NamedView.named_term_view{Tv_Uvar? _}   -> FStar.Reflection.Types.ctx_uvar_and_subst
(declare-fun Tm_arrow_94723759b95dba91106189145c018981 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Uvar__item___1@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Tv_Uvar__item___1>


; <Skipped FStar.Tactics.NamedView.__proj__Tv_Uvar__item___1/>


; <Start encoding FStar.Tactics.NamedView.uu___is_Tv_Let>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Let (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Let@tok () Term)

; </end encoding FStar.Tactics.NamedView.uu___is_Tv_Let>


; <Skipped FStar.Tactics.NamedView.uu___is_Tv_Let/>


; <Start encoding FStar.Tactics.NamedView.__proj__Tv_Let__item__recf>

(declare-fun Tm_refine_580a83cfd5a14ce77506ef9a20b92d03 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Let__item__recf (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.NamedView.named_term_view{Tv_Let? _} -> Prims.bool
(declare-fun Tm_arrow_a2937e85ca73965969d4411bca79b361 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Let__item__recf@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Tv_Let__item__recf>


; <Skipped FStar.Tactics.NamedView.__proj__Tv_Let__item__recf/>


; <Start encoding FStar.Tactics.NamedView.__proj__Tv_Let__item__attrs>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_Let__item__attrs (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.NamedView.named_term_view{Tv_Let? _}   -> Prims.list FStar.Tactics.NamedView.term
(declare-fun Tm_arrow_d2c895353b6d5a4384a49402bb656311 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Let__item__attrs@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Tv_Let__item__attrs>


; <Skipped FStar.Tactics.NamedView.__proj__Tv_Let__item__attrs/>


; <Start encoding FStar.Tactics.NamedView.__proj__Tv_Let__item__b>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_Let__item__b (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.NamedView.named_term_view{Tv_Let? _}   -> FStar.Tactics.NamedView.simple_binder
(declare-fun Tm_arrow_7afa8f78666d0cdafdd5b868cc36fff9 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Let__item__b@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Tv_Let__item__b>


; <Skipped FStar.Tactics.NamedView.__proj__Tv_Let__item__b/>


; <Start encoding FStar.Tactics.NamedView.__proj__Tv_Let__item__def>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_Let__item__def (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.NamedView.named_term_view{Tv_Let? _} -> FStar.Tactics.NamedView.term
(declare-fun Tm_arrow_27b154f2dcda99708e6d9e52ad3a1e5d () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Let__item__def@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Tv_Let__item__def>


; <Skipped FStar.Tactics.NamedView.__proj__Tv_Let__item__def/>


; <Start encoding FStar.Tactics.NamedView.__proj__Tv_Let__item__body>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_Let__item__body (Term) Term)


(declare-fun FStar.Tactics.NamedView.__proj__Tv_Let__item__body@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Tv_Let__item__body>


; <Skipped FStar.Tactics.NamedView.__proj__Tv_Let__item__body/>


; <Start encoding FStar.Tactics.NamedView.uu___is_Tv_Match>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Match (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Match@tok () Term)

; </end encoding FStar.Tactics.NamedView.uu___is_Tv_Match>


; <Skipped FStar.Tactics.NamedView.uu___is_Tv_Match/>


; <Start encoding FStar.Tactics.NamedView.__proj__Tv_Match__item__scrutinee>

(declare-fun Tm_refine_0c31d3f32afa528dfef0b4e53409fe9f () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Match__item__scrutinee (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.NamedView.named_term_view{Tv_Match? _} -> FStar.Tactics.NamedView.term
(declare-fun Tm_arrow_eff0944c33909c5240469d840f765450 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Match__item__scrutinee@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Tv_Match__item__scrutinee>


; <Skipped FStar.Tactics.NamedView.__proj__Tv_Match__item__scrutinee/>


; <Start encoding FStar.Tactics.NamedView.__proj__Tv_Match__item__ret>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_Match__item__ret (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.NamedView.named_term_view{Tv_Match? _}   -> FStar.Pervasives.Native.option FStar.Tactics.NamedView.match_returns_ascription
(declare-fun Tm_arrow_a38a29fac0905320916f043dc1e2e402 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Match__item__ret@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Tv_Match__item__ret>


; <Skipped FStar.Tactics.NamedView.__proj__Tv_Match__item__ret/>


; <Start encoding FStar.Tactics.NamedView.__proj__Tv_Match__item__brs>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_Match__item__brs (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.NamedView.named_term_view{Tv_Match? _}   -> Prims.list FStar.Tactics.NamedView.branch
(declare-fun Tm_arrow_9753b34ee743aec7dee6ff8aad4e29c8 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_Match__item__brs@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Tv_Match__item__brs>


; <Skipped FStar.Tactics.NamedView.__proj__Tv_Match__item__brs/>


; <Start encoding FStar.Tactics.NamedView.uu___is_Tv_AscribedT>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_AscribedT (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_AscribedT@tok () Term)

; </end encoding FStar.Tactics.NamedView.uu___is_Tv_AscribedT>


; <Skipped FStar.Tactics.NamedView.uu___is_Tv_AscribedT/>


; <Start encoding FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__e>

(declare-fun Tm_refine_4fe825d3c6fe2aa01d40d69b72618cd9 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__e (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.NamedView.named_term_view{Tv_AscribedT? _}   -> FStar.Tactics.NamedView.term
(declare-fun Tm_arrow_3a2e0dc20e001c8cef41ab602e078f6e () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__e@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__e>


; <Skipped FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__e/>


; <Start encoding FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__t>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__t (Term) Term)


(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__t@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__t>


; <Skipped FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__t/>


; <Start encoding FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__tac>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__tac (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.NamedView.named_term_view{Tv_AscribedT? _}   -> FStar.Pervasives.Native.option FStar.Tactics.NamedView.term
(declare-fun Tm_arrow_64636f29beeaef053738d09e320bbe94 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__tac@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__tac>


; <Skipped FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__tac/>


; <Start encoding FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__use_eq>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__use_eq (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.NamedView.named_term_view{Tv_AscribedT? _} -> Prims.bool
(declare-fun Tm_arrow_eb184a2f728421d0662c81a49d628354 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__use_eq@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__use_eq>


; <Skipped FStar.Tactics.NamedView.__proj__Tv_AscribedT__item__use_eq/>


; <Start encoding FStar.Tactics.NamedView.uu___is_Tv_AscribedC>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_AscribedC (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_AscribedC@tok () Term)

; </end encoding FStar.Tactics.NamedView.uu___is_Tv_AscribedC>


; <Skipped FStar.Tactics.NamedView.uu___is_Tv_AscribedC/>


; <Start encoding FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__e>

(declare-fun Tm_refine_188807386559837eacdc72e583387de0 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__e (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.NamedView.named_term_view{Tv_AscribedC? _}   -> FStar.Tactics.NamedView.term
(declare-fun Tm_arrow_b08d9f9ed5fc9183d44b539596c21c5c () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__e@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__e>


; <Skipped FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__e/>


; <Start encoding FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__c>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__c (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.NamedView.named_term_view{Tv_AscribedC? _}   -> FStar.Tactics.NamedView.comp
(declare-fun Tm_arrow_61b8c61abe9f4144303ab93b91d20fbc () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__c@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__c>


; <Skipped FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__c/>


; <Start encoding FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__tac>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__tac (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.NamedView.named_term_view{Tv_AscribedC? _}   -> FStar.Pervasives.Native.option FStar.Tactics.NamedView.term
(declare-fun Tm_arrow_b8c3ff01cef6a61dc79dd2ae7a29d01e () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__tac@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__tac>


; <Skipped FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__tac/>


; <Start encoding FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__use_eq>


(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__use_eq (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.NamedView.named_term_view{Tv_AscribedC? _} -> Prims.bool
(declare-fun Tm_arrow_f90859595913cf4f3de92a943740cd55 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__use_eq@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__use_eq>


; <Skipped FStar.Tactics.NamedView.__proj__Tv_AscribedC__item__use_eq/>


; <Start encoding FStar.Tactics.NamedView.uu___is_Tv_Unknown>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Unknown (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Unknown@tok () Term)

; </end encoding FStar.Tactics.NamedView.uu___is_Tv_Unknown>


; <Skipped FStar.Tactics.NamedView.uu___is_Tv_Unknown/>


; <Start encoding FStar.Tactics.NamedView.uu___is_Tv_Unsupp>

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Unsupp (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Tv_Unsupp@tok () Term)

; </end encoding FStar.Tactics.NamedView.uu___is_Tv_Unsupp>


; <Skipped FStar.Tactics.NamedView.uu___is_Tv_Unsupp/>


; <Start encoding FStar.Tactics.NamedView.notAscription>

(declare-fun FStar.Tactics.NamedView.notAscription (Term) Term)

(declare-fun FStar.Tactics.NamedView.notAscription@tok () Term)

; </end encoding FStar.Tactics.NamedView.notAscription>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.letbinding () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Mkletbinding (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkletbinding_lb_fv (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkletbinding_lb_us (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkletbinding_lb_typ (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mkletbinding_lb_def (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mkletbinding
(declare-fun FStar.Tactics.NamedView.Mkletbinding@tok () Term)
;;;;;;;;;;;;;;;;lb_fv: FStar.Reflection.Types.fv ->     lb_us: Prims.list FStar.Tactics.NamedView.univ_name ->     lb_typ: FStar.Reflection.Types.typ ->     lb_def: FStar.Tactics.NamedView.term   -> FStar.Tactics.NamedView.letbinding
(declare-fun Tm_arrow_c729d057500e7d1bd808efb0e616d246 () Term)

; <Start encoding FStar.Tactics.NamedView.letbinding>


; <start constructor FStar.Tactics.NamedView.letbinding>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.letbinding ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
547)
(= __@x0
FStar.Tactics.NamedView.letbinding)))

; </end constructor FStar.Tactics.NamedView.letbinding>


; </end encoding FStar.Tactics.NamedView.letbinding>


; <Start encoding FStar.Tactics.NamedView.Mkletbinding>


; <start constructor FStar.Tactics.NamedView.Mkletbinding>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Mkletbinding ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
553)
(= __@x0
(FStar.Tactics.NamedView.Mkletbinding (FStar.Tactics.NamedView.Mkletbinding_lb_fv __@x0)
(FStar.Tactics.NamedView.Mkletbinding_lb_us __@x0)
(FStar.Tactics.NamedView.Mkletbinding_lb_typ __@x0)
(FStar.Tactics.NamedView.Mkletbinding_lb_def __@x0)))))

; </end constructor FStar.Tactics.NamedView.Mkletbinding>


; </end encoding FStar.Tactics.NamedView.Mkletbinding>


; </end encoding >


; <Start encoding FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_fv>

(declare-fun FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_fv (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Tactics.NamedView.letbinding -> FStar.Reflection.Types.fv
(declare-fun Tm_arrow_5bdc59338f862b4411f476d65de9d709 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_fv@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_fv>


; <Skipped FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_fv/>


; <Start encoding FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_us>

(declare-fun FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_us (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Tactics.NamedView.letbinding -> Prims.list FStar.Tactics.NamedView.univ_name
(declare-fun Tm_arrow_e979dfb8134fb1ac00f85ff4b40e99a6 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_us@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_us>


; <Skipped FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_us/>


; <Start encoding FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_typ>

(declare-fun FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_typ (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Tactics.NamedView.letbinding -> FStar.Reflection.Types.typ
(declare-fun Tm_arrow_7a27146717215961fd30d97fe6d8b93d () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_typ@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_typ>


; <Skipped FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_typ/>


; <Start encoding FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_def>

(declare-fun FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_def (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Tactics.NamedView.letbinding -> FStar.Tactics.NamedView.term
(declare-fun Tm_arrow_2cbd0d813eb17cbf0b91057a32b49d89 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_def@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_def>


; <Skipped FStar.Tactics.NamedView.__proj__Mkletbinding__item__lb_def/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.named_sigelt_view () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload_isrec (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload_lbs (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mknamed_sigelt_view__Sg_Let__payload
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_nm (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_univs (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_params (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_typ (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_ctors (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mknamed_sigelt_view__Sg_Inductive__payload
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload_nm (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload_univs (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload_typ (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mknamed_sigelt_view__Sg_Val__payload
(declare-fun FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Sg_Let (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Sg_Let__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Sg_Let
(declare-fun FStar.Tactics.NamedView.Sg_Let@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Sg_Inductive (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Sg_Inductive__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Sg_Inductive
(declare-fun FStar.Tactics.NamedView.Sg_Inductive@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Sg_Val (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.NamedView.Sg_Val__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Sg_Val
(declare-fun FStar.Tactics.NamedView.Sg_Val@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.NamedView.Unk () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Unk
(declare-fun FStar.Tactics.NamedView.Unk@tok () Term)
;;;;;;;;;;;;;;;;isrec: Prims.bool -> lbs: Prims.list FStar.Tactics.NamedView.letbinding   -> FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload
(declare-fun Tm_arrow_392585e47d2e2fac4c96513a951b1fc4 () Term)
;;;;;;;;;;;;;;;;nm: FStar.Reflection.Types.name ->     univs: Prims.list FStar.Tactics.NamedView.univ_name ->     params: FStar.Tactics.NamedView.binders ->     typ: FStar.Reflection.Types.typ ->     ctors: Prims.list FStar.Reflection.V2.Data.ctor   -> FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload
(declare-fun Tm_arrow_df7680727b28d9283d5a03568292b0ae () Term)
;;;;;;;;;;;;;;;;nm: FStar.Reflection.Types.name ->     univs: Prims.list FStar.Tactics.NamedView.univ_name ->     typ: FStar.Reflection.Types.typ   -> FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload
(declare-fun Tm_arrow_cdcd0bf3a8b6676b9c00ce74aeb461b4 () Term)
;;;;;;;;;;;;;;;;_0: FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload   -> FStar.Tactics.NamedView.named_sigelt_view
(declare-fun Tm_arrow_536bc480bd335431d8cc6beac43db86f () Term)
;;;;;;;;;;;;;;;;_0: FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload   -> FStar.Tactics.NamedView.named_sigelt_view
(declare-fun Tm_arrow_9b69c65ad3324d98a697d3b15b2aa92a () Term)
;;;;;;;;;;;;;;;;_0: FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload   -> FStar.Tactics.NamedView.named_sigelt_view
(declare-fun Tm_arrow_2be07bfe3cf492d548ee516e9402e789 () Term)

; <Start encoding FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload>


; <start constructor FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
565)
(= __@x0
FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload)))

; </end constructor FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload>


; </end encoding FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload>


; <Start encoding FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload>


; <start constructor FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
570)
(= __@x0
FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload)))

; </end constructor FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload>


; </end encoding FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload>


; <Start encoding FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload>


; <start constructor FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
575)
(= __@x0
FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload)))

; </end constructor FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload>


; </end encoding FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload>


; <Start encoding FStar.Tactics.NamedView.named_sigelt_view>


; <start constructor FStar.Tactics.NamedView.named_sigelt_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.named_sigelt_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
580)
(= __@x0
FStar.Tactics.NamedView.named_sigelt_view)))

; </end constructor FStar.Tactics.NamedView.named_sigelt_view>


; </end encoding FStar.Tactics.NamedView.named_sigelt_view>


; <Start encoding FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload>


; <start constructor FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
586)
(= __@x0
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload (FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload_isrec __@x0)
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload_lbs __@x0)))))

; </end constructor FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload>


; </end encoding FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Let__payload>


; <Start encoding FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload>


; <start constructor FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
591)
(= __@x0
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload (FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_nm __@x0)
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_univs __@x0)
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_params __@x0)
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_typ __@x0)
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload_ctors __@x0)))))

; </end constructor FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload>


; </end encoding FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Inductive__payload>


; <Start encoding FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload>


; <start constructor FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
596)
(= __@x0
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload (FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload_nm __@x0)
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload_univs __@x0)
(FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload_typ __@x0)))))

; </end constructor FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload>


; </end encoding FStar.Tactics.NamedView.Mknamed_sigelt_view__Sg_Val__payload>


; <Start encoding FStar.Tactics.NamedView.Sg_Let>


; <start constructor FStar.Tactics.NamedView.Sg_Let>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Sg_Let ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
601)
(= __@x0
(FStar.Tactics.NamedView.Sg_Let (FStar.Tactics.NamedView.Sg_Let__0 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Sg_Let>


; </end encoding FStar.Tactics.NamedView.Sg_Let>


; <Start encoding FStar.Tactics.NamedView.Sg_Inductive>


; <start constructor FStar.Tactics.NamedView.Sg_Inductive>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Sg_Inductive ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
606)
(= __@x0
(FStar.Tactics.NamedView.Sg_Inductive (FStar.Tactics.NamedView.Sg_Inductive__0 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Sg_Inductive>


; </end encoding FStar.Tactics.NamedView.Sg_Inductive>


; <Start encoding FStar.Tactics.NamedView.Sg_Val>


; <start constructor FStar.Tactics.NamedView.Sg_Val>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Sg_Val ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
611)
(= __@x0
(FStar.Tactics.NamedView.Sg_Val (FStar.Tactics.NamedView.Sg_Val__0 __@x0)))))

; </end constructor FStar.Tactics.NamedView.Sg_Val>


; </end encoding FStar.Tactics.NamedView.Sg_Val>


; <Start encoding FStar.Tactics.NamedView.Unk>


; <start constructor FStar.Tactics.NamedView.Unk>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.NamedView.Unk ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
616)
(= __@x0
FStar.Tactics.NamedView.Unk)))

; </end constructor FStar.Tactics.NamedView.Unk>


; </end encoding FStar.Tactics.NamedView.Unk>


; </end encoding >


; <Start encoding FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Let__payload__item__isrec>

(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Let__payload__item__isrec (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload -> Prims.bool
(declare-fun Tm_arrow_aaff68d57b0875330c75bc953f316682 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Let__payload__item__isrec@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Let__payload__item__isrec>


; <Skipped FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Let__payload__item__isrec/>


; <Start encoding FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Let__payload__item__lbs>

(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Let__payload__item__lbs (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload   -> Prims.list FStar.Tactics.NamedView.letbinding
(declare-fun Tm_arrow_53770d7a51f86c13cc17bc98fce36699 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Let__payload__item__lbs@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Let__payload__item__lbs>


; <Skipped FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Let__payload__item__lbs/>


; <Start encoding FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__nm>

(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__nm (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload   -> FStar.Reflection.Types.name
(declare-fun Tm_arrow_27bc5cba3921ce49766914aecd7fe76d () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__nm@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__nm>


; <Skipped FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__nm/>


; <Start encoding FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__univs>

(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__univs (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload   -> Prims.list FStar.Tactics.NamedView.univ_name
(declare-fun Tm_arrow_cfd13254a7ba2e69c5914b2284de05ab () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__univs@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__univs>


; <Skipped FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__univs/>


; <Start encoding FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__params>

(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__params (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload   -> FStar.Tactics.NamedView.binders
(declare-fun Tm_arrow_4503754e3330e24cfe44afc98a619ca0 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__params@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__params>


; <Skipped FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__params/>


; <Start encoding FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__typ>

(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__typ (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload   -> FStar.Reflection.Types.typ
(declare-fun Tm_arrow_f48acb8700076ba398df112626fff8e3 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__typ@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__typ>


; <Skipped FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__typ/>


; <Start encoding FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__ctors>

(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__ctors (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload   -> Prims.list FStar.Reflection.V2.Data.ctor
(declare-fun Tm_arrow_3cfd9c153e9109db00da7b635fc2aecc () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__ctors@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__ctors>


; <Skipped FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Inductive__payload__item__ctors/>


; <Start encoding FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Val__payload__item__nm>

(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Val__payload__item__nm (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload -> FStar.Reflection.Types.name
(declare-fun Tm_arrow_aaf2e8c7d9fba5fe3b01a5997e6f1592 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Val__payload__item__nm@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Val__payload__item__nm>


; <Skipped FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Val__payload__item__nm/>


; <Start encoding FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Val__payload__item__univs>

(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Val__payload__item__univs (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload   -> Prims.list FStar.Tactics.NamedView.univ_name
(declare-fun Tm_arrow_a1246963bd81037b71d15767330931e8 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Val__payload__item__univs@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Val__payload__item__univs>


; <Skipped FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Val__payload__item__univs/>


; <Start encoding FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Val__payload__item__typ>

(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Val__payload__item__typ (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload -> FStar.Reflection.Types.typ
(declare-fun Tm_arrow_01e29270423aa5852c14e400e618f25f () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Val__payload__item__typ@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Val__payload__item__typ>


; <Skipped FStar.Tactics.NamedView.__proj__Mknamed_sigelt_view__Sg_Val__payload__item__typ/>


; <Start encoding FStar.Tactics.NamedView.uu___is_Sg_Let>

(declare-fun FStar.Tactics.NamedView.uu___is_Sg_Let (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Tactics.NamedView.named_sigelt_view -> Prims.bool
(declare-fun Tm_arrow_2c9ec09a25324d0dfcb868a9cadd041c () Term)
(declare-fun FStar.Tactics.NamedView.uu___is_Sg_Let@tok () Term)

; </end encoding FStar.Tactics.NamedView.uu___is_Sg_Let>


; <Skipped FStar.Tactics.NamedView.uu___is_Sg_Let/>


; <Start encoding FStar.Tactics.NamedView.__proj__Sg_Let__item___0>

(declare-fun Tm_refine_0c417824af864c5dfeb7045b84af008c () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Sg_Let__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.NamedView.named_sigelt_view{Sg_Let? _}   -> FStar.Tactics.NamedView.named_sigelt_view__Sg_Let__payload
(declare-fun Tm_arrow_626926c71a57535b0a54f997204b535a () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Sg_Let__item___0@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Sg_Let__item___0>


; <Skipped FStar.Tactics.NamedView.__proj__Sg_Let__item___0/>


; <Start encoding FStar.Tactics.NamedView.uu___is_Sg_Inductive>

(declare-fun FStar.Tactics.NamedView.uu___is_Sg_Inductive (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Sg_Inductive@tok () Term)

; </end encoding FStar.Tactics.NamedView.uu___is_Sg_Inductive>


; <Skipped FStar.Tactics.NamedView.uu___is_Sg_Inductive/>


; <Start encoding FStar.Tactics.NamedView.__proj__Sg_Inductive__item___0>

(declare-fun Tm_refine_452c9c8e2825a8035099cf4978a670c1 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Sg_Inductive__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.NamedView.named_sigelt_view{Sg_Inductive? _}   -> FStar.Tactics.NamedView.named_sigelt_view__Sg_Inductive__payload
(declare-fun Tm_arrow_2ba29f7110aa05972617995199b050f8 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Sg_Inductive__item___0@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Sg_Inductive__item___0>


; <Skipped FStar.Tactics.NamedView.__proj__Sg_Inductive__item___0/>


; <Start encoding FStar.Tactics.NamedView.uu___is_Sg_Val>

(declare-fun FStar.Tactics.NamedView.uu___is_Sg_Val (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Sg_Val@tok () Term)

; </end encoding FStar.Tactics.NamedView.uu___is_Sg_Val>


; <Skipped FStar.Tactics.NamedView.uu___is_Sg_Val/>


; <Start encoding FStar.Tactics.NamedView.__proj__Sg_Val__item___0>

(declare-fun Tm_refine_ca9b00c9dce34c559545c63ba449a355 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Sg_Val__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Tactics.NamedView.named_sigelt_view{Sg_Val? _}   -> FStar.Tactics.NamedView.named_sigelt_view__Sg_Val__payload
(declare-fun Tm_arrow_815a38312c4a45af3e2d72ab74e7bc06 () Term)
(declare-fun FStar.Tactics.NamedView.__proj__Sg_Val__item___0@tok () Term)

; </end encoding FStar.Tactics.NamedView.__proj__Sg_Val__item___0>


; <Skipped FStar.Tactics.NamedView.__proj__Sg_Val__item___0/>


; <Start encoding FStar.Tactics.NamedView.uu___is_Unk>

(declare-fun FStar.Tactics.NamedView.uu___is_Unk (Term) Term)

(declare-fun FStar.Tactics.NamedView.uu___is_Unk@tok () Term)

; </end encoding FStar.Tactics.NamedView.uu___is_Unk>


; <Skipped FStar.Tactics.NamedView.uu___is_Unk/>


; <Start encoding FStar.Tactics.NamedView.binder_to_binding>

(declare-fun FStar.Tactics.NamedView.binder_to_binding (Term) Term)
;;;;;;;;;;;;;;;;b: FStar.Tactics.NamedView.binder -> FStar.Tactics.NamedView.binding
(declare-fun Tm_arrow_5774b4e874c675b6315c84fcfcbdc28d () Term)
(declare-fun FStar.Tactics.NamedView.binder_to_binding@tok () Term)

; </end encoding FStar.Tactics.NamedView.binder_to_binding>


; <Start encoding FStar.Tactics.NamedView.binding_to_binder>

(declare-fun FStar.Tactics.NamedView.binding_to_binder (Term) Term)
;;;;;;;;;;;;;;;;bnd: FStar.Tactics.NamedView.binding -> FStar.Tactics.NamedView.binder
(declare-fun Tm_arrow_2aae07af48e630a36a74010e928b207c () Term)
(declare-fun FStar.Tactics.NamedView.binding_to_binder@tok () Term)

; </end encoding FStar.Tactics.NamedView.binding_to_binder>


; <Start encoding FStar.Tactics.NamedView.namedv_to_binder>

(declare-fun FStar.Tactics.NamedView.namedv_to_binder (Term Term) Term)
;;;;;;;;;;;;;;;;v: FStar.Tactics.NamedView.namedv -> sort: FStar.Tactics.NamedView.term   -> FStar.Tactics.NamedView.binder
(declare-fun Tm_arrow_81c2241d339a64fbc6ee0b791881f7cf () Term)
(declare-fun FStar.Tactics.NamedView.namedv_to_binder@tok () Term)

; </end encoding FStar.Tactics.NamedView.namedv_to_binder>


; <Start encoding FStar.Tactics.NamedView.inspect_universe>

(declare-fun FStar.Tactics.NamedView.inspect_universe (Term) Term)

(declare-fun FStar.Tactics.NamedView.inspect_universe@tok () Term)

; </end encoding FStar.Tactics.NamedView.inspect_universe>


; <Start encoding FStar.Tactics.NamedView.pack_universe>

(declare-fun FStar.Tactics.NamedView.pack_universe (Term) Term)
;;;;;;;;;;;;;;;;uv: FStar.Tactics.NamedView.named_universe_view -> FStar.Tactics.NamedView.universe
(declare-fun Tm_arrow_236bceac04b4b849e9b798ec7570352f () Term)
(declare-fun FStar.Tactics.NamedView.pack_universe@tok () Term)

; </end encoding FStar.Tactics.NamedView.pack_universe>


; <Start encoding FStar.Tactics.NamedView.close_term>

(declare-fun FStar.Tactics.NamedView.close_term (Term Term) Term)
;;;;;;;;;;;;;;;;b: FStar.Tactics.NamedView.binder -> t: FStar.Tactics.NamedView.term   -> FStar.Reflection.Types.binder * FStar.Tactics.NamedView.term
(declare-fun Tm_arrow_5e1802435c264f940b88bb084c390e7d () Term)
(declare-fun FStar.Tactics.NamedView.close_term@tok () Term)

; </end encoding FStar.Tactics.NamedView.close_term>


; <Start encoding FStar.Tactics.NamedView.inspect>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.NamedView.inspect (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.NamedView.inspect@tok () Term)

; </end encoding FStar.Tactics.NamedView.inspect>


; <Start encoding FStar.Tactics.NamedView.pack>

(declare-fun FStar.Tactics.NamedView.pack (Term) Term)
;;;;;;;;;;;;;;;;tv: FStar.Tactics.NamedView.named_term_view -> FStar.Tactics.NamedView.term
(declare-fun Tm_arrow_0d64c4333643212c8dd1cdd74a87ec36 () Term)
(declare-fun FStar.Tactics.NamedView.pack@tok () Term)

; </end encoding FStar.Tactics.NamedView.pack>


; <Start encoding FStar.Tactics.NamedView.inspect_sigelt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.NamedView.inspect_sigelt (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.NamedView.inspect_sigelt@tok () Term)

; </end encoding FStar.Tactics.NamedView.inspect_sigelt>


; <Start encoding FStar.Tactics.NamedView.pack_sigelt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.NamedView.pack_sigelt (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.NamedView.pack_sigelt@tok () Term)

; </end encoding FStar.Tactics.NamedView.pack_sigelt>


; <Start encoding FStar.Tactics.NamedView.tcc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.NamedView.tcc (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.NamedView.tcc@tok () Term)

; </end encoding FStar.Tactics.NamedView.tcc>


; <Start encoding FStar.Tactics.NamedView.comp_to_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.NamedView.comp_to_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.NamedView.comp_to_string@tok () Term)

; </end encoding FStar.Tactics.NamedView.comp_to_string>


; <Start encoding FStar.Tactics.NamedView.universe_view>

(declare-fun FStar.Tactics.NamedView.universe_view () Term)

; </end encoding FStar.Tactics.NamedView.universe_view>


; <Start encoding FStar.Tactics.NamedView.term_view>

(declare-fun FStar.Tactics.NamedView.term_view () Term)

; </end encoding FStar.Tactics.NamedView.term_view>


; <Start encoding FStar.Tactics.NamedView.sigelt_view>

(declare-fun FStar.Tactics.NamedView.sigelt_view () Term)

; </end encoding FStar.Tactics.NamedView.sigelt_view>


; <Start encoding FStar.Tactics.NamedView.inspect_namedv>

(declare-fun FStar.Tactics.NamedView.inspect_namedv (Term) Term)
;;;;;;;;;;;;;;;;x: FStar.Tactics.NamedView.namedv -> FStar.Tactics.NamedView.namedv
(declare-fun Tm_arrow_2705aa32fdc5cf41c1ff313d9469a249 () Term)
(declare-fun FStar.Tactics.NamedView.inspect_namedv@tok () Term)

; </end encoding FStar.Tactics.NamedView.inspect_namedv>


; <Start encoding FStar.Tactics.NamedView.pack_namedv>

(declare-fun FStar.Tactics.NamedView.pack_namedv (Term) Term)

(declare-fun FStar.Tactics.NamedView.pack_namedv@tok () Term)

; </end encoding FStar.Tactics.NamedView.pack_namedv>


; <Start encoding FStar.Tactics.NamedView.inspect_bv>

(declare-fun FStar.Tactics.NamedView.inspect_bv (Term) Term)
;;;;;;;;;;;;;;;;x: FStar.Tactics.NamedView.bv -> FStar.Tactics.NamedView.bv
(declare-fun Tm_arrow_b7765516170041d06fd16f4e95d2a2e6 () Term)
(declare-fun FStar.Tactics.NamedView.inspect_bv@tok () Term)

; </end encoding FStar.Tactics.NamedView.inspect_bv>


; <Start encoding FStar.Tactics.NamedView.pack_bv>

(declare-fun FStar.Tactics.NamedView.pack_bv (Term) Term)

(declare-fun FStar.Tactics.NamedView.pack_bv@tok () Term)

; </end encoding FStar.Tactics.NamedView.pack_bv>


; <Start encoding FStar.Tactics.NamedView.inspect_comp>

(declare-fun FStar.Tactics.NamedView.inspect_comp (Term) Term)
;;;;;;;;;;;;;;;;x: FStar.Tactics.NamedView.comp -> FStar.Tactics.NamedView.comp
(declare-fun Tm_arrow_f9487c8dc952463a973caec1d5c506eb () Term)
(declare-fun FStar.Tactics.NamedView.inspect_comp@tok () Term)

; </end encoding FStar.Tactics.NamedView.inspect_comp>


; <Start encoding FStar.Tactics.NamedView.pack_comp>

(declare-fun FStar.Tactics.NamedView.pack_comp (Term) Term)

(declare-fun FStar.Tactics.NamedView.pack_comp@tok () Term)

; </end encoding FStar.Tactics.NamedView.pack_comp>


; End Externals for interface FStar.Tactics.NamedView


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End interface FStar.Tactics.NamedView (1333 decls; total size 117002)

;;; Start interface FStar.Tactics.Unseal

; Externals for interface FStar.Tactics.Unseal


; <Start encoding FStar.Tactics.Unseal.unseal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Unseal.unseal (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Unseal.unseal@tok () Term)

; </end encoding FStar.Tactics.Unseal.unseal>


; End Externals for interface FStar.Tactics.Unseal


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End interface FStar.Tactics.Unseal (7 decls; total size 1499)

;;; Start interface FStar.Reflection.V1.Data

; Externals for interface FStar.Reflection.V1.Data


; <Start encoding FStar.Reflection.V1.Data.ident>

(declare-fun FStar.Reflection.V1.Data.ident () Term)

; </end encoding FStar.Reflection.V1.Data.ident>


; <Start encoding FStar.Reflection.V1.Data.univ_name>

(declare-fun FStar.Reflection.V1.Data.univ_name () Term)

; </end encoding FStar.Reflection.V1.Data.univ_name>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.vconst () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.C_Unit () Term)
;;;;;;;;;;;;;;;;data constructor proxy: C_Unit
(declare-fun FStar.Reflection.V1.Data.C_Unit@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.C_Int (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.C_Int__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: C_Int
(declare-fun FStar.Reflection.V1.Data.C_Int@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.C_True () Term)
;;;;;;;;;;;;;;;;data constructor proxy: C_True
(declare-fun FStar.Reflection.V1.Data.C_True@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.C_False () Term)
;;;;;;;;;;;;;;;;data constructor proxy: C_False
(declare-fun FStar.Reflection.V1.Data.C_False@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.C_String (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.C_String__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: C_String
(declare-fun FStar.Reflection.V1.Data.C_String@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.C_Range (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.C_Range__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: C_Range
(declare-fun FStar.Reflection.V1.Data.C_Range@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.C_Reify () Term)
;;;;;;;;;;;;;;;;data constructor proxy: C_Reify
(declare-fun FStar.Reflection.V1.Data.C_Reify@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.C_Reflect (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.C_Reflect__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: C_Reflect
(declare-fun FStar.Reflection.V1.Data.C_Reflect@tok () Term)
;;;;;;;;;;;;;;;;_0: Prims.int -> FStar.Reflection.V1.Data.vconst
(declare-fun Tm_arrow_7f484151fa48e1302abf5a4e1871d40e () Term)
;;;;;;;;;;;;;;;;_0: Prims.string -> FStar.Reflection.V1.Data.vconst
(declare-fun Tm_arrow_49ffce67dfa61547ba140412c23c21e8 () Term)
;;;;;;;;;;;;;;;;_0: FStar.Range.range -> FStar.Reflection.V1.Data.vconst
(declare-fun Tm_arrow_9cfb2cd1b67d38c78c1d5e25470d426d () Term)
;;;;;;;;;;;;;;;;_0: FStar.Reflection.Types.name -> FStar.Reflection.V1.Data.vconst
(declare-fun Tm_arrow_0372083a059ccfbb477a26c30652d8e9 () Term)

; <Start encoding FStar.Reflection.V1.Data.vconst>


; <start constructor FStar.Reflection.V1.Data.vconst>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.vconst ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(= __@x0
FStar.Reflection.V1.Data.vconst)))

; </end constructor FStar.Reflection.V1.Data.vconst>


; </end encoding FStar.Reflection.V1.Data.vconst>


; <Start encoding FStar.Reflection.V1.Data.C_Unit>


; <start constructor FStar.Reflection.V1.Data.C_Unit>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.C_Unit ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
107)
(= __@x0
FStar.Reflection.V1.Data.C_Unit)))

; </end constructor FStar.Reflection.V1.Data.C_Unit>


; </end encoding FStar.Reflection.V1.Data.C_Unit>


; <Start encoding FStar.Reflection.V1.Data.C_Int>


; <start constructor FStar.Reflection.V1.Data.C_Int>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.C_Int ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
109)
(= __@x0
(FStar.Reflection.V1.Data.C_Int (FStar.Reflection.V1.Data.C_Int__0 __@x0)))))

; </end constructor FStar.Reflection.V1.Data.C_Int>


; </end encoding FStar.Reflection.V1.Data.C_Int>


; <Start encoding FStar.Reflection.V1.Data.C_True>


; <start constructor FStar.Reflection.V1.Data.C_True>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.C_True ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
114)
(= __@x0
FStar.Reflection.V1.Data.C_True)))

; </end constructor FStar.Reflection.V1.Data.C_True>


; </end encoding FStar.Reflection.V1.Data.C_True>


; <Start encoding FStar.Reflection.V1.Data.C_False>


; <start constructor FStar.Reflection.V1.Data.C_False>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.C_False ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
116)
(= __@x0
FStar.Reflection.V1.Data.C_False)))

; </end constructor FStar.Reflection.V1.Data.C_False>


; </end encoding FStar.Reflection.V1.Data.C_False>


; <Start encoding FStar.Reflection.V1.Data.C_String>


; <start constructor FStar.Reflection.V1.Data.C_String>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.C_String ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
118)
(= __@x0
(FStar.Reflection.V1.Data.C_String (FStar.Reflection.V1.Data.C_String__0 __@x0)))))

; </end constructor FStar.Reflection.V1.Data.C_String>


; </end encoding FStar.Reflection.V1.Data.C_String>


; <Start encoding FStar.Reflection.V1.Data.C_Range>


; <start constructor FStar.Reflection.V1.Data.C_Range>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.C_Range ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
123)
(= __@x0
(FStar.Reflection.V1.Data.C_Range (FStar.Reflection.V1.Data.C_Range__0 __@x0)))))

; </end constructor FStar.Reflection.V1.Data.C_Range>


; </end encoding FStar.Reflection.V1.Data.C_Range>


; <Start encoding FStar.Reflection.V1.Data.C_Reify>


; <start constructor FStar.Reflection.V1.Data.C_Reify>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.C_Reify ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
128)
(= __@x0
FStar.Reflection.V1.Data.C_Reify)))

; </end constructor FStar.Reflection.V1.Data.C_Reify>


; </end encoding FStar.Reflection.V1.Data.C_Reify>


; <Start encoding FStar.Reflection.V1.Data.C_Reflect>


; <start constructor FStar.Reflection.V1.Data.C_Reflect>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.C_Reflect ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
130)
(= __@x0
(FStar.Reflection.V1.Data.C_Reflect (FStar.Reflection.V1.Data.C_Reflect__0 __@x0)))))

; </end constructor FStar.Reflection.V1.Data.C_Reflect>


; </end encoding FStar.Reflection.V1.Data.C_Reflect>


; </end encoding >


; <Start encoding FStar.Reflection.V1.Data.uu___is_C_Unit>

(declare-fun FStar.Reflection.V1.Data.uu___is_C_Unit (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V1.Data.vconst -> Prims.bool
(declare-fun Tm_arrow_9edc22ee7e08c8d741e1e23337111c35 () Term)
(declare-fun FStar.Reflection.V1.Data.uu___is_C_Unit@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_C_Unit>


; <Skipped FStar.Reflection.V1.Data.uu___is_C_Unit/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_C_Int>

(declare-fun FStar.Reflection.V1.Data.uu___is_C_Int (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_C_Int@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_C_Int>


; <Skipped FStar.Reflection.V1.Data.uu___is_C_Int/>


; <Start encoding FStar.Reflection.V1.Data.__proj__C_Int__item___0>

(declare-fun Tm_refine_5faa3d085d6529796186d2f166ec3e3b () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__C_Int__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.vconst{C_Int? _} -> Prims.int
(declare-fun Tm_arrow_10eb985785c2a016e23283b453df9e11 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__C_Int__item___0@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__C_Int__item___0>


; <Skipped FStar.Reflection.V1.Data.__proj__C_Int__item___0/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_C_True>

(declare-fun FStar.Reflection.V1.Data.uu___is_C_True (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_C_True@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_C_True>


; <Skipped FStar.Reflection.V1.Data.uu___is_C_True/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_C_False>

(declare-fun FStar.Reflection.V1.Data.uu___is_C_False (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_C_False@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_C_False>


; <Skipped FStar.Reflection.V1.Data.uu___is_C_False/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_C_String>

(declare-fun FStar.Reflection.V1.Data.uu___is_C_String (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_C_String@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_C_String>


; <Skipped FStar.Reflection.V1.Data.uu___is_C_String/>


; <Start encoding FStar.Reflection.V1.Data.__proj__C_String__item___0>

(declare-fun Tm_refine_20333e6843d20bb61911371ec2d163f9 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__C_String__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.vconst{C_String? _} -> Prims.string
(declare-fun Tm_arrow_1a36d4be147466d437a70460151a626c () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__C_String__item___0@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__C_String__item___0>


; <Skipped FStar.Reflection.V1.Data.__proj__C_String__item___0/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_C_Range>

(declare-fun FStar.Reflection.V1.Data.uu___is_C_Range (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_C_Range@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_C_Range>


; <Skipped FStar.Reflection.V1.Data.uu___is_C_Range/>


; <Start encoding FStar.Reflection.V1.Data.__proj__C_Range__item___0>

(declare-fun Tm_refine_b5d9cb8b96e7aa7e89d03554e19f54d1 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__C_Range__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.vconst{C_Range? _} -> FStar.Range.range
(declare-fun Tm_arrow_6862ca39fcb6ce4cd6e6605b6452f6ec () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__C_Range__item___0@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__C_Range__item___0>


; <Skipped FStar.Reflection.V1.Data.__proj__C_Range__item___0/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_C_Reify>

(declare-fun FStar.Reflection.V1.Data.uu___is_C_Reify (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_C_Reify@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_C_Reify>


; <Skipped FStar.Reflection.V1.Data.uu___is_C_Reify/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_C_Reflect>

(declare-fun FStar.Reflection.V1.Data.uu___is_C_Reflect (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_C_Reflect@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_C_Reflect>


; <Skipped FStar.Reflection.V1.Data.uu___is_C_Reflect/>


; <Start encoding FStar.Reflection.V1.Data.__proj__C_Reflect__item___0>

(declare-fun Tm_refine_af549649e5c395212daa7d7972b2fa6c () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__C_Reflect__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.vconst{C_Reflect? _} -> FStar.Reflection.Types.name
(declare-fun Tm_arrow_45cd29ee1f4cd0add30e3252a0a743e5 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__C_Reflect__item___0@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__C_Reflect__item___0>


; <Skipped FStar.Reflection.V1.Data.__proj__C_Reflect__item___0/>


; <Start encoding FStar.Reflection.V1.Data.universes>

(declare-fun FStar.Reflection.V1.Data.universes () Term)

; </end encoding FStar.Reflection.V1.Data.universes>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.pattern () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Pat_Constant (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Pat_Constant__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Pat_Constant
(declare-fun FStar.Reflection.V1.Data.Pat_Constant@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Pat_Cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Pat_Cons__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Pat_Cons__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Pat_Cons__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Pat_Cons
(declare-fun FStar.Reflection.V1.Data.Pat_Cons@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Pat_Var (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Pat_Var__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Pat_Var__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Pat_Var
(declare-fun FStar.Reflection.V1.Data.Pat_Var@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Pat_Dot_Term (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Pat_Dot_Term__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Pat_Dot_Term
(declare-fun FStar.Reflection.V1.Data.Pat_Dot_Term@tok () Term)
;;;;;;;;;;;;;;;;_0: FStar.Reflection.V1.Data.vconst -> FStar.Reflection.V1.Data.pattern
(declare-fun Tm_arrow_89c8d9d7215a202a6633b303dc88c85e () Term)
;;;;;;;;;;;;;;;;_0: FStar.Reflection.Types.fv ->     _1: FStar.Pervasives.Native.option FStar.Reflection.V1.Data.universes ->     _2: Prims.list (FStar.Reflection.V1.Data.pattern * Prims.bool)   -> FStar.Reflection.V1.Data.pattern
(declare-fun Tm_arrow_3aad6a38be3bb6564a8f7d02e8966cbf () Term)
;;;;;;;;;;;;;;;;_0: FStar.Reflection.Types.bv -> _1: FStar.Sealed.sealed FStar.Reflection.Types.typ   -> FStar.Reflection.V1.Data.pattern
(declare-fun Tm_arrow_067ca87ee0fbb85690889f81b1e3667c () Term)
;;;;;;;;;;;;;;;;_0: FStar.Pervasives.Native.option FStar.Reflection.Types.term -> FStar.Reflection.V1.Data.pattern
(declare-fun Tm_arrow_c8c2030300c88e82da0fd6a6c1e318be () Term)

; <Start encoding FStar.Reflection.V1.Data.pattern>


; <start constructor FStar.Reflection.V1.Data.pattern>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.pattern ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
166)
(= __@x0
FStar.Reflection.V1.Data.pattern)))

; </end constructor FStar.Reflection.V1.Data.pattern>


; </end encoding FStar.Reflection.V1.Data.pattern>


; <Start encoding FStar.Reflection.V1.Data.Pat_Constant>


; <start constructor FStar.Reflection.V1.Data.Pat_Constant>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Pat_Constant ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
172)
(= __@x0
(FStar.Reflection.V1.Data.Pat_Constant (FStar.Reflection.V1.Data.Pat_Constant__0 __@x0)))))

; </end constructor FStar.Reflection.V1.Data.Pat_Constant>


; </end encoding FStar.Reflection.V1.Data.Pat_Constant>


; <Start encoding FStar.Reflection.V1.Data.Pat_Cons>


; <start constructor FStar.Reflection.V1.Data.Pat_Cons>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Pat_Cons ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
177)
(= __@x0
(FStar.Reflection.V1.Data.Pat_Cons (FStar.Reflection.V1.Data.Pat_Cons__0 __@x0)
(FStar.Reflection.V1.Data.Pat_Cons__1 __@x0)
(FStar.Reflection.V1.Data.Pat_Cons__2 __@x0)))))

; </end constructor FStar.Reflection.V1.Data.Pat_Cons>


; </end encoding FStar.Reflection.V1.Data.Pat_Cons>


; <Start encoding FStar.Reflection.V1.Data.Pat_Var>


; <start constructor FStar.Reflection.V1.Data.Pat_Var>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Pat_Var ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
182)
(= __@x0
(FStar.Reflection.V1.Data.Pat_Var (FStar.Reflection.V1.Data.Pat_Var__0 __@x0)
(FStar.Reflection.V1.Data.Pat_Var__1 __@x0)))))

; </end constructor FStar.Reflection.V1.Data.Pat_Var>


; </end encoding FStar.Reflection.V1.Data.Pat_Var>


; <Start encoding FStar.Reflection.V1.Data.Pat_Dot_Term>


; <start constructor FStar.Reflection.V1.Data.Pat_Dot_Term>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Pat_Dot_Term ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
187)
(= __@x0
(FStar.Reflection.V1.Data.Pat_Dot_Term (FStar.Reflection.V1.Data.Pat_Dot_Term__0 __@x0)))))

; </end constructor FStar.Reflection.V1.Data.Pat_Dot_Term>


; </end encoding FStar.Reflection.V1.Data.Pat_Dot_Term>


; </end encoding >


; <Start encoding FStar.Reflection.V1.Data.uu___is_Pat_Constant>

(declare-fun FStar.Reflection.V1.Data.uu___is_Pat_Constant (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V1.Data.pattern -> Prims.bool
(declare-fun Tm_arrow_9782106ee35e96d74bf4b8cf818b3d67 () Term)
(declare-fun FStar.Reflection.V1.Data.uu___is_Pat_Constant@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Pat_Constant>


; <Skipped FStar.Reflection.V1.Data.uu___is_Pat_Constant/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Pat_Constant__item___0>

(declare-fun Tm_refine_9d623f63121aabf00b7a6c2ed62a1c39 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Pat_Constant__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.pattern{Pat_Constant? _} -> FStar.Reflection.V1.Data.vconst
(declare-fun Tm_arrow_0195a72f65c925f1faeacab456d6feed () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Pat_Constant__item___0@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Pat_Constant__item___0>


; <Skipped FStar.Reflection.V1.Data.__proj__Pat_Constant__item___0/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_Pat_Cons>

(declare-fun FStar.Reflection.V1.Data.uu___is_Pat_Cons (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_Pat_Cons@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Pat_Cons>


; <Skipped FStar.Reflection.V1.Data.uu___is_Pat_Cons/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Pat_Cons__item___0>

(declare-fun Tm_refine_d37fd99d741f59e6859367a7115261d5 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Pat_Cons__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.pattern{Pat_Cons? _} -> FStar.Reflection.Types.fv
(declare-fun Tm_arrow_a24607c97571c8e94b8327179ce58b6c () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Pat_Cons__item___0@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Pat_Cons__item___0>


; <Skipped FStar.Reflection.V1.Data.__proj__Pat_Cons__item___0/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Pat_Cons__item___1>


(declare-fun FStar.Reflection.V1.Data.__proj__Pat_Cons__item___1 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.pattern{Pat_Cons? _}   -> FStar.Pervasives.Native.option FStar.Reflection.V1.Data.universes
(declare-fun Tm_arrow_35e98081e4089d74d9fd11230de571c8 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Pat_Cons__item___1@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Pat_Cons__item___1>


; <Skipped FStar.Reflection.V1.Data.__proj__Pat_Cons__item___1/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Pat_Cons__item___2>


(declare-fun FStar.Reflection.V1.Data.__proj__Pat_Cons__item___2 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.pattern{Pat_Cons? _}   -> Prims.list (FStar.Reflection.V1.Data.pattern * Prims.bool)
(declare-fun Tm_arrow_bafecb020963f82d2447e6bc57b2d774 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Pat_Cons__item___2@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Pat_Cons__item___2>


; <Skipped FStar.Reflection.V1.Data.__proj__Pat_Cons__item___2/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_Pat_Var>

(declare-fun FStar.Reflection.V1.Data.uu___is_Pat_Var (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_Pat_Var@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Pat_Var>


; <Skipped FStar.Reflection.V1.Data.uu___is_Pat_Var/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Pat_Var__item___0>

(declare-fun Tm_refine_b054274b17dabddd2297af2c70372aa5 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Pat_Var__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.pattern{Pat_Var? _} -> FStar.Reflection.Types.bv
(declare-fun Tm_arrow_573697a0a2c1010b2bef7cd37a46e0bc () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Pat_Var__item___0@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Pat_Var__item___0>


; <Skipped FStar.Reflection.V1.Data.__proj__Pat_Var__item___0/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Pat_Var__item___1>


(declare-fun FStar.Reflection.V1.Data.__proj__Pat_Var__item___1 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.pattern{Pat_Var? _}   -> FStar.Sealed.sealed FStar.Reflection.Types.typ
(declare-fun Tm_arrow_cf70fe817c81975e1b34f075fa0d2320 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Pat_Var__item___1@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Pat_Var__item___1>


; <Skipped FStar.Reflection.V1.Data.__proj__Pat_Var__item___1/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_Pat_Dot_Term>

(declare-fun FStar.Reflection.V1.Data.uu___is_Pat_Dot_Term (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_Pat_Dot_Term@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Pat_Dot_Term>


; <Skipped FStar.Reflection.V1.Data.uu___is_Pat_Dot_Term/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Pat_Dot_Term__item___0>

(declare-fun Tm_refine_32857d2ae27267a29cf8705f99948fe4 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Pat_Dot_Term__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.pattern{Pat_Dot_Term? _}   -> FStar.Pervasives.Native.option FStar.Reflection.Types.term
(declare-fun Tm_arrow_52461167f366339beafe2e52f7d48850 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Pat_Dot_Term__item___0@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Pat_Dot_Term__item___0>


; <Skipped FStar.Reflection.V1.Data.__proj__Pat_Dot_Term__item___0/>


; <Start encoding FStar.Reflection.V1.Data.branch>

(declare-fun FStar.Reflection.V1.Data.branch () Term)

; </end encoding FStar.Reflection.V1.Data.branch>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.aqualv () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Q_Implicit () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Q_Implicit
(declare-fun FStar.Reflection.V1.Data.Q_Implicit@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Q_Explicit () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Q_Explicit
(declare-fun FStar.Reflection.V1.Data.Q_Explicit@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Q_Meta (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Q_Meta__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Q_Meta
(declare-fun FStar.Reflection.V1.Data.Q_Meta@tok () Term)
;;;;;;;;;;;;;;;;_0: FStar.Reflection.Types.term -> FStar.Reflection.V1.Data.aqualv
(declare-fun Tm_arrow_89f6996c49dcbe31449f8c37d6e1ef50 () Term)

; <Start encoding FStar.Reflection.V1.Data.aqualv>


; <start constructor FStar.Reflection.V1.Data.aqualv>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.aqualv ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
227)
(= __@x0
FStar.Reflection.V1.Data.aqualv)))

; </end constructor FStar.Reflection.V1.Data.aqualv>


; </end encoding FStar.Reflection.V1.Data.aqualv>


; <Start encoding FStar.Reflection.V1.Data.Q_Implicit>


; <start constructor FStar.Reflection.V1.Data.Q_Implicit>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Q_Implicit ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
233)
(= __@x0
FStar.Reflection.V1.Data.Q_Implicit)))

; </end constructor FStar.Reflection.V1.Data.Q_Implicit>


; </end encoding FStar.Reflection.V1.Data.Q_Implicit>


; <Start encoding FStar.Reflection.V1.Data.Q_Explicit>


; <start constructor FStar.Reflection.V1.Data.Q_Explicit>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Q_Explicit ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
235)
(= __@x0
FStar.Reflection.V1.Data.Q_Explicit)))

; </end constructor FStar.Reflection.V1.Data.Q_Explicit>


; </end encoding FStar.Reflection.V1.Data.Q_Explicit>


; <Start encoding FStar.Reflection.V1.Data.Q_Meta>


; <start constructor FStar.Reflection.V1.Data.Q_Meta>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Q_Meta ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
237)
(= __@x0
(FStar.Reflection.V1.Data.Q_Meta (FStar.Reflection.V1.Data.Q_Meta__0 __@x0)))))

; </end constructor FStar.Reflection.V1.Data.Q_Meta>


; </end encoding FStar.Reflection.V1.Data.Q_Meta>


; </end encoding >


; <Start encoding FStar.Reflection.V1.Data.uu___is_Q_Implicit>

(declare-fun FStar.Reflection.V1.Data.uu___is_Q_Implicit (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V1.Data.aqualv -> Prims.bool
(declare-fun Tm_arrow_4d59a23c125dbaf461be7c25ad1029a8 () Term)
(declare-fun FStar.Reflection.V1.Data.uu___is_Q_Implicit@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Q_Implicit>


; <Skipped FStar.Reflection.V1.Data.uu___is_Q_Implicit/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_Q_Explicit>

(declare-fun FStar.Reflection.V1.Data.uu___is_Q_Explicit (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_Q_Explicit@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Q_Explicit>


; <Skipped FStar.Reflection.V1.Data.uu___is_Q_Explicit/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_Q_Meta>

(declare-fun FStar.Reflection.V1.Data.uu___is_Q_Meta (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_Q_Meta@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Q_Meta>


; <Skipped FStar.Reflection.V1.Data.uu___is_Q_Meta/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Q_Meta__item___0>

(declare-fun Tm_refine_0c0becfe1087eb1a2e96cfe0e3f84488 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Q_Meta__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.aqualv{Q_Meta? _} -> FStar.Reflection.Types.term
(declare-fun Tm_arrow_03c64d5a35db1926a18b33cd4c4bfc33 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Q_Meta__item___0@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Q_Meta__item___0>


; <Skipped FStar.Reflection.V1.Data.__proj__Q_Meta__item___0/>


; <Start encoding FStar.Reflection.V1.Data.argv>

(declare-fun FStar.Reflection.V1.Data.argv () Term)

; </end encoding FStar.Reflection.V1.Data.argv>


; <Start encoding FStar.Reflection.V1.Data.ppname_t>

(declare-fun FStar.Reflection.V1.Data.ppname_t () Term)

; </end encoding FStar.Reflection.V1.Data.ppname_t>


; <Start encoding FStar.Reflection.V1.Data.as_ppname>

(declare-fun FStar.Reflection.V1.Data.as_ppname (Term) Term)
;;;;;;;;;;;;;;;;x: Prims.string -> FStar.Reflection.V1.Data.ppname_t
(declare-fun Tm_arrow_25133389eb0513dd1b74d86bbcbf7685 () Term)
(declare-fun FStar.Reflection.V1.Data.as_ppname@tok () Term)

; </end encoding FStar.Reflection.V1.Data.as_ppname>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.bv_view () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Mkbv_view (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Mkbv_view_bv_ppname (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Mkbv_view_bv_index (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mkbv_view
(declare-fun FStar.Reflection.V1.Data.Mkbv_view@tok () Term)
;;;;;;;;;;;;;;;;bv_ppname: FStar.Reflection.V1.Data.ppname_t -> bv_index: Prims.nat   -> FStar.Reflection.V1.Data.bv_view
(declare-fun Tm_arrow_e86317437b05aa44be409e0361b44299 () Term)

; <Start encoding FStar.Reflection.V1.Data.bv_view>


; <start constructor FStar.Reflection.V1.Data.bv_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.bv_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
253)
(= __@x0
FStar.Reflection.V1.Data.bv_view)))

; </end constructor FStar.Reflection.V1.Data.bv_view>


; </end encoding FStar.Reflection.V1.Data.bv_view>


; <Start encoding FStar.Reflection.V1.Data.Mkbv_view>


; <start constructor FStar.Reflection.V1.Data.Mkbv_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Mkbv_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
259)
(= __@x0
(FStar.Reflection.V1.Data.Mkbv_view (FStar.Reflection.V1.Data.Mkbv_view_bv_ppname __@x0)
(FStar.Reflection.V1.Data.Mkbv_view_bv_index __@x0)))))

; </end constructor FStar.Reflection.V1.Data.Mkbv_view>


; </end encoding FStar.Reflection.V1.Data.Mkbv_view>


; </end encoding >


; <Start encoding FStar.Reflection.V1.Data.__proj__Mkbv_view__item__bv_ppname>

(declare-fun FStar.Reflection.V1.Data.__proj__Mkbv_view__item__bv_ppname (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V1.Data.bv_view -> FStar.Reflection.V1.Data.ppname_t
(declare-fun Tm_arrow_db52396a0d460b9a1d6cea6a0e02fdcc () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Mkbv_view__item__bv_ppname@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Mkbv_view__item__bv_ppname>


; <Skipped FStar.Reflection.V1.Data.__proj__Mkbv_view__item__bv_ppname/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Mkbv_view__item__bv_index>

(declare-fun FStar.Reflection.V1.Data.__proj__Mkbv_view__item__bv_index (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V1.Data.bv_view -> Prims.nat
(declare-fun Tm_arrow_557f4e6b664289d267adab3da553a45e () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Mkbv_view__item__bv_index@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Mkbv_view__item__bv_index>


; <Skipped FStar.Reflection.V1.Data.__proj__Mkbv_view__item__bv_index/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.binder_view () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Mkbinder_view (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Mkbinder_view_binder_bv (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Mkbinder_view_binder_qual (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Mkbinder_view_binder_attrs (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Mkbinder_view_binder_sort (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mkbinder_view
(declare-fun FStar.Reflection.V1.Data.Mkbinder_view@tok () Term)
;;;;;;;;;;;;;;;;binder_bv: FStar.Reflection.Types.bv ->     binder_qual: FStar.Reflection.V1.Data.aqualv ->     binder_attrs: Prims.list FStar.Reflection.Types.term ->     binder_sort: FStar.Reflection.Types.typ   -> FStar.Reflection.V1.Data.binder_view
(declare-fun Tm_arrow_d368beee3c35c1bdce88e1676ef76a20 () Term)

; <Start encoding FStar.Reflection.V1.Data.binder_view>


; <start constructor FStar.Reflection.V1.Data.binder_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.binder_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
267)
(= __@x0
FStar.Reflection.V1.Data.binder_view)))

; </end constructor FStar.Reflection.V1.Data.binder_view>


; </end encoding FStar.Reflection.V1.Data.binder_view>


; <Start encoding FStar.Reflection.V1.Data.Mkbinder_view>


; <start constructor FStar.Reflection.V1.Data.Mkbinder_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Mkbinder_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
273)
(= __@x0
(FStar.Reflection.V1.Data.Mkbinder_view (FStar.Reflection.V1.Data.Mkbinder_view_binder_bv __@x0)
(FStar.Reflection.V1.Data.Mkbinder_view_binder_qual __@x0)
(FStar.Reflection.V1.Data.Mkbinder_view_binder_attrs __@x0)
(FStar.Reflection.V1.Data.Mkbinder_view_binder_sort __@x0)))))

; </end constructor FStar.Reflection.V1.Data.Mkbinder_view>


; </end encoding FStar.Reflection.V1.Data.Mkbinder_view>


; </end encoding >


; <Start encoding FStar.Reflection.V1.Data.__proj__Mkbinder_view__item__binder_bv>

(declare-fun FStar.Reflection.V1.Data.__proj__Mkbinder_view__item__binder_bv (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V1.Data.binder_view -> FStar.Reflection.Types.bv
(declare-fun Tm_arrow_f3215e1c2bb9eff558d87a1fb9e0c9d8 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Mkbinder_view__item__binder_bv@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Mkbinder_view__item__binder_bv>


; <Skipped FStar.Reflection.V1.Data.__proj__Mkbinder_view__item__binder_bv/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Mkbinder_view__item__binder_qual>

(declare-fun FStar.Reflection.V1.Data.__proj__Mkbinder_view__item__binder_qual (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V1.Data.binder_view -> FStar.Reflection.V1.Data.aqualv
(declare-fun Tm_arrow_04c9da33ac18653d4466e012fe044a65 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Mkbinder_view__item__binder_qual@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Mkbinder_view__item__binder_qual>


; <Skipped FStar.Reflection.V1.Data.__proj__Mkbinder_view__item__binder_qual/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Mkbinder_view__item__binder_attrs>

(declare-fun FStar.Reflection.V1.Data.__proj__Mkbinder_view__item__binder_attrs (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V1.Data.binder_view -> Prims.list FStar.Reflection.Types.term
(declare-fun Tm_arrow_ec8754075495d67c879e4e4d8c18b95b () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Mkbinder_view__item__binder_attrs@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Mkbinder_view__item__binder_attrs>


; <Skipped FStar.Reflection.V1.Data.__proj__Mkbinder_view__item__binder_attrs/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Mkbinder_view__item__binder_sort>

(declare-fun FStar.Reflection.V1.Data.__proj__Mkbinder_view__item__binder_sort (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V1.Data.binder_view -> FStar.Reflection.Types.typ
(declare-fun Tm_arrow_69659a1c457df24f38d55a79468ff30a () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Mkbinder_view__item__binder_sort@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Mkbinder_view__item__binder_sort>


; <Skipped FStar.Reflection.V1.Data.__proj__Mkbinder_view__item__binder_sort/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.universe_view () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Uv_Zero () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Uv_Zero
(declare-fun FStar.Reflection.V1.Data.Uv_Zero@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Uv_Succ (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Uv_Succ__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Uv_Succ
(declare-fun FStar.Reflection.V1.Data.Uv_Succ@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Uv_Max (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Uv_Max__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Uv_Max
(declare-fun FStar.Reflection.V1.Data.Uv_Max@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Uv_BVar (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Uv_BVar__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Uv_BVar
(declare-fun FStar.Reflection.V1.Data.Uv_BVar@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Uv_Name (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Uv_Name__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Uv_Name
(declare-fun FStar.Reflection.V1.Data.Uv_Name@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Uv_Unif (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Uv_Unif__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Uv_Unif
(declare-fun FStar.Reflection.V1.Data.Uv_Unif@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Uv_Unk () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Uv_Unk
(declare-fun FStar.Reflection.V1.Data.Uv_Unk@tok () Term)
;;;;;;;;;;;;;;;;_0: FStar.Reflection.Types.universe -> FStar.Reflection.V1.Data.universe_view
(declare-fun Tm_arrow_1e89b741618da9a9f363bb324ba17066 () Term)
;;;;;;;;;;;;;;;;_0: FStar.Reflection.V1.Data.universes -> FStar.Reflection.V1.Data.universe_view
(declare-fun Tm_arrow_b09109aa106a5d56908039be817b5ba8 () Term)
;;;;;;;;;;;;;;;;_0: Prims.nat -> FStar.Reflection.V1.Data.universe_view
(declare-fun Tm_arrow_ae1bade11dc415d8e1f125fd4d5e912b () Term)
;;;;;;;;;;;;;;;;_0: FStar.Reflection.V1.Data.univ_name -> FStar.Reflection.V1.Data.universe_view
(declare-fun Tm_arrow_e2f5ad35ee040d60408ce4b4ed03c718 () Term)
;;;;;;;;;;;;;;;;_0: FStar.Reflection.Types.universe_uvar -> FStar.Reflection.V1.Data.universe_view
(declare-fun Tm_arrow_a52cd1b774bb96a3b2d2cfe4e499aa6a () Term)

; <Start encoding FStar.Reflection.V1.Data.universe_view>


; <start constructor FStar.Reflection.V1.Data.universe_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.universe_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
285)
(= __@x0
FStar.Reflection.V1.Data.universe_view)))

; </end constructor FStar.Reflection.V1.Data.universe_view>


; </end encoding FStar.Reflection.V1.Data.universe_view>


; <Start encoding FStar.Reflection.V1.Data.Uv_Zero>


; <start constructor FStar.Reflection.V1.Data.Uv_Zero>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Uv_Zero ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
291)
(= __@x0
FStar.Reflection.V1.Data.Uv_Zero)))

; </end constructor FStar.Reflection.V1.Data.Uv_Zero>


; </end encoding FStar.Reflection.V1.Data.Uv_Zero>


; <Start encoding FStar.Reflection.V1.Data.Uv_Succ>


; <start constructor FStar.Reflection.V1.Data.Uv_Succ>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Uv_Succ ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
293)
(= __@x0
(FStar.Reflection.V1.Data.Uv_Succ (FStar.Reflection.V1.Data.Uv_Succ__0 __@x0)))))

; </end constructor FStar.Reflection.V1.Data.Uv_Succ>


; </end encoding FStar.Reflection.V1.Data.Uv_Succ>


; <Start encoding FStar.Reflection.V1.Data.Uv_Max>


; <start constructor FStar.Reflection.V1.Data.Uv_Max>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Uv_Max ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
298)
(= __@x0
(FStar.Reflection.V1.Data.Uv_Max (FStar.Reflection.V1.Data.Uv_Max__0 __@x0)))))

; </end constructor FStar.Reflection.V1.Data.Uv_Max>


; </end encoding FStar.Reflection.V1.Data.Uv_Max>


; <Start encoding FStar.Reflection.V1.Data.Uv_BVar>


; <start constructor FStar.Reflection.V1.Data.Uv_BVar>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Uv_BVar ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
303)
(= __@x0
(FStar.Reflection.V1.Data.Uv_BVar (FStar.Reflection.V1.Data.Uv_BVar__0 __@x0)))))

; </end constructor FStar.Reflection.V1.Data.Uv_BVar>


; </end encoding FStar.Reflection.V1.Data.Uv_BVar>


; <Start encoding FStar.Reflection.V1.Data.Uv_Name>


; <start constructor FStar.Reflection.V1.Data.Uv_Name>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Uv_Name ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
308)
(= __@x0
(FStar.Reflection.V1.Data.Uv_Name (FStar.Reflection.V1.Data.Uv_Name__0 __@x0)))))

; </end constructor FStar.Reflection.V1.Data.Uv_Name>


; </end encoding FStar.Reflection.V1.Data.Uv_Name>


; <Start encoding FStar.Reflection.V1.Data.Uv_Unif>


; <start constructor FStar.Reflection.V1.Data.Uv_Unif>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Uv_Unif ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
313)
(= __@x0
(FStar.Reflection.V1.Data.Uv_Unif (FStar.Reflection.V1.Data.Uv_Unif__0 __@x0)))))

; </end constructor FStar.Reflection.V1.Data.Uv_Unif>


; </end encoding FStar.Reflection.V1.Data.Uv_Unif>


; <Start encoding FStar.Reflection.V1.Data.Uv_Unk>


; <start constructor FStar.Reflection.V1.Data.Uv_Unk>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Uv_Unk ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
318)
(= __@x0
FStar.Reflection.V1.Data.Uv_Unk)))

; </end constructor FStar.Reflection.V1.Data.Uv_Unk>


; </end encoding FStar.Reflection.V1.Data.Uv_Unk>


; </end encoding >


; <Start encoding FStar.Reflection.V1.Data.uu___is_Uv_Zero>

(declare-fun FStar.Reflection.V1.Data.uu___is_Uv_Zero (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V1.Data.universe_view -> Prims.bool
(declare-fun Tm_arrow_fec190d652e9e0bed68f7b30bcc3aabd () Term)
(declare-fun FStar.Reflection.V1.Data.uu___is_Uv_Zero@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Uv_Zero>


; <Skipped FStar.Reflection.V1.Data.uu___is_Uv_Zero/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_Uv_Succ>

(declare-fun FStar.Reflection.V1.Data.uu___is_Uv_Succ (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_Uv_Succ@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Uv_Succ>


; <Skipped FStar.Reflection.V1.Data.uu___is_Uv_Succ/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Uv_Succ__item___0>

(declare-fun Tm_refine_f469f8548f3b6e6c539e4a528c5a13fd () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Uv_Succ__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.universe_view{Uv_Succ? _} -> FStar.Reflection.Types.universe
(declare-fun Tm_arrow_4baa1dcdda33fd97baf580685c2cec5b () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Uv_Succ__item___0@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Uv_Succ__item___0>


; <Skipped FStar.Reflection.V1.Data.__proj__Uv_Succ__item___0/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_Uv_Max>

(declare-fun FStar.Reflection.V1.Data.uu___is_Uv_Max (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_Uv_Max@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Uv_Max>


; <Skipped FStar.Reflection.V1.Data.uu___is_Uv_Max/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Uv_Max__item___0>

(declare-fun Tm_refine_673ba89f3ec96045465ef1c7bc1da526 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Uv_Max__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.universe_view{Uv_Max? _}   -> FStar.Reflection.V1.Data.universes
(declare-fun Tm_arrow_54de3be80ad1f17559c3e9e6bd3583b3 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Uv_Max__item___0@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Uv_Max__item___0>


; <Skipped FStar.Reflection.V1.Data.__proj__Uv_Max__item___0/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_Uv_BVar>

(declare-fun FStar.Reflection.V1.Data.uu___is_Uv_BVar (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_Uv_BVar@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Uv_BVar>


; <Skipped FStar.Reflection.V1.Data.uu___is_Uv_BVar/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Uv_BVar__item___0>

(declare-fun Tm_refine_0bccbb9d82a71b03568292ca3b6e2e2c () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Uv_BVar__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.universe_view{Uv_BVar? _} -> Prims.nat
(declare-fun Tm_arrow_bf8e0d698a88c1caa9687d61c3a1197d () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Uv_BVar__item___0@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Uv_BVar__item___0>


; <Skipped FStar.Reflection.V1.Data.__proj__Uv_BVar__item___0/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_Uv_Name>

(declare-fun FStar.Reflection.V1.Data.uu___is_Uv_Name (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_Uv_Name@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Uv_Name>


; <Skipped FStar.Reflection.V1.Data.uu___is_Uv_Name/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Uv_Name__item___0>

(declare-fun Tm_refine_cfa6fd28fe814f8756341be41995bc20 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Uv_Name__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.universe_view{Uv_Name? _}   -> FStar.Reflection.V1.Data.univ_name
(declare-fun Tm_arrow_a5b305b9456d313591066e86ac3e62d2 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Uv_Name__item___0@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Uv_Name__item___0>


; <Skipped FStar.Reflection.V1.Data.__proj__Uv_Name__item___0/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_Uv_Unif>

(declare-fun FStar.Reflection.V1.Data.uu___is_Uv_Unif (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_Uv_Unif@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Uv_Unif>


; <Skipped FStar.Reflection.V1.Data.uu___is_Uv_Unif/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Uv_Unif__item___0>

(declare-fun Tm_refine_34e35b938cb965c3284c46d46fda950c () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Uv_Unif__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.universe_view{Uv_Unif? _}   -> FStar.Reflection.Types.universe_uvar
(declare-fun Tm_arrow_d2908c2baebab44069d18d6927577e68 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Uv_Unif__item___0@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Uv_Unif__item___0>


; <Skipped FStar.Reflection.V1.Data.__proj__Uv_Unif__item___0/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_Uv_Unk>

(declare-fun FStar.Reflection.V1.Data.uu___is_Uv_Unk (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_Uv_Unk@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Uv_Unk>


; <Skipped FStar.Reflection.V1.Data.uu___is_Uv_Unk/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.term_view () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Tv_Var (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Tv_Var_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_Var
(declare-fun FStar.Reflection.V1.Data.Tv_Var@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Tv_BVar (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Tv_BVar_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_BVar
(declare-fun FStar.Reflection.V1.Data.Tv_BVar@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Tv_FVar (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Tv_FVar_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_FVar
(declare-fun FStar.Reflection.V1.Data.Tv_FVar@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Tv_UInst (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Tv_UInst_v (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Tv_UInst_us (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_UInst
(declare-fun FStar.Reflection.V1.Data.Tv_UInst@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Tv_App (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Tv_App_hd (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Tv_App_a (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_App
(declare-fun FStar.Reflection.V1.Data.Tv_App@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Tv_Abs (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Tv_Abs_bv (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Tv_Abs_body (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_Abs
(declare-fun FStar.Reflection.V1.Data.Tv_Abs@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Tv_Arrow (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Tv_Arrow_bv (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Tv_Arrow_c (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_Arrow
(declare-fun FStar.Reflection.V1.Data.Tv_Arrow@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Tv_Type (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Tv_Type__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_Type
(declare-fun FStar.Reflection.V1.Data.Tv_Type@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Tv_Refine (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Tv_Refine_bv (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Tv_Refine_sort (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Tv_Refine_ref (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_Refine
(declare-fun FStar.Reflection.V1.Data.Tv_Refine@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Tv_Const (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Tv_Const__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_Const
(declare-fun FStar.Reflection.V1.Data.Tv_Const@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Tv_Uvar (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Tv_Uvar__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Tv_Uvar__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_Uvar
(declare-fun FStar.Reflection.V1.Data.Tv_Uvar@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Tv_Let (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Tv_Let_recf (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Tv_Let_attrs (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Tv_Let_bv (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Tv_Let_ty (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Tv_Let_def (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Tv_Let_body (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_Let
(declare-fun FStar.Reflection.V1.Data.Tv_Let@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Tv_Match (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Tv_Match_scrutinee (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Tv_Match_ret (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Tv_Match_brs (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_Match
(declare-fun FStar.Reflection.V1.Data.Tv_Match@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Tv_AscribedT (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Tv_AscribedT_e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Tv_AscribedT_t (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Tv_AscribedT_tac (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Tv_AscribedT_use_eq (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_AscribedT
(declare-fun FStar.Reflection.V1.Data.Tv_AscribedT@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Tv_AscribedC (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Tv_AscribedC_e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Tv_AscribedC_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Tv_AscribedC_tac (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Tv_AscribedC_use_eq (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_AscribedC
(declare-fun FStar.Reflection.V1.Data.Tv_AscribedC@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Tv_Unknown () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_Unknown
(declare-fun FStar.Reflection.V1.Data.Tv_Unknown@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Tv_Unsupp () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Tv_Unsupp
(declare-fun FStar.Reflection.V1.Data.Tv_Unsupp@tok () Term)
;;;;;;;;;;;;;;;;v: FStar.Reflection.Types.bv -> FStar.Reflection.V1.Data.term_view
(declare-fun Tm_arrow_86b14b57e22ffcd75bc2bb74ae5e37a6 () Term)

;;;;;;;;;;;;;;;;v: FStar.Reflection.Types.fv -> FStar.Reflection.V1.Data.term_view
(declare-fun Tm_arrow_1e3b2168a1398746e8b87d7c9ead7f5d () Term)
;;;;;;;;;;;;;;;;v: FStar.Reflection.Types.fv -> us: FStar.Reflection.V1.Data.universes   -> FStar.Reflection.V1.Data.term_view
(declare-fun Tm_arrow_8ed0e47c08fde52528a9d444abc812ec () Term)
;;;;;;;;;;;;;;;;hd: FStar.Reflection.Types.term -> a: FStar.Reflection.V1.Data.argv   -> FStar.Reflection.V1.Data.term_view
(declare-fun Tm_arrow_4fd92c751145edca4c289b7a01ce9fe6 () Term)
;;;;;;;;;;;;;;;;bv: FStar.Reflection.Types.binder -> body: FStar.Reflection.Types.term   -> FStar.Reflection.V1.Data.term_view
(declare-fun Tm_arrow_02504291855420a54c3b487dbc3f9651 () Term)
;;;;;;;;;;;;;;;;bv: FStar.Reflection.Types.binder -> c: FStar.Reflection.Types.comp   -> FStar.Reflection.V1.Data.term_view
(declare-fun Tm_arrow_f35b01f5ecb610b0f4b386eda7f0b0e7 () Term)
;;;;;;;;;;;;;;;;_0: FStar.Reflection.Types.universe -> FStar.Reflection.V1.Data.term_view
(declare-fun Tm_arrow_3bca8ccd874c31a8bd8a362414500124 () Term)
;;;;;;;;;;;;;;;;bv: FStar.Reflection.Types.bv ->     sort: FStar.Reflection.Types.typ ->     ref: FStar.Reflection.Types.term   -> FStar.Reflection.V1.Data.term_view
(declare-fun Tm_arrow_6b2ea6b641745a45b288b717668d2dc6 () Term)
;;;;;;;;;;;;;;;;_0: FStar.Reflection.V1.Data.vconst -> FStar.Reflection.V1.Data.term_view
(declare-fun Tm_arrow_221fc30f9c204d2a0cefcb2661764580 () Term)
;;;;;;;;;;;;;;;;_0: Prims.nat -> _1: FStar.Reflection.Types.ctx_uvar_and_subst -> FStar.Reflection.V1.Data.term_view
(declare-fun Tm_arrow_03f613c6b6339514f6a43a9dab6664f3 () Term)
;;;;;;;;;;;;;;;;recf: Prims.bool ->     attrs: Prims.list FStar.Reflection.Types.term ->     bv: FStar.Reflection.Types.bv ->     ty: FStar.Reflection.Types.typ ->     def: FStar.Reflection.Types.term ->     body: FStar.Reflection.Types.term   -> FStar.Reflection.V1.Data.term_view
(declare-fun Tm_arrow_8d9139d542cbcd7bdbc464496b0fbb12 () Term)
;;;;;;;;;;;;;;;;scrutinee: FStar.Reflection.Types.term ->     ret: FStar.Pervasives.Native.option FStar.Reflection.Types.match_returns_ascription ->     brs: Prims.list FStar.Reflection.V1.Data.branch   -> FStar.Reflection.V1.Data.term_view
(declare-fun Tm_arrow_353b6c9dab80705f00f899236f8d39d3 () Term)
;;;;;;;;;;;;;;;;e: FStar.Reflection.Types.term ->     t: FStar.Reflection.Types.term ->     tac: FStar.Pervasives.Native.option FStar.Reflection.Types.term ->     use_eq: Prims.bool   -> FStar.Reflection.V1.Data.term_view
(declare-fun Tm_arrow_990ff24d7ad2e39aa85c138517bdd7f2 () Term)
;;;;;;;;;;;;;;;;e: FStar.Reflection.Types.term ->     c: FStar.Reflection.Types.comp ->     tac: FStar.Pervasives.Native.option FStar.Reflection.Types.term ->     use_eq: Prims.bool   -> FStar.Reflection.V1.Data.term_view
(declare-fun Tm_arrow_5417e4eceda5c81f6312bb67cbf48ca6 () Term)

; <Start encoding FStar.Reflection.V1.Data.term_view>


; <start constructor FStar.Reflection.V1.Data.term_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.term_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
353)
(= __@x0
FStar.Reflection.V1.Data.term_view)))

; </end constructor FStar.Reflection.V1.Data.term_view>


; </end encoding FStar.Reflection.V1.Data.term_view>


; <Start encoding FStar.Reflection.V1.Data.Tv_Var>


; <start constructor FStar.Reflection.V1.Data.Tv_Var>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Tv_Var ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
359)
(= __@x0
(FStar.Reflection.V1.Data.Tv_Var (FStar.Reflection.V1.Data.Tv_Var_v __@x0)))))

; </end constructor FStar.Reflection.V1.Data.Tv_Var>


; </end encoding FStar.Reflection.V1.Data.Tv_Var>


; <Start encoding FStar.Reflection.V1.Data.Tv_BVar>


; <start constructor FStar.Reflection.V1.Data.Tv_BVar>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Tv_BVar ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
364)
(= __@x0
(FStar.Reflection.V1.Data.Tv_BVar (FStar.Reflection.V1.Data.Tv_BVar_v __@x0)))))

; </end constructor FStar.Reflection.V1.Data.Tv_BVar>


; </end encoding FStar.Reflection.V1.Data.Tv_BVar>


; <Start encoding FStar.Reflection.V1.Data.Tv_FVar>


; <start constructor FStar.Reflection.V1.Data.Tv_FVar>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Tv_FVar ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
369)
(= __@x0
(FStar.Reflection.V1.Data.Tv_FVar (FStar.Reflection.V1.Data.Tv_FVar_v __@x0)))))

; </end constructor FStar.Reflection.V1.Data.Tv_FVar>


; </end encoding FStar.Reflection.V1.Data.Tv_FVar>


; <Start encoding FStar.Reflection.V1.Data.Tv_UInst>


; <start constructor FStar.Reflection.V1.Data.Tv_UInst>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Tv_UInst ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
374)
(= __@x0
(FStar.Reflection.V1.Data.Tv_UInst (FStar.Reflection.V1.Data.Tv_UInst_v __@x0)
(FStar.Reflection.V1.Data.Tv_UInst_us __@x0)))))

; </end constructor FStar.Reflection.V1.Data.Tv_UInst>


; </end encoding FStar.Reflection.V1.Data.Tv_UInst>


; <Start encoding FStar.Reflection.V1.Data.Tv_App>


; <start constructor FStar.Reflection.V1.Data.Tv_App>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Tv_App ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
379)
(= __@x0
(FStar.Reflection.V1.Data.Tv_App (FStar.Reflection.V1.Data.Tv_App_hd __@x0)
(FStar.Reflection.V1.Data.Tv_App_a __@x0)))))

; </end constructor FStar.Reflection.V1.Data.Tv_App>


; </end encoding FStar.Reflection.V1.Data.Tv_App>


; <Start encoding FStar.Reflection.V1.Data.Tv_Abs>


; <start constructor FStar.Reflection.V1.Data.Tv_Abs>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Tv_Abs ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
384)
(= __@x0
(FStar.Reflection.V1.Data.Tv_Abs (FStar.Reflection.V1.Data.Tv_Abs_bv __@x0)
(FStar.Reflection.V1.Data.Tv_Abs_body __@x0)))))

; </end constructor FStar.Reflection.V1.Data.Tv_Abs>


; </end encoding FStar.Reflection.V1.Data.Tv_Abs>


; <Start encoding FStar.Reflection.V1.Data.Tv_Arrow>


; <start constructor FStar.Reflection.V1.Data.Tv_Arrow>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Tv_Arrow ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
389)
(= __@x0
(FStar.Reflection.V1.Data.Tv_Arrow (FStar.Reflection.V1.Data.Tv_Arrow_bv __@x0)
(FStar.Reflection.V1.Data.Tv_Arrow_c __@x0)))))

; </end constructor FStar.Reflection.V1.Data.Tv_Arrow>


; </end encoding FStar.Reflection.V1.Data.Tv_Arrow>


; <Start encoding FStar.Reflection.V1.Data.Tv_Type>


; <start constructor FStar.Reflection.V1.Data.Tv_Type>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Tv_Type ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
394)
(= __@x0
(FStar.Reflection.V1.Data.Tv_Type (FStar.Reflection.V1.Data.Tv_Type__0 __@x0)))))

; </end constructor FStar.Reflection.V1.Data.Tv_Type>


; </end encoding FStar.Reflection.V1.Data.Tv_Type>


; <Start encoding FStar.Reflection.V1.Data.Tv_Refine>


; <start constructor FStar.Reflection.V1.Data.Tv_Refine>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Tv_Refine ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
399)
(= __@x0
(FStar.Reflection.V1.Data.Tv_Refine (FStar.Reflection.V1.Data.Tv_Refine_bv __@x0)
(FStar.Reflection.V1.Data.Tv_Refine_sort __@x0)
(FStar.Reflection.V1.Data.Tv_Refine_ref __@x0)))))

; </end constructor FStar.Reflection.V1.Data.Tv_Refine>


; </end encoding FStar.Reflection.V1.Data.Tv_Refine>


; <Start encoding FStar.Reflection.V1.Data.Tv_Const>


; <start constructor FStar.Reflection.V1.Data.Tv_Const>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Tv_Const ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
404)
(= __@x0
(FStar.Reflection.V1.Data.Tv_Const (FStar.Reflection.V1.Data.Tv_Const__0 __@x0)))))

; </end constructor FStar.Reflection.V1.Data.Tv_Const>


; </end encoding FStar.Reflection.V1.Data.Tv_Const>


; <Start encoding FStar.Reflection.V1.Data.Tv_Uvar>


; <start constructor FStar.Reflection.V1.Data.Tv_Uvar>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Tv_Uvar ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
409)
(= __@x0
(FStar.Reflection.V1.Data.Tv_Uvar (FStar.Reflection.V1.Data.Tv_Uvar__0 __@x0)
(FStar.Reflection.V1.Data.Tv_Uvar__1 __@x0)))))

; </end constructor FStar.Reflection.V1.Data.Tv_Uvar>


; </end encoding FStar.Reflection.V1.Data.Tv_Uvar>


; <Start encoding FStar.Reflection.V1.Data.Tv_Let>


; <start constructor FStar.Reflection.V1.Data.Tv_Let>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Tv_Let ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
414)
(= __@x0
(FStar.Reflection.V1.Data.Tv_Let (FStar.Reflection.V1.Data.Tv_Let_recf __@x0)
(FStar.Reflection.V1.Data.Tv_Let_attrs __@x0)
(FStar.Reflection.V1.Data.Tv_Let_bv __@x0)
(FStar.Reflection.V1.Data.Tv_Let_ty __@x0)
(FStar.Reflection.V1.Data.Tv_Let_def __@x0)
(FStar.Reflection.V1.Data.Tv_Let_body __@x0)))))

; </end constructor FStar.Reflection.V1.Data.Tv_Let>


; </end encoding FStar.Reflection.V1.Data.Tv_Let>


; <Start encoding FStar.Reflection.V1.Data.Tv_Match>


; <start constructor FStar.Reflection.V1.Data.Tv_Match>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Tv_Match ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
419)
(= __@x0
(FStar.Reflection.V1.Data.Tv_Match (FStar.Reflection.V1.Data.Tv_Match_scrutinee __@x0)
(FStar.Reflection.V1.Data.Tv_Match_ret __@x0)
(FStar.Reflection.V1.Data.Tv_Match_brs __@x0)))))

; </end constructor FStar.Reflection.V1.Data.Tv_Match>


; </end encoding FStar.Reflection.V1.Data.Tv_Match>


; <Start encoding FStar.Reflection.V1.Data.Tv_AscribedT>


; <start constructor FStar.Reflection.V1.Data.Tv_AscribedT>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Tv_AscribedT ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
424)
(= __@x0
(FStar.Reflection.V1.Data.Tv_AscribedT (FStar.Reflection.V1.Data.Tv_AscribedT_e __@x0)
(FStar.Reflection.V1.Data.Tv_AscribedT_t __@x0)
(FStar.Reflection.V1.Data.Tv_AscribedT_tac __@x0)
(FStar.Reflection.V1.Data.Tv_AscribedT_use_eq __@x0)))))

; </end constructor FStar.Reflection.V1.Data.Tv_AscribedT>


; </end encoding FStar.Reflection.V1.Data.Tv_AscribedT>


; <Start encoding FStar.Reflection.V1.Data.Tv_AscribedC>


; <start constructor FStar.Reflection.V1.Data.Tv_AscribedC>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Tv_AscribedC ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
429)
(= __@x0
(FStar.Reflection.V1.Data.Tv_AscribedC (FStar.Reflection.V1.Data.Tv_AscribedC_e __@x0)
(FStar.Reflection.V1.Data.Tv_AscribedC_c __@x0)
(FStar.Reflection.V1.Data.Tv_AscribedC_tac __@x0)
(FStar.Reflection.V1.Data.Tv_AscribedC_use_eq __@x0)))))

; </end constructor FStar.Reflection.V1.Data.Tv_AscribedC>


; </end encoding FStar.Reflection.V1.Data.Tv_AscribedC>


; <Start encoding FStar.Reflection.V1.Data.Tv_Unknown>


; <start constructor FStar.Reflection.V1.Data.Tv_Unknown>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Tv_Unknown ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
434)
(= __@x0
FStar.Reflection.V1.Data.Tv_Unknown)))

; </end constructor FStar.Reflection.V1.Data.Tv_Unknown>


; </end encoding FStar.Reflection.V1.Data.Tv_Unknown>


; <Start encoding FStar.Reflection.V1.Data.Tv_Unsupp>


; <start constructor FStar.Reflection.V1.Data.Tv_Unsupp>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Tv_Unsupp ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
436)
(= __@x0
FStar.Reflection.V1.Data.Tv_Unsupp)))

; </end constructor FStar.Reflection.V1.Data.Tv_Unsupp>


; </end encoding FStar.Reflection.V1.Data.Tv_Unsupp>


; </end encoding >


; <Start encoding FStar.Reflection.V1.Data.uu___is_Tv_Var>

(declare-fun FStar.Reflection.V1.Data.uu___is_Tv_Var (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V1.Data.term_view -> Prims.bool
(declare-fun Tm_arrow_cbebb8c4aefe8d7bd335404bde968f44 () Term)
(declare-fun FStar.Reflection.V1.Data.uu___is_Tv_Var@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Tv_Var>


; <Skipped FStar.Reflection.V1.Data.uu___is_Tv_Var/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Tv_Var__item__v>

(declare-fun Tm_refine_ac7ab67a82b9d6a7f0756b15a2d8dbd9 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_Var__item__v (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.term_view{Tv_Var? _} -> FStar.Reflection.Types.bv
(declare-fun Tm_arrow_568469bfe3189d795a9dff3791644844 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_Var__item__v@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Tv_Var__item__v>


; <Skipped FStar.Reflection.V1.Data.__proj__Tv_Var__item__v/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_Tv_BVar>

(declare-fun FStar.Reflection.V1.Data.uu___is_Tv_BVar (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_Tv_BVar@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Tv_BVar>


; <Skipped FStar.Reflection.V1.Data.uu___is_Tv_BVar/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Tv_BVar__item__v>

(declare-fun Tm_refine_f436b7d3d2f02c9267c5aabde2b87606 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_BVar__item__v (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.term_view{Tv_BVar? _} -> FStar.Reflection.Types.bv
(declare-fun Tm_arrow_de7ec1f215f7bb88435ef395a5df9698 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_BVar__item__v@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Tv_BVar__item__v>


; <Skipped FStar.Reflection.V1.Data.__proj__Tv_BVar__item__v/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_Tv_FVar>

(declare-fun FStar.Reflection.V1.Data.uu___is_Tv_FVar (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_Tv_FVar@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Tv_FVar>


; <Skipped FStar.Reflection.V1.Data.uu___is_Tv_FVar/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Tv_FVar__item__v>

(declare-fun Tm_refine_f11656ac8d25912e4fb3284f32b71abd () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_FVar__item__v (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.term_view{Tv_FVar? _} -> FStar.Reflection.Types.fv
(declare-fun Tm_arrow_534bab032db93ddb2e150fc961933453 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_FVar__item__v@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Tv_FVar__item__v>


; <Skipped FStar.Reflection.V1.Data.__proj__Tv_FVar__item__v/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_Tv_UInst>

(declare-fun FStar.Reflection.V1.Data.uu___is_Tv_UInst (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_Tv_UInst@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Tv_UInst>


; <Skipped FStar.Reflection.V1.Data.uu___is_Tv_UInst/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Tv_UInst__item__v>

(declare-fun Tm_refine_5acf95e7de71a6bcfb3b7a25dc7e50b3 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_UInst__item__v (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.term_view{Tv_UInst? _} -> FStar.Reflection.Types.fv
(declare-fun Tm_arrow_daad0d8535886226f469076a4136fe7e () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_UInst__item__v@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Tv_UInst__item__v>


; <Skipped FStar.Reflection.V1.Data.__proj__Tv_UInst__item__v/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Tv_UInst__item__us>


(declare-fun FStar.Reflection.V1.Data.__proj__Tv_UInst__item__us (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.term_view{Tv_UInst? _} -> FStar.Reflection.V1.Data.universes
(declare-fun Tm_arrow_8fd84ba0e7e01b97693afa4d79090ce0 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_UInst__item__us@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Tv_UInst__item__us>


; <Skipped FStar.Reflection.V1.Data.__proj__Tv_UInst__item__us/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_Tv_App>

(declare-fun FStar.Reflection.V1.Data.uu___is_Tv_App (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_Tv_App@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Tv_App>


; <Skipped FStar.Reflection.V1.Data.uu___is_Tv_App/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Tv_App__item__hd>

(declare-fun Tm_refine_563dd6c46b41527fa4608b62210fd6da () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_App__item__hd (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.term_view{Tv_App? _} -> FStar.Reflection.Types.term
(declare-fun Tm_arrow_a0582c15c0247d061f565491c6273395 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_App__item__hd@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Tv_App__item__hd>


; <Skipped FStar.Reflection.V1.Data.__proj__Tv_App__item__hd/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Tv_App__item__a>


(declare-fun FStar.Reflection.V1.Data.__proj__Tv_App__item__a (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.term_view{Tv_App? _} -> FStar.Reflection.V1.Data.argv
(declare-fun Tm_arrow_48020bb90fb10d7231902048c98b232e () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_App__item__a@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Tv_App__item__a>


; <Skipped FStar.Reflection.V1.Data.__proj__Tv_App__item__a/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_Tv_Abs>

(declare-fun FStar.Reflection.V1.Data.uu___is_Tv_Abs (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_Tv_Abs@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Tv_Abs>


; <Skipped FStar.Reflection.V1.Data.uu___is_Tv_Abs/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Tv_Abs__item__bv>

(declare-fun Tm_refine_8c42fe35f460045606da623e72254641 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_Abs__item__bv (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.term_view{Tv_Abs? _} -> FStar.Reflection.Types.binder
(declare-fun Tm_arrow_f101a95450b80793e8512514c50e4eb2 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_Abs__item__bv@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Tv_Abs__item__bv>


; <Skipped FStar.Reflection.V1.Data.__proj__Tv_Abs__item__bv/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Tv_Abs__item__body>


(declare-fun FStar.Reflection.V1.Data.__proj__Tv_Abs__item__body (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.term_view{Tv_Abs? _} -> FStar.Reflection.Types.term
(declare-fun Tm_arrow_d9ddaa9889460b56b559756dbc6b26ba () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_Abs__item__body@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Tv_Abs__item__body>


; <Skipped FStar.Reflection.V1.Data.__proj__Tv_Abs__item__body/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_Tv_Arrow>

(declare-fun FStar.Reflection.V1.Data.uu___is_Tv_Arrow (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_Tv_Arrow@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Tv_Arrow>


; <Skipped FStar.Reflection.V1.Data.uu___is_Tv_Arrow/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Tv_Arrow__item__bv>

(declare-fun Tm_refine_5730fe8e56c39c65a07a73afc6ec4cda () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_Arrow__item__bv (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.term_view{Tv_Arrow? _} -> FStar.Reflection.Types.binder
(declare-fun Tm_arrow_ce1333a05b9b77c23d91b4937742ac4f () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_Arrow__item__bv@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Tv_Arrow__item__bv>


; <Skipped FStar.Reflection.V1.Data.__proj__Tv_Arrow__item__bv/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Tv_Arrow__item__c>


(declare-fun FStar.Reflection.V1.Data.__proj__Tv_Arrow__item__c (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.term_view{Tv_Arrow? _} -> FStar.Reflection.Types.comp
(declare-fun Tm_arrow_b2c82522637a1ecf5bc8ff627aad02da () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_Arrow__item__c@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Tv_Arrow__item__c>


; <Skipped FStar.Reflection.V1.Data.__proj__Tv_Arrow__item__c/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_Tv_Type>

(declare-fun FStar.Reflection.V1.Data.uu___is_Tv_Type (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_Tv_Type@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Tv_Type>


; <Skipped FStar.Reflection.V1.Data.uu___is_Tv_Type/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Tv_Type__item___0>

(declare-fun Tm_refine_af4274e7d4358b25287142e54dd2febd () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_Type__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.term_view{Tv_Type? _} -> FStar.Reflection.Types.universe
(declare-fun Tm_arrow_b9073a3c0e1608141932084667245ad3 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_Type__item___0@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Tv_Type__item___0>


; <Skipped FStar.Reflection.V1.Data.__proj__Tv_Type__item___0/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_Tv_Refine>

(declare-fun FStar.Reflection.V1.Data.uu___is_Tv_Refine (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_Tv_Refine@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Tv_Refine>


; <Skipped FStar.Reflection.V1.Data.uu___is_Tv_Refine/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Tv_Refine__item__bv>

(declare-fun Tm_refine_5ff4de323a387a73a7ab910fc7e00ae7 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_Refine__item__bv (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.term_view{Tv_Refine? _} -> FStar.Reflection.Types.bv
(declare-fun Tm_arrow_e9588aea9ed21a6d588137fd484f1f8e () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_Refine__item__bv@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Tv_Refine__item__bv>


; <Skipped FStar.Reflection.V1.Data.__proj__Tv_Refine__item__bv/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Tv_Refine__item__sort>


(declare-fun FStar.Reflection.V1.Data.__proj__Tv_Refine__item__sort (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.term_view{Tv_Refine? _} -> FStar.Reflection.Types.typ
(declare-fun Tm_arrow_80e919eaa195892fbd935f5fd58d7c01 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_Refine__item__sort@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Tv_Refine__item__sort>


; <Skipped FStar.Reflection.V1.Data.__proj__Tv_Refine__item__sort/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Tv_Refine__item__ref>


(declare-fun FStar.Reflection.V1.Data.__proj__Tv_Refine__item__ref (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.term_view{Tv_Refine? _} -> FStar.Reflection.Types.term
(declare-fun Tm_arrow_f7644bb803e437469aa1533d3ccf4e5a () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_Refine__item__ref@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Tv_Refine__item__ref>


; <Skipped FStar.Reflection.V1.Data.__proj__Tv_Refine__item__ref/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_Tv_Const>

(declare-fun FStar.Reflection.V1.Data.uu___is_Tv_Const (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_Tv_Const@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Tv_Const>


; <Skipped FStar.Reflection.V1.Data.uu___is_Tv_Const/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Tv_Const__item___0>

(declare-fun Tm_refine_ab36f2c5a1987a868713af0740020802 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_Const__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.term_view{Tv_Const? _} -> FStar.Reflection.V1.Data.vconst
(declare-fun Tm_arrow_5e4f709071544a5c62e365fa1e4a4754 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_Const__item___0@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Tv_Const__item___0>


; <Skipped FStar.Reflection.V1.Data.__proj__Tv_Const__item___0/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_Tv_Uvar>

(declare-fun FStar.Reflection.V1.Data.uu___is_Tv_Uvar (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_Tv_Uvar@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Tv_Uvar>


; <Skipped FStar.Reflection.V1.Data.uu___is_Tv_Uvar/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Tv_Uvar__item___0>

(declare-fun Tm_refine_26389b868214dcf3205bbfb6d6a82044 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_Uvar__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.term_view{Tv_Uvar? _} -> Prims.nat
(declare-fun Tm_arrow_094189a12bb3bd710e0f64c13ea5db4b () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_Uvar__item___0@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Tv_Uvar__item___0>


; <Skipped FStar.Reflection.V1.Data.__proj__Tv_Uvar__item___0/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Tv_Uvar__item___1>


(declare-fun FStar.Reflection.V1.Data.__proj__Tv_Uvar__item___1 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.term_view{Tv_Uvar? _}   -> FStar.Reflection.Types.ctx_uvar_and_subst
(declare-fun Tm_arrow_1ac27b3ce01480e0222ef242ef5a6649 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_Uvar__item___1@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Tv_Uvar__item___1>


; <Skipped FStar.Reflection.V1.Data.__proj__Tv_Uvar__item___1/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_Tv_Let>

(declare-fun FStar.Reflection.V1.Data.uu___is_Tv_Let (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_Tv_Let@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Tv_Let>


; <Skipped FStar.Reflection.V1.Data.uu___is_Tv_Let/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Tv_Let__item__recf>

(declare-fun Tm_refine_3aa3214956e95ba92710251de6ae8eee () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_Let__item__recf (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.term_view{Tv_Let? _} -> Prims.bool
(declare-fun Tm_arrow_d7ad4b9eb3a5342cc14ff83965349f1f () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_Let__item__recf@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Tv_Let__item__recf>


; <Skipped FStar.Reflection.V1.Data.__proj__Tv_Let__item__recf/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Tv_Let__item__attrs>


(declare-fun FStar.Reflection.V1.Data.__proj__Tv_Let__item__attrs (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.term_view{Tv_Let? _}   -> Prims.list FStar.Reflection.Types.term
(declare-fun Tm_arrow_a1adcbf5abf7e4826108f2bff3866efb () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_Let__item__attrs@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Tv_Let__item__attrs>


; <Skipped FStar.Reflection.V1.Data.__proj__Tv_Let__item__attrs/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Tv_Let__item__bv>


(declare-fun FStar.Reflection.V1.Data.__proj__Tv_Let__item__bv (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.term_view{Tv_Let? _} -> FStar.Reflection.Types.bv
(declare-fun Tm_arrow_4f582028e0cb8f4e3e16ae1a212194ee () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_Let__item__bv@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Tv_Let__item__bv>


; <Skipped FStar.Reflection.V1.Data.__proj__Tv_Let__item__bv/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Tv_Let__item__ty>


(declare-fun FStar.Reflection.V1.Data.__proj__Tv_Let__item__ty (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.term_view{Tv_Let? _} -> FStar.Reflection.Types.typ
(declare-fun Tm_arrow_b44a8c43e9e3d1cd66d9c922d244b084 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_Let__item__ty@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Tv_Let__item__ty>


; <Skipped FStar.Reflection.V1.Data.__proj__Tv_Let__item__ty/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Tv_Let__item__def>


(declare-fun FStar.Reflection.V1.Data.__proj__Tv_Let__item__def (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.term_view{Tv_Let? _} -> FStar.Reflection.Types.term
(declare-fun Tm_arrow_29c71e513bcdb6e1030a9603f06c11dc () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_Let__item__def@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Tv_Let__item__def>


; <Skipped FStar.Reflection.V1.Data.__proj__Tv_Let__item__def/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Tv_Let__item__body>


(declare-fun FStar.Reflection.V1.Data.__proj__Tv_Let__item__body (Term) Term)


(declare-fun FStar.Reflection.V1.Data.__proj__Tv_Let__item__body@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Tv_Let__item__body>


; <Skipped FStar.Reflection.V1.Data.__proj__Tv_Let__item__body/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_Tv_Match>

(declare-fun FStar.Reflection.V1.Data.uu___is_Tv_Match (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_Tv_Match@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Tv_Match>


; <Skipped FStar.Reflection.V1.Data.uu___is_Tv_Match/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Tv_Match__item__scrutinee>

(declare-fun Tm_refine_763a4b5b6214e1dd87a03c65beb109e1 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_Match__item__scrutinee (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.term_view{Tv_Match? _} -> FStar.Reflection.Types.term
(declare-fun Tm_arrow_5f6941056ee1bb52889b2a08436e1aa2 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_Match__item__scrutinee@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Tv_Match__item__scrutinee>


; <Skipped FStar.Reflection.V1.Data.__proj__Tv_Match__item__scrutinee/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Tv_Match__item__ret>


(declare-fun FStar.Reflection.V1.Data.__proj__Tv_Match__item__ret (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.term_view{Tv_Match? _}   -> FStar.Pervasives.Native.option FStar.Reflection.Types.match_returns_ascription
(declare-fun Tm_arrow_5a0033168fdd405f4a2ca27f8cf881bf () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_Match__item__ret@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Tv_Match__item__ret>


; <Skipped FStar.Reflection.V1.Data.__proj__Tv_Match__item__ret/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Tv_Match__item__brs>


(declare-fun FStar.Reflection.V1.Data.__proj__Tv_Match__item__brs (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.term_view{Tv_Match? _}   -> Prims.list FStar.Reflection.V1.Data.branch
(declare-fun Tm_arrow_8eda21f83181ac2ad6dc6c92ad4f65d0 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_Match__item__brs@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Tv_Match__item__brs>


; <Skipped FStar.Reflection.V1.Data.__proj__Tv_Match__item__brs/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_Tv_AscribedT>

(declare-fun FStar.Reflection.V1.Data.uu___is_Tv_AscribedT (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_Tv_AscribedT@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Tv_AscribedT>


; <Skipped FStar.Reflection.V1.Data.uu___is_Tv_AscribedT/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Tv_AscribedT__item__e>

(declare-fun Tm_refine_0e4e467f2e7420d0a00c571d1b9f3c98 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_AscribedT__item__e (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.term_view{Tv_AscribedT? _} -> FStar.Reflection.Types.term
(declare-fun Tm_arrow_9eec67d99e0ccc3df8f5edbdbfb6dfc7 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_AscribedT__item__e@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Tv_AscribedT__item__e>


; <Skipped FStar.Reflection.V1.Data.__proj__Tv_AscribedT__item__e/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Tv_AscribedT__item__t>


(declare-fun FStar.Reflection.V1.Data.__proj__Tv_AscribedT__item__t (Term) Term)


(declare-fun FStar.Reflection.V1.Data.__proj__Tv_AscribedT__item__t@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Tv_AscribedT__item__t>


; <Skipped FStar.Reflection.V1.Data.__proj__Tv_AscribedT__item__t/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Tv_AscribedT__item__tac>


(declare-fun FStar.Reflection.V1.Data.__proj__Tv_AscribedT__item__tac (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.term_view{Tv_AscribedT? _}   -> FStar.Pervasives.Native.option FStar.Reflection.Types.term
(declare-fun Tm_arrow_5117e4831e45cd3ba749ebd52316a1d7 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_AscribedT__item__tac@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Tv_AscribedT__item__tac>


; <Skipped FStar.Reflection.V1.Data.__proj__Tv_AscribedT__item__tac/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Tv_AscribedT__item__use_eq>


(declare-fun FStar.Reflection.V1.Data.__proj__Tv_AscribedT__item__use_eq (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.term_view{Tv_AscribedT? _} -> Prims.bool
(declare-fun Tm_arrow_ecf01ff793cc52316ddfa0ced6799290 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_AscribedT__item__use_eq@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Tv_AscribedT__item__use_eq>


; <Skipped FStar.Reflection.V1.Data.__proj__Tv_AscribedT__item__use_eq/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_Tv_AscribedC>

(declare-fun FStar.Reflection.V1.Data.uu___is_Tv_AscribedC (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_Tv_AscribedC@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Tv_AscribedC>


; <Skipped FStar.Reflection.V1.Data.uu___is_Tv_AscribedC/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Tv_AscribedC__item__e>

(declare-fun Tm_refine_c70e5cc7fa76b0c5fafcadb1c6760f00 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_AscribedC__item__e (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.term_view{Tv_AscribedC? _} -> FStar.Reflection.Types.term
(declare-fun Tm_arrow_cb79f78447dd992264c697404d5d0fa1 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_AscribedC__item__e@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Tv_AscribedC__item__e>


; <Skipped FStar.Reflection.V1.Data.__proj__Tv_AscribedC__item__e/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Tv_AscribedC__item__c>


(declare-fun FStar.Reflection.V1.Data.__proj__Tv_AscribedC__item__c (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.term_view{Tv_AscribedC? _} -> FStar.Reflection.Types.comp
(declare-fun Tm_arrow_23a697cd2fd93473f44568a2a12b4691 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_AscribedC__item__c@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Tv_AscribedC__item__c>


; <Skipped FStar.Reflection.V1.Data.__proj__Tv_AscribedC__item__c/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Tv_AscribedC__item__tac>


(declare-fun FStar.Reflection.V1.Data.__proj__Tv_AscribedC__item__tac (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.term_view{Tv_AscribedC? _}   -> FStar.Pervasives.Native.option FStar.Reflection.Types.term
(declare-fun Tm_arrow_e973f1af75618dab86ad16710f8ca736 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_AscribedC__item__tac@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Tv_AscribedC__item__tac>


; <Skipped FStar.Reflection.V1.Data.__proj__Tv_AscribedC__item__tac/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Tv_AscribedC__item__use_eq>


(declare-fun FStar.Reflection.V1.Data.__proj__Tv_AscribedC__item__use_eq (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.term_view{Tv_AscribedC? _} -> Prims.bool
(declare-fun Tm_arrow_6ff8a0d5f08c5ff4fda2f5275b7a7e43 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Tv_AscribedC__item__use_eq@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Tv_AscribedC__item__use_eq>


; <Skipped FStar.Reflection.V1.Data.__proj__Tv_AscribedC__item__use_eq/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_Tv_Unknown>

(declare-fun FStar.Reflection.V1.Data.uu___is_Tv_Unknown (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_Tv_Unknown@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Tv_Unknown>


; <Skipped FStar.Reflection.V1.Data.uu___is_Tv_Unknown/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_Tv_Unsupp>

(declare-fun FStar.Reflection.V1.Data.uu___is_Tv_Unsupp (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_Tv_Unsupp@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Tv_Unsupp>


; <Skipped FStar.Reflection.V1.Data.uu___is_Tv_Unsupp/>


; <Start encoding FStar.Reflection.V1.Data.notAscription>

(declare-fun FStar.Reflection.V1.Data.notAscription (Term) Term)

(declare-fun FStar.Reflection.V1.Data.notAscription@tok () Term)

; </end encoding FStar.Reflection.V1.Data.notAscription>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.comp_view () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.C_Total (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.C_Total_ret (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: C_Total
(declare-fun FStar.Reflection.V1.Data.C_Total@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.C_GTotal (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.C_GTotal_ret (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: C_GTotal
(declare-fun FStar.Reflection.V1.Data.C_GTotal@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.C_Lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.C_Lemma__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.C_Lemma__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.C_Lemma__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: C_Lemma
(declare-fun FStar.Reflection.V1.Data.C_Lemma@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.C_Eff (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.C_Eff_us (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.C_Eff_eff_name (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.C_Eff_result (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.C_Eff_eff_args (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.C_Eff_decrs (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: C_Eff
(declare-fun FStar.Reflection.V1.Data.C_Eff@tok () Term)
;;;;;;;;;;;;;;;;ret: FStar.Reflection.Types.typ -> FStar.Reflection.V1.Data.comp_view
(declare-fun Tm_arrow_a6493cda5938ff2dfe9a854d3e5e4646 () Term)

;;;;;;;;;;;;;;;;_0: FStar.Reflection.Types.term ->     _1: FStar.Reflection.Types.term ->     _2: FStar.Reflection.Types.term   -> FStar.Reflection.V1.Data.comp_view
(declare-fun Tm_arrow_66103f55511535119442fb163824a9dd () Term)
;;;;;;;;;;;;;;;;us: FStar.Reflection.V1.Data.universes ->     eff_name: FStar.Reflection.Types.name ->     result: FStar.Reflection.Types.term ->     eff_args: Prims.list FStar.Reflection.V1.Data.argv ->     decrs: Prims.list FStar.Reflection.Types.term   -> FStar.Reflection.V1.Data.comp_view
(declare-fun Tm_arrow_7b7f98e01251f3d19e4402b1309f37ee () Term)

; <Start encoding FStar.Reflection.V1.Data.comp_view>


; <start constructor FStar.Reflection.V1.Data.comp_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.comp_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
613)
(= __@x0
FStar.Reflection.V1.Data.comp_view)))

; </end constructor FStar.Reflection.V1.Data.comp_view>


; </end encoding FStar.Reflection.V1.Data.comp_view>


; <Start encoding FStar.Reflection.V1.Data.C_Total>


; <start constructor FStar.Reflection.V1.Data.C_Total>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.C_Total ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
619)
(= __@x0
(FStar.Reflection.V1.Data.C_Total (FStar.Reflection.V1.Data.C_Total_ret __@x0)))))

; </end constructor FStar.Reflection.V1.Data.C_Total>


; </end encoding FStar.Reflection.V1.Data.C_Total>


; <Start encoding FStar.Reflection.V1.Data.C_GTotal>


; <start constructor FStar.Reflection.V1.Data.C_GTotal>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.C_GTotal ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
624)
(= __@x0
(FStar.Reflection.V1.Data.C_GTotal (FStar.Reflection.V1.Data.C_GTotal_ret __@x0)))))

; </end constructor FStar.Reflection.V1.Data.C_GTotal>


; </end encoding FStar.Reflection.V1.Data.C_GTotal>


; <Start encoding FStar.Reflection.V1.Data.C_Lemma>


; <start constructor FStar.Reflection.V1.Data.C_Lemma>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.C_Lemma ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
629)
(= __@x0
(FStar.Reflection.V1.Data.C_Lemma (FStar.Reflection.V1.Data.C_Lemma__0 __@x0)
(FStar.Reflection.V1.Data.C_Lemma__1 __@x0)
(FStar.Reflection.V1.Data.C_Lemma__2 __@x0)))))

; </end constructor FStar.Reflection.V1.Data.C_Lemma>


; </end encoding FStar.Reflection.V1.Data.C_Lemma>


; <Start encoding FStar.Reflection.V1.Data.C_Eff>


; <start constructor FStar.Reflection.V1.Data.C_Eff>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.C_Eff ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
634)
(= __@x0
(FStar.Reflection.V1.Data.C_Eff (FStar.Reflection.V1.Data.C_Eff_us __@x0)
(FStar.Reflection.V1.Data.C_Eff_eff_name __@x0)
(FStar.Reflection.V1.Data.C_Eff_result __@x0)
(FStar.Reflection.V1.Data.C_Eff_eff_args __@x0)
(FStar.Reflection.V1.Data.C_Eff_decrs __@x0)))))

; </end constructor FStar.Reflection.V1.Data.C_Eff>


; </end encoding FStar.Reflection.V1.Data.C_Eff>


; </end encoding >


; <Start encoding FStar.Reflection.V1.Data.uu___is_C_Total>

(declare-fun FStar.Reflection.V1.Data.uu___is_C_Total (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V1.Data.comp_view -> Prims.bool
(declare-fun Tm_arrow_7775e47e8a4232871cb7f4e587e22533 () Term)
(declare-fun FStar.Reflection.V1.Data.uu___is_C_Total@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_C_Total>


; <Skipped FStar.Reflection.V1.Data.uu___is_C_Total/>


; <Start encoding FStar.Reflection.V1.Data.__proj__C_Total__item__ret>

(declare-fun Tm_refine_1da80b8d10b61c766ff8e467df7dd950 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__C_Total__item__ret (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.comp_view{C_Total? _} -> FStar.Reflection.Types.typ
(declare-fun Tm_arrow_2c81d2aa1f1a9a105c5b53b07c864267 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__C_Total__item__ret@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__C_Total__item__ret>


; <Skipped FStar.Reflection.V1.Data.__proj__C_Total__item__ret/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_C_GTotal>

(declare-fun FStar.Reflection.V1.Data.uu___is_C_GTotal (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_C_GTotal@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_C_GTotal>


; <Skipped FStar.Reflection.V1.Data.uu___is_C_GTotal/>


; <Start encoding FStar.Reflection.V1.Data.__proj__C_GTotal__item__ret>

(declare-fun Tm_refine_0620da020c821ec7e521a018dce18ac1 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__C_GTotal__item__ret (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.comp_view{C_GTotal? _} -> FStar.Reflection.Types.typ
(declare-fun Tm_arrow_033942db8093dbb27298d21821a2be50 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__C_GTotal__item__ret@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__C_GTotal__item__ret>


; <Skipped FStar.Reflection.V1.Data.__proj__C_GTotal__item__ret/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_C_Lemma>

(declare-fun FStar.Reflection.V1.Data.uu___is_C_Lemma (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_C_Lemma@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_C_Lemma>


; <Skipped FStar.Reflection.V1.Data.uu___is_C_Lemma/>


; <Start encoding FStar.Reflection.V1.Data.__proj__C_Lemma__item___0>

(declare-fun Tm_refine_e86623164f60a62649ddc84727261986 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__C_Lemma__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.comp_view{C_Lemma? _} -> FStar.Reflection.Types.term
(declare-fun Tm_arrow_335bd506beb218bfec888b69ee45efdb () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__C_Lemma__item___0@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__C_Lemma__item___0>


; <Skipped FStar.Reflection.V1.Data.__proj__C_Lemma__item___0/>


; <Start encoding FStar.Reflection.V1.Data.__proj__C_Lemma__item___1>


(declare-fun FStar.Reflection.V1.Data.__proj__C_Lemma__item___1 (Term) Term)


(declare-fun FStar.Reflection.V1.Data.__proj__C_Lemma__item___1@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__C_Lemma__item___1>


; <Skipped FStar.Reflection.V1.Data.__proj__C_Lemma__item___1/>


; <Start encoding FStar.Reflection.V1.Data.__proj__C_Lemma__item___2>


(declare-fun FStar.Reflection.V1.Data.__proj__C_Lemma__item___2 (Term) Term)


(declare-fun FStar.Reflection.V1.Data.__proj__C_Lemma__item___2@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__C_Lemma__item___2>


; <Skipped FStar.Reflection.V1.Data.__proj__C_Lemma__item___2/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_C_Eff>

(declare-fun FStar.Reflection.V1.Data.uu___is_C_Eff (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_C_Eff@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_C_Eff>


; <Skipped FStar.Reflection.V1.Data.uu___is_C_Eff/>


; <Start encoding FStar.Reflection.V1.Data.__proj__C_Eff__item__us>

(declare-fun Tm_refine_a1a95e70a5bb3bd58904b1f905f8f614 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__C_Eff__item__us (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.comp_view{C_Eff? _} -> FStar.Reflection.V1.Data.universes
(declare-fun Tm_arrow_df5299261a2850b47cb2fa335e125893 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__C_Eff__item__us@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__C_Eff__item__us>


; <Skipped FStar.Reflection.V1.Data.__proj__C_Eff__item__us/>


; <Start encoding FStar.Reflection.V1.Data.__proj__C_Eff__item__eff_name>


(declare-fun FStar.Reflection.V1.Data.__proj__C_Eff__item__eff_name (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.comp_view{C_Eff? _} -> FStar.Reflection.Types.name
(declare-fun Tm_arrow_f7bd4c416a676f0ea4ee646220e49fa9 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__C_Eff__item__eff_name@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__C_Eff__item__eff_name>


; <Skipped FStar.Reflection.V1.Data.__proj__C_Eff__item__eff_name/>


; <Start encoding FStar.Reflection.V1.Data.__proj__C_Eff__item__result>


(declare-fun FStar.Reflection.V1.Data.__proj__C_Eff__item__result (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.comp_view{C_Eff? _} -> FStar.Reflection.Types.term
(declare-fun Tm_arrow_a76cb53f90386a93a9be13c8dff47004 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__C_Eff__item__result@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__C_Eff__item__result>


; <Skipped FStar.Reflection.V1.Data.__proj__C_Eff__item__result/>


; <Start encoding FStar.Reflection.V1.Data.__proj__C_Eff__item__eff_args>


(declare-fun FStar.Reflection.V1.Data.__proj__C_Eff__item__eff_args (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.comp_view{C_Eff? _}   -> Prims.list FStar.Reflection.V1.Data.argv
(declare-fun Tm_arrow_f4173ec5092df503d9a4917762db1810 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__C_Eff__item__eff_args@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__C_Eff__item__eff_args>


; <Skipped FStar.Reflection.V1.Data.__proj__C_Eff__item__eff_args/>


; <Start encoding FStar.Reflection.V1.Data.__proj__C_Eff__item__decrs>


(declare-fun FStar.Reflection.V1.Data.__proj__C_Eff__item__decrs (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.comp_view{C_Eff? _} -> Prims.list FStar.Reflection.Types.term
(declare-fun Tm_arrow_de213a93056bbe8b8acd66731af56cf6 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__C_Eff__item__decrs@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__C_Eff__item__decrs>


; <Skipped FStar.Reflection.V1.Data.__proj__C_Eff__item__decrs/>


; <Start encoding FStar.Reflection.V1.Data.ctor>

(declare-fun FStar.Reflection.V1.Data.ctor () Term)

; </end encoding FStar.Reflection.V1.Data.ctor>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.lb_view () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Mklb_view (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Mklb_view_lb_fv (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Mklb_view_lb_us (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Mklb_view_lb_typ (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Mklb_view_lb_def (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mklb_view
(declare-fun FStar.Reflection.V1.Data.Mklb_view@tok () Term)
;;;;;;;;;;;;;;;;lb_fv: FStar.Reflection.Types.fv ->     lb_us: Prims.list FStar.Reflection.V1.Data.univ_name ->     lb_typ: FStar.Reflection.Types.typ ->     lb_def: FStar.Reflection.Types.term   -> FStar.Reflection.V1.Data.lb_view
(declare-fun Tm_arrow_1915ac9a6d82adbd2f3830186ae5dfbc () Term)

; <Start encoding FStar.Reflection.V1.Data.lb_view>


; <start constructor FStar.Reflection.V1.Data.lb_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.lb_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
686)
(= __@x0
FStar.Reflection.V1.Data.lb_view)))

; </end constructor FStar.Reflection.V1.Data.lb_view>


; </end encoding FStar.Reflection.V1.Data.lb_view>


; <Start encoding FStar.Reflection.V1.Data.Mklb_view>


; <start constructor FStar.Reflection.V1.Data.Mklb_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Mklb_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
692)
(= __@x0
(FStar.Reflection.V1.Data.Mklb_view (FStar.Reflection.V1.Data.Mklb_view_lb_fv __@x0)
(FStar.Reflection.V1.Data.Mklb_view_lb_us __@x0)
(FStar.Reflection.V1.Data.Mklb_view_lb_typ __@x0)
(FStar.Reflection.V1.Data.Mklb_view_lb_def __@x0)))))

; </end constructor FStar.Reflection.V1.Data.Mklb_view>


; </end encoding FStar.Reflection.V1.Data.Mklb_view>


; </end encoding >


; <Start encoding FStar.Reflection.V1.Data.__proj__Mklb_view__item__lb_fv>

(declare-fun FStar.Reflection.V1.Data.__proj__Mklb_view__item__lb_fv (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V1.Data.lb_view -> FStar.Reflection.Types.fv
(declare-fun Tm_arrow_fe558608d9ffe23e7b993db3c44a4124 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Mklb_view__item__lb_fv@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Mklb_view__item__lb_fv>


; <Skipped FStar.Reflection.V1.Data.__proj__Mklb_view__item__lb_fv/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Mklb_view__item__lb_us>

(declare-fun FStar.Reflection.V1.Data.__proj__Mklb_view__item__lb_us (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V1.Data.lb_view -> Prims.list FStar.Reflection.V1.Data.univ_name
(declare-fun Tm_arrow_a768ec8ccacc172215a212ab77178b6d () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Mklb_view__item__lb_us@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Mklb_view__item__lb_us>


; <Skipped FStar.Reflection.V1.Data.__proj__Mklb_view__item__lb_us/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Mklb_view__item__lb_typ>

(declare-fun FStar.Reflection.V1.Data.__proj__Mklb_view__item__lb_typ (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V1.Data.lb_view -> FStar.Reflection.Types.typ
(declare-fun Tm_arrow_c50a9a21197ebc55ca4c8b22ba5928c6 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Mklb_view__item__lb_typ@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Mklb_view__item__lb_typ>


; <Skipped FStar.Reflection.V1.Data.__proj__Mklb_view__item__lb_typ/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Mklb_view__item__lb_def>

(declare-fun FStar.Reflection.V1.Data.__proj__Mklb_view__item__lb_def (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V1.Data.lb_view -> FStar.Reflection.Types.term
(declare-fun Tm_arrow_2921577053bc2acffa8a546c3e7417c5 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Mklb_view__item__lb_def@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Mklb_view__item__lb_def>


; <Skipped FStar.Reflection.V1.Data.__proj__Mklb_view__item__lb_def/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.sigelt_view () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Sg_Let (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Sg_Let_r (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Sg_Let_lbs (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Sg_Let
(declare-fun FStar.Reflection.V1.Data.Sg_Let@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Sg_Inductive (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Sg_Inductive_nm (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Sg_Inductive_univs (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Sg_Inductive_params (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Sg_Inductive_typ (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Sg_Inductive_cts (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Sg_Inductive
(declare-fun FStar.Reflection.V1.Data.Sg_Inductive@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Sg_Val (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Sg_Val_nm (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Sg_Val_univs (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Sg_Val_typ (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Sg_Val
(declare-fun FStar.Reflection.V1.Data.Sg_Val@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Unk () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Unk
(declare-fun FStar.Reflection.V1.Data.Unk@tok () Term)
;;;;;;;;;;;;;;;;r: Prims.bool -> lbs: Prims.list FStar.Reflection.Types.letbinding   -> FStar.Reflection.V1.Data.sigelt_view
(declare-fun Tm_arrow_f266259d106cde8e5b8e622b0b6e1e6a () Term)
;;;;;;;;;;;;;;;;nm: FStar.Reflection.Types.name ->     univs: Prims.list FStar.Reflection.V1.Data.univ_name ->     params: FStar.Reflection.Types.binders ->     typ: FStar.Reflection.Types.typ ->     cts: Prims.list FStar.Reflection.V1.Data.ctor   -> FStar.Reflection.V1.Data.sigelt_view
(declare-fun Tm_arrow_8730e864ab391004ed91bd4992afa3fc () Term)
;;;;;;;;;;;;;;;;nm: FStar.Reflection.Types.name ->     univs: Prims.list FStar.Reflection.V1.Data.univ_name ->     typ: FStar.Reflection.Types.typ   -> FStar.Reflection.V1.Data.sigelt_view
(declare-fun Tm_arrow_80eb1784fc1c1265dd5f8d14b0f8dbcb () Term)

; <Start encoding FStar.Reflection.V1.Data.sigelt_view>


; <start constructor FStar.Reflection.V1.Data.sigelt_view>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.sigelt_view ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
704)
(= __@x0
FStar.Reflection.V1.Data.sigelt_view)))

; </end constructor FStar.Reflection.V1.Data.sigelt_view>


; </end encoding FStar.Reflection.V1.Data.sigelt_view>


; <Start encoding FStar.Reflection.V1.Data.Sg_Let>


; <start constructor FStar.Reflection.V1.Data.Sg_Let>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Sg_Let ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
710)
(= __@x0
(FStar.Reflection.V1.Data.Sg_Let (FStar.Reflection.V1.Data.Sg_Let_r __@x0)
(FStar.Reflection.V1.Data.Sg_Let_lbs __@x0)))))

; </end constructor FStar.Reflection.V1.Data.Sg_Let>


; </end encoding FStar.Reflection.V1.Data.Sg_Let>


; <Start encoding FStar.Reflection.V1.Data.Sg_Inductive>


; <start constructor FStar.Reflection.V1.Data.Sg_Inductive>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Sg_Inductive ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
715)
(= __@x0
(FStar.Reflection.V1.Data.Sg_Inductive (FStar.Reflection.V1.Data.Sg_Inductive_nm __@x0)
(FStar.Reflection.V1.Data.Sg_Inductive_univs __@x0)
(FStar.Reflection.V1.Data.Sg_Inductive_params __@x0)
(FStar.Reflection.V1.Data.Sg_Inductive_typ __@x0)
(FStar.Reflection.V1.Data.Sg_Inductive_cts __@x0)))))

; </end constructor FStar.Reflection.V1.Data.Sg_Inductive>


; </end encoding FStar.Reflection.V1.Data.Sg_Inductive>


; <Start encoding FStar.Reflection.V1.Data.Sg_Val>


; <start constructor FStar.Reflection.V1.Data.Sg_Val>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Sg_Val ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
720)
(= __@x0
(FStar.Reflection.V1.Data.Sg_Val (FStar.Reflection.V1.Data.Sg_Val_nm __@x0)
(FStar.Reflection.V1.Data.Sg_Val_univs __@x0)
(FStar.Reflection.V1.Data.Sg_Val_typ __@x0)))))

; </end constructor FStar.Reflection.V1.Data.Sg_Val>


; </end encoding FStar.Reflection.V1.Data.Sg_Val>


; <Start encoding FStar.Reflection.V1.Data.Unk>


; <start constructor FStar.Reflection.V1.Data.Unk>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Unk ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
725)
(= __@x0
FStar.Reflection.V1.Data.Unk)))

; </end constructor FStar.Reflection.V1.Data.Unk>


; </end encoding FStar.Reflection.V1.Data.Unk>


; </end encoding >


; <Start encoding FStar.Reflection.V1.Data.uu___is_Sg_Let>

(declare-fun FStar.Reflection.V1.Data.uu___is_Sg_Let (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V1.Data.sigelt_view -> Prims.bool
(declare-fun Tm_arrow_0a7e65ee557862fb6ab5355b81291840 () Term)
(declare-fun FStar.Reflection.V1.Data.uu___is_Sg_Let@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Sg_Let>


; <Skipped FStar.Reflection.V1.Data.uu___is_Sg_Let/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Sg_Let__item__r>

(declare-fun Tm_refine_6823610c6506c42a7079b513145ff476 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Sg_Let__item__r (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.sigelt_view{Sg_Let? _} -> Prims.bool
(declare-fun Tm_arrow_de013d4fe6206f68a8b6ad204ecf4da0 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Sg_Let__item__r@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Sg_Let__item__r>


; <Skipped FStar.Reflection.V1.Data.__proj__Sg_Let__item__r/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Sg_Let__item__lbs>


(declare-fun FStar.Reflection.V1.Data.__proj__Sg_Let__item__lbs (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.sigelt_view{Sg_Let? _}   -> Prims.list FStar.Reflection.Types.letbinding
(declare-fun Tm_arrow_06d1e20b7ec1bfe7b08698ac5273f17d () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Sg_Let__item__lbs@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Sg_Let__item__lbs>


; <Skipped FStar.Reflection.V1.Data.__proj__Sg_Let__item__lbs/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_Sg_Inductive>

(declare-fun FStar.Reflection.V1.Data.uu___is_Sg_Inductive (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_Sg_Inductive@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Sg_Inductive>


; <Skipped FStar.Reflection.V1.Data.uu___is_Sg_Inductive/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Sg_Inductive__item__nm>

(declare-fun Tm_refine_53eda7b16bf0d76ac6387bfe75b9c989 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Sg_Inductive__item__nm (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.sigelt_view{Sg_Inductive? _} -> FStar.Reflection.Types.name
(declare-fun Tm_arrow_31936aae8226eab144e523bf6225e3f2 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Sg_Inductive__item__nm@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Sg_Inductive__item__nm>


; <Skipped FStar.Reflection.V1.Data.__proj__Sg_Inductive__item__nm/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Sg_Inductive__item__univs>


(declare-fun FStar.Reflection.V1.Data.__proj__Sg_Inductive__item__univs (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.sigelt_view{Sg_Inductive? _}   -> Prims.list FStar.Reflection.V1.Data.univ_name
(declare-fun Tm_arrow_77dca03eb1b8e77e0cc1a60cbe97d3f4 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Sg_Inductive__item__univs@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Sg_Inductive__item__univs>


; <Skipped FStar.Reflection.V1.Data.__proj__Sg_Inductive__item__univs/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Sg_Inductive__item__params>


(declare-fun FStar.Reflection.V1.Data.__proj__Sg_Inductive__item__params (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.sigelt_view{Sg_Inductive? _}   -> FStar.Reflection.Types.binders
(declare-fun Tm_arrow_002d446147acafaa354bd5382cb736a5 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Sg_Inductive__item__params@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Sg_Inductive__item__params>


; <Skipped FStar.Reflection.V1.Data.__proj__Sg_Inductive__item__params/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Sg_Inductive__item__typ>


(declare-fun FStar.Reflection.V1.Data.__proj__Sg_Inductive__item__typ (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.sigelt_view{Sg_Inductive? _} -> FStar.Reflection.Types.typ
(declare-fun Tm_arrow_32cf16a18778db295a8d263cb2739a78 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Sg_Inductive__item__typ@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Sg_Inductive__item__typ>


; <Skipped FStar.Reflection.V1.Data.__proj__Sg_Inductive__item__typ/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Sg_Inductive__item__cts>


(declare-fun FStar.Reflection.V1.Data.__proj__Sg_Inductive__item__cts (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.sigelt_view{Sg_Inductive? _}   -> Prims.list FStar.Reflection.V1.Data.ctor
(declare-fun Tm_arrow_e921f604159ebf68803f443d118f5989 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Sg_Inductive__item__cts@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Sg_Inductive__item__cts>


; <Skipped FStar.Reflection.V1.Data.__proj__Sg_Inductive__item__cts/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_Sg_Val>

(declare-fun FStar.Reflection.V1.Data.uu___is_Sg_Val (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_Sg_Val@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Sg_Val>


; <Skipped FStar.Reflection.V1.Data.uu___is_Sg_Val/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Sg_Val__item__nm>

(declare-fun Tm_refine_499901c8bdeb6207051525350960057b () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Sg_Val__item__nm (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.sigelt_view{Sg_Val? _} -> FStar.Reflection.Types.name
(declare-fun Tm_arrow_72299482dfb2bf5c8cd2e4f62c7833ad () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Sg_Val__item__nm@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Sg_Val__item__nm>


; <Skipped FStar.Reflection.V1.Data.__proj__Sg_Val__item__nm/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Sg_Val__item__univs>


(declare-fun FStar.Reflection.V1.Data.__proj__Sg_Val__item__univs (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.sigelt_view{Sg_Val? _}   -> Prims.list FStar.Reflection.V1.Data.univ_name
(declare-fun Tm_arrow_cd01b4c10c5e47c045066c03e4279ac4 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Sg_Val__item__univs@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Sg_Val__item__univs>


; <Skipped FStar.Reflection.V1.Data.__proj__Sg_Val__item__univs/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Sg_Val__item__typ>


(declare-fun FStar.Reflection.V1.Data.__proj__Sg_Val__item__typ (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.sigelt_view{Sg_Val? _} -> FStar.Reflection.Types.typ
(declare-fun Tm_arrow_9279b1c23751d4bbf44e2bc6e95b7a83 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Sg_Val__item__typ@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Sg_Val__item__typ>


; <Skipped FStar.Reflection.V1.Data.__proj__Sg_Val__item__typ/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_Unk>

(declare-fun FStar.Reflection.V1.Data.uu___is_Unk (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_Unk@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Unk>


; <Skipped FStar.Reflection.V1.Data.uu___is_Unk/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.qualifier () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Assumption () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Assumption
(declare-fun FStar.Reflection.V1.Data.Assumption@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.InternalAssumption () Term)
;;;;;;;;;;;;;;;;data constructor proxy: InternalAssumption
(declare-fun FStar.Reflection.V1.Data.InternalAssumption@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.New () Term)
;;;;;;;;;;;;;;;;data constructor proxy: New
(declare-fun FStar.Reflection.V1.Data.New@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Private () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Private
(declare-fun FStar.Reflection.V1.Data.Private@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Unfold_for_unification_and_vcgen () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Unfold_for_unification_and_vcgen
(declare-fun FStar.Reflection.V1.Data.Unfold_for_unification_and_vcgen@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Visible_default () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Visible_default
(declare-fun FStar.Reflection.V1.Data.Visible_default@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Irreducible () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Irreducible
(declare-fun FStar.Reflection.V1.Data.Irreducible@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Inline_for_extraction () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Inline_for_extraction
(declare-fun FStar.Reflection.V1.Data.Inline_for_extraction@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.NoExtract () Term)
;;;;;;;;;;;;;;;;data constructor proxy: NoExtract
(declare-fun FStar.Reflection.V1.Data.NoExtract@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Noeq () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Noeq
(declare-fun FStar.Reflection.V1.Data.Noeq@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Unopteq () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Unopteq
(declare-fun FStar.Reflection.V1.Data.Unopteq@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.TotalEffect () Term)
;;;;;;;;;;;;;;;;data constructor proxy: TotalEffect
(declare-fun FStar.Reflection.V1.Data.TotalEffect@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Logic () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Logic
(declare-fun FStar.Reflection.V1.Data.Logic@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Reifiable () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Reifiable
(declare-fun FStar.Reflection.V1.Data.Reifiable@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Reflectable (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Reflectable__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Reflectable
(declare-fun FStar.Reflection.V1.Data.Reflectable@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Discriminator (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Discriminator__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Discriminator
(declare-fun FStar.Reflection.V1.Data.Discriminator@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Projector (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Projector__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Projector
(declare-fun FStar.Reflection.V1.Data.Projector@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.RecordType (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.RecordType__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: RecordType
(declare-fun FStar.Reflection.V1.Data.RecordType@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.RecordConstructor (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.RecordConstructor__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: RecordConstructor
(declare-fun FStar.Reflection.V1.Data.RecordConstructor@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Action (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V1.Data.Action__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Action
(declare-fun FStar.Reflection.V1.Data.Action@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.ExceptionConstructor () Term)
;;;;;;;;;;;;;;;;data constructor proxy: ExceptionConstructor
(declare-fun FStar.Reflection.V1.Data.ExceptionConstructor@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.HasMaskedEffect () Term)
;;;;;;;;;;;;;;;;data constructor proxy: HasMaskedEffect
(declare-fun FStar.Reflection.V1.Data.HasMaskedEffect@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.Effect () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Effect
(declare-fun FStar.Reflection.V1.Data.Effect@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V1.Data.OnlyName () Term)
;;;;;;;;;;;;;;;;data constructor proxy: OnlyName
(declare-fun FStar.Reflection.V1.Data.OnlyName@tok () Term)
;;;;;;;;;;;;;;;;_0: FStar.Reflection.Types.name -> FStar.Reflection.V1.Data.qualifier
(declare-fun Tm_arrow_34290602846cb3c3917634dddf2cb214 () Term)

;;;;;;;;;;;;;;;;_0: (FStar.Reflection.Types.name * FStar.Reflection.V1.Data.ident)   -> FStar.Reflection.V1.Data.qualifier
(declare-fun Tm_arrow_290f1bf40f3921ee1f351aec05649482 () Term)
;;;;;;;;;;;;;;;;_0: (Prims.list FStar.Reflection.V1.Data.ident * Prims.list FStar.Reflection.V1.Data.ident)   -> FStar.Reflection.V1.Data.qualifier
(declare-fun Tm_arrow_1cc390e36f12e07bba67e00b408c617f () Term)



; <Start encoding FStar.Reflection.V1.Data.qualifier>


; <start constructor FStar.Reflection.V1.Data.qualifier>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.qualifier ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
774)
(= __@x0
FStar.Reflection.V1.Data.qualifier)))

; </end constructor FStar.Reflection.V1.Data.qualifier>


; </end encoding FStar.Reflection.V1.Data.qualifier>


; <Start encoding FStar.Reflection.V1.Data.Assumption>


; <start constructor FStar.Reflection.V1.Data.Assumption>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Assumption ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
780)
(= __@x0
FStar.Reflection.V1.Data.Assumption)))

; </end constructor FStar.Reflection.V1.Data.Assumption>


; </end encoding FStar.Reflection.V1.Data.Assumption>


; <Start encoding FStar.Reflection.V1.Data.InternalAssumption>


; <start constructor FStar.Reflection.V1.Data.InternalAssumption>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.InternalAssumption ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
782)
(= __@x0
FStar.Reflection.V1.Data.InternalAssumption)))

; </end constructor FStar.Reflection.V1.Data.InternalAssumption>


; </end encoding FStar.Reflection.V1.Data.InternalAssumption>


; <Start encoding FStar.Reflection.V1.Data.New>


; <start constructor FStar.Reflection.V1.Data.New>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.New ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
784)
(= __@x0
FStar.Reflection.V1.Data.New)))

; </end constructor FStar.Reflection.V1.Data.New>


; </end encoding FStar.Reflection.V1.Data.New>


; <Start encoding FStar.Reflection.V1.Data.Private>


; <start constructor FStar.Reflection.V1.Data.Private>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Private ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
786)
(= __@x0
FStar.Reflection.V1.Data.Private)))

; </end constructor FStar.Reflection.V1.Data.Private>


; </end encoding FStar.Reflection.V1.Data.Private>


; <Start encoding FStar.Reflection.V1.Data.Unfold_for_unification_and_vcgen>


; <start constructor FStar.Reflection.V1.Data.Unfold_for_unification_and_vcgen>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Unfold_for_unification_and_vcgen ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
788)
(= __@x0
FStar.Reflection.V1.Data.Unfold_for_unification_and_vcgen)))

; </end constructor FStar.Reflection.V1.Data.Unfold_for_unification_and_vcgen>


; </end encoding FStar.Reflection.V1.Data.Unfold_for_unification_and_vcgen>


; <Start encoding FStar.Reflection.V1.Data.Visible_default>


; <start constructor FStar.Reflection.V1.Data.Visible_default>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Visible_default ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
790)
(= __@x0
FStar.Reflection.V1.Data.Visible_default)))

; </end constructor FStar.Reflection.V1.Data.Visible_default>


; </end encoding FStar.Reflection.V1.Data.Visible_default>


; <Start encoding FStar.Reflection.V1.Data.Irreducible>


; <start constructor FStar.Reflection.V1.Data.Irreducible>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Irreducible ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
792)
(= __@x0
FStar.Reflection.V1.Data.Irreducible)))

; </end constructor FStar.Reflection.V1.Data.Irreducible>


; </end encoding FStar.Reflection.V1.Data.Irreducible>


; <Start encoding FStar.Reflection.V1.Data.Inline_for_extraction>


; <start constructor FStar.Reflection.V1.Data.Inline_for_extraction>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Inline_for_extraction ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
794)
(= __@x0
FStar.Reflection.V1.Data.Inline_for_extraction)))

; </end constructor FStar.Reflection.V1.Data.Inline_for_extraction>


; </end encoding FStar.Reflection.V1.Data.Inline_for_extraction>


; <Start encoding FStar.Reflection.V1.Data.NoExtract>


; <start constructor FStar.Reflection.V1.Data.NoExtract>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.NoExtract ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
796)
(= __@x0
FStar.Reflection.V1.Data.NoExtract)))

; </end constructor FStar.Reflection.V1.Data.NoExtract>


; </end encoding FStar.Reflection.V1.Data.NoExtract>


; <Start encoding FStar.Reflection.V1.Data.Noeq>


; <start constructor FStar.Reflection.V1.Data.Noeq>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Noeq ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
798)
(= __@x0
FStar.Reflection.V1.Data.Noeq)))

; </end constructor FStar.Reflection.V1.Data.Noeq>


; </end encoding FStar.Reflection.V1.Data.Noeq>


; <Start encoding FStar.Reflection.V1.Data.Unopteq>


; <start constructor FStar.Reflection.V1.Data.Unopteq>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Unopteq ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
800)
(= __@x0
FStar.Reflection.V1.Data.Unopteq)))

; </end constructor FStar.Reflection.V1.Data.Unopteq>


; </end encoding FStar.Reflection.V1.Data.Unopteq>


; <Start encoding FStar.Reflection.V1.Data.TotalEffect>


; <start constructor FStar.Reflection.V1.Data.TotalEffect>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.TotalEffect ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
802)
(= __@x0
FStar.Reflection.V1.Data.TotalEffect)))

; </end constructor FStar.Reflection.V1.Data.TotalEffect>


; </end encoding FStar.Reflection.V1.Data.TotalEffect>


; <Start encoding FStar.Reflection.V1.Data.Logic>


; <start constructor FStar.Reflection.V1.Data.Logic>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Logic ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
804)
(= __@x0
FStar.Reflection.V1.Data.Logic)))

; </end constructor FStar.Reflection.V1.Data.Logic>


; </end encoding FStar.Reflection.V1.Data.Logic>


; <Start encoding FStar.Reflection.V1.Data.Reifiable>


; <start constructor FStar.Reflection.V1.Data.Reifiable>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Reifiable ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
806)
(= __@x0
FStar.Reflection.V1.Data.Reifiable)))

; </end constructor FStar.Reflection.V1.Data.Reifiable>


; </end encoding FStar.Reflection.V1.Data.Reifiable>


; <Start encoding FStar.Reflection.V1.Data.Reflectable>


; <start constructor FStar.Reflection.V1.Data.Reflectable>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Reflectable ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
808)
(= __@x0
(FStar.Reflection.V1.Data.Reflectable (FStar.Reflection.V1.Data.Reflectable__0 __@x0)))))

; </end constructor FStar.Reflection.V1.Data.Reflectable>


; </end encoding FStar.Reflection.V1.Data.Reflectable>


; <Start encoding FStar.Reflection.V1.Data.Discriminator>


; <start constructor FStar.Reflection.V1.Data.Discriminator>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Discriminator ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
813)
(= __@x0
(FStar.Reflection.V1.Data.Discriminator (FStar.Reflection.V1.Data.Discriminator__0 __@x0)))))

; </end constructor FStar.Reflection.V1.Data.Discriminator>


; </end encoding FStar.Reflection.V1.Data.Discriminator>


; <Start encoding FStar.Reflection.V1.Data.Projector>


; <start constructor FStar.Reflection.V1.Data.Projector>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Projector ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
818)
(= __@x0
(FStar.Reflection.V1.Data.Projector (FStar.Reflection.V1.Data.Projector__0 __@x0)))))

; </end constructor FStar.Reflection.V1.Data.Projector>


; </end encoding FStar.Reflection.V1.Data.Projector>


; <Start encoding FStar.Reflection.V1.Data.RecordType>


; <start constructor FStar.Reflection.V1.Data.RecordType>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.RecordType ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
823)
(= __@x0
(FStar.Reflection.V1.Data.RecordType (FStar.Reflection.V1.Data.RecordType__0 __@x0)))))

; </end constructor FStar.Reflection.V1.Data.RecordType>


; </end encoding FStar.Reflection.V1.Data.RecordType>


; <Start encoding FStar.Reflection.V1.Data.RecordConstructor>


; <start constructor FStar.Reflection.V1.Data.RecordConstructor>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.RecordConstructor ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
828)
(= __@x0
(FStar.Reflection.V1.Data.RecordConstructor (FStar.Reflection.V1.Data.RecordConstructor__0 __@x0)))))

; </end constructor FStar.Reflection.V1.Data.RecordConstructor>


; </end encoding FStar.Reflection.V1.Data.RecordConstructor>


; <Start encoding FStar.Reflection.V1.Data.Action>


; <start constructor FStar.Reflection.V1.Data.Action>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Action ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
833)
(= __@x0
(FStar.Reflection.V1.Data.Action (FStar.Reflection.V1.Data.Action__0 __@x0)))))

; </end constructor FStar.Reflection.V1.Data.Action>


; </end encoding FStar.Reflection.V1.Data.Action>


; <Start encoding FStar.Reflection.V1.Data.ExceptionConstructor>


; <start constructor FStar.Reflection.V1.Data.ExceptionConstructor>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.ExceptionConstructor ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
838)
(= __@x0
FStar.Reflection.V1.Data.ExceptionConstructor)))

; </end constructor FStar.Reflection.V1.Data.ExceptionConstructor>


; </end encoding FStar.Reflection.V1.Data.ExceptionConstructor>


; <Start encoding FStar.Reflection.V1.Data.HasMaskedEffect>


; <start constructor FStar.Reflection.V1.Data.HasMaskedEffect>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.HasMaskedEffect ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
840)
(= __@x0
FStar.Reflection.V1.Data.HasMaskedEffect)))

; </end constructor FStar.Reflection.V1.Data.HasMaskedEffect>


; </end encoding FStar.Reflection.V1.Data.HasMaskedEffect>


; <Start encoding FStar.Reflection.V1.Data.Effect>


; <start constructor FStar.Reflection.V1.Data.Effect>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.Effect ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
842)
(= __@x0
FStar.Reflection.V1.Data.Effect)))

; </end constructor FStar.Reflection.V1.Data.Effect>


; </end encoding FStar.Reflection.V1.Data.Effect>


; <Start encoding FStar.Reflection.V1.Data.OnlyName>


; <start constructor FStar.Reflection.V1.Data.OnlyName>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V1.Data.OnlyName ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
844)
(= __@x0
FStar.Reflection.V1.Data.OnlyName)))

; </end constructor FStar.Reflection.V1.Data.OnlyName>


; </end encoding FStar.Reflection.V1.Data.OnlyName>


; </end encoding >


; <Start encoding FStar.Reflection.V1.Data.uu___is_Assumption>

(declare-fun FStar.Reflection.V1.Data.uu___is_Assumption (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V1.Data.qualifier -> Prims.bool
(declare-fun Tm_arrow_372e8dfba8889bde7c864d7b920fe083 () Term)
(declare-fun FStar.Reflection.V1.Data.uu___is_Assumption@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Assumption>


; <Skipped FStar.Reflection.V1.Data.uu___is_Assumption/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_InternalAssumption>

(declare-fun FStar.Reflection.V1.Data.uu___is_InternalAssumption (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_InternalAssumption@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_InternalAssumption>


; <Skipped FStar.Reflection.V1.Data.uu___is_InternalAssumption/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_New>

(declare-fun FStar.Reflection.V1.Data.uu___is_New (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_New@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_New>


; <Skipped FStar.Reflection.V1.Data.uu___is_New/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_Private>

(declare-fun FStar.Reflection.V1.Data.uu___is_Private (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_Private@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Private>


; <Skipped FStar.Reflection.V1.Data.uu___is_Private/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_Unfold_for_unification_and_vcgen>

(declare-fun FStar.Reflection.V1.Data.uu___is_Unfold_for_unification_and_vcgen (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_Unfold_for_unification_and_vcgen@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Unfold_for_unification_and_vcgen>


; <Skipped FStar.Reflection.V1.Data.uu___is_Unfold_for_unification_and_vcgen/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_Visible_default>

(declare-fun FStar.Reflection.V1.Data.uu___is_Visible_default (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_Visible_default@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Visible_default>


; <Skipped FStar.Reflection.V1.Data.uu___is_Visible_default/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_Irreducible>

(declare-fun FStar.Reflection.V1.Data.uu___is_Irreducible (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_Irreducible@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Irreducible>


; <Skipped FStar.Reflection.V1.Data.uu___is_Irreducible/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_Inline_for_extraction>

(declare-fun FStar.Reflection.V1.Data.uu___is_Inline_for_extraction (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_Inline_for_extraction@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Inline_for_extraction>


; <Skipped FStar.Reflection.V1.Data.uu___is_Inline_for_extraction/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_NoExtract>

(declare-fun FStar.Reflection.V1.Data.uu___is_NoExtract (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_NoExtract@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_NoExtract>


; <Skipped FStar.Reflection.V1.Data.uu___is_NoExtract/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_Noeq>

(declare-fun FStar.Reflection.V1.Data.uu___is_Noeq (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_Noeq@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Noeq>


; <Skipped FStar.Reflection.V1.Data.uu___is_Noeq/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_Unopteq>

(declare-fun FStar.Reflection.V1.Data.uu___is_Unopteq (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_Unopteq@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Unopteq>


; <Skipped FStar.Reflection.V1.Data.uu___is_Unopteq/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_TotalEffect>

(declare-fun FStar.Reflection.V1.Data.uu___is_TotalEffect (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_TotalEffect@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_TotalEffect>


; <Skipped FStar.Reflection.V1.Data.uu___is_TotalEffect/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_Logic>

(declare-fun FStar.Reflection.V1.Data.uu___is_Logic (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_Logic@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Logic>


; <Skipped FStar.Reflection.V1.Data.uu___is_Logic/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_Reifiable>

(declare-fun FStar.Reflection.V1.Data.uu___is_Reifiable (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_Reifiable@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Reifiable>


; <Skipped FStar.Reflection.V1.Data.uu___is_Reifiable/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_Reflectable>

(declare-fun FStar.Reflection.V1.Data.uu___is_Reflectable (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_Reflectable@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Reflectable>


; <Skipped FStar.Reflection.V1.Data.uu___is_Reflectable/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Reflectable__item___0>

(declare-fun Tm_refine_c598b0fcb6018215b34a0a0f4175ab3f () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Reflectable__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.qualifier{Reflectable? _} -> FStar.Reflection.Types.name
(declare-fun Tm_arrow_95da650ed0e6d7f865959faaa766b114 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Reflectable__item___0@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Reflectable__item___0>


; <Skipped FStar.Reflection.V1.Data.__proj__Reflectable__item___0/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_Discriminator>

(declare-fun FStar.Reflection.V1.Data.uu___is_Discriminator (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_Discriminator@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Discriminator>


; <Skipped FStar.Reflection.V1.Data.uu___is_Discriminator/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Discriminator__item___0>

(declare-fun Tm_refine_f97eda6eaf064cc6a32252c6aeb9db00 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Discriminator__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.qualifier{Discriminator? _} -> FStar.Reflection.Types.name
(declare-fun Tm_arrow_59b845bf6a9141e4b9a15751f157f41f () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Discriminator__item___0@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Discriminator__item___0>


; <Skipped FStar.Reflection.V1.Data.__proj__Discriminator__item___0/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_Projector>

(declare-fun FStar.Reflection.V1.Data.uu___is_Projector (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_Projector@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Projector>


; <Skipped FStar.Reflection.V1.Data.uu___is_Projector/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Projector__item___0>

(declare-fun Tm_refine_0cb9146dcf278ad296f8fcd7574c46e6 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Projector__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.qualifier{Projector? _}   -> FStar.Reflection.Types.name * FStar.Reflection.V1.Data.ident
(declare-fun Tm_arrow_18867550180ccec69da85f88078c580c () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Projector__item___0@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Projector__item___0>


; <Skipped FStar.Reflection.V1.Data.__proj__Projector__item___0/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_RecordType>

(declare-fun FStar.Reflection.V1.Data.uu___is_RecordType (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_RecordType@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_RecordType>


; <Skipped FStar.Reflection.V1.Data.uu___is_RecordType/>


; <Start encoding FStar.Reflection.V1.Data.__proj__RecordType__item___0>

(declare-fun Tm_refine_a4eb03973cc92f16348ebfcc38b2ccf6 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__RecordType__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.qualifier{RecordType? _}   -> Prims.list FStar.Reflection.V1.Data.ident * Prims.list FStar.Reflection.V1.Data.ident
(declare-fun Tm_arrow_60dcb193c7b698e3f9ba7d263102d016 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__RecordType__item___0@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__RecordType__item___0>


; <Skipped FStar.Reflection.V1.Data.__proj__RecordType__item___0/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_RecordConstructor>

(declare-fun FStar.Reflection.V1.Data.uu___is_RecordConstructor (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_RecordConstructor@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_RecordConstructor>


; <Skipped FStar.Reflection.V1.Data.uu___is_RecordConstructor/>


; <Start encoding FStar.Reflection.V1.Data.__proj__RecordConstructor__item___0>

(declare-fun Tm_refine_56d2fc442b33085f467ecf131b1ccb32 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__RecordConstructor__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.qualifier{RecordConstructor? _}   -> Prims.list FStar.Reflection.V1.Data.ident * Prims.list FStar.Reflection.V1.Data.ident
(declare-fun Tm_arrow_8c1d8088eca5efb6c02008c9fac817ff () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__RecordConstructor__item___0@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__RecordConstructor__item___0>


; <Skipped FStar.Reflection.V1.Data.__proj__RecordConstructor__item___0/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_Action>

(declare-fun FStar.Reflection.V1.Data.uu___is_Action (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_Action@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Action>


; <Skipped FStar.Reflection.V1.Data.uu___is_Action/>


; <Start encoding FStar.Reflection.V1.Data.__proj__Action__item___0>

(declare-fun Tm_refine_5e24d81c8869a32e4083ec2aedc05d68 () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Action__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V1.Data.qualifier{Action? _} -> FStar.Reflection.Types.name
(declare-fun Tm_arrow_6f985a2039fc0fdafde03e7a3dfd64af () Term)
(declare-fun FStar.Reflection.V1.Data.__proj__Action__item___0@tok () Term)

; </end encoding FStar.Reflection.V1.Data.__proj__Action__item___0>


; <Skipped FStar.Reflection.V1.Data.__proj__Action__item___0/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_ExceptionConstructor>

(declare-fun FStar.Reflection.V1.Data.uu___is_ExceptionConstructor (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_ExceptionConstructor@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_ExceptionConstructor>


; <Skipped FStar.Reflection.V1.Data.uu___is_ExceptionConstructor/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_HasMaskedEffect>

(declare-fun FStar.Reflection.V1.Data.uu___is_HasMaskedEffect (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_HasMaskedEffect@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_HasMaskedEffect>


; <Skipped FStar.Reflection.V1.Data.uu___is_HasMaskedEffect/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_Effect>

(declare-fun FStar.Reflection.V1.Data.uu___is_Effect (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_Effect@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_Effect>


; <Skipped FStar.Reflection.V1.Data.uu___is_Effect/>


; <Start encoding FStar.Reflection.V1.Data.uu___is_OnlyName>

(declare-fun FStar.Reflection.V1.Data.uu___is_OnlyName (Term) Term)

(declare-fun FStar.Reflection.V1.Data.uu___is_OnlyName@tok () Term)

; </end encoding FStar.Reflection.V1.Data.uu___is_OnlyName>


; <Skipped FStar.Reflection.V1.Data.uu___is_OnlyName/>


; <Start encoding FStar.Reflection.V1.Data.var>

(declare-fun FStar.Reflection.V1.Data.var (Dummy_sort) Term)

; </end encoding FStar.Reflection.V1.Data.var>


; End Externals for interface FStar.Reflection.V1.Data


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End interface FStar.Reflection.V1.Data (1886 decls; total size 150627)

;;; Start interface FStar.Reflection.V1.Builtins

; Externals for interface FStar.Reflection.V1.Builtins


; <Start encoding FStar.Reflection.V1.Builtins.inspect_ln>

(declare-fun FStar.Reflection.V1.Builtins.inspect_ln (Term) Term)
(declare-fun Tm_refine_c93f906b176387caf8bd4c734339125f (Term) Term)
;;;;;;;;;;;;;;;;t: FStar.Reflection.Types.term -> tv: FStar.Reflection.V1.Data.term_view{tv << t}
(declare-fun Tm_arrow_36d5ceebd2e515421447afbae92daed6 () Term)
(declare-fun FStar.Reflection.V1.Builtins.inspect_ln@tok () Term)


; </end encoding FStar.Reflection.V1.Builtins.inspect_ln>


; <Start encoding FStar.Reflection.V1.Builtins.pack_ln>

(declare-fun FStar.Reflection.V1.Builtins.pack_ln (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Reflection.V1.Data.term_view -> FStar.Reflection.Types.term
(declare-fun Tm_arrow_08c15da95a6b1d4fd3175c8d2d4b41c1 () Term)
(declare-fun FStar.Reflection.V1.Builtins.pack_ln@tok () Term)

; </end encoding FStar.Reflection.V1.Builtins.pack_ln>


; <Start encoding FStar.Reflection.V1.Builtins.inspect_comp>

(declare-fun FStar.Reflection.V1.Builtins.inspect_comp (Term) Term)
(declare-fun Tm_refine_d07a17fce4c7fc461beb3e8203b764ee (Term) Term)
;;;;;;;;;;;;;;;;c: FStar.Reflection.Types.comp -> cv: FStar.Reflection.V1.Data.comp_view{cv << c}
(declare-fun Tm_arrow_6455bfb496ba9d8eba25cf69aa996aa7 () Term)
(declare-fun FStar.Reflection.V1.Builtins.inspect_comp@tok () Term)


; </end encoding FStar.Reflection.V1.Builtins.inspect_comp>


; <Start encoding FStar.Reflection.V1.Builtins.pack_comp>

(declare-fun FStar.Reflection.V1.Builtins.pack_comp (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Reflection.V1.Data.comp_view -> FStar.Reflection.Types.comp
(declare-fun Tm_arrow_8a3244648e7dbdd15d3ab14db803cb69 () Term)
(declare-fun FStar.Reflection.V1.Builtins.pack_comp@tok () Term)

; </end encoding FStar.Reflection.V1.Builtins.pack_comp>


; <Start encoding FStar.Reflection.V1.Builtins.inspect_sigelt>

(declare-fun FStar.Reflection.V1.Builtins.inspect_sigelt (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Reflection.Types.sigelt -> FStar.Reflection.V1.Data.sigelt_view
(declare-fun Tm_arrow_211fc16669e4d25fbc635a77dcffe472 () Term)
(declare-fun FStar.Reflection.V1.Builtins.inspect_sigelt@tok () Term)

; </end encoding FStar.Reflection.V1.Builtins.inspect_sigelt>


; <Start encoding FStar.Reflection.V1.Builtins.pack_sigelt>

(declare-fun FStar.Reflection.V1.Builtins.pack_sigelt (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Reflection.V1.Data.sigelt_view -> FStar.Reflection.Types.sigelt
(declare-fun Tm_arrow_43b8529dd4c9c6cf1b17ccff90425e8e () Term)
(declare-fun FStar.Reflection.V1.Builtins.pack_sigelt@tok () Term)

; </end encoding FStar.Reflection.V1.Builtins.pack_sigelt>


; <Start encoding FStar.Reflection.V1.Builtins.inspect_fv>

(declare-fun FStar.Reflection.V1.Builtins.inspect_fv (Term) Term)

(declare-fun FStar.Reflection.V1.Builtins.inspect_fv@tok () Term)

; </end encoding FStar.Reflection.V1.Builtins.inspect_fv>


; <Start encoding FStar.Reflection.V1.Builtins.pack_fv>

(declare-fun FStar.Reflection.V1.Builtins.pack_fv (Term) Term)

(declare-fun FStar.Reflection.V1.Builtins.pack_fv@tok () Term)

; </end encoding FStar.Reflection.V1.Builtins.pack_fv>


; <Start encoding FStar.Reflection.V1.Builtins.inspect_bv>

(declare-fun FStar.Reflection.V1.Builtins.inspect_bv (Term) Term)
(declare-fun Tm_refine_be08c32475e5d641c4a5ba917d83694a (Term) Term)
;;;;;;;;;;;;;;;;v: FStar.Reflection.Types.bv -> bvv: FStar.Reflection.V1.Data.bv_view{bvv << v}
(declare-fun Tm_arrow_5a72d3544a4379e1607eb3c6973f1d21 () Term)
(declare-fun FStar.Reflection.V1.Builtins.inspect_bv@tok () Term)


; </end encoding FStar.Reflection.V1.Builtins.inspect_bv>


; <Start encoding FStar.Reflection.V1.Builtins.pack_bv>

(declare-fun FStar.Reflection.V1.Builtins.pack_bv (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Reflection.V1.Data.bv_view -> FStar.Reflection.Types.bv
(declare-fun Tm_arrow_34678009597e334bd67eed2e2369b1b4 () Term)
(declare-fun FStar.Reflection.V1.Builtins.pack_bv@tok () Term)

; </end encoding FStar.Reflection.V1.Builtins.pack_bv>


; <Start encoding FStar.Reflection.V1.Builtins.inspect_lb>

(declare-fun FStar.Reflection.V1.Builtins.inspect_lb (Term) Term)
(declare-fun Tm_refine_70c475d12fddae09eebfa71844c0fc7d (Term) Term)
;;;;;;;;;;;;;;;;lb: FStar.Reflection.Types.letbinding -> lbv: FStar.Reflection.V1.Data.lb_view{lbv << lb}
(declare-fun Tm_arrow_72af515af1f1fde96a17706226349eb1 () Term)
(declare-fun FStar.Reflection.V1.Builtins.inspect_lb@tok () Term)


; </end encoding FStar.Reflection.V1.Builtins.inspect_lb>


; <Start encoding FStar.Reflection.V1.Builtins.pack_lb>

(declare-fun FStar.Reflection.V1.Builtins.pack_lb (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Reflection.V1.Data.lb_view -> FStar.Reflection.Types.letbinding
(declare-fun Tm_arrow_979520f0ac530d7c41df7461b14b768a () Term)
(declare-fun FStar.Reflection.V1.Builtins.pack_lb@tok () Term)

; </end encoding FStar.Reflection.V1.Builtins.pack_lb>


; <Start encoding FStar.Reflection.V1.Builtins.inspect_binder>

(declare-fun FStar.Reflection.V1.Builtins.inspect_binder (Term) Term)
(declare-fun Tm_refine_a9a19d4dc9068a04e5ccf414c49e1a0e (Term) Term)
;;;;;;;;;;;;;;;;b: FStar.Reflection.Types.binder -> bv: FStar.Reflection.V1.Data.binder_view{bv << b}
(declare-fun Tm_arrow_e488ccb0f3eef855c75632639fa56ae3 () Term)
(declare-fun FStar.Reflection.V1.Builtins.inspect_binder@tok () Term)


; </end encoding FStar.Reflection.V1.Builtins.inspect_binder>


; <Start encoding FStar.Reflection.V1.Builtins.pack_binder>

(declare-fun FStar.Reflection.V1.Builtins.pack_binder (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Reflection.V1.Data.binder_view -> FStar.Reflection.Types.binder
(declare-fun Tm_arrow_dff1dc0fbef3e09e73727ca21adc5771 () Term)
(declare-fun FStar.Reflection.V1.Builtins.pack_binder@tok () Term)

; </end encoding FStar.Reflection.V1.Builtins.pack_binder>


; <Start encoding FStar.Reflection.V1.Builtins.inspect_universe>

(declare-fun FStar.Reflection.V1.Builtins.inspect_universe (Term) Term)
(declare-fun Tm_refine_e67163bc840c73ee523c9f1276ad9f69 (Term) Term)
;;;;;;;;;;;;;;;;u2404: FStar.Reflection.Types.universe -> uv: FStar.Reflection.V1.Data.universe_view{uv << u2404}
(declare-fun Tm_arrow_908d28881dd0e3939671c1dafc9a2489 () Term)
(declare-fun FStar.Reflection.V1.Builtins.inspect_universe@tok () Term)


; </end encoding FStar.Reflection.V1.Builtins.inspect_universe>


; <Start encoding FStar.Reflection.V1.Builtins.pack_universe>

(declare-fun FStar.Reflection.V1.Builtins.pack_universe (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Reflection.V1.Data.universe_view -> FStar.Reflection.Types.universe
(declare-fun Tm_arrow_a5ff29c4bb94f16fd93b9b21c885d0e4 () Term)
(declare-fun FStar.Reflection.V1.Builtins.pack_universe@tok () Term)

; </end encoding FStar.Reflection.V1.Builtins.pack_universe>


; <Start encoding FStar.Reflection.V1.Builtins.pack_inspect_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V1.Builtins.pack_inspect_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V1.Builtins.pack_inspect_inv@tok () Term)

; </end encoding FStar.Reflection.V1.Builtins.pack_inspect_inv>


; <Start encoding FStar.Reflection.V1.Builtins.inspect_pack_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V1.Builtins.inspect_pack_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V1.Builtins.inspect_pack_inv@tok () Term)

; </end encoding FStar.Reflection.V1.Builtins.inspect_pack_inv>


; <Start encoding FStar.Reflection.V1.Builtins.pack_inspect_comp_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V1.Builtins.pack_inspect_comp_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V1.Builtins.pack_inspect_comp_inv@tok () Term)

; </end encoding FStar.Reflection.V1.Builtins.pack_inspect_comp_inv>


; <Start encoding FStar.Reflection.V1.Builtins.inspect_pack_comp_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V1.Builtins.inspect_pack_comp_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V1.Builtins.inspect_pack_comp_inv@tok () Term)

; </end encoding FStar.Reflection.V1.Builtins.inspect_pack_comp_inv>


; <Start encoding FStar.Reflection.V1.Builtins.inspect_pack_bv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V1.Builtins.inspect_pack_bv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V1.Builtins.inspect_pack_bv@tok () Term)

; </end encoding FStar.Reflection.V1.Builtins.inspect_pack_bv>


; <Start encoding FStar.Reflection.V1.Builtins.pack_inspect_bv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V1.Builtins.pack_inspect_bv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V1.Builtins.pack_inspect_bv@tok () Term)

; </end encoding FStar.Reflection.V1.Builtins.pack_inspect_bv>


; <Start encoding FStar.Reflection.V1.Builtins.inspect_pack_binder>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V1.Builtins.inspect_pack_binder (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V1.Builtins.inspect_pack_binder@tok () Term)

; </end encoding FStar.Reflection.V1.Builtins.inspect_pack_binder>


; <Start encoding FStar.Reflection.V1.Builtins.pack_inspect_binder>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V1.Builtins.pack_inspect_binder (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V1.Builtins.pack_inspect_binder@tok () Term)

; </end encoding FStar.Reflection.V1.Builtins.pack_inspect_binder>


; <Start encoding FStar.Reflection.V1.Builtins.pack_inspect_fv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V1.Builtins.pack_inspect_fv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V1.Builtins.pack_inspect_fv@tok () Term)

; </end encoding FStar.Reflection.V1.Builtins.pack_inspect_fv>


; <Start encoding FStar.Reflection.V1.Builtins.inspect_pack_fv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V1.Builtins.inspect_pack_fv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V1.Builtins.inspect_pack_fv@tok () Term)

; </end encoding FStar.Reflection.V1.Builtins.inspect_pack_fv>


; <Start encoding FStar.Reflection.V1.Builtins.pack_inspect_universe>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V1.Builtins.pack_inspect_universe (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V1.Builtins.pack_inspect_universe@tok () Term)

; </end encoding FStar.Reflection.V1.Builtins.pack_inspect_universe>


; <Start encoding FStar.Reflection.V1.Builtins.inspect_pack_universe>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V1.Builtins.inspect_pack_universe (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V1.Builtins.inspect_pack_universe@tok () Term)

; </end encoding FStar.Reflection.V1.Builtins.inspect_pack_universe>


; <Start encoding FStar.Reflection.V1.Builtins.implode_qn>

(declare-fun FStar.Reflection.V1.Builtins.implode_qn (Term) Term)

(declare-fun FStar.Reflection.V1.Builtins.implode_qn@tok () Term)

; </end encoding FStar.Reflection.V1.Builtins.implode_qn>


; <Start encoding FStar.Reflection.V1.Builtins.explode_qn>

(declare-fun FStar.Reflection.V1.Builtins.explode_qn (Term) Term)

(declare-fun FStar.Reflection.V1.Builtins.explode_qn@tok () Term)

; </end encoding FStar.Reflection.V1.Builtins.explode_qn>


; <Start encoding FStar.Reflection.V1.Builtins.compare_string>

(declare-fun FStar.Reflection.V1.Builtins.compare_string (Term Term) Term)


(declare-fun FStar.Reflection.V1.Builtins.compare_string@tok () Term)


; </end encoding FStar.Reflection.V1.Builtins.compare_string>


; <Start encoding FStar.Reflection.V1.Builtins.lookup_typ>

(declare-fun FStar.Reflection.V1.Builtins.lookup_typ (Term Term) Term)

(declare-fun FStar.Reflection.V1.Builtins.lookup_typ@tok () Term)

; </end encoding FStar.Reflection.V1.Builtins.lookup_typ>


; <Start encoding FStar.Reflection.V1.Builtins.compare_bv>

(declare-fun FStar.Reflection.V1.Builtins.compare_bv (Term Term) Term)

(declare-fun FStar.Reflection.V1.Builtins.compare_bv@tok () Term)

; </end encoding FStar.Reflection.V1.Builtins.compare_bv>


; <Start encoding FStar.Reflection.V1.Builtins.binders_of_env>

(declare-fun FStar.Reflection.V1.Builtins.binders_of_env (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Reflection.Types.env -> FStar.Reflection.Types.binders
(declare-fun Tm_arrow_2dd189214d53028e3f3934444e0ae39f () Term)
(declare-fun FStar.Reflection.V1.Builtins.binders_of_env@tok () Term)

; </end encoding FStar.Reflection.V1.Builtins.binders_of_env>


; <Start encoding FStar.Reflection.V1.Builtins.moduleof>

(declare-fun FStar.Reflection.V1.Builtins.moduleof (Term) Term)

(declare-fun FStar.Reflection.V1.Builtins.moduleof@tok () Term)

; </end encoding FStar.Reflection.V1.Builtins.moduleof>


; <Start encoding FStar.Reflection.V1.Builtins.lookup_attr>

(declare-fun FStar.Reflection.V1.Builtins.lookup_attr (Term Term) Term)

(declare-fun FStar.Reflection.V1.Builtins.lookup_attr@tok () Term)

; </end encoding FStar.Reflection.V1.Builtins.lookup_attr>


; <Start encoding FStar.Reflection.V1.Builtins.all_defs_in_env>

(declare-fun FStar.Reflection.V1.Builtins.all_defs_in_env (Term) Term)

(declare-fun FStar.Reflection.V1.Builtins.all_defs_in_env@tok () Term)

; </end encoding FStar.Reflection.V1.Builtins.all_defs_in_env>


; <Start encoding FStar.Reflection.V1.Builtins.defs_in_module>

(declare-fun FStar.Reflection.V1.Builtins.defs_in_module (Term Term) Term)

(declare-fun FStar.Reflection.V1.Builtins.defs_in_module@tok () Term)

; </end encoding FStar.Reflection.V1.Builtins.defs_in_module>


; <Start encoding FStar.Reflection.V1.Builtins.term_eq>

(declare-fun FStar.Reflection.V1.Builtins.term_eq (Term Term) Term)

(declare-fun FStar.Reflection.V1.Builtins.term_eq@tok () Term)

; </end encoding FStar.Reflection.V1.Builtins.term_eq>


; <Start encoding FStar.Reflection.V1.Builtins.env_open_modules>

(declare-fun FStar.Reflection.V1.Builtins.env_open_modules (Term) Term)

(declare-fun FStar.Reflection.V1.Builtins.env_open_modules@tok () Term)

; </end encoding FStar.Reflection.V1.Builtins.env_open_modules>


; <Start encoding FStar.Reflection.V1.Builtins.push_binder>

(declare-fun FStar.Reflection.V1.Builtins.push_binder (Term Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Reflection.Types.env -> _: FStar.Reflection.Types.binder -> FStar.Reflection.Types.env
(declare-fun Tm_arrow_5a626e160245d99ea69155483363fa6f () Term)
(declare-fun FStar.Reflection.V1.Builtins.push_binder@tok () Term)

; </end encoding FStar.Reflection.V1.Builtins.push_binder>


; <Start encoding FStar.Reflection.V1.Builtins.sigelt_attrs>

(declare-fun FStar.Reflection.V1.Builtins.sigelt_attrs (Term) Term)

(declare-fun FStar.Reflection.V1.Builtins.sigelt_attrs@tok () Term)

; </end encoding FStar.Reflection.V1.Builtins.sigelt_attrs>


; <Start encoding FStar.Reflection.V1.Builtins.set_sigelt_attrs>

(declare-fun FStar.Reflection.V1.Builtins.set_sigelt_attrs (Term Term) Term)

(declare-fun FStar.Reflection.V1.Builtins.set_sigelt_attrs@tok () Term)

; </end encoding FStar.Reflection.V1.Builtins.set_sigelt_attrs>


; <Start encoding FStar.Reflection.V1.Builtins.sigelt_quals>

(declare-fun FStar.Reflection.V1.Builtins.sigelt_quals (Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Reflection.Types.sigelt -> Prims.list FStar.Reflection.V1.Data.qualifier
(declare-fun Tm_arrow_de613166af43432ae5ff90adce427584 () Term)
(declare-fun FStar.Reflection.V1.Builtins.sigelt_quals@tok () Term)

; </end encoding FStar.Reflection.V1.Builtins.sigelt_quals>


; <Start encoding FStar.Reflection.V1.Builtins.set_sigelt_quals>

(declare-fun FStar.Reflection.V1.Builtins.set_sigelt_quals (Term Term) Term)
;;;;;;;;;;;;;;;;_: Prims.list FStar.Reflection.V1.Data.qualifier -> _: FStar.Reflection.Types.sigelt   -> FStar.Reflection.Types.sigelt
(declare-fun Tm_arrow_7fcf0e0732d90e32fab9d0bed8d99f3b () Term)
(declare-fun FStar.Reflection.V1.Builtins.set_sigelt_quals@tok () Term)

; </end encoding FStar.Reflection.V1.Builtins.set_sigelt_quals>


; <Start encoding FStar.Reflection.V1.Builtins.sigelt_opts>

(declare-fun FStar.Reflection.V1.Builtins.sigelt_opts (Term) Term)

(declare-fun FStar.Reflection.V1.Builtins.sigelt_opts@tok () Term)

; </end encoding FStar.Reflection.V1.Builtins.sigelt_opts>


; <Start encoding FStar.Reflection.V1.Builtins.embed_vconfig>

(declare-fun FStar.Reflection.V1.Builtins.embed_vconfig (Term) Term)

(declare-fun FStar.Reflection.V1.Builtins.embed_vconfig@tok () Term)

; </end encoding FStar.Reflection.V1.Builtins.embed_vconfig>


; <Start encoding FStar.Reflection.V1.Builtins.subst>

(declare-fun FStar.Reflection.V1.Builtins.subst (Term Term Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Reflection.Types.bv -> t1: FStar.Reflection.Types.term -> t2: FStar.Reflection.Types.term   -> FStar.Reflection.Types.term
(declare-fun Tm_arrow_a0acd5d1f02a02f2d7916173475971b1 () Term)
(declare-fun FStar.Reflection.V1.Builtins.subst@tok () Term)

; </end encoding FStar.Reflection.V1.Builtins.subst>


; <Start encoding FStar.Reflection.V1.Builtins.close_term>

(declare-fun FStar.Reflection.V1.Builtins.close_term (Term Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Reflection.Types.binder -> _: FStar.Reflection.Types.term -> FStar.Reflection.Types.term
(declare-fun Tm_arrow_95b895a7971f8822821a30148aa8fe59 () Term)
(declare-fun FStar.Reflection.V1.Builtins.close_term@tok () Term)

; </end encoding FStar.Reflection.V1.Builtins.close_term>


; <Start encoding FStar.Reflection.V1.Builtins.range_of_term>

(declare-fun FStar.Reflection.V1.Builtins.range_of_term (Term) Term)

(declare-fun FStar.Reflection.V1.Builtins.range_of_term@tok () Term)

; </end encoding FStar.Reflection.V1.Builtins.range_of_term>


; <Start encoding FStar.Reflection.V1.Builtins.range_of_sigelt>

(declare-fun FStar.Reflection.V1.Builtins.range_of_sigelt (Term) Term)

(declare-fun FStar.Reflection.V1.Builtins.range_of_sigelt@tok () Term)

; </end encoding FStar.Reflection.V1.Builtins.range_of_sigelt>


; End Externals for interface FStar.Reflection.V1.Builtins


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End interface FStar.Reflection.V1.Builtins (260 decls; total size 19902)

;;; Start interface FStar.Tactics.V1.Builtins

; Externals for interface FStar.Tactics.V1.Builtins


; <Start encoding FStar.Tactics.V1.Builtins.top_env>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.top_env (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.top_env@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.top_env>


; <Start encoding FStar.Tactics.V1.Builtins.fresh>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.fresh (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.fresh@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.fresh>


; <Start encoding FStar.Tactics.V1.Builtins.refine_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.refine_intro (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.refine_intro@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.refine_intro>


; <Start encoding FStar.Tactics.V1.Builtins.tc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.tc (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.tc@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.tc>


; <Start encoding FStar.Tactics.V1.Builtins.tcc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.tcc (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.tcc@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.tcc>


; <Start encoding FStar.Tactics.V1.Builtins.unshelve>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.unshelve (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.unshelve@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.unshelve>


; <Start encoding FStar.Tactics.V1.Builtins.unquote>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.unquote (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.unquote@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.unquote>


; <Start encoding FStar.Tactics.V1.Builtins.catch>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.catch (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.catch@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.catch>


; <Start encoding FStar.Tactics.V1.Builtins.recover>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.recover (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.recover@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.recover>


; <Start encoding FStar.Tactics.V1.Builtins.norm>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.norm (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.norm@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.norm>


; <Start encoding FStar.Tactics.V1.Builtins.norm_term_env>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.norm_term_env (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.norm_term_env@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.norm_term_env>


; <Start encoding FStar.Tactics.V1.Builtins.norm_binder_type>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.norm_binder_type (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.norm_binder_type@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.norm_binder_type>


; <Start encoding FStar.Tactics.V1.Builtins.intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.intro (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.intro@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.intro>


; <Start encoding FStar.Tactics.V1.Builtins.intro_rec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.intro_rec (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.intro_rec@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.intro_rec>


; <Start encoding FStar.Tactics.V1.Builtins.rename_to>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.rename_to (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.rename_to@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.rename_to>


; <Start encoding FStar.Tactics.V1.Builtins.revert>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.revert (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.revert@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.revert>


; <Start encoding FStar.Tactics.V1.Builtins.binder_retype>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.binder_retype (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.binder_retype@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.binder_retype>


; <Start encoding FStar.Tactics.V1.Builtins.clear_top>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.clear_top (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.clear_top@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.clear_top>


; <Start encoding FStar.Tactics.V1.Builtins.clear>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.clear (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.clear@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.clear>


; <Start encoding FStar.Tactics.V1.Builtins.rewrite>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.rewrite (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.rewrite@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.rewrite>


; <Start encoding FStar.Tactics.V1.Builtins.t_exact>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.t_exact (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.t_exact@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.t_exact>


; <Start encoding FStar.Tactics.V1.Builtins.t_apply>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.t_apply (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.t_apply@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.t_apply>


; <Start encoding FStar.Tactics.V1.Builtins.t_apply_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.t_apply_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.t_apply_lemma@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.t_apply_lemma>


; <Start encoding FStar.Tactics.V1.Builtins.print>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.print (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.print@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.print>


; <Start encoding FStar.Tactics.V1.Builtins.debugging>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.debugging (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.debugging@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.debugging>


; <Start encoding FStar.Tactics.V1.Builtins.dump>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.dump (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.dump@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.dump>


; <Start encoding FStar.Tactics.V1.Builtins.dump_all>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.dump_all (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.dump_all@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.dump_all>


; <Start encoding FStar.Tactics.V1.Builtins.dump_uvars_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.dump_uvars_of (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.dump_uvars_of@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.dump_uvars_of>


; <Start encoding FStar.Tactics.V1.Builtins.t_trefl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.t_trefl (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.t_trefl@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.t_trefl>


; <Start encoding FStar.Tactics.V1.Builtins.t_commute_applied_match>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.t_commute_applied_match (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.t_commute_applied_match@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.t_commute_applied_match>


; <Start encoding FStar.Tactics.V1.Builtins.gather_or_solve_explicit_guards_for_resolved_goals>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.gather_or_solve_explicit_guards_for_resolved_goals (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.gather_or_solve_explicit_guards_for_resolved_goals@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.gather_or_solve_explicit_guards_for_resolved_goals>


; <Start encoding FStar.Tactics.V1.Builtins.ctrl_rewrite>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.ctrl_rewrite (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.ctrl_rewrite@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.ctrl_rewrite>


; <Start encoding FStar.Tactics.V1.Builtins.dup>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.dup (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.dup@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.dup>


; <Start encoding FStar.Tactics.V1.Builtins.prune>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.prune (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.prune@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.prune>


; <Start encoding FStar.Tactics.V1.Builtins.addns>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.addns (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.addns@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.addns>


; <Start encoding FStar.Tactics.V1.Builtins.t_destruct>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.t_destruct (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.t_destruct@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.t_destruct>


; <Start encoding FStar.Tactics.V1.Builtins.set_options>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.set_options (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.set_options@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.set_options>


; <Start encoding FStar.Tactics.V1.Builtins.uvar_env>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.uvar_env (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.uvar_env@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.uvar_env>


; <Start encoding FStar.Tactics.V1.Builtins.ghost_uvar_env>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.ghost_uvar_env (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.ghost_uvar_env@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.ghost_uvar_env>


; <Start encoding FStar.Tactics.V1.Builtins.fresh_universe_uvar>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.fresh_universe_uvar (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.fresh_universe_uvar@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.fresh_universe_uvar>


; <Start encoding FStar.Tactics.V1.Builtins.unify_env>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.unify_env (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.unify_env@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.unify_env>


; <Start encoding FStar.Tactics.V1.Builtins.unify_guard_env>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.unify_guard_env (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.unify_guard_env@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.unify_guard_env>


; <Start encoding FStar.Tactics.V1.Builtins.match_env>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.match_env (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.match_env@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.match_env>


; <Start encoding FStar.Tactics.V1.Builtins.launch_process>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.launch_process (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.launch_process@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.launch_process>


; <Start encoding FStar.Tactics.V1.Builtins.fresh_bv_named>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.fresh_bv_named (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.fresh_bv_named@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.fresh_bv_named>


; <Start encoding FStar.Tactics.V1.Builtins.change>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.change (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.change@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.change>


; <Start encoding FStar.Tactics.V1.Builtins.get_guard_policy>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.get_guard_policy (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.get_guard_policy@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.get_guard_policy>


; <Start encoding FStar.Tactics.V1.Builtins.set_guard_policy>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.set_guard_policy (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.set_guard_policy@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.set_guard_policy>


; <Start encoding FStar.Tactics.V1.Builtins.lax_on>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.lax_on (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.lax_on@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.lax_on>


; <Start encoding FStar.Tactics.V1.Builtins.tadmit_t>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.tadmit_t (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.tadmit_t@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.tadmit_t>


; <Start encoding FStar.Tactics.V1.Builtins.inspect>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.inspect (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.inspect@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.inspect>


; <Start encoding FStar.Tactics.V1.Builtins.pack>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.pack (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.pack@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.pack>


; <Start encoding FStar.Tactics.V1.Builtins.pack_curried>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.pack_curried (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.pack_curried@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.pack_curried>


; <Start encoding FStar.Tactics.V1.Builtins.join>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.join (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.join@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.join>


; <Start encoding FStar.Tactics.V1.Builtins.lget>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.lget (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.lget@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.lget>


; <Start encoding FStar.Tactics.V1.Builtins.lset>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.lset (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.lset@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.lset>


; <Start encoding FStar.Tactics.V1.Builtins.set_goals>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.set_goals (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.set_goals@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.set_goals>


; <Start encoding FStar.Tactics.V1.Builtins.set_smt_goals>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.set_smt_goals (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.set_smt_goals@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.set_smt_goals>


; <Start encoding FStar.Tactics.V1.Builtins.curms>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.curms (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.curms@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.curms>


; <Start encoding FStar.Tactics.V1.Builtins.set_urgency>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.set_urgency (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.set_urgency@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.set_urgency>


; <Start encoding FStar.Tactics.V1.Builtins.string_to_term>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.string_to_term (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.string_to_term@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.string_to_term>


; <Start encoding FStar.Tactics.V1.Builtins.push_bv_dsenv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.push_bv_dsenv (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.push_bv_dsenv@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.push_bv_dsenv>


; <Start encoding FStar.Tactics.V1.Builtins.term_to_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.term_to_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.term_to_string@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.term_to_string>


; <Start encoding FStar.Tactics.V1.Builtins.comp_to_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.comp_to_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.comp_to_string@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.comp_to_string>


; <Start encoding FStar.Tactics.V1.Builtins.range_to_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.range_to_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.range_to_string@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.range_to_string>


; <Start encoding FStar.Tactics.V1.Builtins.term_eq_old>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.term_eq_old (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.term_eq_old@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.term_eq_old>


; <Start encoding FStar.Tactics.V1.Builtins.with_compat_pre_core>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.with_compat_pre_core (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.with_compat_pre_core@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.with_compat_pre_core>


; <Start encoding FStar.Tactics.V1.Builtins.get_vconfig>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.get_vconfig (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.get_vconfig@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.get_vconfig>


; <Start encoding FStar.Tactics.V1.Builtins.set_vconfig>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.set_vconfig (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.set_vconfig@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.set_vconfig>


; <Start encoding FStar.Tactics.V1.Builtins.t_smt_sync>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.t_smt_sync (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.t_smt_sync@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.t_smt_sync>


; <Start encoding FStar.Tactics.V1.Builtins.free_uvars>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.free_uvars (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.free_uvars@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.free_uvars>


; <Start encoding FStar.Tactics.V1.Builtins.check_subtyping>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.check_subtyping (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.check_subtyping@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.check_subtyping>


; <Start encoding FStar.Tactics.V1.Builtins.check_equiv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.check_equiv (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.check_equiv@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.check_equiv>


; <Start encoding FStar.Tactics.V1.Builtins.core_compute_term_type>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.core_compute_term_type (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.core_compute_term_type@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.core_compute_term_type>


; <Start encoding FStar.Tactics.V1.Builtins.core_check_term>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.core_check_term (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.core_check_term@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.core_check_term>


; <Start encoding FStar.Tactics.V1.Builtins.tc_term>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.tc_term (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.tc_term@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.tc_term>


; <Start encoding FStar.Tactics.V1.Builtins.universe_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.universe_of (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.universe_of@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.universe_of>


; <Start encoding FStar.Tactics.V1.Builtins.prop_validity_token>

(declare-fun FStar.Tactics.V1.Builtins.prop_validity_token (Term Term) Term)
;;;;;;;;;;;;;;;;g: FStar.Reflection.Types.env -> t: FStar.Reflection.Types.term -> Type
(declare-fun Tm_arrow_ecb30f5d48d826f29ee5f3655317c18f () Term)
(declare-fun FStar.Tactics.V1.Builtins.prop_validity_token@tok () Term)
(declare-fun Tm_refine_5ef33b2f232218106bc7c06cda861427 (Term Term) Term)

; </end encoding FStar.Tactics.V1.Builtins.prop_validity_token>


; <Start encoding FStar.Tactics.V1.Builtins.check_prop_validity>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.check_prop_validity (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.check_prop_validity@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.check_prop_validity>


; <Start encoding FStar.Tactics.V1.Builtins.instantiate_implicits>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.instantiate_implicits (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.instantiate_implicits@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.instantiate_implicits>


; <Start encoding FStar.Tactics.V1.Builtins.maybe_relate_after_unfolding>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.maybe_relate_after_unfolding (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.maybe_relate_after_unfolding@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.maybe_relate_after_unfolding>


; <Start encoding FStar.Tactics.V1.Builtins.maybe_unfold_head>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.maybe_unfold_head (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.maybe_unfold_head@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.maybe_unfold_head>


; <Start encoding FStar.Tactics.V1.Builtins.push_open_namespace>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.push_open_namespace (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.push_open_namespace@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.push_open_namespace>


; <Start encoding FStar.Tactics.V1.Builtins.push_module_abbrev>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.push_module_abbrev (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.push_module_abbrev@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.push_module_abbrev>


; <Start encoding FStar.Tactics.V1.Builtins.resolve_name>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.resolve_name (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.resolve_name@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.resolve_name>


; <Start encoding FStar.Tactics.V1.Builtins.log_issues>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V1.Builtins.log_issues (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V1.Builtins.log_issues@tok () Term)

; </end encoding FStar.Tactics.V1.Builtins.log_issues>


; End Externals for interface FStar.Tactics.V1.Builtins


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End interface FStar.Tactics.V1.Builtins (349 decls; total size 33107)

;;; Start module FStar.Tactics.Builtins

; Externals for module FStar.Tactics.Builtins


; End Externals for module FStar.Tactics.Builtins


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End module FStar.Tactics.Builtins (3 decls; total size 1166)

;;; Start module FStar.Tactics.V2.SyntaxCoercions

; Externals for module FStar.Tactics.V2.SyntaxCoercions


; <Start encoding FStar.Tactics.V2.SyntaxCoercions.namedv_to_term>

(declare-fun FStar.Tactics.V2.SyntaxCoercions.namedv_to_term (Term) Term)
;;;;;;;;;;;;;;;;x: FStar.Tactics.NamedView.namedv -> FStar.Tactics.NamedView.term
(declare-fun Tm_arrow_08e5b3efa377f9732a56703deb311ecc () Term)
(declare-fun FStar.Tactics.V2.SyntaxCoercions.namedv_to_term@tok () Term)

; </end encoding FStar.Tactics.V2.SyntaxCoercions.namedv_to_term>


; <Start encoding FStar.Tactics.V2.SyntaxCoercions.binder_to_namedv>

(declare-fun FStar.Tactics.V2.SyntaxCoercions.binder_to_namedv (Term) Term)
;;;;;;;;;;;;;;;;b: FStar.Tactics.NamedView.binder -> FStar.Tactics.NamedView.namedv
(declare-fun Tm_arrow_a5d157a793a17515ce6d41a52eb1ac4d () Term)
(declare-fun FStar.Tactics.V2.SyntaxCoercions.binder_to_namedv@tok () Term)

; </end encoding FStar.Tactics.V2.SyntaxCoercions.binder_to_namedv>


; <Start encoding FStar.Tactics.V2.SyntaxCoercions.binder_to_term>

(declare-fun FStar.Tactics.V2.SyntaxCoercions.binder_to_term (Term) Term)
;;;;;;;;;;;;;;;;b: FStar.Tactics.NamedView.binder -> FStar.Tactics.NamedView.term
(declare-fun Tm_arrow_a985a5770f38d592f5996181c60af242 () Term)
(declare-fun FStar.Tactics.V2.SyntaxCoercions.binder_to_term@tok () Term)

; </end encoding FStar.Tactics.V2.SyntaxCoercions.binder_to_term>


; <Start encoding FStar.Tactics.V2.SyntaxCoercions.binding_to_namedv>

(declare-fun FStar.Tactics.V2.SyntaxCoercions.binding_to_namedv (Term) Term)
;;;;;;;;;;;;;;;;b: FStar.Tactics.NamedView.binding -> FStar.Tactics.NamedView.namedv
(declare-fun Tm_arrow_fad6a08ad4032ba95ef8a5ae22a77af5 () Term)
(declare-fun FStar.Tactics.V2.SyntaxCoercions.binding_to_namedv@tok () Term)

; </end encoding FStar.Tactics.V2.SyntaxCoercions.binding_to_namedv>


; <Start encoding FStar.Tactics.V2.SyntaxCoercions.binding_to_term>

(declare-fun FStar.Tactics.V2.SyntaxCoercions.binding_to_term (Term) Term)
;;;;;;;;;;;;;;;;x: FStar.Tactics.NamedView.binding -> FStar.Tactics.NamedView.term
(declare-fun Tm_arrow_547e6136aed9db5fe30ffb4b48d0b3d3 () Term)
(declare-fun FStar.Tactics.V2.SyntaxCoercions.binding_to_term@tok () Term)

; </end encoding FStar.Tactics.V2.SyntaxCoercions.binding_to_term>


; End Externals for module FStar.Tactics.V2.SyntaxCoercions


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End module FStar.Tactics.V2.SyntaxCoercions (28 decls; total size 3371)

;;; Start module FStar.PropositionalExtensionality

; Externals for module FStar.PropositionalExtensionality


; <Start encoding FStar.PropositionalExtensionality.axiom>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.PropositionalExtensionality.axiom (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.PropositionalExtensionality.axiom@tok () Term)

; </end encoding FStar.PropositionalExtensionality.axiom>


; <Start encoding FStar.PropositionalExtensionality.apply>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.PropositionalExtensionality.apply (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.PropositionalExtensionality.apply@tok () Term)

; </end encoding FStar.PropositionalExtensionality.apply>


; End Externals for module FStar.PropositionalExtensionality


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End module FStar.PropositionalExtensionality (11 decls; total size 1941)

;;; Start module FStar.Tactics.Util

; Externals for module FStar.Tactics.Util


; <Skipped FStar.Tactics.Util.map/>


; <Start encoding FStar.Tactics.Util.map>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.map (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.map@tok () Term)

; </end encoding FStar.Tactics.Util.map>


; <Skipped FStar.Tactics.Util.__mapi/>


; <Start encoding FStar.Tactics.Util.__mapi>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.__mapi (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.__mapi@tok () Term)

; </end encoding FStar.Tactics.Util.__mapi>


; <Skipped FStar.Tactics.Util.mapi/>


; <Start encoding FStar.Tactics.Util.mapi>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.mapi (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.mapi@tok () Term)

; </end encoding FStar.Tactics.Util.mapi>


; <Skipped FStar.Tactics.Util.iter/>


; <Start encoding FStar.Tactics.Util.iter>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.iter (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.iter@tok () Term)

; </end encoding FStar.Tactics.Util.iter>


; <Skipped FStar.Tactics.Util.iteri_aux/>


; <Start encoding FStar.Tactics.Util.iteri_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.iteri_aux (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.iteri_aux@tok () Term)

; </end encoding FStar.Tactics.Util.iteri_aux>


; <Skipped FStar.Tactics.Util.iteri/>


; <Start encoding FStar.Tactics.Util.iteri>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.iteri (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.iteri@tok () Term)

; </end encoding FStar.Tactics.Util.iteri>


; <Skipped FStar.Tactics.Util.fold_left/>


; <Start encoding FStar.Tactics.Util.fold_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.fold_left (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.fold_left@tok () Term)

; </end encoding FStar.Tactics.Util.fold_left>


; <Skipped FStar.Tactics.Util.fold_right/>


; <Start encoding FStar.Tactics.Util.fold_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.fold_right (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.fold_right@tok () Term)

; </end encoding FStar.Tactics.Util.fold_right>


; <Skipped FStar.Tactics.Util.zip/>


; <Start encoding FStar.Tactics.Util.zip>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.zip (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.zip@tok () Term)

; </end encoding FStar.Tactics.Util.zip>


; <Skipped FStar.Tactics.Util.filter/>


; <Start encoding FStar.Tactics.Util.filter>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.filter (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.filter@tok () Term)

; </end encoding FStar.Tactics.Util.filter>


; <Start encoding FStar.Tactics.Util.filter_map_acc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.filter_map_acc (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.filter_map_acc@tok () Term)

; </end encoding FStar.Tactics.Util.filter_map_acc>


; <Start encoding FStar.Tactics.Util.filter_map>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.filter_map (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.filter_map@tok () Term)

; </end encoding FStar.Tactics.Util.filter_map>


; <Skipped FStar.Tactics.Util.tryPick/>


; <Start encoding FStar.Tactics.Util.tryPick>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.tryPick (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.tryPick@tok () Term)

; </end encoding FStar.Tactics.Util.tryPick>


; <Start encoding FStar.Tactics.Util.map_opt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.map_opt (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.map_opt@tok () Term)

; </end encoding FStar.Tactics.Util.map_opt>


; <Start encoding FStar.Tactics.Util.repeatn>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.repeatn (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.repeatn@tok () Term)

; </end encoding FStar.Tactics.Util.repeatn>


; <Start encoding FStar.Tactics.Util.tryFind>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.tryFind (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.tryFind@tok () Term)

; </end encoding FStar.Tactics.Util.tryFind>


; <Start encoding FStar.Tactics.Util.fold_left2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.fold_left2 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.fold_left2@tok () Term)

; </end encoding FStar.Tactics.Util.fold_left2>


; <Start encoding FStar.Tactics.Util.string_of_list>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Util.string_of_list (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Util.string_of_list@tok () Term)

; </end encoding FStar.Tactics.Util.string_of_list>


; End Externals for module FStar.Tactics.Util


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End module FStar.Tactics.Util (86 decls; total size 7716)

;;; Start module FStar.Tactics.Visit

; Externals for module FStar.Tactics.Visit


; <Start encoding FStar.Tactics.Visit.on_sort_binder>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Visit.on_sort_binder (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Visit.on_sort_binder@tok () Term)

; </end encoding FStar.Tactics.Visit.on_sort_binder>


; <Start encoding FStar.Tactics.Visit.on_sort_simple_binder>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Visit.on_sort_simple_binder (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Visit.on_sort_simple_binder@tok () Term)

; </end encoding FStar.Tactics.Visit.on_sort_simple_binder>


; <Start encoding >

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Visit.visit_tm (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Visit.visit_tm@tok () Term)
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Visit.visit_br (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Visit.visit_br@tok () Term)
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Visit.visit_pat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Visit.visit_pat@tok () Term)
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Visit.visit_comp (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Visit.visit_comp@tok () Term)

; </end encoding >


; End Externals for module FStar.Tactics.Visit


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End module FStar.Tactics.Visit (21 decls; total size 2899)

;;; Start interface FStar.Tactics.V2.Builtins

; Externals for interface FStar.Tactics.V2.Builtins


; <Start encoding FStar.Tactics.V2.Builtins.compress>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.compress (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.compress@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.compress>


; <Start encoding FStar.Tactics.V2.Builtins.top_env>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.top_env (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.top_env@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.top_env>


; <Start encoding FStar.Tactics.V2.Builtins.fresh>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.fresh (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.fresh@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.fresh>


; <Start encoding FStar.Tactics.V2.Builtins.refine_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.refine_intro (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.refine_intro@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.refine_intro>


; <Start encoding FStar.Tactics.V2.Builtins.tc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.tc (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.tc@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.tc>


; <Start encoding FStar.Tactics.V2.Builtins.tcc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.tcc (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.tcc@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.tcc>


; <Start encoding FStar.Tactics.V2.Builtins.unshelve>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.unshelve (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.unshelve@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.unshelve>


; <Start encoding FStar.Tactics.V2.Builtins.unquote>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.unquote (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.unquote@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.unquote>


; <Start encoding FStar.Tactics.V2.Builtins.catch>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.catch (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.catch@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.catch>


; <Start encoding FStar.Tactics.V2.Builtins.recover>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.recover (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.recover@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.recover>


; <Start encoding FStar.Tactics.V2.Builtins.norm>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.norm (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.norm@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.norm>


; <Start encoding FStar.Tactics.V2.Builtins.norm_term_env>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.norm_term_env (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.norm_term_env@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.norm_term_env>


; <Start encoding FStar.Tactics.V2.Builtins.norm_binding_type>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.norm_binding_type (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.norm_binding_type@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.norm_binding_type>


; <Start encoding FStar.Tactics.V2.Builtins.intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.intro (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.intro@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.intro>


; <Start encoding FStar.Tactics.V2.Builtins.intro_rec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.intro_rec (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.intro_rec@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.intro_rec>


; <Start encoding FStar.Tactics.V2.Builtins.rename_to>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.rename_to (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.rename_to@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.rename_to>


; <Start encoding FStar.Tactics.V2.Builtins.revert>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.revert (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.revert@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.revert>


; <Start encoding FStar.Tactics.V2.Builtins.var_retype>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.var_retype (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.var_retype@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.var_retype>


; <Start encoding FStar.Tactics.V2.Builtins.clear_top>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.clear_top (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.clear_top@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.clear_top>


; <Start encoding FStar.Tactics.V2.Builtins.clear>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.clear (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.clear@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.clear>


; <Start encoding FStar.Tactics.V2.Builtins.rewrite>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.rewrite (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.rewrite@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.rewrite>


; <Start encoding FStar.Tactics.V2.Builtins.t_exact>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.t_exact (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.t_exact@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.t_exact>


; <Start encoding FStar.Tactics.V2.Builtins.t_apply>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.t_apply (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.t_apply@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.t_apply>


; <Start encoding FStar.Tactics.V2.Builtins.t_apply_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.t_apply_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.t_apply_lemma@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.t_apply_lemma>


; <Start encoding FStar.Tactics.V2.Builtins.print>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.print (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.print@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.print>


; <Start encoding FStar.Tactics.V2.Builtins.debugging>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.debugging (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.debugging@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.debugging>


; <Start encoding FStar.Tactics.V2.Builtins.dump>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.dump (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.dump@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.dump>


; <Start encoding FStar.Tactics.V2.Builtins.dump_all>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.dump_all (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.dump_all@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.dump_all>


; <Start encoding FStar.Tactics.V2.Builtins.dump_uvars_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.dump_uvars_of (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.dump_uvars_of@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.dump_uvars_of>


; <Start encoding FStar.Tactics.V2.Builtins.t_trefl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.t_trefl (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.t_trefl@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.t_trefl>


; <Start encoding FStar.Tactics.V2.Builtins.t_commute_applied_match>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.t_commute_applied_match (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.t_commute_applied_match@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.t_commute_applied_match>


; <Start encoding FStar.Tactics.V2.Builtins.gather_or_solve_explicit_guards_for_resolved_goals>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.gather_or_solve_explicit_guards_for_resolved_goals (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.gather_or_solve_explicit_guards_for_resolved_goals@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.gather_or_solve_explicit_guards_for_resolved_goals>


; <Start encoding FStar.Tactics.V2.Builtins.ctrl_rewrite>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.ctrl_rewrite (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.ctrl_rewrite@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.ctrl_rewrite>


; <Start encoding FStar.Tactics.V2.Builtins.dup>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.dup (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.dup@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.dup>


; <Start encoding FStar.Tactics.V2.Builtins.prune>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.prune (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.prune@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.prune>


; <Start encoding FStar.Tactics.V2.Builtins.addns>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.addns (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.addns@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.addns>


; <Start encoding FStar.Tactics.V2.Builtins.t_destruct>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.t_destruct (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.t_destruct@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.t_destruct>


; <Start encoding FStar.Tactics.V2.Builtins.set_options>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.set_options (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.set_options@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.set_options>


; <Start encoding FStar.Tactics.V2.Builtins.uvar_env>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.uvar_env (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.uvar_env@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.uvar_env>


; <Start encoding FStar.Tactics.V2.Builtins.ghost_uvar_env>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.ghost_uvar_env (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.ghost_uvar_env@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.ghost_uvar_env>


; <Start encoding FStar.Tactics.V2.Builtins.fresh_universe_uvar>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.fresh_universe_uvar (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.fresh_universe_uvar@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.fresh_universe_uvar>


; <Start encoding FStar.Tactics.V2.Builtins.unify_env>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.unify_env (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.unify_env@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.unify_env>


; <Start encoding FStar.Tactics.V2.Builtins.unify_guard_env>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.unify_guard_env (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.unify_guard_env@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.unify_guard_env>


; <Start encoding FStar.Tactics.V2.Builtins.match_env>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.match_env (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.match_env@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.match_env>


; <Start encoding FStar.Tactics.V2.Builtins.launch_process>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.launch_process (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.launch_process@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.launch_process>


; <Start encoding FStar.Tactics.V2.Builtins.change>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.change (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.change@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.change>


; <Start encoding FStar.Tactics.V2.Builtins.get_guard_policy>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.get_guard_policy (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.get_guard_policy@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.get_guard_policy>


; <Start encoding FStar.Tactics.V2.Builtins.set_guard_policy>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.set_guard_policy (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.set_guard_policy@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.set_guard_policy>


; <Start encoding FStar.Tactics.V2.Builtins.lax_on>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.lax_on (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.lax_on@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.lax_on>


; <Start encoding FStar.Tactics.V2.Builtins.tadmit_t>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.tadmit_t (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.tadmit_t@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.tadmit_t>


; <Start encoding FStar.Tactics.V2.Builtins.join>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.join (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.join@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.join>


; <Start encoding FStar.Tactics.V2.Builtins.lget>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.lget (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.lget@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.lget>


; <Start encoding FStar.Tactics.V2.Builtins.lset>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.lset (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.lset@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.lset>


; <Start encoding FStar.Tactics.V2.Builtins.set_goals>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.set_goals (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.set_goals@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.set_goals>


; <Start encoding FStar.Tactics.V2.Builtins.set_smt_goals>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.set_smt_goals (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.set_smt_goals@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.set_smt_goals>


; <Start encoding FStar.Tactics.V2.Builtins.curms>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.curms (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.curms@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.curms>


; <Start encoding FStar.Tactics.V2.Builtins.set_urgency>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.set_urgency (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.set_urgency@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.set_urgency>


; <Start encoding FStar.Tactics.V2.Builtins.string_to_term>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.string_to_term (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.string_to_term@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.string_to_term>


; <Start encoding FStar.Tactics.V2.Builtins.push_bv_dsenv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.push_bv_dsenv (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.push_bv_dsenv@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.push_bv_dsenv>


; <Start encoding FStar.Tactics.V2.Builtins.term_to_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.term_to_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.term_to_string@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.term_to_string>


; <Start encoding FStar.Tactics.V2.Builtins.comp_to_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.comp_to_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.comp_to_string@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.comp_to_string>


; <Start encoding FStar.Tactics.V2.Builtins.range_to_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.range_to_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.range_to_string@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.range_to_string>


; <Start encoding FStar.Tactics.V2.Builtins.term_eq_old>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.term_eq_old (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.term_eq_old@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.term_eq_old>


; <Start encoding FStar.Tactics.V2.Builtins.with_compat_pre_core>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.with_compat_pre_core (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.with_compat_pre_core@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.with_compat_pre_core>


; <Start encoding FStar.Tactics.V2.Builtins.get_vconfig>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.get_vconfig (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.get_vconfig@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.get_vconfig>


; <Start encoding FStar.Tactics.V2.Builtins.set_vconfig>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.set_vconfig (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.set_vconfig@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.set_vconfig>


; <Start encoding FStar.Tactics.V2.Builtins.t_smt_sync>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.t_smt_sync (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.t_smt_sync@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.t_smt_sync>


; <Start encoding FStar.Tactics.V2.Builtins.free_uvars>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.free_uvars (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.free_uvars@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.free_uvars>


; <Start encoding FStar.Tactics.V2.Builtins.check_subtyping>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.check_subtyping (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.check_subtyping@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.check_subtyping>


; <Start encoding FStar.Tactics.V2.Builtins.check_equiv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.check_equiv (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.check_equiv@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.check_equiv>


; <Start encoding FStar.Tactics.V2.Builtins.core_compute_term_type>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.core_compute_term_type (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.core_compute_term_type@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.core_compute_term_type>


; <Start encoding FStar.Tactics.V2.Builtins.core_check_term>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.core_check_term (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.core_check_term@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.core_check_term>


; <Start encoding FStar.Tactics.V2.Builtins.tc_term>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.tc_term (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.tc_term@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.tc_term>


; <Start encoding FStar.Tactics.V2.Builtins.universe_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.universe_of (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.universe_of@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.universe_of>


; <Start encoding FStar.Tactics.V2.Builtins.prop_validity_token>

(declare-fun FStar.Tactics.V2.Builtins.prop_validity_token (Term Term) Term)

(declare-fun FStar.Tactics.V2.Builtins.prop_validity_token@tok () Term)
(declare-fun Tm_refine_375e6d7b8670934f4b4148cd7b98b120 (Term Term) Term)

; </end encoding FStar.Tactics.V2.Builtins.prop_validity_token>


; <Start encoding FStar.Tactics.V2.Builtins.check_prop_validity>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.check_prop_validity (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.check_prop_validity@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.check_prop_validity>


; <Start encoding FStar.Tactics.V2.Builtins.instantiate_implicits>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.instantiate_implicits (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.instantiate_implicits@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.instantiate_implicits>


; <Start encoding FStar.Tactics.V2.Builtins.maybe_relate_after_unfolding>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.maybe_relate_after_unfolding (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.maybe_relate_after_unfolding@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.maybe_relate_after_unfolding>


; <Start encoding FStar.Tactics.V2.Builtins.maybe_unfold_head>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.maybe_unfold_head (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.maybe_unfold_head@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.maybe_unfold_head>


; <Start encoding FStar.Tactics.V2.Builtins.push_open_namespace>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.push_open_namespace (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.push_open_namespace@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.push_open_namespace>


; <Start encoding FStar.Tactics.V2.Builtins.push_module_abbrev>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.push_module_abbrev (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.push_module_abbrev@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.push_module_abbrev>


; <Start encoding FStar.Tactics.V2.Builtins.resolve_name>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.resolve_name (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.resolve_name@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.resolve_name>


; <Start encoding FStar.Tactics.V2.Builtins.log_issues>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Builtins.log_issues (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Builtins.log_issues@tok () Term)

; </end encoding FStar.Tactics.V2.Builtins.log_issues>


; End Externals for interface FStar.Tactics.V2.Builtins


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End interface FStar.Tactics.V2.Builtins (337 decls; total size 31866)

;;; Start module FStar.Tactics.V2.SyntaxHelpers

; Externals for module FStar.Tactics.V2.SyntaxHelpers


; <Start encoding FStar.Tactics.V2.SyntaxHelpers.collect_arr'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.collect_arr_ (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.collect_arr_@tok () Term)

; </end encoding FStar.Tactics.V2.SyntaxHelpers.collect_arr'>


; <Skipped FStar.Tactics.V2.SyntaxHelpers.collect_arr_bs/>


; <Start encoding FStar.Tactics.V2.SyntaxHelpers.collect_arr_bs>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.collect_arr_bs (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.collect_arr_bs@tok () Term)

; </end encoding FStar.Tactics.V2.SyntaxHelpers.collect_arr_bs>


; <Skipped FStar.Tactics.V2.SyntaxHelpers.collect_arr/>


; <Start encoding FStar.Tactics.V2.SyntaxHelpers.collect_arr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.collect_arr (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.collect_arr@tok () Term)

; </end encoding FStar.Tactics.V2.SyntaxHelpers.collect_arr>


; <Start encoding FStar.Tactics.V2.SyntaxHelpers.collect_abs'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.collect_abs_ (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.collect_abs_@tok () Term)

; </end encoding FStar.Tactics.V2.SyntaxHelpers.collect_abs'>


; <Skipped FStar.Tactics.V2.SyntaxHelpers.collect_abs/>


; <Start encoding FStar.Tactics.V2.SyntaxHelpers.collect_abs>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.collect_abs (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.collect_abs@tok () Term)

; </end encoding FStar.Tactics.V2.SyntaxHelpers.collect_abs>


; <Start encoding FStar.Tactics.V2.SyntaxHelpers.fail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.fail (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.fail@tok () Term)

; </end encoding FStar.Tactics.V2.SyntaxHelpers.fail>


; <Start encoding FStar.Tactics.V2.SyntaxHelpers.mk_arr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.mk_arr (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.mk_arr@tok () Term)

; </end encoding FStar.Tactics.V2.SyntaxHelpers.mk_arr>


; <Start encoding FStar.Tactics.V2.SyntaxHelpers.mk_tot_arr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.mk_tot_arr (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.mk_tot_arr@tok () Term)

; </end encoding FStar.Tactics.V2.SyntaxHelpers.mk_tot_arr>


; <Start encoding FStar.Tactics.V2.SyntaxHelpers.lookup_lb>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.lookup_lb (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.lookup_lb@tok () Term)

; </end encoding FStar.Tactics.V2.SyntaxHelpers.lookup_lb>


; <Start encoding FStar.Tactics.V2.SyntaxHelpers.inspect_unascribe>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.inspect_unascribe (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.inspect_unascribe@tok () Term)

; </end encoding FStar.Tactics.V2.SyntaxHelpers.inspect_unascribe>


; <Start encoding FStar.Tactics.V2.SyntaxHelpers.collect_app'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.collect_app_ (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.collect_app_@tok () Term)

; </end encoding FStar.Tactics.V2.SyntaxHelpers.collect_app'>


; <Start encoding FStar.Tactics.V2.SyntaxHelpers.collect_app>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.collect_app (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.SyntaxHelpers.collect_app@tok () Term)

; </end encoding FStar.Tactics.V2.SyntaxHelpers.collect_app>


; End Externals for module FStar.Tactics.V2.SyntaxHelpers


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End module FStar.Tactics.V2.SyntaxHelpers (54 decls; total size 6014)

;;; Start module FStar.Reflection.V2.Formula

; Externals for module FStar.Reflection.V2.Formula


; <Start encoding FStar.Reflection.V2.Formula.inspect_unascribe>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Formula.inspect_unascribe (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Formula.inspect_unascribe@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.inspect_unascribe>


; <Start encoding FStar.Reflection.V2.Formula.collect_app'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Formula.collect_app_ (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Formula.collect_app_@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.collect_app'>


; <Start encoding FStar.Reflection.V2.Formula.collect_app>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Formula.collect_app (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Formula.collect_app@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.collect_app>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.comparison () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.Eq (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Eq__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Eq
(declare-fun FStar.Reflection.V2.Formula.Eq@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.BoolEq (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.BoolEq__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: BoolEq
(declare-fun FStar.Reflection.V2.Formula.BoolEq@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.Lt () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Lt
(declare-fun FStar.Reflection.V2.Formula.Lt@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.Le () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Le
(declare-fun FStar.Reflection.V2.Formula.Le@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.Gt () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Gt
(declare-fun FStar.Reflection.V2.Formula.Gt@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.Ge () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Ge
(declare-fun FStar.Reflection.V2.Formula.Ge@tok () Term)
;;;;;;;;;;;;;;;;_0: FStar.Pervasives.Native.option FStar.Reflection.Types.typ   -> FStar.Reflection.V2.Formula.comparison
(declare-fun Tm_arrow_14e86b4a0ca60974d35df0ca64291cbe () Term)


; <Start encoding FStar.Reflection.V2.Formula.comparison>


; <start constructor FStar.Reflection.V2.Formula.comparison>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.comparison ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(= __@x0
FStar.Reflection.V2.Formula.comparison)))

; </end constructor FStar.Reflection.V2.Formula.comparison>


; </end encoding FStar.Reflection.V2.Formula.comparison>


; <Start encoding FStar.Reflection.V2.Formula.Eq>


; <start constructor FStar.Reflection.V2.Formula.Eq>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.Eq ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
107)
(= __@x0
(FStar.Reflection.V2.Formula.Eq (FStar.Reflection.V2.Formula.Eq__0 __@x0)))))

; </end constructor FStar.Reflection.V2.Formula.Eq>


; </end encoding FStar.Reflection.V2.Formula.Eq>


; <Start encoding FStar.Reflection.V2.Formula.BoolEq>


; <start constructor FStar.Reflection.V2.Formula.BoolEq>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.BoolEq ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
112)
(= __@x0
(FStar.Reflection.V2.Formula.BoolEq (FStar.Reflection.V2.Formula.BoolEq__0 __@x0)))))

; </end constructor FStar.Reflection.V2.Formula.BoolEq>


; </end encoding FStar.Reflection.V2.Formula.BoolEq>


; <Start encoding FStar.Reflection.V2.Formula.Lt>


; <start constructor FStar.Reflection.V2.Formula.Lt>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.Lt ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
117)
(= __@x0
FStar.Reflection.V2.Formula.Lt)))

; </end constructor FStar.Reflection.V2.Formula.Lt>


; </end encoding FStar.Reflection.V2.Formula.Lt>


; <Start encoding FStar.Reflection.V2.Formula.Le>


; <start constructor FStar.Reflection.V2.Formula.Le>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.Le ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
119)
(= __@x0
FStar.Reflection.V2.Formula.Le)))

; </end constructor FStar.Reflection.V2.Formula.Le>


; </end encoding FStar.Reflection.V2.Formula.Le>


; <Start encoding FStar.Reflection.V2.Formula.Gt>


; <start constructor FStar.Reflection.V2.Formula.Gt>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.Gt ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
121)
(= __@x0
FStar.Reflection.V2.Formula.Gt)))

; </end constructor FStar.Reflection.V2.Formula.Gt>


; </end encoding FStar.Reflection.V2.Formula.Gt>


; <Start encoding FStar.Reflection.V2.Formula.Ge>


; <start constructor FStar.Reflection.V2.Formula.Ge>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.Ge ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
123)
(= __@x0
FStar.Reflection.V2.Formula.Ge)))

; </end constructor FStar.Reflection.V2.Formula.Ge>


; </end encoding FStar.Reflection.V2.Formula.Ge>


; </end encoding >


; <Start encoding FStar.Reflection.V2.Formula.uu___is_Eq>

(declare-fun FStar.Reflection.V2.Formula.uu___is_Eq (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V2.Formula.comparison -> Prims.bool
(declare-fun Tm_arrow_d65e342f5ea88b2144db8bf57e23b1b7 () Term)
(declare-fun FStar.Reflection.V2.Formula.uu___is_Eq@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.uu___is_Eq>


; <Skipped FStar.Reflection.V2.Formula.uu___is_Eq/>


; <Start encoding FStar.Reflection.V2.Formula.__proj__Eq__item___0>

(declare-fun Tm_refine_e43d6364938e1d5176082471d2d04fb9 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Eq__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Formula.comparison{Eq? _}   -> FStar.Pervasives.Native.option FStar.Reflection.Types.typ
(declare-fun Tm_arrow_e0654567a8ed9148b73ddf817df2c278 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Eq__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.__proj__Eq__item___0>


; <Skipped FStar.Reflection.V2.Formula.__proj__Eq__item___0/>


; <Start encoding FStar.Reflection.V2.Formula.uu___is_BoolEq>

(declare-fun FStar.Reflection.V2.Formula.uu___is_BoolEq (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_BoolEq@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.uu___is_BoolEq>


; <Skipped FStar.Reflection.V2.Formula.uu___is_BoolEq/>


; <Start encoding FStar.Reflection.V2.Formula.__proj__BoolEq__item___0>

(declare-fun Tm_refine_7130ac7f7031ee2405d67ce0fb773016 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__BoolEq__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Formula.comparison{BoolEq? _}   -> FStar.Pervasives.Native.option FStar.Reflection.Types.typ
(declare-fun Tm_arrow_10fd21c8b9f6f611ea9790e9cc0f1de5 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__BoolEq__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.__proj__BoolEq__item___0>


; <Skipped FStar.Reflection.V2.Formula.__proj__BoolEq__item___0/>


; <Start encoding FStar.Reflection.V2.Formula.uu___is_Lt>

(declare-fun FStar.Reflection.V2.Formula.uu___is_Lt (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_Lt@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.uu___is_Lt>


; <Skipped FStar.Reflection.V2.Formula.uu___is_Lt/>


; <Start encoding FStar.Reflection.V2.Formula.uu___is_Le>

(declare-fun FStar.Reflection.V2.Formula.uu___is_Le (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_Le@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.uu___is_Le>


; <Skipped FStar.Reflection.V2.Formula.uu___is_Le/>


; <Start encoding FStar.Reflection.V2.Formula.uu___is_Gt>

(declare-fun FStar.Reflection.V2.Formula.uu___is_Gt (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_Gt@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.uu___is_Gt>


; <Skipped FStar.Reflection.V2.Formula.uu___is_Gt/>


; <Start encoding FStar.Reflection.V2.Formula.uu___is_Ge>

(declare-fun FStar.Reflection.V2.Formula.uu___is_Ge (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_Ge@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.uu___is_Ge>


; <Skipped FStar.Reflection.V2.Formula.uu___is_Ge/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.formula () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.True_ () Term)
;;;;;;;;;;;;;;;;data constructor proxy: True_
(declare-fun FStar.Reflection.V2.Formula.True_@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.False_ () Term)
;;;;;;;;;;;;;;;;data constructor proxy: False_
(declare-fun FStar.Reflection.V2.Formula.False_@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.Comp (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Comp__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Comp__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Comp__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Comp
(declare-fun FStar.Reflection.V2.Formula.Comp@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.And (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.And__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.And__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: And
(declare-fun FStar.Reflection.V2.Formula.And@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.Or (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Or__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Or__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Or
(declare-fun FStar.Reflection.V2.Formula.Or@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.Not (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Not__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Not
(declare-fun FStar.Reflection.V2.Formula.Not@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.Implies (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Implies__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Implies__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Implies
(declare-fun FStar.Reflection.V2.Formula.Implies@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.Iff (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Iff__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Iff__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Iff
(declare-fun FStar.Reflection.V2.Formula.Iff@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.Forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Forall__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Forall__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Forall__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Forall
(declare-fun FStar.Reflection.V2.Formula.Forall@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.Exists (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Exists__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Exists__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Exists__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Exists
(declare-fun FStar.Reflection.V2.Formula.Exists@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.App (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.App__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.App__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: App
(declare-fun FStar.Reflection.V2.Formula.App@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.Name (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.Name__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Name
(declare-fun FStar.Reflection.V2.Formula.Name@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.FV (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.FV__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FV
(declare-fun FStar.Reflection.V2.Formula.FV@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.IntLit (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Formula.IntLit__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: IntLit
(declare-fun FStar.Reflection.V2.Formula.IntLit@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Formula.F_Unknown () Term)
;;;;;;;;;;;;;;;;data constructor proxy: F_Unknown
(declare-fun FStar.Reflection.V2.Formula.F_Unknown@tok () Term)
;;;;;;;;;;;;;;;;_0: FStar.Reflection.V2.Formula.comparison ->     _1: FStar.Tactics.NamedView.term ->     _2: FStar.Tactics.NamedView.term   -> FStar.Reflection.V2.Formula.formula
(declare-fun Tm_arrow_8857c1ddf1bdd92f1a816a62ccd412bc () Term)
;;;;;;;;;;;;;;;;_0: FStar.Tactics.NamedView.term -> _1: FStar.Tactics.NamedView.term   -> FStar.Reflection.V2.Formula.formula
(declare-fun Tm_arrow_88078cb15b188241a92307bcca04be9c () Term)

;;;;;;;;;;;;;;;;_0: FStar.Tactics.NamedView.term -> FStar.Reflection.V2.Formula.formula
(declare-fun Tm_arrow_f4196504b00b92bf890ee998fd322403 () Term)


;;;;;;;;;;;;;;;;_0: FStar.Tactics.NamedView.bv -> _1: FStar.Reflection.Types.typ -> _2: FStar.Tactics.NamedView.term   -> FStar.Reflection.V2.Formula.formula
(declare-fun Tm_arrow_3a4ceb298b7ee5b42a983254748bd463 () Term)


;;;;;;;;;;;;;;;;_0: FStar.Tactics.NamedView.namedv -> FStar.Reflection.V2.Formula.formula
(declare-fun Tm_arrow_af9fbaeb5a474c90d87c635da4058c8f () Term)
;;;;;;;;;;;;;;;;_0: FStar.Reflection.Types.fv -> FStar.Reflection.V2.Formula.formula
(declare-fun Tm_arrow_627812da8a662667808b97ccfdd27c4e () Term)
;;;;;;;;;;;;;;;;_0: Prims.int -> FStar.Reflection.V2.Formula.formula
(declare-fun Tm_arrow_db96b7d39b6d2478843b5883bc7b002a () Term)

; <Start encoding FStar.Reflection.V2.Formula.formula>


; <start constructor FStar.Reflection.V2.Formula.formula>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.formula ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
144)
(= __@x0
FStar.Reflection.V2.Formula.formula)))

; </end constructor FStar.Reflection.V2.Formula.formula>


; </end encoding FStar.Reflection.V2.Formula.formula>


; <Start encoding FStar.Reflection.V2.Formula.True_>


; <start constructor FStar.Reflection.V2.Formula.True_>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.True_ ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
150)
(= __@x0
FStar.Reflection.V2.Formula.True_)))

; </end constructor FStar.Reflection.V2.Formula.True_>


; </end encoding FStar.Reflection.V2.Formula.True_>


; <Start encoding FStar.Reflection.V2.Formula.False_>


; <start constructor FStar.Reflection.V2.Formula.False_>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.False_ ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
152)
(= __@x0
FStar.Reflection.V2.Formula.False_)))

; </end constructor FStar.Reflection.V2.Formula.False_>


; </end encoding FStar.Reflection.V2.Formula.False_>


; <Start encoding FStar.Reflection.V2.Formula.Comp>


; <start constructor FStar.Reflection.V2.Formula.Comp>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.Comp ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
154)
(= __@x0
(FStar.Reflection.V2.Formula.Comp (FStar.Reflection.V2.Formula.Comp__0 __@x0)
(FStar.Reflection.V2.Formula.Comp__1 __@x0)
(FStar.Reflection.V2.Formula.Comp__2 __@x0)))))

; </end constructor FStar.Reflection.V2.Formula.Comp>


; </end encoding FStar.Reflection.V2.Formula.Comp>


; <Start encoding FStar.Reflection.V2.Formula.And>


; <start constructor FStar.Reflection.V2.Formula.And>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.And ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
159)
(= __@x0
(FStar.Reflection.V2.Formula.And (FStar.Reflection.V2.Formula.And__0 __@x0)
(FStar.Reflection.V2.Formula.And__1 __@x0)))))

; </end constructor FStar.Reflection.V2.Formula.And>


; </end encoding FStar.Reflection.V2.Formula.And>


; <Start encoding FStar.Reflection.V2.Formula.Or>


; <start constructor FStar.Reflection.V2.Formula.Or>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.Or ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
164)
(= __@x0
(FStar.Reflection.V2.Formula.Or (FStar.Reflection.V2.Formula.Or__0 __@x0)
(FStar.Reflection.V2.Formula.Or__1 __@x0)))))

; </end constructor FStar.Reflection.V2.Formula.Or>


; </end encoding FStar.Reflection.V2.Formula.Or>


; <Start encoding FStar.Reflection.V2.Formula.Not>


; <start constructor FStar.Reflection.V2.Formula.Not>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.Not ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
169)
(= __@x0
(FStar.Reflection.V2.Formula.Not (FStar.Reflection.V2.Formula.Not__0 __@x0)))))

; </end constructor FStar.Reflection.V2.Formula.Not>


; </end encoding FStar.Reflection.V2.Formula.Not>


; <Start encoding FStar.Reflection.V2.Formula.Implies>


; <start constructor FStar.Reflection.V2.Formula.Implies>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.Implies ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
174)
(= __@x0
(FStar.Reflection.V2.Formula.Implies (FStar.Reflection.V2.Formula.Implies__0 __@x0)
(FStar.Reflection.V2.Formula.Implies__1 __@x0)))))

; </end constructor FStar.Reflection.V2.Formula.Implies>


; </end encoding FStar.Reflection.V2.Formula.Implies>


; <Start encoding FStar.Reflection.V2.Formula.Iff>


; <start constructor FStar.Reflection.V2.Formula.Iff>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.Iff ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
179)
(= __@x0
(FStar.Reflection.V2.Formula.Iff (FStar.Reflection.V2.Formula.Iff__0 __@x0)
(FStar.Reflection.V2.Formula.Iff__1 __@x0)))))

; </end constructor FStar.Reflection.V2.Formula.Iff>


; </end encoding FStar.Reflection.V2.Formula.Iff>


; <Start encoding FStar.Reflection.V2.Formula.Forall>


; <start constructor FStar.Reflection.V2.Formula.Forall>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.Forall ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
184)
(= __@x0
(FStar.Reflection.V2.Formula.Forall (FStar.Reflection.V2.Formula.Forall__0 __@x0)
(FStar.Reflection.V2.Formula.Forall__1 __@x0)
(FStar.Reflection.V2.Formula.Forall__2 __@x0)))))

; </end constructor FStar.Reflection.V2.Formula.Forall>


; </end encoding FStar.Reflection.V2.Formula.Forall>


; <Start encoding FStar.Reflection.V2.Formula.Exists>


; <start constructor FStar.Reflection.V2.Formula.Exists>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.Exists ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
189)
(= __@x0
(FStar.Reflection.V2.Formula.Exists (FStar.Reflection.V2.Formula.Exists__0 __@x0)
(FStar.Reflection.V2.Formula.Exists__1 __@x0)
(FStar.Reflection.V2.Formula.Exists__2 __@x0)))))

; </end constructor FStar.Reflection.V2.Formula.Exists>


; </end encoding FStar.Reflection.V2.Formula.Exists>


; <Start encoding FStar.Reflection.V2.Formula.App>


; <start constructor FStar.Reflection.V2.Formula.App>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.App ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
194)
(= __@x0
(FStar.Reflection.V2.Formula.App (FStar.Reflection.V2.Formula.App__0 __@x0)
(FStar.Reflection.V2.Formula.App__1 __@x0)))))

; </end constructor FStar.Reflection.V2.Formula.App>


; </end encoding FStar.Reflection.V2.Formula.App>


; <Start encoding FStar.Reflection.V2.Formula.Name>


; <start constructor FStar.Reflection.V2.Formula.Name>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.Name ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
199)
(= __@x0
(FStar.Reflection.V2.Formula.Name (FStar.Reflection.V2.Formula.Name__0 __@x0)))))

; </end constructor FStar.Reflection.V2.Formula.Name>


; </end encoding FStar.Reflection.V2.Formula.Name>


; <Start encoding FStar.Reflection.V2.Formula.FV>


; <start constructor FStar.Reflection.V2.Formula.FV>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.FV ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
204)
(= __@x0
(FStar.Reflection.V2.Formula.FV (FStar.Reflection.V2.Formula.FV__0 __@x0)))))

; </end constructor FStar.Reflection.V2.Formula.FV>


; </end encoding FStar.Reflection.V2.Formula.FV>


; <Start encoding FStar.Reflection.V2.Formula.IntLit>


; <start constructor FStar.Reflection.V2.Formula.IntLit>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.IntLit ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
209)
(= __@x0
(FStar.Reflection.V2.Formula.IntLit (FStar.Reflection.V2.Formula.IntLit__0 __@x0)))))

; </end constructor FStar.Reflection.V2.Formula.IntLit>


; </end encoding FStar.Reflection.V2.Formula.IntLit>


; <Start encoding FStar.Reflection.V2.Formula.F_Unknown>


; <start constructor FStar.Reflection.V2.Formula.F_Unknown>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Formula.F_Unknown ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
214)
(= __@x0
FStar.Reflection.V2.Formula.F_Unknown)))

; </end constructor FStar.Reflection.V2.Formula.F_Unknown>


; </end encoding FStar.Reflection.V2.Formula.F_Unknown>


; </end encoding >


; <Start encoding FStar.Reflection.V2.Formula.uu___is_True_>

(declare-fun FStar.Reflection.V2.Formula.uu___is_True_ (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V2.Formula.formula -> Prims.bool
(declare-fun Tm_arrow_f29e4998b5e1dcdeff1cc7473b63c87e () Term)
(declare-fun FStar.Reflection.V2.Formula.uu___is_True_@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.uu___is_True_>


; <Skipped FStar.Reflection.V2.Formula.uu___is_True_/>


; <Start encoding FStar.Reflection.V2.Formula.uu___is_False_>

(declare-fun FStar.Reflection.V2.Formula.uu___is_False_ (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_False_@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.uu___is_False_>


; <Skipped FStar.Reflection.V2.Formula.uu___is_False_/>


; <Start encoding FStar.Reflection.V2.Formula.uu___is_Comp>

(declare-fun FStar.Reflection.V2.Formula.uu___is_Comp (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_Comp@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.uu___is_Comp>


; <Skipped FStar.Reflection.V2.Formula.uu___is_Comp/>


; <Start encoding FStar.Reflection.V2.Formula.__proj__Comp__item___0>

(declare-fun Tm_refine_bb431a0b8a7caa6cf69b36c2e697f27d () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Comp__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Formula.formula{Comp? _} -> FStar.Reflection.V2.Formula.comparison
(declare-fun Tm_arrow_0281fb6450f815bfde3aaa7a5dd5f38e () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Comp__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.__proj__Comp__item___0>


; <Skipped FStar.Reflection.V2.Formula.__proj__Comp__item___0/>


; <Start encoding FStar.Reflection.V2.Formula.__proj__Comp__item___1>


(declare-fun FStar.Reflection.V2.Formula.__proj__Comp__item___1 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Formula.formula{Comp? _} -> FStar.Tactics.NamedView.term
(declare-fun Tm_arrow_93cb6419f6d34f9365398cc45eb342c5 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Comp__item___1@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.__proj__Comp__item___1>


; <Skipped FStar.Reflection.V2.Formula.__proj__Comp__item___1/>


; <Start encoding FStar.Reflection.V2.Formula.__proj__Comp__item___2>


(declare-fun FStar.Reflection.V2.Formula.__proj__Comp__item___2 (Term) Term)


(declare-fun FStar.Reflection.V2.Formula.__proj__Comp__item___2@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.__proj__Comp__item___2>


; <Skipped FStar.Reflection.V2.Formula.__proj__Comp__item___2/>


; <Start encoding FStar.Reflection.V2.Formula.uu___is_And>

(declare-fun FStar.Reflection.V2.Formula.uu___is_And (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_And@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.uu___is_And>


; <Skipped FStar.Reflection.V2.Formula.uu___is_And/>


; <Start encoding FStar.Reflection.V2.Formula.__proj__And__item___0>

(declare-fun Tm_refine_afefff96e762436e9e286938ae5bd296 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__And__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Formula.formula{And? _} -> FStar.Tactics.NamedView.term
(declare-fun Tm_arrow_d42e81f90786e04850501320428bc595 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__And__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.__proj__And__item___0>


; <Skipped FStar.Reflection.V2.Formula.__proj__And__item___0/>


; <Start encoding FStar.Reflection.V2.Formula.__proj__And__item___1>


(declare-fun FStar.Reflection.V2.Formula.__proj__And__item___1 (Term) Term)


(declare-fun FStar.Reflection.V2.Formula.__proj__And__item___1@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.__proj__And__item___1>


; <Skipped FStar.Reflection.V2.Formula.__proj__And__item___1/>


; <Start encoding FStar.Reflection.V2.Formula.uu___is_Or>

(declare-fun FStar.Reflection.V2.Formula.uu___is_Or (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_Or@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.uu___is_Or>


; <Skipped FStar.Reflection.V2.Formula.uu___is_Or/>


; <Start encoding FStar.Reflection.V2.Formula.__proj__Or__item___0>

(declare-fun Tm_refine_dd2b94a226dfb474d444b84bd0e18f4e () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Or__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Formula.formula{Or? _} -> FStar.Tactics.NamedView.term
(declare-fun Tm_arrow_626af93c44c18e2e129d55895de78797 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Or__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.__proj__Or__item___0>


; <Skipped FStar.Reflection.V2.Formula.__proj__Or__item___0/>


; <Start encoding FStar.Reflection.V2.Formula.__proj__Or__item___1>


(declare-fun FStar.Reflection.V2.Formula.__proj__Or__item___1 (Term) Term)


(declare-fun FStar.Reflection.V2.Formula.__proj__Or__item___1@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.__proj__Or__item___1>


; <Skipped FStar.Reflection.V2.Formula.__proj__Or__item___1/>


; <Start encoding FStar.Reflection.V2.Formula.uu___is_Not>

(declare-fun FStar.Reflection.V2.Formula.uu___is_Not (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_Not@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.uu___is_Not>


; <Skipped FStar.Reflection.V2.Formula.uu___is_Not/>


; <Start encoding FStar.Reflection.V2.Formula.__proj__Not__item___0>

(declare-fun Tm_refine_79b780262c6ff8bbc9d19dd6e7a82617 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Not__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Formula.formula{Not? _} -> FStar.Tactics.NamedView.term
(declare-fun Tm_arrow_aa548919989dc6c3c1cf8d3b1df2ae53 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Not__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.__proj__Not__item___0>


; <Skipped FStar.Reflection.V2.Formula.__proj__Not__item___0/>


; <Start encoding FStar.Reflection.V2.Formula.uu___is_Implies>

(declare-fun FStar.Reflection.V2.Formula.uu___is_Implies (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_Implies@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.uu___is_Implies>


; <Skipped FStar.Reflection.V2.Formula.uu___is_Implies/>


; <Start encoding FStar.Reflection.V2.Formula.__proj__Implies__item___0>

(declare-fun Tm_refine_71dd7a300c6cd81b43443cc6bd08c820 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Implies__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Formula.formula{Implies? _} -> FStar.Tactics.NamedView.term
(declare-fun Tm_arrow_22afc90fc3e98ee4089f81c76344e63b () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Implies__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.__proj__Implies__item___0>


; <Skipped FStar.Reflection.V2.Formula.__proj__Implies__item___0/>


; <Start encoding FStar.Reflection.V2.Formula.__proj__Implies__item___1>


(declare-fun FStar.Reflection.V2.Formula.__proj__Implies__item___1 (Term) Term)


(declare-fun FStar.Reflection.V2.Formula.__proj__Implies__item___1@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.__proj__Implies__item___1>


; <Skipped FStar.Reflection.V2.Formula.__proj__Implies__item___1/>


; <Start encoding FStar.Reflection.V2.Formula.uu___is_Iff>

(declare-fun FStar.Reflection.V2.Formula.uu___is_Iff (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_Iff@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.uu___is_Iff>


; <Skipped FStar.Reflection.V2.Formula.uu___is_Iff/>


; <Start encoding FStar.Reflection.V2.Formula.__proj__Iff__item___0>

(declare-fun Tm_refine_37b1001aa245e774d71c7996f8aa4c41 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Iff__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Formula.formula{Iff? _} -> FStar.Tactics.NamedView.term
(declare-fun Tm_arrow_924741dbf7eb62d47137fa738e36c206 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Iff__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.__proj__Iff__item___0>


; <Skipped FStar.Reflection.V2.Formula.__proj__Iff__item___0/>


; <Start encoding FStar.Reflection.V2.Formula.__proj__Iff__item___1>


(declare-fun FStar.Reflection.V2.Formula.__proj__Iff__item___1 (Term) Term)


(declare-fun FStar.Reflection.V2.Formula.__proj__Iff__item___1@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.__proj__Iff__item___1>


; <Skipped FStar.Reflection.V2.Formula.__proj__Iff__item___1/>


; <Start encoding FStar.Reflection.V2.Formula.uu___is_Forall>

(declare-fun FStar.Reflection.V2.Formula.uu___is_Forall (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_Forall@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.uu___is_Forall>


; <Skipped FStar.Reflection.V2.Formula.uu___is_Forall/>


; <Start encoding FStar.Reflection.V2.Formula.__proj__Forall__item___0>

(declare-fun Tm_refine_9f58524dfd8b26c53a6b4ca6308ce978 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Forall__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Formula.formula{Forall? _} -> FStar.Tactics.NamedView.bv
(declare-fun Tm_arrow_91d6ff096438b12e861c91c64e93dadf () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Forall__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.__proj__Forall__item___0>


; <Skipped FStar.Reflection.V2.Formula.__proj__Forall__item___0/>


; <Start encoding FStar.Reflection.V2.Formula.__proj__Forall__item___1>


(declare-fun FStar.Reflection.V2.Formula.__proj__Forall__item___1 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Formula.formula{Forall? _} -> FStar.Reflection.Types.typ
(declare-fun Tm_arrow_8385e870c075453638ce537ca322f63e () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Forall__item___1@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.__proj__Forall__item___1>


; <Skipped FStar.Reflection.V2.Formula.__proj__Forall__item___1/>


; <Start encoding FStar.Reflection.V2.Formula.__proj__Forall__item___2>


(declare-fun FStar.Reflection.V2.Formula.__proj__Forall__item___2 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Formula.formula{Forall? _} -> FStar.Tactics.NamedView.term
(declare-fun Tm_arrow_64c7c697a5f72461abadccba8acf8576 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Forall__item___2@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.__proj__Forall__item___2>


; <Skipped FStar.Reflection.V2.Formula.__proj__Forall__item___2/>


; <Start encoding FStar.Reflection.V2.Formula.uu___is_Exists>

(declare-fun FStar.Reflection.V2.Formula.uu___is_Exists (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_Exists@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.uu___is_Exists>


; <Skipped FStar.Reflection.V2.Formula.uu___is_Exists/>


; <Start encoding FStar.Reflection.V2.Formula.__proj__Exists__item___0>

(declare-fun Tm_refine_47c227a0e1bad766e65a971f1b662250 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Exists__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Formula.formula{Exists? _} -> FStar.Tactics.NamedView.bv
(declare-fun Tm_arrow_a68f10e819029d6cab49480a608d325a () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Exists__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.__proj__Exists__item___0>


; <Skipped FStar.Reflection.V2.Formula.__proj__Exists__item___0/>


; <Start encoding FStar.Reflection.V2.Formula.__proj__Exists__item___1>


(declare-fun FStar.Reflection.V2.Formula.__proj__Exists__item___1 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Formula.formula{Exists? _} -> FStar.Reflection.Types.typ
(declare-fun Tm_arrow_e73de3b6cdb9f646a0029813a84f9bf3 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Exists__item___1@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.__proj__Exists__item___1>


; <Skipped FStar.Reflection.V2.Formula.__proj__Exists__item___1/>


; <Start encoding FStar.Reflection.V2.Formula.__proj__Exists__item___2>


(declare-fun FStar.Reflection.V2.Formula.__proj__Exists__item___2 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Formula.formula{Exists? _} -> FStar.Tactics.NamedView.term
(declare-fun Tm_arrow_5cbf98f1a2423b5b386d9170a466b9f3 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Exists__item___2@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.__proj__Exists__item___2>


; <Skipped FStar.Reflection.V2.Formula.__proj__Exists__item___2/>


; <Start encoding FStar.Reflection.V2.Formula.uu___is_App>

(declare-fun FStar.Reflection.V2.Formula.uu___is_App (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_App@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.uu___is_App>


; <Skipped FStar.Reflection.V2.Formula.uu___is_App/>


; <Start encoding FStar.Reflection.V2.Formula.__proj__App__item___0>

(declare-fun Tm_refine_91b08d9cf73feb528f4d6485b5371070 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__App__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Formula.formula{App? _} -> FStar.Tactics.NamedView.term
(declare-fun Tm_arrow_4a32e9c40b64531bc4984e65fe296c0e () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__App__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.__proj__App__item___0>


; <Skipped FStar.Reflection.V2.Formula.__proj__App__item___0/>


; <Start encoding FStar.Reflection.V2.Formula.__proj__App__item___1>


(declare-fun FStar.Reflection.V2.Formula.__proj__App__item___1 (Term) Term)


(declare-fun FStar.Reflection.V2.Formula.__proj__App__item___1@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.__proj__App__item___1>


; <Skipped FStar.Reflection.V2.Formula.__proj__App__item___1/>


; <Start encoding FStar.Reflection.V2.Formula.uu___is_Name>

(declare-fun FStar.Reflection.V2.Formula.uu___is_Name (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_Name@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.uu___is_Name>


; <Skipped FStar.Reflection.V2.Formula.uu___is_Name/>


; <Start encoding FStar.Reflection.V2.Formula.__proj__Name__item___0>

(declare-fun Tm_refine_1eda1af3652c0f59491de3194febae5c () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Name__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Formula.formula{Name? _} -> FStar.Tactics.NamedView.namedv
(declare-fun Tm_arrow_522997a403a53d78b54e9566f3be2999 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__Name__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.__proj__Name__item___0>


; <Skipped FStar.Reflection.V2.Formula.__proj__Name__item___0/>


; <Start encoding FStar.Reflection.V2.Formula.uu___is_FV>

(declare-fun FStar.Reflection.V2.Formula.uu___is_FV (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_FV@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.uu___is_FV>


; <Skipped FStar.Reflection.V2.Formula.uu___is_FV/>


; <Start encoding FStar.Reflection.V2.Formula.__proj__FV__item___0>

(declare-fun Tm_refine_142a36e9daea7bdef8c1fb9f74b3186b () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__FV__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Formula.formula{FV? _} -> FStar.Reflection.Types.fv
(declare-fun Tm_arrow_71100ce4ecaa08f5c1111bd40e275e71 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__FV__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.__proj__FV__item___0>


; <Skipped FStar.Reflection.V2.Formula.__proj__FV__item___0/>


; <Start encoding FStar.Reflection.V2.Formula.uu___is_IntLit>

(declare-fun FStar.Reflection.V2.Formula.uu___is_IntLit (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_IntLit@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.uu___is_IntLit>


; <Skipped FStar.Reflection.V2.Formula.uu___is_IntLit/>


; <Start encoding FStar.Reflection.V2.Formula.__proj__IntLit__item___0>

(declare-fun Tm_refine_9463acd36e12c69b5607f29f47216780 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__IntLit__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Formula.formula{IntLit? _} -> Prims.int
(declare-fun Tm_arrow_76dd712ce23e1157b2b380e0ec67ab55 () Term)
(declare-fun FStar.Reflection.V2.Formula.__proj__IntLit__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.__proj__IntLit__item___0>


; <Skipped FStar.Reflection.V2.Formula.__proj__IntLit__item___0/>


; <Start encoding FStar.Reflection.V2.Formula.uu___is_F_Unknown>

(declare-fun FStar.Reflection.V2.Formula.uu___is_F_Unknown (Term) Term)

(declare-fun FStar.Reflection.V2.Formula.uu___is_F_Unknown@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.uu___is_F_Unknown>


; <Skipped FStar.Reflection.V2.Formula.uu___is_F_Unknown/>


; <Start encoding FStar.Reflection.V2.Formula.mk_Forall>

(declare-fun FStar.Reflection.V2.Formula.mk_Forall (Term Term) Term)

(declare-fun FStar.Reflection.V2.Formula.mk_Forall@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.mk_Forall>


; <Start encoding FStar.Reflection.V2.Formula.mk_Exists>

(declare-fun FStar.Reflection.V2.Formula.mk_Exists (Term Term) Term)

(declare-fun FStar.Reflection.V2.Formula.mk_Exists@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.mk_Exists>


; <Start encoding FStar.Reflection.V2.Formula.term_as_formula'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Formula.term_as_formula_ (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Formula.term_as_formula_@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.term_as_formula'>


; <Start encoding FStar.Reflection.V2.Formula.term_as_formula>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Formula.term_as_formula (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Formula.term_as_formula@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.term_as_formula>


; <Start encoding FStar.Reflection.V2.Formula.term_as_formula_total>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Formula.term_as_formula_total (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Formula.term_as_formula_total@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.term_as_formula_total>


; <Start encoding FStar.Reflection.V2.Formula.formula_as_term_view>

(declare-fun FStar.Reflection.V2.Formula.formula_as_term_view (Term) Term)
;;;;;;;;;;;;;;;;f: FStar.Reflection.V2.Formula.formula -> FStar.Tactics.NamedView.term_view
(declare-fun Tm_arrow_267dc9dde16c6ea1a3acc86750e7b7de () Term)
(declare-fun FStar.Reflection.V2.Formula.formula_as_term_view@tok () Term)
;;;;;;;;;;;;;;;;tv: FStar.Tactics.NamedView.named_term_view -> a: FStar.Reflection.V2.Data.argv   -> FStar.Tactics.NamedView.named_term_view
(declare-fun Tm_arrow_eebd6b2357b40789a3cb3f30d0382d24 () Term)
(declare-fun Tm_abs_e4cbf8820845a3f2c6e6d0fc6f59e696 () Term)

























; </end encoding FStar.Reflection.V2.Formula.formula_as_term_view>


; <Start encoding FStar.Reflection.V2.Formula.formula_as_term>

(declare-fun FStar.Reflection.V2.Formula.formula_as_term (Term) Term)
;;;;;;;;;;;;;;;;f: FStar.Reflection.V2.Formula.formula -> FStar.Tactics.NamedView.term
(declare-fun Tm_arrow_7bc5d4fb2b3adffee834b8cb4e624e1d () Term)
(declare-fun FStar.Reflection.V2.Formula.formula_as_term@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.formula_as_term>


; <Start encoding FStar.Reflection.V2.Formula.namedv_to_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Formula.namedv_to_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Formula.namedv_to_string@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.namedv_to_string>


; <Start encoding FStar.Reflection.V2.Formula.formula_to_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Formula.formula_to_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Formula.formula_to_string@tok () Term)

; </end encoding FStar.Reflection.V2.Formula.formula_to_string>


; End Externals for module FStar.Reflection.V2.Formula


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End module FStar.Reflection.V2.Formula (609 decls; total size 44824)

;;; Start module FStar.Tactics.V2.Derived

; Externals for module FStar.Tactics.V2.Derived


; <Start encoding FStar.Tactics.V2.Derived.op_At>

(declare-fun FStar.Tactics.V2.Derived.op_At (Term) Term)
;;;;;;;;;;;;;;;;x: Prims.list _ -> y: Prims.list _ -> Prims.list _
(declare-fun Tm_arrow_13365c547ebacced8e5c321e9ac37c13 (Term) Term)
;;;;;;;;;;;;;;;;x: Prims.list _ -> y: Prims.list _ -> Prims.list _
(declare-fun Tm_arrow_27f58803f2afd0299b7d65785588b6d2 () Term)
(declare-fun FStar.Tactics.V2.Derived.op_At@tok () Term)

;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name FStar.Tactics.V2.Derived.op_At; Namespace FStar.Tactics.V2.Derived
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.List.Tot.Base.op_At@tok))
:named @kick_partial_app_43b69d0bf92111a3a9924241e916399a))

; </end encoding FStar.Tactics.V2.Derived.op_At>


; <Start encoding FStar.Tactics.V2.Derived.name_of_bv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.name_of_bv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.name_of_bv@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.name_of_bv>


; <Start encoding FStar.Tactics.V2.Derived.bv_to_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.bv_to_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.bv_to_string@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.bv_to_string>


; <Start encoding FStar.Tactics.V2.Derived.name_of_binder>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.name_of_binder (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.name_of_binder@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.name_of_binder>


; <Start encoding FStar.Tactics.V2.Derived.binder_to_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.binder_to_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.binder_to_string@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.binder_to_string>


; <Start encoding FStar.Tactics.V2.Derived.binding_to_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.binding_to_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.binding_to_string@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.binding_to_string>


; <Start encoding FStar.Tactics.V2.Derived.type_of_var>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.type_of_var (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.type_of_var@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.type_of_var>


; <Start encoding FStar.Tactics.V2.Derived.type_of_binding>

(declare-fun FStar.Tactics.V2.Derived.type_of_binding (Term) Term)
;;;;;;;;;;;;;;;;x: FStar.Tactics.NamedView.binding -> FStar.Reflection.Types.typ
(declare-fun Tm_arrow_4855b89845362652867cc13dce5e57de () Term)
(declare-fun FStar.Tactics.V2.Derived.type_of_binding@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.type_of_binding>


; <Start encoding FStar.Tactics.V2.Derived.Goal_not_trivial>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.V2.Derived.Goal_not_trivial () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Goal_not_trivial
(declare-fun FStar.Tactics.V2.Derived.Goal_not_trivial@tok () Term)

; <Start encoding FStar.Tactics.V2.Derived.Goal_not_trivial>


; <start constructor FStar.Tactics.V2.Derived.Goal_not_trivial>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.V2.Derived.Goal_not_trivial ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
110)
(= __@x0
FStar.Tactics.V2.Derived.Goal_not_trivial)))

; </end constructor FStar.Tactics.V2.Derived.Goal_not_trivial>


; </end encoding FStar.Tactics.V2.Derived.Goal_not_trivial>


; </end encoding FStar.Tactics.V2.Derived.Goal_not_trivial>


; <Start encoding FStar.Tactics.V2.Derived.uu___is_Goal_not_trivial>

(declare-fun FStar.Tactics.V2.Derived.uu___is_Goal_not_trivial (Term) Term)

(declare-fun FStar.Tactics.V2.Derived.uu___is_Goal_not_trivial@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.uu___is_Goal_not_trivial>


; <Skipped FStar.Tactics.V2.Derived.uu___is_Goal_not_trivial/>


; <Start encoding FStar.Tactics.V2.Derived.goals>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.goals (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.goals@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.goals>


; <Start encoding FStar.Tactics.V2.Derived.smt_goals>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.smt_goals (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.smt_goals@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.smt_goals>


; <Start encoding FStar.Tactics.V2.Derived.fail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.fail (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.fail@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.fail>


; <Start encoding FStar.Tactics.V2.Derived.fail_silently>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.fail_silently (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.fail_silently@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.fail_silently>


; <Start encoding FStar.Tactics.V2.Derived._cur_goal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived._cur_goal (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived._cur_goal@tok () Term)

; </end encoding FStar.Tactics.V2.Derived._cur_goal>


; <Start encoding FStar.Tactics.V2.Derived.cur_env>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.cur_env (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.cur_env@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.cur_env>


; <Start encoding FStar.Tactics.V2.Derived.cur_goal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.cur_goal (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.cur_goal@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.cur_goal>


; <Start encoding FStar.Tactics.V2.Derived.cur_witness>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.cur_witness (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.cur_witness@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.cur_witness>


; <Start encoding FStar.Tactics.V2.Derived.cur_goal_safe>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.cur_goal_safe (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.cur_goal_safe@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.cur_goal_safe>


; <Start encoding FStar.Tactics.V2.Derived.cur_vars>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.cur_vars (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.cur_vars@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.cur_vars>


; <Start encoding FStar.Tactics.V2.Derived.with_policy>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.with_policy (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.with_policy@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.with_policy>


; <Start encoding FStar.Tactics.V2.Derived.exact>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.exact (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.exact@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.exact>


; <Start encoding FStar.Tactics.V2.Derived.exact_with_ref>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.exact_with_ref (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.exact_with_ref@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.exact_with_ref>


; <Start encoding FStar.Tactics.V2.Derived.trivial>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.trivial (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.trivial@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.trivial>


; <Start encoding FStar.Tactics.V2.Derived.run_tactic>


(declare-fun FStar.Tactics.V2.Derived.run_tactic (Term) Term)

(declare-fun Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9 () Term)
;;;;;;;;;;;;;;;;t: (_: Prims.unit -> FStar.Tactics.Effect.Tac Prims.unit) -> Prims.Pure Prims.unit
(declare-fun Tm_arrow_db8b05a070e71f48f221264c4aa60662 () Term)
(declare-fun FStar.Tactics.V2.Derived.run_tactic@tok () Term)



; </end encoding FStar.Tactics.V2.Derived.run_tactic>


; <Start encoding FStar.Tactics.V2.Derived.dismiss>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.dismiss (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.dismiss@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.dismiss>


; <Start encoding FStar.Tactics.V2.Derived.flip>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.flip (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.flip@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.flip>


; <Start encoding FStar.Tactics.V2.Derived.qed>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.qed (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.qed@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.qed>


; <Start encoding FStar.Tactics.V2.Derived.debug>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.debug (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.debug@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.debug>


; <Start encoding FStar.Tactics.V2.Derived.smt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.smt (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.smt@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.smt>


; <Start encoding FStar.Tactics.V2.Derived.idtac>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.idtac (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.idtac@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.idtac>


; <Start encoding FStar.Tactics.V2.Derived.later>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.later (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.later@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.later>


; <Start encoding FStar.Tactics.V2.Derived.apply>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.apply (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.apply@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.apply>


; <Start encoding FStar.Tactics.V2.Derived.apply_noinst>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.apply_noinst (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.apply_noinst@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.apply_noinst>


; <Start encoding FStar.Tactics.V2.Derived.apply_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.apply_lemma (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.apply_lemma@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.apply_lemma>


; <Start encoding FStar.Tactics.V2.Derived.trefl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.trefl (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.trefl@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.trefl>


; <Start encoding FStar.Tactics.V2.Derived.trefl_guard>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.trefl_guard (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.trefl_guard@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.trefl_guard>


; <Start encoding FStar.Tactics.V2.Derived.commute_applied_match>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.commute_applied_match (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.commute_applied_match@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.commute_applied_match>


; <Start encoding FStar.Tactics.V2.Derived.apply_lemma_noinst>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.apply_lemma_noinst (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.apply_lemma_noinst@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.apply_lemma_noinst>


; <Start encoding FStar.Tactics.V2.Derived.apply_lemma_rw>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.apply_lemma_rw (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.apply_lemma_rw@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.apply_lemma_rw>


; <Start encoding FStar.Tactics.V2.Derived.apply_raw>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.apply_raw (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.apply_raw@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.apply_raw>


; <Start encoding FStar.Tactics.V2.Derived.exact_guard>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.exact_guard (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.exact_guard@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.exact_guard>


; <Start encoding FStar.Tactics.V2.Derived.t_pointwise>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.t_pointwise (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.t_pointwise@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.t_pointwise>


; <Start encoding FStar.Tactics.V2.Derived.topdown_rewrite>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.topdown_rewrite (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.topdown_rewrite@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.topdown_rewrite>


; <Start encoding FStar.Tactics.V2.Derived.pointwise>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.pointwise (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.pointwise@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.pointwise>


; <Start encoding FStar.Tactics.V2.Derived.pointwise'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.pointwise_ (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.pointwise_@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.pointwise'>


; <Start encoding FStar.Tactics.V2.Derived.cur_module>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.cur_module (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.cur_module@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.cur_module>


; <Start encoding FStar.Tactics.V2.Derived.open_modules>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.open_modules (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.open_modules@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.open_modules>


; <Start encoding FStar.Tactics.V2.Derived.fresh_uvar>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.fresh_uvar (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.fresh_uvar@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.fresh_uvar>


; <Start encoding FStar.Tactics.V2.Derived.unify>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.unify (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.unify@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.unify>


; <Start encoding FStar.Tactics.V2.Derived.unify_guard>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.unify_guard (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.unify_guard@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.unify_guard>


; <Start encoding FStar.Tactics.V2.Derived.tmatch>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.tmatch (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.tmatch@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.tmatch>


; <Start encoding FStar.Tactics.V2.Derived.divide>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.divide (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.divide@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.divide>


; <Start encoding FStar.Tactics.V2.Derived.iseq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.iseq (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.iseq@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.iseq>


; <Start encoding FStar.Tactics.V2.Derived.focus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.focus (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.focus@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.focus>


; <Start encoding FStar.Tactics.V2.Derived.dump1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.dump1 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.dump1@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.dump1>


; <Start encoding FStar.Tactics.V2.Derived.mapAll>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.mapAll (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.mapAll@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.mapAll>


; <Start encoding FStar.Tactics.V2.Derived.iterAll>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.iterAll (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.iterAll@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.iterAll>


; <Start encoding FStar.Tactics.V2.Derived.iterAllSMT>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.iterAllSMT (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.iterAllSMT@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.iterAllSMT>


; <Start encoding FStar.Tactics.V2.Derived.seq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.seq (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.seq@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.seq>


; <Start encoding FStar.Tactics.V2.Derived.exact_args>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.exact_args (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.exact_args@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.exact_args>


; <Start encoding FStar.Tactics.V2.Derived.exact_n>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.exact_n (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.exact_n@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.exact_n>


; <Start encoding FStar.Tactics.V2.Derived.ngoals>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.ngoals (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.ngoals@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.ngoals>


; <Start encoding FStar.Tactics.V2.Derived.ngoals_smt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.ngoals_smt (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.ngoals_smt@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.ngoals_smt>


; <Start encoding FStar.Tactics.V2.Derived.fresh_namedv_named>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.fresh_namedv_named (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.fresh_namedv_named@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.fresh_namedv_named>


; <Start encoding FStar.Tactics.V2.Derived.fresh_namedv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.fresh_namedv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.fresh_namedv@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.fresh_namedv>


; <Start encoding FStar.Tactics.V2.Derived.fresh_binder_named>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.fresh_binder_named (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.fresh_binder_named@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.fresh_binder_named>


; <Start encoding FStar.Tactics.V2.Derived.fresh_binder>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.fresh_binder (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.fresh_binder@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.fresh_binder>


; <Start encoding FStar.Tactics.V2.Derived.fresh_implicit_binder>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.fresh_implicit_binder (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.fresh_implicit_binder@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.fresh_implicit_binder>


; <Start encoding FStar.Tactics.V2.Derived.guard>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.guard (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.guard@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.guard>


; <Start encoding FStar.Tactics.V2.Derived.try_with>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.try_with (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.try_with@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.try_with>


; <Start encoding FStar.Tactics.V2.Derived.trytac>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.trytac (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.trytac@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.trytac>


; <Start encoding FStar.Tactics.V2.Derived.or_else>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.or_else (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.or_else@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.or_else>


; <Skipped FStar.Tactics.V2.Derived.op_Less_Bar_Greater/>


; <Start encoding FStar.Tactics.V2.Derived.op_Less_Bar_Greater>

(declare-fun Non_total_Tm_arrow_2fa896b09c4337ad1227821ad115fa30 () Term)

(declare-fun FStar.Tactics.V2.Derived.op_Less_Bar_Greater (Term Term Term) Term)



;;;;;;;;;;;;;;;;t1: (_: Prims.unit -> FStar.Tactics.Effect.Tac 'a) ->     t2: (_: Prims.unit -> FStar.Tactics.Effect.Tac 'a) ->     _: Prims.unit   -> FStar.Tactics.Effect.Tac 'a
(declare-fun Tm_arrow_fc8e0c468972815cc3daf12ff2c90735 () Term)
(declare-fun FStar.Tactics.V2.Derived.op_Less_Bar_Greater@tok () Term)



;;;;;;;;;;;;;;;;Imprecise function encoding
(declare-fun Tm_abs_FStar.Tactics.V2.Derived_218 () Term)

; </end encoding FStar.Tactics.V2.Derived.op_Less_Bar_Greater>


; <Start encoding FStar.Tactics.V2.Derived.first>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.first (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.first@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.first>


; <Start encoding FStar.Tactics.V2.Derived.repeat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.repeat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.repeat@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.repeat>


; <Start encoding FStar.Tactics.V2.Derived.repeat1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.repeat1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.repeat1@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.repeat1>


; <Start encoding FStar.Tactics.V2.Derived.repeat'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.repeat_ (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.repeat_@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.repeat'>


; <Start encoding FStar.Tactics.V2.Derived.norm_term>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.norm_term (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.norm_term@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.norm_term>


; <Start encoding FStar.Tactics.V2.Derived.join_all_smt_goals>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.join_all_smt_goals (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.join_all_smt_goals@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.join_all_smt_goals>


; <Start encoding FStar.Tactics.V2.Derived.discard>


(declare-fun FStar.Tactics.V2.Derived.discard (Term Term) Term)


;;;;;;;;;;;;;;;;tau: (_: Prims.unit -> FStar.Tactics.Effect.Tac 'a) -> _: Prims.unit   -> FStar.Tactics.Effect.Tac Prims.unit
(declare-fun Tm_arrow_72d6e79d9c44191e16af455b389b8e2f () Term)
(declare-fun FStar.Tactics.V2.Derived.discard@tok () Term)


;;;;;;;;;;;;;;;;Imprecise function encoding
(declare-fun Tm_abs_FStar.Tactics.V2.Derived_266 () Term)

; </end encoding FStar.Tactics.V2.Derived.discard>


; <Start encoding FStar.Tactics.V2.Derived.repeatseq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.repeatseq (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.repeatseq@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.repeatseq>


; <Start encoding FStar.Tactics.V2.Derived.tadmit>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.tadmit (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.tadmit@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.tadmit>


; <Start encoding FStar.Tactics.V2.Derived.admit1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.admit1 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.admit1@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.admit1>


; <Start encoding FStar.Tactics.V2.Derived.admit_all>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.admit_all (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.admit_all@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.admit_all>


; <Start encoding FStar.Tactics.V2.Derived.is_guard>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.is_guard (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.is_guard@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.is_guard>


; <Start encoding FStar.Tactics.V2.Derived.skip_guard>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.skip_guard (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.skip_guard@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.skip_guard>


; <Start encoding FStar.Tactics.V2.Derived.guards_to_smt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.guards_to_smt (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.guards_to_smt@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.guards_to_smt>


; <Start encoding FStar.Tactics.V2.Derived.simpl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.simpl (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.simpl@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.simpl>


; <Start encoding FStar.Tactics.V2.Derived.whnf>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.whnf (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.whnf@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.whnf>


; <Start encoding FStar.Tactics.V2.Derived.compute>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.compute (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.compute@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.compute>


; <Start encoding FStar.Tactics.V2.Derived.intros>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.intros (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.intros@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.intros>


; <Start encoding FStar.Tactics.V2.Derived.intros'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.intros_ (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.intros_@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.intros'>


; <Start encoding FStar.Tactics.V2.Derived.destruct>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.destruct (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.destruct@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.destruct>


; <Start encoding FStar.Tactics.V2.Derived.destruct_intros>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.destruct_intros (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.destruct_intros@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.destruct_intros>


; <Skipped FStar.Tactics.V2.Derived.__cut/>


; <Start encoding FStar.Tactics.V2.Derived.__cut>


(declare-fun FStar.Tactics.V2.Derived.__cut (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;a: Type -> b: Type -> f: (_: a -> b) -> x: a -> b
(declare-fun Tm_arrow_4d14630bf8cde080839dc2f618ad299b () Term)
(declare-fun FStar.Tactics.V2.Derived.__cut@tok () Term)


; </end encoding FStar.Tactics.V2.Derived.__cut>


; <Start encoding FStar.Tactics.V2.Derived.tcut>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.tcut (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.tcut@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.tcut>


; <Start encoding FStar.Tactics.V2.Derived.pose>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.pose (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.pose@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.pose>


; <Start encoding FStar.Tactics.V2.Derived.intro_as>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.intro_as (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.intro_as@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.intro_as>


; <Start encoding FStar.Tactics.V2.Derived.pose_as>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.pose_as (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.pose_as@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.pose_as>


; <Start encoding FStar.Tactics.V2.Derived.for_each_binding>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.for_each_binding (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.for_each_binding@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.for_each_binding>


; <Start encoding FStar.Tactics.V2.Derived.revert_all>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.revert_all (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.revert_all@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.revert_all>


; <Start encoding FStar.Tactics.V2.Derived.binder_sort>

(declare-fun FStar.Tactics.V2.Derived.binder_sort (Term) Term)

(declare-fun FStar.Tactics.V2.Derived.binder_sort@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.binder_sort>


; <Start encoding FStar.Tactics.V2.Derived.__assumption_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.__assumption_aux (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.__assumption_aux@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.__assumption_aux>


; <Start encoding FStar.Tactics.V2.Derived.assumption>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.assumption (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.assumption@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.assumption>


; <Start encoding FStar.Tactics.V2.Derived.destruct_equality_implication>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.destruct_equality_implication (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.destruct_equality_implication@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.destruct_equality_implication>


; <Start encoding FStar.Tactics.V2.Derived.__eq_sym>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.__eq_sym (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.__eq_sym@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.__eq_sym>


; <Start encoding FStar.Tactics.V2.Derived.rewrite'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.rewrite_ (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.rewrite_@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.rewrite'>


; <Start encoding FStar.Tactics.V2.Derived.try_rewrite_equality>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.try_rewrite_equality (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.try_rewrite_equality@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.try_rewrite_equality>


; <Start encoding FStar.Tactics.V2.Derived.rewrite_all_context_equalities>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.rewrite_all_context_equalities (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.rewrite_all_context_equalities@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.rewrite_all_context_equalities>


; <Start encoding FStar.Tactics.V2.Derived.rewrite_eqs_from_context>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.rewrite_eqs_from_context (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.rewrite_eqs_from_context@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.rewrite_eqs_from_context>


; <Start encoding FStar.Tactics.V2.Derived.rewrite_equality>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.rewrite_equality (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.rewrite_equality@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.rewrite_equality>


; <Start encoding FStar.Tactics.V2.Derived.unfold_def>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.unfold_def (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.unfold_def@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.unfold_def>


; <Start encoding FStar.Tactics.V2.Derived.l_to_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.l_to_r (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.l_to_r@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.l_to_r>


; <Start encoding FStar.Tactics.V2.Derived.mk_squash>

(declare-fun FStar.Tactics.V2.Derived.mk_squash (Term) Term)
;;;;;;;;;;;;;;;;t: FStar.Tactics.NamedView.term -> FStar.Tactics.NamedView.term
(declare-fun Tm_arrow_c511ca6db8fb863aef3e38e31ce359ed () Term)
(declare-fun FStar.Tactics.V2.Derived.mk_squash@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.mk_squash>


; <Start encoding FStar.Tactics.V2.Derived.mk_sq_eq>

(declare-fun FStar.Tactics.V2.Derived.mk_sq_eq (Term Term) Term)
;;;;;;;;;;;;;;;;t1: FStar.Tactics.NamedView.term -> t2: FStar.Tactics.NamedView.term -> FStar.Tactics.NamedView.term
(declare-fun Tm_arrow_b2c1efe88e906b8a848fce7122837b71 () Term)
(declare-fun FStar.Tactics.V2.Derived.mk_sq_eq@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.mk_sq_eq>


; <Start encoding FStar.Tactics.V2.Derived.grewrite>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.grewrite (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.grewrite@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.grewrite>


; <Start encoding FStar.Tactics.V2.Derived.__un_sq_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.__un_sq_eq (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.__un_sq_eq@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.__un_sq_eq>


; <Start encoding FStar.Tactics.V2.Derived.grewrite_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.grewrite_eq (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.grewrite_eq@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.grewrite_eq>


; <Start encoding FStar.Tactics.V2.Derived.admit_dump_t>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.admit_dump_t (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.admit_dump_t@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.admit_dump_t>


; <Skipped FStar.Tactics.V2.Derived.admit_dump/>


; <Start encoding FStar.Tactics.V2.Derived.admit_dump>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.admit_dump (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.admit_dump@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.admit_dump>


; <Start encoding FStar.Tactics.V2.Derived.magic_dump_t>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.magic_dump_t (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.magic_dump_t@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.magic_dump_t>


; <Skipped FStar.Tactics.V2.Derived.magic_dump/>


; <Start encoding FStar.Tactics.V2.Derived.magic_dump>

(declare-fun FStar.Tactics.V2.Derived.magic_dump (Term Term Term) Term)
;;;;;;;;;;;;;;;;_: Prims.unit -> a
(declare-fun Tm_arrow_f31127736e0cabafd323e1d4a75abe30 () Term)
(declare-fun FStar.Tactics.V2.Derived.magic_dump@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.magic_dump>


; <Start encoding FStar.Tactics.V2.Derived.change_with>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.change_with (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.change_with@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.change_with>


; <Start encoding FStar.Tactics.V2.Derived.change_sq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.change_sq (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.change_sq@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.change_sq>


; <Start encoding FStar.Tactics.V2.Derived.finish_by>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.finish_by (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.finish_by@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.finish_by>


; <Start encoding FStar.Tactics.V2.Derived.solve_then>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.solve_then (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.solve_then@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.solve_then>


; <Start encoding FStar.Tactics.V2.Derived.add_elem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.add_elem (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.add_elem@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.add_elem>


; <Start encoding FStar.Tactics.V2.Derived.specialize>

(declare-fun FStar.Tactics.V2.Derived.specialize (Term Term Term) Term)

;;;;;;;;;;;;;;;;f: a -> l: Prims.list Prims.string -> _: Prims.unit -> FStar.Tactics.Effect.Tac Prims.unit
(declare-fun Tm_arrow_2c75d1fe370986d071fdb1ed274fb717 () Term)
(declare-fun FStar.Tactics.V2.Derived.specialize@tok () Term)

;;;;;;;;;;;;;;;;Imprecise function encoding
(declare-fun Tm_abs_FStar.Tactics.V2.Derived_303 () Term)

; </end encoding FStar.Tactics.V2.Derived.specialize>


; <Start encoding FStar.Tactics.V2.Derived.tlabel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.tlabel (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.tlabel@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.tlabel>


; <Start encoding FStar.Tactics.V2.Derived.tlabel'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.tlabel_ (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.tlabel_@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.tlabel'>


; <Start encoding FStar.Tactics.V2.Derived.focus_all>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.focus_all (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.focus_all@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.focus_all>


; <Start encoding FStar.Tactics.V2.Derived.extract_nth>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Tactics.V2.Derived.extract_nth.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Tactics.V2.Derived.extract_nth.fuel_instrumented_token () Term)
(declare-fun FStar.Tactics.V2.Derived.extract_nth (Term Term Term) Term)
(declare-fun FStar.Tactics.V2.Derived.extract_nth@tok () Term)
;;;;;;;;;;;;;;;;n: Prims.nat -> l: Prims.list 'a -> FStar.Pervasives.Native.option ('a * Prims.list 'a)
(declare-fun Tm_arrow_2690a7e0ca66f539bbdae5e05b22faf0 () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Tactics.V2.Derived.extract_nth; Namespace FStar.Tactics.V2.Derived
(assert (! 
;; def=FStar.Tactics.V2.Derived.fst(785,8-785,19); use=FStar.Tactics.V2.Derived.fst(785,8-785,19)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Tactics.V2.Derived.extract_nth.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.Tactics.V2.Derived.extract_nth.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.Tactics.V2.Derived.extract_nth.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.Tactics.V2.Derived.extract_nth.fuel_instrumented))

:named @fuel_irrelevance_FStar.Tactics.V2.Derived.extract_nth.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Tactics.V2.Derived.extract_nth; Namespace FStar.Tactics.V2.Derived
(assert (! 
;; def=FStar.Tactics.V2.Derived.fst(785,8-785,19); use=FStar.Tactics.V2.Derived.fst(785,8-785,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Tactics.V2.Derived.extract_nth @x0
@x1
@x2)
(FStar.Tactics.V2.Derived.extract_nth.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.Tactics.V2.Derived.extract_nth @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.Tactics.V2.Derived.extract_nth.fuel_instrumented))

:named @fuel_correspondence_FStar.Tactics.V2.Derived.extract_nth.fuel_instrumented))

; </end encoding FStar.Tactics.V2.Derived.extract_nth>


; <Start encoding FStar.Tactics.V2.Derived.bump_nth>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.bump_nth (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.bump_nth@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.bump_nth>


; <Start encoding FStar.Tactics.V2.Derived.destruct_list>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.destruct_list (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.destruct_list@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.destruct_list>


; <Start encoding FStar.Tactics.V2.Derived.get_match_body>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.get_match_body (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.get_match_body@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.get_match_body>


; <Start encoding FStar.Tactics.V2.Derived.last>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.last (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.last@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.last>


; <Start encoding FStar.Tactics.V2.Derived.branch_on_match>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.branch_on_match (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.branch_on_match@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.branch_on_match>


; <Start encoding FStar.Tactics.V2.Derived.nth_var>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.nth_var (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.nth_var@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.nth_var>


; <Start encoding FStar.Tactics.V2.Derived.Appears>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.V2.Derived.Appears () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Appears
(declare-fun FStar.Tactics.V2.Derived.Appears@tok () Term)

; <Start encoding FStar.Tactics.V2.Derived.Appears>


; <start constructor FStar.Tactics.V2.Derived.Appears>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.V2.Derived.Appears ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
308)
(= __@x0
FStar.Tactics.V2.Derived.Appears)))

; </end constructor FStar.Tactics.V2.Derived.Appears>


; </end encoding FStar.Tactics.V2.Derived.Appears>


; </end encoding FStar.Tactics.V2.Derived.Appears>


; <Start encoding FStar.Tactics.V2.Derived.uu___is_Appears>

(declare-fun FStar.Tactics.V2.Derived.uu___is_Appears (Term) Term)

(declare-fun FStar.Tactics.V2.Derived.uu___is_Appears@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.uu___is_Appears>


; <Skipped FStar.Tactics.V2.Derived.uu___is_Appears/>


; <Start encoding FStar.Tactics.V2.Derived.name_appears_in>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.name_appears_in (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.name_appears_in@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.name_appears_in>


; <Start encoding FStar.Tactics.V2.Derived.mk_abs>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.mk_abs (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.mk_abs@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.mk_abs>


; <Start encoding FStar.Tactics.V2.Derived.namedv_to_simple_binder>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.namedv_to_simple_binder (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.namedv_to_simple_binder@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.namedv_to_simple_binder>


; <Start encoding FStar.Tactics.V2.Derived.binding_to_simple_binder>

(declare-fun FStar.Tactics.V2.Derived.binding_to_simple_binder (Term) Term)
;;;;;;;;;;;;;;;;b: FStar.Tactics.NamedView.binding -> FStar.Tactics.NamedView.simple_binder
(declare-fun Tm_arrow_dc75b10104c25ad359edacf654eb7137 () Term)
(declare-fun FStar.Tactics.V2.Derived.binding_to_simple_binder@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.binding_to_simple_binder>


; <Start encoding FStar.Tactics.V2.Derived.string_to_term_with_lb>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.string_to_term_with_lb (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.string_to_term_with_lb@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.string_to_term_with_lb>


; <Skipped FStar.Tactics.V2.Derived.lem_trans/>


; <Start encoding FStar.Tactics.V2.Derived.lem_trans>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.lem_trans (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.lem_trans@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.lem_trans>


; <Start encoding FStar.Tactics.V2.Derived.trans>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.trans (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.trans@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.trans>


; <Start encoding FStar.Tactics.V2.Derived.smt_sync>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.smt_sync (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.smt_sync@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.smt_sync>


; <Start encoding FStar.Tactics.V2.Derived.smt_sync'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Derived.smt_sync_ (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Derived.smt_sync_@tok () Term)

; </end encoding FStar.Tactics.V2.Derived.smt_sync'>


; End Externals for module FStar.Tactics.V2.Derived


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End module FStar.Tactics.V2.Derived (668 decls; total size 59152)

;;; Start module FStar.Tactics.MApply

; Externals for module FStar.Tactics.MApply


; <Skipped FStar.Tactics.MApply.push1/>


; <Start encoding FStar.Tactics.MApply.push1>


(declare-fun FStar.Tactics.MApply.push1 (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;f: Prims.squash (p ==> q) -> u52143: Prims.squash p -> Prims.squash q
(declare-fun Tm_arrow_72d7db1b0b470fb0bc85c2b74a2a0f95 () Term)
(declare-fun FStar.Tactics.MApply.push1@tok () Term)


; </end encoding FStar.Tactics.MApply.push1>


; <Skipped FStar.Tactics.MApply.push1'/>


; <Start encoding FStar.Tactics.MApply.push1'>

(declare-fun FStar.Tactics.MApply.push1_ (Term Term Term Term) Term)

(declare-fun FStar.Tactics.MApply.push1_@tok () Term)

; </end encoding FStar.Tactics.MApply.push1'>


; <Skipped FStar.Tactics.MApply.apply_squash_or_lem/>


; <Start encoding FStar.Tactics.MApply.apply_squash_or_lem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.MApply.apply_squash_or_lem (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.MApply.apply_squash_or_lem@tok () Term)

; </end encoding FStar.Tactics.MApply.apply_squash_or_lem>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.MApply.termable (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.MApply.termable@x0 (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Tactics.MApply.termable@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Tactics.MApply.Mktermable (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.MApply.Mktermable_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Tactics.MApply.Mktermable_to_term (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mktermable
(declare-fun FStar.Tactics.MApply.Mktermable@tok () Term)
(declare-fun Non_total_Tm_arrow_2c318ae92ec8214b901b849ce570d69c () Term)

;;;;;;;;;;;;;;;;to_term: (_: a -> FStar.Tactics.Effect.Tac FStar.Tactics.NamedView.term)   -> FStar.Tactics.MApply.termable a
(declare-fun Tm_arrow_e5a9af44e0525824c341242a98760121 () Term)

; <Start encoding FStar.Tactics.MApply.termable>


; <start constructor FStar.Tactics.MApply.termable>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.MApply.termable ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
108)
(exists ((@x0 Term))
 (! (= __@x0
(FStar.Tactics.MApply.termable @x0))
 
;;no pats
:qid is-FStar.Tactics.MApply.termable))))

; </end constructor FStar.Tactics.MApply.termable>


; </end encoding FStar.Tactics.MApply.termable>


; <Start encoding FStar.Tactics.MApply.Mktermable>


; <start constructor FStar.Tactics.MApply.Mktermable>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Tactics.MApply.Mktermable ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
124)
(= __@x0
(FStar.Tactics.MApply.Mktermable (FStar.Tactics.MApply.Mktermable_a __@x0)
(FStar.Tactics.MApply.Mktermable_to_term __@x0)))))

; </end constructor FStar.Tactics.MApply.Mktermable>


; </end encoding FStar.Tactics.MApply.Mktermable>


; </end encoding >


; <Start encoding FStar.Tactics.MApply.__proj__Mktermable__item__to_term>

(declare-fun FStar.Tactics.MApply.__proj__Mktermable__item__to_term (Term Term) Term)

;;;;;;;;;;;;;;;;projectee: FStar.Tactics.MApply.termable a -> _: a   -> FStar.Tactics.Effect.Tac FStar.Tactics.NamedView.term
(declare-fun Tm_arrow_9ccf5fbfccc6190112561c6d20cbe534 () Term)
(declare-fun FStar.Tactics.MApply.__proj__Mktermable__item__to_term@tok () Term)


; </end encoding FStar.Tactics.MApply.__proj__Mktermable__item__to_term>


; <Skipped FStar.Tactics.MApply.__proj__Mktermable__item__to_term/>


; <Start encoding FStar.Tactics.MApply.to_term>

(declare-fun FStar.Tactics.MApply.to_term (Term) Term)

;;;;;;;;;;;;;;;;{| projectee: FStar.Tactics.MApply.termable a |} -> _: a   -> FStar.Tactics.Effect.Tac FStar.Tactics.NamedView.term
(declare-fun Tm_arrow_657602543942148aa6eb83bc9b87d2a5 (Term) Term)
;;;;;;;;;;;;;;;;{| projectee: FStar.Tactics.MApply.termable a |} -> _: a   -> FStar.Tactics.Effect.Tac FStar.Tactics.NamedView.term
(declare-fun Tm_arrow_2ee8147bd29b99ed0a0bad752e40fa7c () Term)
(declare-fun FStar.Tactics.MApply.to_term@tok () Term)




(declare-fun Tm_abs_c2733247688705ab127b5a6be7129492 (Term) Term)

; </end encoding FStar.Tactics.MApply.to_term>


; <Start encoding FStar.Tactics.MApply.termable_term>

(declare-fun FStar.Tactics.MApply.termable_term (Dummy_sort) Term)
;;;;;;;;;;;;;;;;Imprecise function encoding
(declare-fun Tm_abs_FStar.Tactics.MApply_192 () Term)

; </end encoding FStar.Tactics.MApply.termable_term>


; <Start encoding FStar.Tactics.MApply.termable_binding>

(declare-fun FStar.Tactics.MApply.termable_binding (Dummy_sort) Term)
;;;;;;;;;;;;;;;;Imprecise function encoding
(declare-fun Tm_abs_FStar.Tactics.MApply_193 () Term)

; </end encoding FStar.Tactics.MApply.termable_binding>


; <Start encoding FStar.Tactics.MApply.mapply0>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.MApply.mapply0 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.MApply.mapply0@tok () Term)

; </end encoding FStar.Tactics.MApply.mapply0>


; <Start encoding FStar.Tactics.MApply.mapply>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.MApply.mapply (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.MApply.mapply@tok () Term)

; </end encoding FStar.Tactics.MApply.mapply>


; End Externals for module FStar.Tactics.MApply


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End module FStar.Tactics.MApply (81 decls; total size 6665)

;;; Start module FStar.Tactics.Print

; Externals for module FStar.Tactics.Print


; <Start encoding FStar.Tactics.Print.namedv_to_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Print.namedv_to_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Print.namedv_to_string@tok () Term)

; </end encoding FStar.Tactics.Print.namedv_to_string>


; <Start encoding FStar.Tactics.Print.paren>

(declare-fun FStar.Tactics.Print.paren (Term) Term)
;;;;;;;;;;;;;;;;s: Prims.string -> Prims.string
(declare-fun Tm_arrow_70affe4dada4ca8ba18740c614ba5211 () Term)
(declare-fun FStar.Tactics.Print.paren@tok () Term)

; </end encoding FStar.Tactics.Print.paren>


; <Start encoding FStar.Tactics.Print.print_list_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Print.print_list_aux (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Print.print_list_aux@tok () Term)

; </end encoding FStar.Tactics.Print.print_list_aux>


; <Start encoding FStar.Tactics.Print.print_list>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Print.print_list (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Print.print_list@tok () Term)

; </end encoding FStar.Tactics.Print.print_list>


; <Start encoding FStar.Tactics.Print.universe_to_ast_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Print.universe_to_ast_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Print.universe_to_ast_string@tok () Term)

; </end encoding FStar.Tactics.Print.universe_to_ast_string>


; <Start encoding FStar.Tactics.Print.universes_to_ast_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Print.universes_to_ast_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Print.universes_to_ast_string@tok () Term)

; </end encoding FStar.Tactics.Print.universes_to_ast_string>


; <Start encoding >

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Print.term_to_ast_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Print.term_to_ast_string@tok () Term)
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Print.match_returns_to_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Print.match_returns_to_string@tok () Term)
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Print.branches_to_ast_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Print.branches_to_ast_string@tok () Term)
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Print.branch_to_ast_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Print.branch_to_ast_string@tok () Term)
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Print.comp_to_ast_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Print.comp_to_ast_string@tok () Term)
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.Print.const_to_ast_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.Print.const_to_ast_string@tok () Term)

; </end encoding >


; End Externals for module FStar.Tactics.Print


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End module FStar.Tactics.Print (42 decls; total size 4892)

;;; Start interface FStar.Ghost

; Externals for interface FStar.Ghost


; <Start encoding FStar.Ghost.erased>

(declare-fun FStar.Ghost.erased (Term) Term)

(declare-fun FStar.Ghost.erased@tok () Term)

; </end encoding FStar.Ghost.erased>


; <Start encoding FStar.Ghost.reveal>

(declare-fun FStar.Ghost.reveal (Term Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Ghost.erased a -> Prims.GTot a
(declare-fun Tm_ghost_arrow_e2f4c1991753137c5a80c115428d0cef () Term)
(declare-fun FStar.Ghost.reveal@tok () Term)

; </end encoding FStar.Ghost.reveal>


; <Start encoding FStar.Ghost.hide>

(declare-fun FStar.Ghost.hide (Term Term) Term)
;;;;;;;;;;;;;;;;_: a -> FStar.Ghost.erased a
(declare-fun Tm_arrow_643f1030585ddc96db34fbedd5533726 () Term)
(declare-fun FStar.Ghost.hide@tok () Term)

; </end encoding FStar.Ghost.hide>


; <Start encoding FStar.Ghost.hide_reveal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Ghost.hide_reveal (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Ghost.hide_reveal@tok () Term)

; </end encoding FStar.Ghost.hide_reveal>


; <Start encoding FStar.Ghost.reveal_hide>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Ghost.reveal_hide (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Ghost.reveal_hide@tok () Term)

; </end encoding FStar.Ghost.reveal_hide>


; <Start encoding FStar.Ghost.tot_to_gtot>


(declare-fun FStar.Ghost.tot_to_gtot (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;f: (_: 'a -> 'b) -> x: 'a -> Prims.GTot 'b
(declare-fun Tm_ghost_arrow_c9fd3b742fd348c1f0aa2b7131578f3e () Term)
(declare-fun FStar.Ghost.tot_to_gtot@tok () Term)


; </end encoding FStar.Ghost.tot_to_gtot>


; <Start encoding FStar.Ghost.return>

(declare-fun FStar.Ghost.return (Term Term) Term)

(declare-fun FStar.Ghost.return@tok () Term)

; </end encoding FStar.Ghost.return>


; <Start encoding FStar.Ghost.bind>

;;;;;;;;;;;;;;;;_: a -> FStar.Ghost.erased b
(declare-fun Tm_arrow_5716b68879f92aa07a25325dea2a598d (Term Term) Term)
(declare-fun FStar.Ghost.bind (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;x: FStar.Ghost.erased a -> f: (_: a -> FStar.Ghost.erased b) -> FStar.Ghost.erased b
(declare-fun Tm_arrow_744e10832c82c923706888158b99b0fe () Term)
(declare-fun FStar.Ghost.bind@tok () Term)


; </end encoding FStar.Ghost.bind>


; <Start encoding FStar.Ghost.op_let_At>


(declare-fun FStar.Ghost.op_let_At (Term Term Term Term) Term)


(declare-fun FStar.Ghost.op_let_At@tok () Term)


; </end encoding FStar.Ghost.op_let_At>


; <Start encoding FStar.Ghost.elift1>


(declare-fun FStar.Ghost.elift1 (Term Term Term Term) Term)

(declare-fun Tm_refine_785b445c1ccb59eaa8c666ff5bddec28 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;f: (_: a -> Prims.GTot b) -> x: FStar.Ghost.erased a   -> y: FStar.Ghost.erased b {FStar.Ghost.reveal y == f (FStar.Ghost.reveal x)}
(declare-fun Tm_arrow_da89250ece049a2244626f93975cd557 () Term)
(declare-fun FStar.Ghost.elift1@tok () Term)


; </end encoding FStar.Ghost.elift1>


; <Start encoding FStar.Ghost.elift2>

;;;;;;;;;;;;;;;;_: a -> _: b -> Prims.GTot c
(declare-fun Tm_ghost_arrow_44164f5e759c8937bc211b53dca29861 (Term Term Term) Term)
(declare-fun FStar.Ghost.elift2 (Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_65079789b5ee069d4dcb71b5d5562419 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;f: (_: a -> _: b -> Prims.GTot c) -> x: FStar.Ghost.erased a -> y: FStar.Ghost.erased b   -> z:     FStar.Ghost.erased c {FStar.Ghost.reveal z == f (FStar.Ghost.reveal x) (FStar.Ghost.reveal y)}
(declare-fun Tm_arrow_3bc5977a48f4c4aa4cd3ebcf331fe3f9 () Term)
(declare-fun FStar.Ghost.elift2@tok () Term)


; </end encoding FStar.Ghost.elift2>


; <Start encoding FStar.Ghost.elift3>

;;;;;;;;;;;;;;;;_: a -> _: b -> _: c -> Prims.GTot d
(declare-fun Tm_ghost_arrow_c3cf725ad58bf27e304b88d311d2ef4d (Term Term Term Term) Term)
(declare-fun FStar.Ghost.elift3 (Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_f701336f04214efabf1dc8fb653177ef (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;f: (_: a -> _: b -> _: c -> Prims.GTot d) ->     ga: FStar.Ghost.erased a ->     gb: FStar.Ghost.erased b ->     gc: FStar.Ghost.erased c   -> gd:     FStar.Ghost.erased d       { FStar.Ghost.reveal gd ==         f (FStar.Ghost.reveal ga) (FStar.Ghost.reveal gb) (FStar.Ghost.reveal gc) }
(declare-fun Tm_arrow_d597747eb30e55a029a57bb56ae3576b () Term)
(declare-fun FStar.Ghost.elift3@tok () Term)


; </end encoding FStar.Ghost.elift3>


; <Start encoding FStar.Ghost.push_refinement>


(declare-fun Tm_refine_4861ff30b18822886452f698558931e8 (Term Term) Term)
(declare-fun FStar.Ghost.push_refinement (Term Term Term) Term)


(declare-fun Tm_refine_36af295866c873249daf08f8d623a269 (Term Term Term) Term)
;;;;;;;;;;;;;;;;r: FStar.Ghost.erased a {p (FStar.Ghost.reveal r)}   -> FStar.Ghost.erased (x: a{p x /\ x == FStar.Ghost.reveal r})
(declare-fun Tm_arrow_08d120582cc4dfdc7e90cb9038e8f6b8 () Term)
(declare-fun FStar.Ghost.push_refinement@tok () Term)





; </end encoding FStar.Ghost.push_refinement>


; <Start encoding FStar.Ghost.elift1_p>



;;;;;;;;;;;;;;;;x: a{p x} -> Prims.GTot b
(declare-fun Tm_ghost_arrow_8f538917cb02d75c44bfd86ed6834262 (Term Term Term) Term)

(declare-fun FStar.Ghost.elift1_p (Term Term Term Term Term) Term)





;;;;;;;;;;;;;;;;$f: (x: a{p x} -> Prims.GTot b) -> r: FStar.Ghost.erased a {p (FStar.Ghost.reveal r)}   -> z: FStar.Ghost.erased b {FStar.Ghost.reveal z == f (FStar.Ghost.reveal r)}
(declare-fun Tm_arrow_2f2f081c9c2a272e83f647cd86440766 () Term)
(declare-fun FStar.Ghost.elift1_p@tok () Term)


; </end encoding FStar.Ghost.elift1_p>


; <Start encoding FStar.Ghost.elift2_p>


(declare-fun Tm_refine_08698b4b6e166624b5bf789ac071b4cf (Term Term Term) Term)
;;;;;;;;;;;;;;;;xa: a -> xb: b{p xa xb} -> Prims.GTot c
(declare-fun Tm_ghost_arrow_4f9eac2d0622ae1c34d05baa5f6854c6 (Term Term Term Term) Term)
(declare-fun Tm_refine_50e552dc638ed7dac9f2492d99576667 (Term Term Term Term) Term)
(declare-fun FStar.Ghost.elift2_p (Term Term Term Term Term Term Term) Term)





;;;;;;;;;;;;;;;;$f: (xa: a -> xb: b{p xa xb} -> Prims.GTot c) ->     ra: FStar.Ghost.erased a ->     rb: FStar.Ghost.erased b {p (FStar.Ghost.reveal ra) (FStar.Ghost.reveal rb)}   -> rc:     FStar.Ghost.erased c       {FStar.Ghost.reveal rc == f (FStar.Ghost.reveal ra) (FStar.Ghost.reveal rb)}
(declare-fun Tm_arrow_4243a3f87827ef2e8c38dd30c5e8518d () Term)
(declare-fun FStar.Ghost.elift2_p@tok () Term)


; </end encoding FStar.Ghost.elift2_p>


; <Start encoding FStar.Ghost.elift1_pq>



;;;;;;;;;;;;;;;;x: a{p x} -> _: b -> Type
(declare-fun Tm_arrow_b9b0980b05721a41304c20e612f3108f (Term Term Term) Term)


;;;;;;;;;;;;;;;;x: a{p x} -> Prims.GTot (y: b{q x y})
(declare-fun Tm_ghost_arrow_3f0c334c27896d01c2e72f45e6fcb67c (Term Term Term Term) Term)

(declare-fun FStar.Ghost.elift1_pq (Term Term Term Term Term Term) Term)








;;;;;;;;;;;;;;;;$f: (x: a{p x} -> Prims.GTot (y: b{q x y})) -> r: FStar.Ghost.erased a {p (FStar.Ghost.reveal r)}   -> z: FStar.Ghost.erased b {FStar.Ghost.reveal z == f (FStar.Ghost.reveal r)}
(declare-fun Tm_arrow_b8eadba0211443ca5c59668f6aa4b6c9 () Term)
(declare-fun FStar.Ghost.elift1_pq@tok () Term)


; </end encoding FStar.Ghost.elift1_pq>


; <Start encoding FStar.Ghost.elift2_pq>



;;;;;;;;;;;;;;;;x: a -> y: b{p x y} -> _: c -> Type
(declare-fun Tm_arrow_747965e95d1386c22f52f977256a903b (Term Term Term Term) Term)

(declare-fun Tm_refine_f9e3dab5c1ea39d2741639e0fe40e216 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;x: a -> y: b{p x y} -> Prims.GTot (z: c{q x y z})
(declare-fun Tm_ghost_arrow_00838c3d276d7476d6679b97a2aa247c (Term Term Term Term Term) Term)

(declare-fun FStar.Ghost.elift2_pq (Term Term Term Term Term Term Term Term) Term)








;;;;;;;;;;;;;;;;$f: (x: a -> y: b{p x y} -> Prims.GTot (z: c{q x y z})) ->     ra: FStar.Ghost.erased a ->     rb: FStar.Ghost.erased b {p (FStar.Ghost.reveal ra) (FStar.Ghost.reveal rb)}   -> z:     FStar.Ghost.erased c {FStar.Ghost.reveal z == f (FStar.Ghost.reveal ra) (FStar.Ghost.reveal rb)}
(declare-fun Tm_arrow_b7e390954ec59dc663763c956d66957b () Term)
(declare-fun FStar.Ghost.elift2_pq@tok () Term)


; </end encoding FStar.Ghost.elift2_pq>


; End Externals for interface FStar.Ghost


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End interface FStar.Ghost (168 decls; total size 9436)

;;; Start interface FStar.IndefiniteDescription

; Externals for interface FStar.IndefiniteDescription


; <Start encoding FStar.IndefiniteDescription.indefinite_description_tot>


(declare-fun Tm_refine_4cc89ae73e7128e43010e5aba0ff060c (Term) Term)
(declare-fun FStar.IndefiniteDescription.indefinite_description_tot (Term Term) Term)



;;;;;;;;;;;;;;;;a: Type -> p: (_: a -> Prims.prop){exists (x: a). p x}   -> w: FStar.Ghost.erased a {p (FStar.Ghost.reveal w)}
(declare-fun Tm_arrow_913328739865ec1d7344ba2324047e94 () Term)
(declare-fun FStar.IndefiniteDescription.indefinite_description_tot@tok () Term)


; </end encoding FStar.IndefiniteDescription.indefinite_description_tot>


; <Start encoding FStar.IndefiniteDescription.indefinite_description_ghost>



(declare-fun FStar.IndefiniteDescription.indefinite_description_ghost (Term Term) Term)



;;;;;;;;;;;;;;;;a: Type -> p: (_: a -> Prims.prop){exists (x: a). p x} -> Prims.GTot (x: a{p x})
(declare-fun Tm_ghost_arrow_feddccf07264e14202821ef1d50468a8 () Term)
(declare-fun FStar.IndefiniteDescription.indefinite_description_ghost@tok () Term)


; </end encoding FStar.IndefiniteDescription.indefinite_description_ghost>


; <Start encoding FStar.IndefiniteDescription.strong_excluded_middle>

(declare-fun FStar.IndefiniteDescription.strong_excluded_middle (Term) Term)


(declare-fun FStar.IndefiniteDescription.strong_excluded_middle@tok () Term)


; </end encoding FStar.IndefiniteDescription.strong_excluded_middle>


; <Start encoding FStar.IndefiniteDescription.stronger_markovs_principle>

;;;;;;;;;;;;;;;;_: Prims.nat -> Prims.GTot Prims.bool
(declare-fun Tm_ghost_arrow_eaf0e881316979a10a835f9aef894ea3 () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle (Term) Term)

(declare-fun Tm_refine_ce62cc380d030e5cd8dfd1cf0ea19b01 (Term) Term)
;;;;;;;;;;;;;;;;p: (_: Prims.nat -> Prims.GTot Prims.bool) -> Prims.Ghost Prims.nat
(declare-fun Tm_ghost_arrow_0ecc4bb7783229ca7ca7edd38b0bab8d () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle@tok () Term)


; </end encoding FStar.IndefiniteDescription.stronger_markovs_principle>


; <Start encoding FStar.IndefiniteDescription.stronger_markovs_principle_prop>

;;;;;;;;;;;;;;;;_: Prims.nat -> Prims.GTot Prims.prop
(declare-fun Tm_arrow_1742ee5bbc9c9e74913cc041d85062b6 () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle_prop (Term) Term)

(declare-fun Tm_refine_e76bd1e3fcd1369d7232ec3854a8c984 (Term) Term)
;;;;;;;;;;;;;;;;p: (_: Prims.nat -> Prims.GTot Prims.prop) -> Prims.Ghost Prims.nat
(declare-fun Tm_ghost_arrow_c21c60a4b8d9409191eea9e22a1b37db () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle_prop@tok () Term)


; </end encoding FStar.IndefiniteDescription.stronger_markovs_principle_prop>


; <Start encoding FStar.IndefiniteDescription.elim_squash>

(declare-fun FStar.IndefiniteDescription.elim_squash (Term Term) Term)
;;;;;;;;;;;;;;;;s: Prims.squash p -> Prims.GTot p
(declare-fun Tm_ghost_arrow_c6842219f247b61822e21d8f892190b3 () Term)
(declare-fun FStar.IndefiniteDescription.elim_squash@tok () Term)

; </end encoding FStar.IndefiniteDescription.elim_squash>


; End Externals for interface FStar.IndefiniteDescription


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End interface FStar.IndefiniteDescription (55 decls; total size 4280)

;;; Start module FStar.Tactics.V2.Logic

; Externals for module FStar.Tactics.V2.Logic


; <Start encoding FStar.Tactics.V2.Logic.cur_formula>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.cur_formula (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.cur_formula@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.cur_formula>


; <Skipped FStar.Tactics.V2.Logic.revert_squash/>


; <Start encoding FStar.Tactics.V2.Logic.revert_squash>



(declare-fun FStar.Tactics.V2.Logic.revert_squash (Term Term Term Term) Term)


;;;;;;;;;;;;;;;;s: Prims.squash (forall (x: a). b x) -> x: a -> Prims.squash (b x)
(declare-fun Tm_arrow_7810b8ed28b7c312b6c1292aeea99051 () Term)
(declare-fun FStar.Tactics.V2.Logic.revert_squash@tok () Term)



; </end encoding FStar.Tactics.V2.Logic.revert_squash>


; <Start encoding FStar.Tactics.V2.Logic.l_revert>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.l_revert (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.l_revert@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.l_revert>


; <Start encoding FStar.Tactics.V2.Logic.l_revert_all>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.l_revert_all (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.l_revert_all@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.l_revert_all>


; <Start encoding FStar.Tactics.V2.Logic.fa_intro_lem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.fa_intro_lem (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.fa_intro_lem@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.fa_intro_lem>


; <Start encoding FStar.Tactics.V2.Logic.forall_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.forall_intro (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.forall_intro@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.forall_intro>


; <Start encoding FStar.Tactics.V2.Logic.forall_intro_as>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.forall_intro_as (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.forall_intro_as@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.forall_intro_as>


; <Start encoding FStar.Tactics.V2.Logic.forall_intros>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.forall_intros (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.forall_intros@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.forall_intros>


; <Skipped FStar.Tactics.V2.Logic.split_lem/>


; <Start encoding FStar.Tactics.V2.Logic.split_lem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.split_lem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.split_lem@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.split_lem>


; <Start encoding FStar.Tactics.V2.Logic.split>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.split (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.split@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.split>


; <Skipped FStar.Tactics.V2.Logic.imp_intro_lem/>


; <Start encoding FStar.Tactics.V2.Logic.imp_intro_lem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.imp_intro_lem (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.imp_intro_lem@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.imp_intro_lem>


; <Start encoding FStar.Tactics.V2.Logic.implies_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.implies_intro (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.implies_intro@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.implies_intro>


; <Start encoding FStar.Tactics.V2.Logic.implies_intro_as>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.implies_intro_as (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.implies_intro_as@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.implies_intro_as>


; <Start encoding FStar.Tactics.V2.Logic.implies_intros>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.implies_intros (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.implies_intros@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.implies_intros>


; <Start encoding FStar.Tactics.V2.Logic.l_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.l_intro (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.l_intro@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.l_intro>


; <Start encoding FStar.Tactics.V2.Logic.l_intros>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.l_intros (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.l_intros@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.l_intros>


; <Start encoding FStar.Tactics.V2.Logic.squash_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.squash_intro (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.squash_intro@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.squash_intro>


; <Start encoding FStar.Tactics.V2.Logic.l_exact>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.l_exact (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.l_exact@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.l_exact>


; <Start encoding FStar.Tactics.V2.Logic.hyp>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.hyp (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.hyp@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.hyp>


; <Start encoding FStar.Tactics.V2.Logic.__lemma_to_squash>

(declare-fun Tm_refine_39824678e6bd7420a9de93968d793b3b (Term Term) Term)
;;;;;;;;;;;;;;;;_: Prims.unit -> FStar.Pervasives.Lemma (requires req) (ensures ens)
(declare-fun Tm_arrow_a733618074c9a8728deadbd23cb7b8bb (Term Term) Term)
(declare-fun FStar.Tactics.V2.Logic.__lemma_to_squash (Term Term Term Term) Term)


;;;;;;;;;;;;;;;;_: Prims.squash req -> h: (_: Prims.unit -> FStar.Pervasives.Lemma (requires req) (ensures ens))   -> Prims.squash ens
(declare-fun Tm_arrow_2842505fa53b6950ff9b6934826116cd () Term)
(declare-fun FStar.Tactics.V2.Logic.__lemma_to_squash@tok () Term)



; </end encoding FStar.Tactics.V2.Logic.__lemma_to_squash>


; <Start encoding FStar.Tactics.V2.Logic.pose_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.pose_lemma (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.pose_lemma@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.pose_lemma>


; <Start encoding FStar.Tactics.V2.Logic.explode>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.explode (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.explode@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.explode>


; <Start encoding FStar.Tactics.V2.Logic.visit>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.visit (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.visit@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.visit>


; <Start encoding FStar.Tactics.V2.Logic.simplify_eq_implication>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.simplify_eq_implication (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.simplify_eq_implication@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.simplify_eq_implication>


; <Start encoding FStar.Tactics.V2.Logic.rewrite_all_equalities>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.rewrite_all_equalities (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.rewrite_all_equalities@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.rewrite_all_equalities>


; <Start encoding FStar.Tactics.V2.Logic.unfold_definition_and_simplify_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.unfold_definition_and_simplify_eq (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.unfold_definition_and_simplify_eq@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.unfold_definition_and_simplify_eq>


; <Skipped FStar.Tactics.V2.Logic.vbind/>


; <Start encoding FStar.Tactics.V2.Logic.vbind>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.vbind (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.vbind@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.vbind>


; <Start encoding FStar.Tactics.V2.Logic.unsquash>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.unsquash (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.unsquash@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.unsquash>


; <Skipped FStar.Tactics.V2.Logic.or_ind/>


; <Start encoding FStar.Tactics.V2.Logic.or_ind>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.or_ind (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.or_ind@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.or_ind>


; <Start encoding FStar.Tactics.V2.Logic.cases_or>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.cases_or (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.cases_or@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.cases_or>


; <Skipped FStar.Tactics.V2.Logic.bool_ind/>


; <Start encoding FStar.Tactics.V2.Logic.bool_ind>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.bool_ind (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.bool_ind@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.bool_ind>


; <Start encoding FStar.Tactics.V2.Logic.cases_bool>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.cases_bool (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.cases_bool@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.cases_bool>


; <Skipped FStar.Tactics.V2.Logic.or_intro_1/>


; <Start encoding FStar.Tactics.V2.Logic.or_intro_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.or_intro_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.or_intro_1@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.or_intro_1>


; <Skipped FStar.Tactics.V2.Logic.or_intro_2/>


; <Start encoding FStar.Tactics.V2.Logic.or_intro_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.or_intro_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.or_intro_2@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.or_intro_2>


; <Start encoding FStar.Tactics.V2.Logic.left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.left (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.left@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.left>


; <Start encoding FStar.Tactics.V2.Logic.right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.right (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.right@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.right>


; <Skipped FStar.Tactics.V2.Logic.__and_elim/>


; <Start encoding FStar.Tactics.V2.Logic.__and_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.__and_elim (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.__and_elim@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.__and_elim>


; <Skipped FStar.Tactics.V2.Logic.__and_elim'/>


; <Start encoding FStar.Tactics.V2.Logic.__and_elim'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.__and_elim_ (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.__and_elim_@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.__and_elim'>


; <Start encoding FStar.Tactics.V2.Logic.and_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.and_elim (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.and_elim@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.and_elim>


; <Start encoding FStar.Tactics.V2.Logic.destruct_and>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.destruct_and (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.destruct_and@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.destruct_and>


; <Skipped FStar.Tactics.V2.Logic.__witness/>


; <Start encoding FStar.Tactics.V2.Logic.__witness>


(declare-fun FStar.Tactics.V2.Logic.__witness (Term Term Term Term) Term)


;;;;;;;;;;;;;;;;x: a -> _: Prims.squash (p x) -> Prims.squash (exists (x: a). p x)
(declare-fun Tm_arrow_19ebf610eb1ca325c17d78c293beec24 () Term)
(declare-fun FStar.Tactics.V2.Logic.__witness@tok () Term)



; </end encoding FStar.Tactics.V2.Logic.__witness>


; <Start encoding FStar.Tactics.V2.Logic.witness>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.witness (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.witness@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.witness>


; <Start encoding FStar.Tactics.V2.Logic.__elim_exists'>




;;;;;;;;;;;;;;;;x: t -> _: pred x -> Prims.squash goal
(declare-fun Tm_arrow_816a1dfc85b9389c1bde09e03020da38 (Term Term Term) Term)
(declare-fun FStar.Tactics.V2.Logic.__elim_exists_ (Term Term Term Term Term) Term)





;;;;;;;;;;;;;;;;h: (exists (x: t). pred x) -> k: (x: t -> _: pred x -> Prims.squash goal) -> Prims.squash goal
(declare-fun Tm_arrow_e5c776ee134348753a32740358385fdf () Term)
(declare-fun FStar.Tactics.V2.Logic.__elim_exists_@tok () Term)






; </end encoding FStar.Tactics.V2.Logic.__elim_exists'>


; <Start encoding FStar.Tactics.V2.Logic.elim_exists>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.elim_exists (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.elim_exists@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.elim_exists>


; <Start encoding FStar.Tactics.V2.Logic.__forall_inst>





(declare-fun FStar.Tactics.V2.Logic.__forall_inst (Term Term Term Term) Term)




;;;;;;;;;;;;;;;;h: (forall (x: t). pred x) -> x: t -> Prims.squash (pred x)
(declare-fun Tm_arrow_0a928b10ed6d297594d70cecd0d0525f () Term)
(declare-fun FStar.Tactics.V2.Logic.__forall_inst@tok () Term)





; </end encoding FStar.Tactics.V2.Logic.__forall_inst>


; <Start encoding FStar.Tactics.V2.Logic.__forall_inst_sq>



(declare-fun FStar.Tactics.V2.Logic.__forall_inst_sq (Term Term Term Term) Term)



(declare-fun FStar.Tactics.V2.Logic.__forall_inst_sq@tok () Term)



; </end encoding FStar.Tactics.V2.Logic.__forall_inst_sq>


; <Start encoding FStar.Tactics.V2.Logic.instantiate>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.instantiate (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.instantiate@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.instantiate>


; <Start encoding FStar.Tactics.V2.Logic.instantiate_as>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.instantiate_as (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.instantiate_as@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.instantiate_as>


; <Start encoding FStar.Tactics.V2.Logic.sklem0>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.sklem0 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.sklem0@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.sklem0>


; <Start encoding FStar.Tactics.V2.Logic.sk_binder'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.sk_binder_ (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.sk_binder_@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.sk_binder'>


; <Start encoding FStar.Tactics.V2.Logic.sk_binder>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.sk_binder (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.sk_binder@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.sk_binder>


; <Start encoding FStar.Tactics.V2.Logic.skolem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.skolem (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.skolem@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.skolem>


; <Skipped FStar.Tactics.V2.Logic.lemma_from_squash/>


; <Start encoding FStar.Tactics.V2.Logic.lemma_from_squash>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.lemma_from_squash (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.lemma_from_squash@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.lemma_from_squash>


; <Start encoding FStar.Tactics.V2.Logic.easy_fill>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.easy_fill (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.easy_fill@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.easy_fill>


; <Skipped FStar.Tactics.V2.Logic.easy/>


; <Start encoding FStar.Tactics.V2.Logic.easy>

(declare-fun FStar.Tactics.V2.Logic.easy (Term Term) Term)

(declare-fun FStar.Tactics.V2.Logic.easy@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.easy>


; <Start encoding FStar.Tactics.V2.Logic.lem1_fa>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.lem1_fa (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.lem1_fa@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.lem1_fa>


; <Start encoding FStar.Tactics.V2.Logic.lem2_fa>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.lem2_fa (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.lem2_fa@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.lem2_fa>


; <Start encoding FStar.Tactics.V2.Logic.lem3_fa>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.lem3_fa (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.lem3_fa@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.lem3_fa>


; <Start encoding FStar.Tactics.V2.Logic.using_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.V2.Logic.using_lemma (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.V2.Logic.using_lemma@tok () Term)

; </end encoding FStar.Tactics.V2.Logic.using_lemma>


; End Externals for module FStar.Tactics.V2.Logic


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End module FStar.Tactics.V2.Logic (308 decls; total size 23314)

;;; Start module FStar.Tactics.V2

; Externals for module FStar.Tactics.V2


; End Externals for module FStar.Tactics.V2


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End module FStar.Tactics.V2 (3 decls; total size 1154)

;;; Start module FStar.Reflection.V2.Arith

; Externals for module FStar.Reflection.V2.Arith


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Arith.expr () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Arith.Lit (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Arith.Lit__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Lit
(declare-fun FStar.Reflection.V2.Arith.Lit@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Arith.Atom (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Arith.Atom__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Arith.Atom__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Atom
(declare-fun FStar.Reflection.V2.Arith.Atom@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Arith.Plus (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Arith.Plus__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Arith.Plus__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Plus
(declare-fun FStar.Reflection.V2.Arith.Plus@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Arith.Mult (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Arith.Mult__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Arith.Mult__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mult
(declare-fun FStar.Reflection.V2.Arith.Mult@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Arith.Minus (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Arith.Minus__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Arith.Minus__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Minus
(declare-fun FStar.Reflection.V2.Arith.Minus@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Arith.Land (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Arith.Land__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Arith.Land__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Land
(declare-fun FStar.Reflection.V2.Arith.Land@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Arith.Lxor (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Arith.Lxor__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Arith.Lxor__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Lxor
(declare-fun FStar.Reflection.V2.Arith.Lxor@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Arith.Lor (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Arith.Lor__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Arith.Lor__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Lor
(declare-fun FStar.Reflection.V2.Arith.Lor@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Arith.Ladd (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Arith.Ladd__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Arith.Ladd__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Ladd
(declare-fun FStar.Reflection.V2.Arith.Ladd@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Arith.Lsub (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Arith.Lsub__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Arith.Lsub__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Lsub
(declare-fun FStar.Reflection.V2.Arith.Lsub@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Arith.Shl (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Arith.Shl__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Arith.Shl__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Shl
(declare-fun FStar.Reflection.V2.Arith.Shl@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Arith.Shr (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Arith.Shr__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Arith.Shr__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Shr
(declare-fun FStar.Reflection.V2.Arith.Shr@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Arith.Neg (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Arith.Neg__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Neg
(declare-fun FStar.Reflection.V2.Arith.Neg@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Arith.Udiv (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Arith.Udiv__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Arith.Udiv__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Udiv
(declare-fun FStar.Reflection.V2.Arith.Udiv@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Arith.Umod (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Arith.Umod__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Arith.Umod__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Umod
(declare-fun FStar.Reflection.V2.Arith.Umod@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Arith.MulMod (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Arith.MulMod__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Arith.MulMod__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: MulMod
(declare-fun FStar.Reflection.V2.Arith.MulMod@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Arith.NatToBv (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Arith.NatToBv__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: NatToBv
(declare-fun FStar.Reflection.V2.Arith.NatToBv@tok () Term)
;;;;;;;;;;;;;;;;_0: Prims.int -> FStar.Reflection.V2.Arith.expr
(declare-fun Tm_arrow_44cb55965657865274ee19c8e5a048bf () Term)
;;;;;;;;;;;;;;;;_0: Prims.nat -> _1: FStar.Reflection.Types.term -> FStar.Reflection.V2.Arith.expr
(declare-fun Tm_arrow_06ba51dbf901e9b3e139072632d593bb () Term)
;;;;;;;;;;;;;;;;_0: FStar.Reflection.V2.Arith.expr -> _1: FStar.Reflection.V2.Arith.expr   -> FStar.Reflection.V2.Arith.expr
(declare-fun Tm_arrow_e8c189b6dd873676ed81f247648fa59c () Term)









;;;;;;;;;;;;;;;;_0: FStar.Reflection.V2.Arith.expr -> FStar.Reflection.V2.Arith.expr
(declare-fun Tm_arrow_805f526f868d45bf034da6f6fbdf24bf () Term)





; <Start encoding FStar.Reflection.V2.Arith.expr>


; <start constructor FStar.Reflection.V2.Arith.expr>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Arith.expr ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(= __@x0
FStar.Reflection.V2.Arith.expr)))

; </end constructor FStar.Reflection.V2.Arith.expr>


; </end encoding FStar.Reflection.V2.Arith.expr>


; <Start encoding FStar.Reflection.V2.Arith.Lit>


; <start constructor FStar.Reflection.V2.Arith.Lit>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Arith.Lit ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
107)
(= __@x0
(FStar.Reflection.V2.Arith.Lit (FStar.Reflection.V2.Arith.Lit__0 __@x0)))))

; </end constructor FStar.Reflection.V2.Arith.Lit>


; </end encoding FStar.Reflection.V2.Arith.Lit>


; <Start encoding FStar.Reflection.V2.Arith.Atom>


; <start constructor FStar.Reflection.V2.Arith.Atom>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Arith.Atom ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
112)
(= __@x0
(FStar.Reflection.V2.Arith.Atom (FStar.Reflection.V2.Arith.Atom__0 __@x0)
(FStar.Reflection.V2.Arith.Atom__1 __@x0)))))

; </end constructor FStar.Reflection.V2.Arith.Atom>


; </end encoding FStar.Reflection.V2.Arith.Atom>


; <Start encoding FStar.Reflection.V2.Arith.Plus>


; <start constructor FStar.Reflection.V2.Arith.Plus>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Arith.Plus ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
117)
(= __@x0
(FStar.Reflection.V2.Arith.Plus (FStar.Reflection.V2.Arith.Plus__0 __@x0)
(FStar.Reflection.V2.Arith.Plus__1 __@x0)))))

; </end constructor FStar.Reflection.V2.Arith.Plus>


; </end encoding FStar.Reflection.V2.Arith.Plus>


; <Start encoding FStar.Reflection.V2.Arith.Mult>


; <start constructor FStar.Reflection.V2.Arith.Mult>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Arith.Mult ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
122)
(= __@x0
(FStar.Reflection.V2.Arith.Mult (FStar.Reflection.V2.Arith.Mult__0 __@x0)
(FStar.Reflection.V2.Arith.Mult__1 __@x0)))))

; </end constructor FStar.Reflection.V2.Arith.Mult>


; </end encoding FStar.Reflection.V2.Arith.Mult>


; <Start encoding FStar.Reflection.V2.Arith.Minus>


; <start constructor FStar.Reflection.V2.Arith.Minus>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Arith.Minus ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
127)
(= __@x0
(FStar.Reflection.V2.Arith.Minus (FStar.Reflection.V2.Arith.Minus__0 __@x0)
(FStar.Reflection.V2.Arith.Minus__1 __@x0)))))

; </end constructor FStar.Reflection.V2.Arith.Minus>


; </end encoding FStar.Reflection.V2.Arith.Minus>


; <Start encoding FStar.Reflection.V2.Arith.Land>


; <start constructor FStar.Reflection.V2.Arith.Land>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Arith.Land ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
132)
(= __@x0
(FStar.Reflection.V2.Arith.Land (FStar.Reflection.V2.Arith.Land__0 __@x0)
(FStar.Reflection.V2.Arith.Land__1 __@x0)))))

; </end constructor FStar.Reflection.V2.Arith.Land>


; </end encoding FStar.Reflection.V2.Arith.Land>


; <Start encoding FStar.Reflection.V2.Arith.Lxor>


; <start constructor FStar.Reflection.V2.Arith.Lxor>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Arith.Lxor ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
137)
(= __@x0
(FStar.Reflection.V2.Arith.Lxor (FStar.Reflection.V2.Arith.Lxor__0 __@x0)
(FStar.Reflection.V2.Arith.Lxor__1 __@x0)))))

; </end constructor FStar.Reflection.V2.Arith.Lxor>


; </end encoding FStar.Reflection.V2.Arith.Lxor>


; <Start encoding FStar.Reflection.V2.Arith.Lor>


; <start constructor FStar.Reflection.V2.Arith.Lor>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Arith.Lor ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
142)
(= __@x0
(FStar.Reflection.V2.Arith.Lor (FStar.Reflection.V2.Arith.Lor__0 __@x0)
(FStar.Reflection.V2.Arith.Lor__1 __@x0)))))

; </end constructor FStar.Reflection.V2.Arith.Lor>


; </end encoding FStar.Reflection.V2.Arith.Lor>


; <Start encoding FStar.Reflection.V2.Arith.Ladd>


; <start constructor FStar.Reflection.V2.Arith.Ladd>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Arith.Ladd ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
147)
(= __@x0
(FStar.Reflection.V2.Arith.Ladd (FStar.Reflection.V2.Arith.Ladd__0 __@x0)
(FStar.Reflection.V2.Arith.Ladd__1 __@x0)))))

; </end constructor FStar.Reflection.V2.Arith.Ladd>


; </end encoding FStar.Reflection.V2.Arith.Ladd>


; <Start encoding FStar.Reflection.V2.Arith.Lsub>


; <start constructor FStar.Reflection.V2.Arith.Lsub>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Arith.Lsub ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
152)
(= __@x0
(FStar.Reflection.V2.Arith.Lsub (FStar.Reflection.V2.Arith.Lsub__0 __@x0)
(FStar.Reflection.V2.Arith.Lsub__1 __@x0)))))

; </end constructor FStar.Reflection.V2.Arith.Lsub>


; </end encoding FStar.Reflection.V2.Arith.Lsub>


; <Start encoding FStar.Reflection.V2.Arith.Shl>


; <start constructor FStar.Reflection.V2.Arith.Shl>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Arith.Shl ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
157)
(= __@x0
(FStar.Reflection.V2.Arith.Shl (FStar.Reflection.V2.Arith.Shl__0 __@x0)
(FStar.Reflection.V2.Arith.Shl__1 __@x0)))))

; </end constructor FStar.Reflection.V2.Arith.Shl>


; </end encoding FStar.Reflection.V2.Arith.Shl>


; <Start encoding FStar.Reflection.V2.Arith.Shr>


; <start constructor FStar.Reflection.V2.Arith.Shr>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Arith.Shr ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
162)
(= __@x0
(FStar.Reflection.V2.Arith.Shr (FStar.Reflection.V2.Arith.Shr__0 __@x0)
(FStar.Reflection.V2.Arith.Shr__1 __@x0)))))

; </end constructor FStar.Reflection.V2.Arith.Shr>


; </end encoding FStar.Reflection.V2.Arith.Shr>


; <Start encoding FStar.Reflection.V2.Arith.Neg>


; <start constructor FStar.Reflection.V2.Arith.Neg>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Arith.Neg ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
167)
(= __@x0
(FStar.Reflection.V2.Arith.Neg (FStar.Reflection.V2.Arith.Neg__0 __@x0)))))

; </end constructor FStar.Reflection.V2.Arith.Neg>


; </end encoding FStar.Reflection.V2.Arith.Neg>


; <Start encoding FStar.Reflection.V2.Arith.Udiv>


; <start constructor FStar.Reflection.V2.Arith.Udiv>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Arith.Udiv ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
172)
(= __@x0
(FStar.Reflection.V2.Arith.Udiv (FStar.Reflection.V2.Arith.Udiv__0 __@x0)
(FStar.Reflection.V2.Arith.Udiv__1 __@x0)))))

; </end constructor FStar.Reflection.V2.Arith.Udiv>


; </end encoding FStar.Reflection.V2.Arith.Udiv>


; <Start encoding FStar.Reflection.V2.Arith.Umod>


; <start constructor FStar.Reflection.V2.Arith.Umod>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Arith.Umod ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
177)
(= __@x0
(FStar.Reflection.V2.Arith.Umod (FStar.Reflection.V2.Arith.Umod__0 __@x0)
(FStar.Reflection.V2.Arith.Umod__1 __@x0)))))

; </end constructor FStar.Reflection.V2.Arith.Umod>


; </end encoding FStar.Reflection.V2.Arith.Umod>


; <Start encoding FStar.Reflection.V2.Arith.MulMod>


; <start constructor FStar.Reflection.V2.Arith.MulMod>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Arith.MulMod ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
182)
(= __@x0
(FStar.Reflection.V2.Arith.MulMod (FStar.Reflection.V2.Arith.MulMod__0 __@x0)
(FStar.Reflection.V2.Arith.MulMod__1 __@x0)))))

; </end constructor FStar.Reflection.V2.Arith.MulMod>


; </end encoding FStar.Reflection.V2.Arith.MulMod>


; <Start encoding FStar.Reflection.V2.Arith.NatToBv>


; <start constructor FStar.Reflection.V2.Arith.NatToBv>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Arith.NatToBv ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
187)
(= __@x0
(FStar.Reflection.V2.Arith.NatToBv (FStar.Reflection.V2.Arith.NatToBv__0 __@x0)))))

; </end constructor FStar.Reflection.V2.Arith.NatToBv>


; </end encoding FStar.Reflection.V2.Arith.NatToBv>


; </end encoding >


; <Start encoding FStar.Reflection.V2.Arith.uu___is_Lit>

(declare-fun FStar.Reflection.V2.Arith.uu___is_Lit (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V2.Arith.expr -> Prims.bool
(declare-fun Tm_arrow_e3e02f1614000f12ab80e47cd952bd06 () Term)
(declare-fun FStar.Reflection.V2.Arith.uu___is_Lit@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.uu___is_Lit>


; <Skipped FStar.Reflection.V2.Arith.uu___is_Lit/>


; <Start encoding FStar.Reflection.V2.Arith.__proj__Lit__item___0>

(declare-fun Tm_refine_4d1cb3c993734a3fba956c5fe4976c12 () Term)
(declare-fun FStar.Reflection.V2.Arith.__proj__Lit__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Arith.expr{Lit? _} -> Prims.int
(declare-fun Tm_arrow_7b16f7747b1beed09294795188032f5c () Term)
(declare-fun FStar.Reflection.V2.Arith.__proj__Lit__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.__proj__Lit__item___0>


; <Skipped FStar.Reflection.V2.Arith.__proj__Lit__item___0/>


; <Start encoding FStar.Reflection.V2.Arith.uu___is_Atom>

(declare-fun FStar.Reflection.V2.Arith.uu___is_Atom (Term) Term)

(declare-fun FStar.Reflection.V2.Arith.uu___is_Atom@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.uu___is_Atom>


; <Skipped FStar.Reflection.V2.Arith.uu___is_Atom/>


; <Start encoding FStar.Reflection.V2.Arith.__proj__Atom__item___0>

(declare-fun Tm_refine_00ef060fe2f582144545d97e04a0b689 () Term)
(declare-fun FStar.Reflection.V2.Arith.__proj__Atom__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Arith.expr{Atom? _} -> Prims.nat
(declare-fun Tm_arrow_3ad1db7954344db1b7b8943d5d00a087 () Term)
(declare-fun FStar.Reflection.V2.Arith.__proj__Atom__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.__proj__Atom__item___0>


; <Skipped FStar.Reflection.V2.Arith.__proj__Atom__item___0/>


; <Start encoding FStar.Reflection.V2.Arith.__proj__Atom__item___1>


(declare-fun FStar.Reflection.V2.Arith.__proj__Atom__item___1 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Arith.expr{Atom? _} -> FStar.Reflection.Types.term
(declare-fun Tm_arrow_8df6a4b2ef98bea9deeabe449eadb92d () Term)
(declare-fun FStar.Reflection.V2.Arith.__proj__Atom__item___1@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.__proj__Atom__item___1>


; <Skipped FStar.Reflection.V2.Arith.__proj__Atom__item___1/>


; <Start encoding FStar.Reflection.V2.Arith.uu___is_Plus>

(declare-fun FStar.Reflection.V2.Arith.uu___is_Plus (Term) Term)

(declare-fun FStar.Reflection.V2.Arith.uu___is_Plus@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.uu___is_Plus>


; <Skipped FStar.Reflection.V2.Arith.uu___is_Plus/>


; <Start encoding FStar.Reflection.V2.Arith.__proj__Plus__item___0>

(declare-fun Tm_refine_e8c359500aaaa6140c41b4199a66f37d () Term)
(declare-fun FStar.Reflection.V2.Arith.__proj__Plus__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Arith.expr{Plus? _} -> FStar.Reflection.V2.Arith.expr
(declare-fun Tm_arrow_c9e86ffbeb2dc71c56d8c66959cd64d5 () Term)
(declare-fun FStar.Reflection.V2.Arith.__proj__Plus__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.__proj__Plus__item___0>


; <Skipped FStar.Reflection.V2.Arith.__proj__Plus__item___0/>


; <Start encoding FStar.Reflection.V2.Arith.__proj__Plus__item___1>


(declare-fun FStar.Reflection.V2.Arith.__proj__Plus__item___1 (Term) Term)


(declare-fun FStar.Reflection.V2.Arith.__proj__Plus__item___1@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.__proj__Plus__item___1>


; <Skipped FStar.Reflection.V2.Arith.__proj__Plus__item___1/>


; <Start encoding FStar.Reflection.V2.Arith.uu___is_Mult>

(declare-fun FStar.Reflection.V2.Arith.uu___is_Mult (Term) Term)

(declare-fun FStar.Reflection.V2.Arith.uu___is_Mult@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.uu___is_Mult>


; <Skipped FStar.Reflection.V2.Arith.uu___is_Mult/>


; <Start encoding FStar.Reflection.V2.Arith.__proj__Mult__item___0>

(declare-fun Tm_refine_cb7887f66aaf81cf3b08943b824923d6 () Term)
(declare-fun FStar.Reflection.V2.Arith.__proj__Mult__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Arith.expr{Mult? _} -> FStar.Reflection.V2.Arith.expr
(declare-fun Tm_arrow_df03b59881fb01eb70a034f63c8d6c9e () Term)
(declare-fun FStar.Reflection.V2.Arith.__proj__Mult__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.__proj__Mult__item___0>


; <Skipped FStar.Reflection.V2.Arith.__proj__Mult__item___0/>


; <Start encoding FStar.Reflection.V2.Arith.__proj__Mult__item___1>


(declare-fun FStar.Reflection.V2.Arith.__proj__Mult__item___1 (Term) Term)


(declare-fun FStar.Reflection.V2.Arith.__proj__Mult__item___1@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.__proj__Mult__item___1>


; <Skipped FStar.Reflection.V2.Arith.__proj__Mult__item___1/>


; <Start encoding FStar.Reflection.V2.Arith.uu___is_Minus>

(declare-fun FStar.Reflection.V2.Arith.uu___is_Minus (Term) Term)

(declare-fun FStar.Reflection.V2.Arith.uu___is_Minus@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.uu___is_Minus>


; <Skipped FStar.Reflection.V2.Arith.uu___is_Minus/>


; <Start encoding FStar.Reflection.V2.Arith.__proj__Minus__item___0>

(declare-fun Tm_refine_a5e0affa9413e25a5b2f1a84e90ffa73 () Term)
(declare-fun FStar.Reflection.V2.Arith.__proj__Minus__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Arith.expr{Minus? _} -> FStar.Reflection.V2.Arith.expr
(declare-fun Tm_arrow_c2b1ed29a4c3043cbbf4c6a0d1b2d453 () Term)
(declare-fun FStar.Reflection.V2.Arith.__proj__Minus__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.__proj__Minus__item___0>


; <Skipped FStar.Reflection.V2.Arith.__proj__Minus__item___0/>


; <Start encoding FStar.Reflection.V2.Arith.__proj__Minus__item___1>


(declare-fun FStar.Reflection.V2.Arith.__proj__Minus__item___1 (Term) Term)


(declare-fun FStar.Reflection.V2.Arith.__proj__Minus__item___1@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.__proj__Minus__item___1>


; <Skipped FStar.Reflection.V2.Arith.__proj__Minus__item___1/>


; <Start encoding FStar.Reflection.V2.Arith.uu___is_Land>

(declare-fun FStar.Reflection.V2.Arith.uu___is_Land (Term) Term)

(declare-fun FStar.Reflection.V2.Arith.uu___is_Land@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.uu___is_Land>


; <Skipped FStar.Reflection.V2.Arith.uu___is_Land/>


; <Start encoding FStar.Reflection.V2.Arith.__proj__Land__item___0>

(declare-fun Tm_refine_3bb0a7c63b66ff76c0ffe8210e11a673 () Term)
(declare-fun FStar.Reflection.V2.Arith.__proj__Land__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Arith.expr{Land? _} -> FStar.Reflection.V2.Arith.expr
(declare-fun Tm_arrow_16c69afb40124bdb8a8aad4d14608a25 () Term)
(declare-fun FStar.Reflection.V2.Arith.__proj__Land__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.__proj__Land__item___0>


; <Skipped FStar.Reflection.V2.Arith.__proj__Land__item___0/>


; <Start encoding FStar.Reflection.V2.Arith.__proj__Land__item___1>


(declare-fun FStar.Reflection.V2.Arith.__proj__Land__item___1 (Term) Term)


(declare-fun FStar.Reflection.V2.Arith.__proj__Land__item___1@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.__proj__Land__item___1>


; <Skipped FStar.Reflection.V2.Arith.__proj__Land__item___1/>


; <Start encoding FStar.Reflection.V2.Arith.uu___is_Lxor>

(declare-fun FStar.Reflection.V2.Arith.uu___is_Lxor (Term) Term)

(declare-fun FStar.Reflection.V2.Arith.uu___is_Lxor@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.uu___is_Lxor>


; <Skipped FStar.Reflection.V2.Arith.uu___is_Lxor/>


; <Start encoding FStar.Reflection.V2.Arith.__proj__Lxor__item___0>

(declare-fun Tm_refine_d166f24f5408964467b992c7995ac5b0 () Term)
(declare-fun FStar.Reflection.V2.Arith.__proj__Lxor__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Arith.expr{Lxor? _} -> FStar.Reflection.V2.Arith.expr
(declare-fun Tm_arrow_8df92dc219549b28f97e1f154c134012 () Term)
(declare-fun FStar.Reflection.V2.Arith.__proj__Lxor__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.__proj__Lxor__item___0>


; <Skipped FStar.Reflection.V2.Arith.__proj__Lxor__item___0/>


; <Start encoding FStar.Reflection.V2.Arith.__proj__Lxor__item___1>


(declare-fun FStar.Reflection.V2.Arith.__proj__Lxor__item___1 (Term) Term)


(declare-fun FStar.Reflection.V2.Arith.__proj__Lxor__item___1@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.__proj__Lxor__item___1>


; <Skipped FStar.Reflection.V2.Arith.__proj__Lxor__item___1/>


; <Start encoding FStar.Reflection.V2.Arith.uu___is_Lor>

(declare-fun FStar.Reflection.V2.Arith.uu___is_Lor (Term) Term)

(declare-fun FStar.Reflection.V2.Arith.uu___is_Lor@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.uu___is_Lor>


; <Skipped FStar.Reflection.V2.Arith.uu___is_Lor/>


; <Start encoding FStar.Reflection.V2.Arith.__proj__Lor__item___0>

(declare-fun Tm_refine_6883495ebe4821767722685375943886 () Term)
(declare-fun FStar.Reflection.V2.Arith.__proj__Lor__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Arith.expr{Lor? _} -> FStar.Reflection.V2.Arith.expr
(declare-fun Tm_arrow_9905367363d9a0d150938c8eb12f7f58 () Term)
(declare-fun FStar.Reflection.V2.Arith.__proj__Lor__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.__proj__Lor__item___0>


; <Skipped FStar.Reflection.V2.Arith.__proj__Lor__item___0/>


; <Start encoding FStar.Reflection.V2.Arith.__proj__Lor__item___1>


(declare-fun FStar.Reflection.V2.Arith.__proj__Lor__item___1 (Term) Term)


(declare-fun FStar.Reflection.V2.Arith.__proj__Lor__item___1@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.__proj__Lor__item___1>


; <Skipped FStar.Reflection.V2.Arith.__proj__Lor__item___1/>


; <Start encoding FStar.Reflection.V2.Arith.uu___is_Ladd>

(declare-fun FStar.Reflection.V2.Arith.uu___is_Ladd (Term) Term)

(declare-fun FStar.Reflection.V2.Arith.uu___is_Ladd@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.uu___is_Ladd>


; <Skipped FStar.Reflection.V2.Arith.uu___is_Ladd/>


; <Start encoding FStar.Reflection.V2.Arith.__proj__Ladd__item___0>

(declare-fun Tm_refine_113d9dcc6235d27a60e662ef38afe4d0 () Term)
(declare-fun FStar.Reflection.V2.Arith.__proj__Ladd__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Arith.expr{Ladd? _} -> FStar.Reflection.V2.Arith.expr
(declare-fun Tm_arrow_712167a16aee77161b1abf7c4be6c411 () Term)
(declare-fun FStar.Reflection.V2.Arith.__proj__Ladd__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.__proj__Ladd__item___0>


; <Skipped FStar.Reflection.V2.Arith.__proj__Ladd__item___0/>


; <Start encoding FStar.Reflection.V2.Arith.__proj__Ladd__item___1>


(declare-fun FStar.Reflection.V2.Arith.__proj__Ladd__item___1 (Term) Term)


(declare-fun FStar.Reflection.V2.Arith.__proj__Ladd__item___1@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.__proj__Ladd__item___1>


; <Skipped FStar.Reflection.V2.Arith.__proj__Ladd__item___1/>


; <Start encoding FStar.Reflection.V2.Arith.uu___is_Lsub>

(declare-fun FStar.Reflection.V2.Arith.uu___is_Lsub (Term) Term)

(declare-fun FStar.Reflection.V2.Arith.uu___is_Lsub@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.uu___is_Lsub>


; <Skipped FStar.Reflection.V2.Arith.uu___is_Lsub/>


; <Start encoding FStar.Reflection.V2.Arith.__proj__Lsub__item___0>

(declare-fun Tm_refine_eb488b848213879d7329c56c6f3404f7 () Term)
(declare-fun FStar.Reflection.V2.Arith.__proj__Lsub__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Arith.expr{Lsub? _} -> FStar.Reflection.V2.Arith.expr
(declare-fun Tm_arrow_21f75f287cb47d895681b8d7b4877032 () Term)
(declare-fun FStar.Reflection.V2.Arith.__proj__Lsub__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.__proj__Lsub__item___0>


; <Skipped FStar.Reflection.V2.Arith.__proj__Lsub__item___0/>


; <Start encoding FStar.Reflection.V2.Arith.__proj__Lsub__item___1>


(declare-fun FStar.Reflection.V2.Arith.__proj__Lsub__item___1 (Term) Term)


(declare-fun FStar.Reflection.V2.Arith.__proj__Lsub__item___1@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.__proj__Lsub__item___1>


; <Skipped FStar.Reflection.V2.Arith.__proj__Lsub__item___1/>


; <Start encoding FStar.Reflection.V2.Arith.uu___is_Shl>

(declare-fun FStar.Reflection.V2.Arith.uu___is_Shl (Term) Term)

(declare-fun FStar.Reflection.V2.Arith.uu___is_Shl@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.uu___is_Shl>


; <Skipped FStar.Reflection.V2.Arith.uu___is_Shl/>


; <Start encoding FStar.Reflection.V2.Arith.__proj__Shl__item___0>

(declare-fun Tm_refine_f6614337e84efeaed6ab116c452f819b () Term)
(declare-fun FStar.Reflection.V2.Arith.__proj__Shl__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Arith.expr{Shl? _} -> FStar.Reflection.V2.Arith.expr
(declare-fun Tm_arrow_4c9f4dcdf93b6d0d61950d204a3307b4 () Term)
(declare-fun FStar.Reflection.V2.Arith.__proj__Shl__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.__proj__Shl__item___0>


; <Skipped FStar.Reflection.V2.Arith.__proj__Shl__item___0/>


; <Start encoding FStar.Reflection.V2.Arith.__proj__Shl__item___1>


(declare-fun FStar.Reflection.V2.Arith.__proj__Shl__item___1 (Term) Term)


(declare-fun FStar.Reflection.V2.Arith.__proj__Shl__item___1@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.__proj__Shl__item___1>


; <Skipped FStar.Reflection.V2.Arith.__proj__Shl__item___1/>


; <Start encoding FStar.Reflection.V2.Arith.uu___is_Shr>

(declare-fun FStar.Reflection.V2.Arith.uu___is_Shr (Term) Term)

(declare-fun FStar.Reflection.V2.Arith.uu___is_Shr@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.uu___is_Shr>


; <Skipped FStar.Reflection.V2.Arith.uu___is_Shr/>


; <Start encoding FStar.Reflection.V2.Arith.__proj__Shr__item___0>

(declare-fun Tm_refine_db4615492a525a2589a26b54ef32b95d () Term)
(declare-fun FStar.Reflection.V2.Arith.__proj__Shr__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Arith.expr{Shr? _} -> FStar.Reflection.V2.Arith.expr
(declare-fun Tm_arrow_24299c5a4abe6e3a6526793514048ee9 () Term)
(declare-fun FStar.Reflection.V2.Arith.__proj__Shr__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.__proj__Shr__item___0>


; <Skipped FStar.Reflection.V2.Arith.__proj__Shr__item___0/>


; <Start encoding FStar.Reflection.V2.Arith.__proj__Shr__item___1>


(declare-fun FStar.Reflection.V2.Arith.__proj__Shr__item___1 (Term) Term)


(declare-fun FStar.Reflection.V2.Arith.__proj__Shr__item___1@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.__proj__Shr__item___1>


; <Skipped FStar.Reflection.V2.Arith.__proj__Shr__item___1/>


; <Start encoding FStar.Reflection.V2.Arith.uu___is_Neg>

(declare-fun FStar.Reflection.V2.Arith.uu___is_Neg (Term) Term)

(declare-fun FStar.Reflection.V2.Arith.uu___is_Neg@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.uu___is_Neg>


; <Skipped FStar.Reflection.V2.Arith.uu___is_Neg/>


; <Start encoding FStar.Reflection.V2.Arith.__proj__Neg__item___0>

(declare-fun Tm_refine_576dcc28ba9b015823ce4eecd4b50224 () Term)
(declare-fun FStar.Reflection.V2.Arith.__proj__Neg__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Arith.expr{Neg? _} -> FStar.Reflection.V2.Arith.expr
(declare-fun Tm_arrow_f77c58fcd5d76bf7f27a18daafb8e4ea () Term)
(declare-fun FStar.Reflection.V2.Arith.__proj__Neg__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.__proj__Neg__item___0>


; <Skipped FStar.Reflection.V2.Arith.__proj__Neg__item___0/>


; <Start encoding FStar.Reflection.V2.Arith.uu___is_Udiv>

(declare-fun FStar.Reflection.V2.Arith.uu___is_Udiv (Term) Term)

(declare-fun FStar.Reflection.V2.Arith.uu___is_Udiv@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.uu___is_Udiv>


; <Skipped FStar.Reflection.V2.Arith.uu___is_Udiv/>


; <Start encoding FStar.Reflection.V2.Arith.__proj__Udiv__item___0>

(declare-fun Tm_refine_acccefa836c301dcceeeb8bb747bba07 () Term)
(declare-fun FStar.Reflection.V2.Arith.__proj__Udiv__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Arith.expr{Udiv? _} -> FStar.Reflection.V2.Arith.expr
(declare-fun Tm_arrow_253f8b89619548fc3634f28690dd6e64 () Term)
(declare-fun FStar.Reflection.V2.Arith.__proj__Udiv__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.__proj__Udiv__item___0>


; <Skipped FStar.Reflection.V2.Arith.__proj__Udiv__item___0/>


; <Start encoding FStar.Reflection.V2.Arith.__proj__Udiv__item___1>


(declare-fun FStar.Reflection.V2.Arith.__proj__Udiv__item___1 (Term) Term)


(declare-fun FStar.Reflection.V2.Arith.__proj__Udiv__item___1@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.__proj__Udiv__item___1>


; <Skipped FStar.Reflection.V2.Arith.__proj__Udiv__item___1/>


; <Start encoding FStar.Reflection.V2.Arith.uu___is_Umod>

(declare-fun FStar.Reflection.V2.Arith.uu___is_Umod (Term) Term)

(declare-fun FStar.Reflection.V2.Arith.uu___is_Umod@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.uu___is_Umod>


; <Skipped FStar.Reflection.V2.Arith.uu___is_Umod/>


; <Start encoding FStar.Reflection.V2.Arith.__proj__Umod__item___0>

(declare-fun Tm_refine_0cf473721790d7db60a8b9fa4b495eb9 () Term)
(declare-fun FStar.Reflection.V2.Arith.__proj__Umod__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Arith.expr{Umod? _} -> FStar.Reflection.V2.Arith.expr
(declare-fun Tm_arrow_776147996f8bac7140a632edbf97f142 () Term)
(declare-fun FStar.Reflection.V2.Arith.__proj__Umod__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.__proj__Umod__item___0>


; <Skipped FStar.Reflection.V2.Arith.__proj__Umod__item___0/>


; <Start encoding FStar.Reflection.V2.Arith.__proj__Umod__item___1>


(declare-fun FStar.Reflection.V2.Arith.__proj__Umod__item___1 (Term) Term)


(declare-fun FStar.Reflection.V2.Arith.__proj__Umod__item___1@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.__proj__Umod__item___1>


; <Skipped FStar.Reflection.V2.Arith.__proj__Umod__item___1/>


; <Start encoding FStar.Reflection.V2.Arith.uu___is_MulMod>

(declare-fun FStar.Reflection.V2.Arith.uu___is_MulMod (Term) Term)

(declare-fun FStar.Reflection.V2.Arith.uu___is_MulMod@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.uu___is_MulMod>


; <Skipped FStar.Reflection.V2.Arith.uu___is_MulMod/>


; <Start encoding FStar.Reflection.V2.Arith.__proj__MulMod__item___0>

(declare-fun Tm_refine_bacdde8675993a12d66684e76458ae68 () Term)
(declare-fun FStar.Reflection.V2.Arith.__proj__MulMod__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Arith.expr{MulMod? _} -> FStar.Reflection.V2.Arith.expr
(declare-fun Tm_arrow_1159c6d704f1e9ba027c88277d0ae8b5 () Term)
(declare-fun FStar.Reflection.V2.Arith.__proj__MulMod__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.__proj__MulMod__item___0>


; <Skipped FStar.Reflection.V2.Arith.__proj__MulMod__item___0/>


; <Start encoding FStar.Reflection.V2.Arith.__proj__MulMod__item___1>


(declare-fun FStar.Reflection.V2.Arith.__proj__MulMod__item___1 (Term) Term)


(declare-fun FStar.Reflection.V2.Arith.__proj__MulMod__item___1@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.__proj__MulMod__item___1>


; <Skipped FStar.Reflection.V2.Arith.__proj__MulMod__item___1/>


; <Start encoding FStar.Reflection.V2.Arith.uu___is_NatToBv>

(declare-fun FStar.Reflection.V2.Arith.uu___is_NatToBv (Term) Term)

(declare-fun FStar.Reflection.V2.Arith.uu___is_NatToBv@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.uu___is_NatToBv>


; <Skipped FStar.Reflection.V2.Arith.uu___is_NatToBv/>


; <Start encoding FStar.Reflection.V2.Arith.__proj__NatToBv__item___0>

(declare-fun Tm_refine_49f1a48168da21aeb37e62f4ffdf4019 () Term)
(declare-fun FStar.Reflection.V2.Arith.__proj__NatToBv__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Arith.expr{NatToBv? _} -> FStar.Reflection.V2.Arith.expr
(declare-fun Tm_arrow_58c0873fe1d2cf2bbf0ad42c0ff285b0 () Term)
(declare-fun FStar.Reflection.V2.Arith.__proj__NatToBv__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.__proj__NatToBv__item___0>


; <Skipped FStar.Reflection.V2.Arith.__proj__NatToBv__item___0/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Arith.connective () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Arith.C_Lt () Term)
;;;;;;;;;;;;;;;;data constructor proxy: C_Lt
(declare-fun FStar.Reflection.V2.Arith.C_Lt@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Arith.C_Eq () Term)
;;;;;;;;;;;;;;;;data constructor proxy: C_Eq
(declare-fun FStar.Reflection.V2.Arith.C_Eq@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Arith.C_Gt () Term)
;;;;;;;;;;;;;;;;data constructor proxy: C_Gt
(declare-fun FStar.Reflection.V2.Arith.C_Gt@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Arith.C_Ne () Term)
;;;;;;;;;;;;;;;;data constructor proxy: C_Ne
(declare-fun FStar.Reflection.V2.Arith.C_Ne@tok () Term)

; <Start encoding FStar.Reflection.V2.Arith.connective>


; <start constructor FStar.Reflection.V2.Arith.connective>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Arith.connective ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
349)
(= __@x0
FStar.Reflection.V2.Arith.connective)))

; </end constructor FStar.Reflection.V2.Arith.connective>


; </end encoding FStar.Reflection.V2.Arith.connective>


; <Start encoding FStar.Reflection.V2.Arith.C_Lt>


; <start constructor FStar.Reflection.V2.Arith.C_Lt>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Arith.C_Lt ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
355)
(= __@x0
FStar.Reflection.V2.Arith.C_Lt)))

; </end constructor FStar.Reflection.V2.Arith.C_Lt>


; </end encoding FStar.Reflection.V2.Arith.C_Lt>


; <Start encoding FStar.Reflection.V2.Arith.C_Eq>


; <start constructor FStar.Reflection.V2.Arith.C_Eq>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Arith.C_Eq ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
357)
(= __@x0
FStar.Reflection.V2.Arith.C_Eq)))

; </end constructor FStar.Reflection.V2.Arith.C_Eq>


; </end encoding FStar.Reflection.V2.Arith.C_Eq>


; <Start encoding FStar.Reflection.V2.Arith.C_Gt>


; <start constructor FStar.Reflection.V2.Arith.C_Gt>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Arith.C_Gt ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
359)
(= __@x0
FStar.Reflection.V2.Arith.C_Gt)))

; </end constructor FStar.Reflection.V2.Arith.C_Gt>


; </end encoding FStar.Reflection.V2.Arith.C_Gt>


; <Start encoding FStar.Reflection.V2.Arith.C_Ne>


; <start constructor FStar.Reflection.V2.Arith.C_Ne>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Arith.C_Ne ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
361)
(= __@x0
FStar.Reflection.V2.Arith.C_Ne)))

; </end constructor FStar.Reflection.V2.Arith.C_Ne>


; </end encoding FStar.Reflection.V2.Arith.C_Ne>


; </end encoding >


; <Start encoding FStar.Reflection.V2.Arith.uu___is_C_Lt>

(declare-fun FStar.Reflection.V2.Arith.uu___is_C_Lt (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V2.Arith.connective -> Prims.bool
(declare-fun Tm_arrow_c7322ae402d5623253075b765fcd1146 () Term)
(declare-fun FStar.Reflection.V2.Arith.uu___is_C_Lt@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.uu___is_C_Lt>


; <Skipped FStar.Reflection.V2.Arith.uu___is_C_Lt/>


; <Start encoding FStar.Reflection.V2.Arith.uu___is_C_Eq>

(declare-fun FStar.Reflection.V2.Arith.uu___is_C_Eq (Term) Term)

(declare-fun FStar.Reflection.V2.Arith.uu___is_C_Eq@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.uu___is_C_Eq>


; <Skipped FStar.Reflection.V2.Arith.uu___is_C_Eq/>


; <Start encoding FStar.Reflection.V2.Arith.uu___is_C_Gt>

(declare-fun FStar.Reflection.V2.Arith.uu___is_C_Gt (Term) Term)

(declare-fun FStar.Reflection.V2.Arith.uu___is_C_Gt@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.uu___is_C_Gt>


; <Skipped FStar.Reflection.V2.Arith.uu___is_C_Gt/>


; <Start encoding FStar.Reflection.V2.Arith.uu___is_C_Ne>

(declare-fun FStar.Reflection.V2.Arith.uu___is_C_Ne (Term) Term)

(declare-fun FStar.Reflection.V2.Arith.uu___is_C_Ne@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.uu___is_C_Ne>


; <Skipped FStar.Reflection.V2.Arith.uu___is_C_Ne/>


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Arith.prop () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Arith.CompProp (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Arith.CompProp__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Arith.CompProp__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Arith.CompProp__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: CompProp
(declare-fun FStar.Reflection.V2.Arith.CompProp@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Arith.AndProp (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Arith.AndProp__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Arith.AndProp__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: AndProp
(declare-fun FStar.Reflection.V2.Arith.AndProp@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Arith.OrProp (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Arith.OrProp__0 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Arith.OrProp__1 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: OrProp
(declare-fun FStar.Reflection.V2.Arith.OrProp@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Reflection.V2.Arith.NotProp (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Reflection.V2.Arith.NotProp__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: NotProp
(declare-fun FStar.Reflection.V2.Arith.NotProp@tok () Term)
;;;;;;;;;;;;;;;;_0: FStar.Reflection.V2.Arith.expr ->     _1: FStar.Reflection.V2.Arith.connective ->     _2: FStar.Reflection.V2.Arith.expr   -> FStar.Reflection.V2.Arith.prop
(declare-fun Tm_arrow_4b7a4e27e04ab55f4042ceb408c011a1 () Term)
;;;;;;;;;;;;;;;;_0: FStar.Reflection.V2.Arith.prop -> _1: FStar.Reflection.V2.Arith.prop   -> FStar.Reflection.V2.Arith.prop
(declare-fun Tm_arrow_2b9f81374cfe12a872d344fc04494b3b () Term)

;;;;;;;;;;;;;;;;_0: FStar.Reflection.V2.Arith.prop -> FStar.Reflection.V2.Arith.prop
(declare-fun Tm_arrow_b5771e31b4b82a5778efe08a8fe444fc () Term)

; <Start encoding FStar.Reflection.V2.Arith.prop>


; <start constructor FStar.Reflection.V2.Arith.prop>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Arith.prop ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
370)
(= __@x0
FStar.Reflection.V2.Arith.prop)))

; </end constructor FStar.Reflection.V2.Arith.prop>


; </end encoding FStar.Reflection.V2.Arith.prop>


; <Start encoding FStar.Reflection.V2.Arith.CompProp>


; <start constructor FStar.Reflection.V2.Arith.CompProp>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Arith.CompProp ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
376)
(= __@x0
(FStar.Reflection.V2.Arith.CompProp (FStar.Reflection.V2.Arith.CompProp__0 __@x0)
(FStar.Reflection.V2.Arith.CompProp__1 __@x0)
(FStar.Reflection.V2.Arith.CompProp__2 __@x0)))))

; </end constructor FStar.Reflection.V2.Arith.CompProp>


; </end encoding FStar.Reflection.V2.Arith.CompProp>


; <Start encoding FStar.Reflection.V2.Arith.AndProp>


; <start constructor FStar.Reflection.V2.Arith.AndProp>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Arith.AndProp ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
381)
(= __@x0
(FStar.Reflection.V2.Arith.AndProp (FStar.Reflection.V2.Arith.AndProp__0 __@x0)
(FStar.Reflection.V2.Arith.AndProp__1 __@x0)))))

; </end constructor FStar.Reflection.V2.Arith.AndProp>


; </end encoding FStar.Reflection.V2.Arith.AndProp>


; <Start encoding FStar.Reflection.V2.Arith.OrProp>


; <start constructor FStar.Reflection.V2.Arith.OrProp>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Arith.OrProp ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
386)
(= __@x0
(FStar.Reflection.V2.Arith.OrProp (FStar.Reflection.V2.Arith.OrProp__0 __@x0)
(FStar.Reflection.V2.Arith.OrProp__1 __@x0)))))

; </end constructor FStar.Reflection.V2.Arith.OrProp>


; </end encoding FStar.Reflection.V2.Arith.OrProp>


; <Start encoding FStar.Reflection.V2.Arith.NotProp>


; <start constructor FStar.Reflection.V2.Arith.NotProp>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Reflection.V2.Arith.NotProp ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
391)
(= __@x0
(FStar.Reflection.V2.Arith.NotProp (FStar.Reflection.V2.Arith.NotProp__0 __@x0)))))

; </end constructor FStar.Reflection.V2.Arith.NotProp>


; </end encoding FStar.Reflection.V2.Arith.NotProp>


; </end encoding >


; <Start encoding FStar.Reflection.V2.Arith.uu___is_CompProp>

(declare-fun FStar.Reflection.V2.Arith.uu___is_CompProp (Term) Term)
;;;;;;;;;;;;;;;;projectee: FStar.Reflection.V2.Arith.prop -> Prims.bool
(declare-fun Tm_arrow_6cc35bd3353d4a17f72fb8f1fbb180ee () Term)
(declare-fun FStar.Reflection.V2.Arith.uu___is_CompProp@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.uu___is_CompProp>


; <Skipped FStar.Reflection.V2.Arith.uu___is_CompProp/>


; <Start encoding FStar.Reflection.V2.Arith.__proj__CompProp__item___0>

(declare-fun Tm_refine_f4fdbb64a7ea64c424d969459c5bc8c2 () Term)
(declare-fun FStar.Reflection.V2.Arith.__proj__CompProp__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Arith.prop{CompProp? _} -> FStar.Reflection.V2.Arith.expr
(declare-fun Tm_arrow_88fd78d1489b1d1a21be5346398d1aec () Term)
(declare-fun FStar.Reflection.V2.Arith.__proj__CompProp__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.__proj__CompProp__item___0>


; <Skipped FStar.Reflection.V2.Arith.__proj__CompProp__item___0/>


; <Start encoding FStar.Reflection.V2.Arith.__proj__CompProp__item___1>


(declare-fun FStar.Reflection.V2.Arith.__proj__CompProp__item___1 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Arith.prop{CompProp? _} -> FStar.Reflection.V2.Arith.connective
(declare-fun Tm_arrow_295b3f3e64c505d08262bca647f651ac () Term)
(declare-fun FStar.Reflection.V2.Arith.__proj__CompProp__item___1@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.__proj__CompProp__item___1>


; <Skipped FStar.Reflection.V2.Arith.__proj__CompProp__item___1/>


; <Start encoding FStar.Reflection.V2.Arith.__proj__CompProp__item___2>


(declare-fun FStar.Reflection.V2.Arith.__proj__CompProp__item___2 (Term) Term)


(declare-fun FStar.Reflection.V2.Arith.__proj__CompProp__item___2@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.__proj__CompProp__item___2>


; <Skipped FStar.Reflection.V2.Arith.__proj__CompProp__item___2/>


; <Start encoding FStar.Reflection.V2.Arith.uu___is_AndProp>

(declare-fun FStar.Reflection.V2.Arith.uu___is_AndProp (Term) Term)

(declare-fun FStar.Reflection.V2.Arith.uu___is_AndProp@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.uu___is_AndProp>


; <Skipped FStar.Reflection.V2.Arith.uu___is_AndProp/>


; <Start encoding FStar.Reflection.V2.Arith.__proj__AndProp__item___0>

(declare-fun Tm_refine_ff8bf3409ae7106aaaabee631f89b9ae () Term)
(declare-fun FStar.Reflection.V2.Arith.__proj__AndProp__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Arith.prop{AndProp? _} -> FStar.Reflection.V2.Arith.prop
(declare-fun Tm_arrow_35028b8c21d35ac9ce5b86e843aabce8 () Term)
(declare-fun FStar.Reflection.V2.Arith.__proj__AndProp__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.__proj__AndProp__item___0>


; <Skipped FStar.Reflection.V2.Arith.__proj__AndProp__item___0/>


; <Start encoding FStar.Reflection.V2.Arith.__proj__AndProp__item___1>


(declare-fun FStar.Reflection.V2.Arith.__proj__AndProp__item___1 (Term) Term)


(declare-fun FStar.Reflection.V2.Arith.__proj__AndProp__item___1@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.__proj__AndProp__item___1>


; <Skipped FStar.Reflection.V2.Arith.__proj__AndProp__item___1/>


; <Start encoding FStar.Reflection.V2.Arith.uu___is_OrProp>

(declare-fun FStar.Reflection.V2.Arith.uu___is_OrProp (Term) Term)

(declare-fun FStar.Reflection.V2.Arith.uu___is_OrProp@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.uu___is_OrProp>


; <Skipped FStar.Reflection.V2.Arith.uu___is_OrProp/>


; <Start encoding FStar.Reflection.V2.Arith.__proj__OrProp__item___0>

(declare-fun Tm_refine_49e17b8364ef666c8b205a87bf2cdab0 () Term)
(declare-fun FStar.Reflection.V2.Arith.__proj__OrProp__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Arith.prop{OrProp? _} -> FStar.Reflection.V2.Arith.prop
(declare-fun Tm_arrow_8ab0a92817a87034d1ae287f41b2e9fc () Term)
(declare-fun FStar.Reflection.V2.Arith.__proj__OrProp__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.__proj__OrProp__item___0>


; <Skipped FStar.Reflection.V2.Arith.__proj__OrProp__item___0/>


; <Start encoding FStar.Reflection.V2.Arith.__proj__OrProp__item___1>


(declare-fun FStar.Reflection.V2.Arith.__proj__OrProp__item___1 (Term) Term)


(declare-fun FStar.Reflection.V2.Arith.__proj__OrProp__item___1@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.__proj__OrProp__item___1>


; <Skipped FStar.Reflection.V2.Arith.__proj__OrProp__item___1/>


; <Start encoding FStar.Reflection.V2.Arith.uu___is_NotProp>

(declare-fun FStar.Reflection.V2.Arith.uu___is_NotProp (Term) Term)

(declare-fun FStar.Reflection.V2.Arith.uu___is_NotProp@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.uu___is_NotProp>


; <Skipped FStar.Reflection.V2.Arith.uu___is_NotProp/>


; <Start encoding FStar.Reflection.V2.Arith.__proj__NotProp__item___0>

(declare-fun Tm_refine_458adec99a866220f677cc3d346f804a () Term)
(declare-fun FStar.Reflection.V2.Arith.__proj__NotProp__item___0 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: FStar.Reflection.V2.Arith.prop{NotProp? _} -> FStar.Reflection.V2.Arith.prop
(declare-fun Tm_arrow_7881e5da7d3cfeea96011c3b697026c8 () Term)
(declare-fun FStar.Reflection.V2.Arith.__proj__NotProp__item___0@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.__proj__NotProp__item___0>


; <Skipped FStar.Reflection.V2.Arith.__proj__NotProp__item___0/>


; <Start encoding FStar.Reflection.V2.Arith.lt>

(declare-fun FStar.Reflection.V2.Arith.lt (Term Term) Term)
;;;;;;;;;;;;;;;;e1: FStar.Reflection.V2.Arith.expr -> e2: FStar.Reflection.V2.Arith.expr   -> FStar.Reflection.V2.Arith.prop
(declare-fun Tm_arrow_7f603c1d23d00cb9e909118048223be2 () Term)
(declare-fun FStar.Reflection.V2.Arith.lt@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.lt>


; <Start encoding FStar.Reflection.V2.Arith.le>

(declare-fun FStar.Reflection.V2.Arith.le (Term Term) Term)

(declare-fun FStar.Reflection.V2.Arith.le@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.le>


; <Start encoding FStar.Reflection.V2.Arith.eq>

(declare-fun FStar.Reflection.V2.Arith.eq (Term Term) Term)

(declare-fun FStar.Reflection.V2.Arith.eq@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.eq>


; <Start encoding FStar.Reflection.V2.Arith.ne>

(declare-fun FStar.Reflection.V2.Arith.ne (Term Term) Term)

(declare-fun FStar.Reflection.V2.Arith.ne@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.ne>


; <Start encoding FStar.Reflection.V2.Arith.gt>

(declare-fun FStar.Reflection.V2.Arith.gt (Term Term) Term)

(declare-fun FStar.Reflection.V2.Arith.gt@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.gt>


; <Start encoding FStar.Reflection.V2.Arith.ge>

(declare-fun FStar.Reflection.V2.Arith.ge (Term Term) Term)

(declare-fun FStar.Reflection.V2.Arith.ge@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.ge>


; <Start encoding FStar.Reflection.V2.Arith.st>

(declare-fun FStar.Reflection.V2.Arith.st () Term)
(declare-fun Tm_refine_918745f7523ef4e244cf28d017b01d6d () Term)

; </end encoding FStar.Reflection.V2.Arith.st>


; <Start encoding FStar.Reflection.V2.Arith.tm>

(declare-fun FStar.Reflection.V2.Arith.tm (Term) Term)

(declare-fun FStar.Reflection.V2.Arith.tm@tok () Term)
(declare-fun Non_total_Tm_arrow_c168d7a45730210912c36098e94fe4b7 () Term)

; </end encoding FStar.Reflection.V2.Arith.tm>


; <Start encoding FStar.Reflection.V2.Arith.return>

(declare-fun FStar.Reflection.V2.Arith.return (Term Term) Term)
;;;;;;;;;;;;;;;;x: 'a -> FStar.Reflection.V2.Arith.tm 'a
(declare-fun Tm_arrow_ad8217cb0b8f1c105f7329c1c9c27904 () Term)
(declare-fun FStar.Reflection.V2.Arith.return@tok () Term)
;;;;;;;;;;;;;;;;Imprecise function encoding
(declare-fun Tm_abs_FStar.Reflection.V2.Arith_461 () Term)

; </end encoding FStar.Reflection.V2.Arith.return>


; <Start encoding FStar.Reflection.V2.Arith.op_let_Bang>

;;;;;;;;;;;;;;;;_: 'a -> FStar.Reflection.V2.Arith.tm 'b
(declare-fun Tm_arrow_ce79362ad89dca40d42f5dd57f6647ed (Term Term) Term)
(declare-fun FStar.Reflection.V2.Arith.op_let_Bang (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;m: FStar.Reflection.V2.Arith.tm 'a -> f: (_: 'a -> FStar.Reflection.V2.Arith.tm 'b)   -> FStar.Reflection.V2.Arith.tm 'b
(declare-fun Tm_arrow_da2dfa8bc39075ffb8ecd2faaae3bda8 () Term)
(declare-fun FStar.Reflection.V2.Arith.op_let_Bang@tok () Term)

;;;;;;;;;;;;;;;;Imprecise function encoding
(declare-fun Tm_abs_FStar.Reflection.V2.Arith_470 () Term)

; </end encoding FStar.Reflection.V2.Arith.op_let_Bang>


; <Skipped FStar.Reflection.V2.Arith.lift/>


; <Start encoding FStar.Reflection.V2.Arith.lift>


(declare-fun FStar.Reflection.V2.Arith.lift (Term Term Term) Term)


;;;;;;;;;;;;;;;;f: (_: 'a -> FStar.Tactics.Effect.Tac 'b) -> _: 'a -> FStar.Reflection.V2.Arith.tm 'b
(declare-fun Tm_arrow_480303e8534b1b31477950bd10fd2127 () Term)
(declare-fun FStar.Reflection.V2.Arith.lift@tok () Term)


;;;;;;;;;;;;;;;;Imprecise function encoding
(declare-fun Tm_abs_FStar.Reflection.V2.Arith_504 () Term)

; </end encoding FStar.Reflection.V2.Arith.lift>


; <Skipped FStar.Reflection.V2.Arith.liftM/>


; <Start encoding FStar.Reflection.V2.Arith.liftM>


(declare-fun FStar.Reflection.V2.Arith.liftM (Term Term Term) Term)

;;;;;;;;;;;;;;;;_: FStar.Reflection.V2.Arith.tm 'a -> FStar.Reflection.V2.Arith.tm 'b
(declare-fun Tm_arrow_55700e6a80f671ce28e73b2f5c1a04fe (Term Term) Term)
;;;;;;;;;;;;;;;;f: (_: 'a -> 'b) -> _: FStar.Reflection.V2.Arith.tm 'a -> FStar.Reflection.V2.Arith.tm 'b
(declare-fun Tm_arrow_96cd19bdf210959af3be9690b4a89dd3 () Term)
(declare-fun FStar.Reflection.V2.Arith.liftM@tok () Term)



(declare-fun Tm_abs_7099192389c111fa4a0a35f120a1b99a (Term Term Term) Term)

(declare-fun Tm_abs_5f671568a822e8c02b06e9ae25f8d641 (Term Term Term) Term)

; </end encoding FStar.Reflection.V2.Arith.liftM>


; <Skipped FStar.Reflection.V2.Arith.liftM2/>


; <Start encoding FStar.Reflection.V2.Arith.liftM2>

;;;;;;;;;;;;;;;;_: 'a -> _: 'b -> 'c
(declare-fun Tm_arrow_31983ce7bb3fa3288ec94b088df0f02a (Term Term Term) Term)
(declare-fun FStar.Reflection.V2.Arith.liftM2 (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;_: FStar.Reflection.V2.Arith.tm 'a -> _: FStar.Reflection.V2.Arith.tm 'b   -> FStar.Reflection.V2.Arith.tm 'c
(declare-fun Tm_arrow_806981f6485507c4bb4ad7f41bc438bb (Term Term Term) Term)
;;;;;;;;;;;;;;;;f: (_: 'a -> _: 'b -> 'c) ->     _: FStar.Reflection.V2.Arith.tm 'a ->     _: FStar.Reflection.V2.Arith.tm 'b   -> FStar.Reflection.V2.Arith.tm 'c
(declare-fun Tm_arrow_9eade784a62de8296f15e4b03bb1dce6 () Term)
(declare-fun FStar.Reflection.V2.Arith.liftM2@tok () Term)



(declare-fun Tm_abs_4151e0724ec30199076869ea6a419d0a (Term Term Term Term) Term)

(declare-fun Tm_abs_b3d9212a1575800c5fdc15131aec9b19 (Term Term Term Term Term) Term)

(declare-fun Tm_abs_de927d2943727450e16f65dae93f9ee5 (Term Term Term Term) Term)

; </end encoding FStar.Reflection.V2.Arith.liftM2>


; <Skipped FStar.Reflection.V2.Arith.liftM3/>


; <Start encoding FStar.Reflection.V2.Arith.liftM3>

;;;;;;;;;;;;;;;;_: 'a -> _: 'b -> _: 'c -> 'd
(declare-fun Tm_arrow_46a2f20e317f00bf7b3689605c5b8536 (Term Term Term Term) Term)
(declare-fun FStar.Reflection.V2.Arith.liftM3 (Term Term Term Term Term) Term)

;;;;;;;;;;;;;;;;_: FStar.Reflection.V2.Arith.tm 'a ->     _: FStar.Reflection.V2.Arith.tm 'b ->     _: FStar.Reflection.V2.Arith.tm 'c   -> FStar.Reflection.V2.Arith.tm 'd
(declare-fun Tm_arrow_3582dff4419ece986b7b949d9459adbb (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;f: (_: 'a -> _: 'b -> _: 'c -> 'd) ->     _: FStar.Reflection.V2.Arith.tm 'a ->     _: FStar.Reflection.V2.Arith.tm 'b ->     _: FStar.Reflection.V2.Arith.tm 'c   -> FStar.Reflection.V2.Arith.tm 'd
(declare-fun Tm_arrow_babb182b706395f5822ec1a14def4e3f () Term)
(declare-fun FStar.Reflection.V2.Arith.liftM3@tok () Term)



(declare-fun Tm_abs_695f52feacc53b76398a9f8d9f045aea (Term Term Term Term Term) Term)

(declare-fun Tm_abs_6385830c16bb38c9b03c4e5fecb9bc34 (Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_a55c4cfe37307e479f6827e4a2d9ac8c (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_c1ab1a153f7ca796bfcf01c2903db7f1 (Term Term Term Term Term) Term)

; </end encoding FStar.Reflection.V2.Arith.liftM3>


; <Start encoding FStar.Reflection.V2.Arith.find_idx>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Arith.find_idx (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Arith.find_idx@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.find_idx>


; <Start encoding FStar.Reflection.V2.Arith.atom>

(declare-fun FStar.Reflection.V2.Arith.atom (Term) Term)
;;;;;;;;;;;;;;;;t: FStar.Reflection.Types.term -> FStar.Reflection.V2.Arith.tm FStar.Reflection.V2.Arith.expr
(declare-fun Tm_arrow_7d56e5dfb7970f36ab969c0fed95ad19 () Term)
(declare-fun FStar.Reflection.V2.Arith.atom@tok () Term)
;;;;;;;;;;;;;;;;Imprecise function encoding
(declare-fun Tm_abs_FStar.Reflection.V2.Arith_561 () Term)

; </end encoding FStar.Reflection.V2.Arith.atom>


; <Skipped FStar.Reflection.V2.Arith.fail/>


; <Start encoding FStar.Reflection.V2.Arith.fail>

(declare-fun FStar.Reflection.V2.Arith.fail (Term Term) Term)
;;;;;;;;;;;;;;;;s: Prims.string -> FStar.Reflection.V2.Arith.tm a
(declare-fun Tm_arrow_d8b0b462a2b979dd09e94083072668e6 () Term)
(declare-fun FStar.Reflection.V2.Arith.fail@tok () Term)
;;;;;;;;;;;;;;;;Imprecise function encoding
(declare-fun Tm_abs_FStar.Reflection.V2.Arith_564 () Term)

; </end encoding FStar.Reflection.V2.Arith.fail>


; <Skipped FStar.Reflection.V2.Arith.as_arith_expr/>


; <Skipped />


; <Start encoding FStar.Reflection.V2.Arith.as_arith_expr>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Arith.as_arith_expr.fuel_instrumented (Fuel Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Arith.as_arith_expr.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Arith.as_arith_expr (Term) Term)
(declare-fun FStar.Reflection.V2.Arith.as_arith_expr@tok () Term)

;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name FStar.Reflection.V2.Arith.as_arith_expr; Namespace FStar.Reflection.V2.Arith
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.Reflection.V2.Arith.Neg@tok))
:named @kick_partial_app_cdc7cc0d787285dc45a9b64ecd023a6b))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name FStar.Reflection.V2.Arith.as_arith_expr; Namespace FStar.Reflection.V2.Arith
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.Reflection.V2.Arith.liftM@tok))
:named @kick_partial_app_cdbd43979fba84d86c606647cf6ab327))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name FStar.Reflection.V2.Arith.as_arith_expr; Namespace FStar.Reflection.V2.Arith
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.Reflection.V2.Arith.NatToBv@tok))
:named @kick_partial_app_b5043e3c7374f69a01dc1dc18af85294))

;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name FStar.Reflection.V2.Arith.as_arith_expr; Namespace FStar.Reflection.V2.Arith
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.Reflection.V2.Arith.Mult@tok))
:named @kick_partial_app_31e71579eff1ad0aa987236508c362a5))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name FStar.Reflection.V2.Arith.as_arith_expr; Namespace FStar.Reflection.V2.Arith
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.Reflection.V2.Arith.liftM2@tok))
:named @kick_partial_app_c84564d7224947ecbda14e101009bb62))


;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name FStar.Reflection.V2.Arith.as_arith_expr; Namespace FStar.Reflection.V2.Arith
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.Reflection.V2.Arith.Minus@tok))
:named @kick_partial_app_1ae769b346220ccc16c851d6dff7a8e9))

;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name FStar.Reflection.V2.Arith.as_arith_expr; Namespace FStar.Reflection.V2.Arith
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.Reflection.V2.Arith.Plus@tok))
:named @kick_partial_app_0e5ec9b31fa50d24afc122c71131ec92))

;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name FStar.Reflection.V2.Arith.as_arith_expr; Namespace FStar.Reflection.V2.Arith
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.Reflection.V2.Arith.Lsub@tok))
:named @kick_partial_app_b38984bbccce0bc65b35d228f47dcf84))

;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name FStar.Reflection.V2.Arith.as_arith_expr; Namespace FStar.Reflection.V2.Arith
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.Reflection.V2.Arith.Ladd@tok))
:named @kick_partial_app_c11d4fb8904f5a60264c325b78b01b0d))

;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name FStar.Reflection.V2.Arith.as_arith_expr; Namespace FStar.Reflection.V2.Arith
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.Reflection.V2.Arith.MulMod@tok))
:named @kick_partial_app_8c50e3f2c4155e27e9da0f96caf6207c))

;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name FStar.Reflection.V2.Arith.as_arith_expr; Namespace FStar.Reflection.V2.Arith
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.Reflection.V2.Arith.Umod@tok))
:named @kick_partial_app_0c8a18081af08032ac8945decfe39e01))

;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name FStar.Reflection.V2.Arith.as_arith_expr; Namespace FStar.Reflection.V2.Arith
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.Reflection.V2.Arith.Udiv@tok))
:named @kick_partial_app_af5a4a192627839a20bf1a624f266958))

;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name FStar.Reflection.V2.Arith.as_arith_expr; Namespace FStar.Reflection.V2.Arith
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.Reflection.V2.Arith.Shl@tok))
:named @kick_partial_app_dcda9298244d1c187464d19b276d5410))

;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name FStar.Reflection.V2.Arith.as_arith_expr; Namespace FStar.Reflection.V2.Arith
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.Reflection.V2.Arith.Shr@tok))
:named @kick_partial_app_93f347d221af35c13e92c44d64453355))

;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name FStar.Reflection.V2.Arith.as_arith_expr; Namespace FStar.Reflection.V2.Arith
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.Reflection.V2.Arith.Lor@tok))
:named @kick_partial_app_3aca41ef56e83029f207f457b2d45781))

;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name FStar.Reflection.V2.Arith.as_arith_expr; Namespace FStar.Reflection.V2.Arith
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.Reflection.V2.Arith.Lxor@tok))
:named @kick_partial_app_cdfc16842927f1982068d327e93be755))

;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name FStar.Reflection.V2.Arith.as_arith_expr; Namespace FStar.Reflection.V2.Arith
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.Reflection.V2.Arith.Land@tok))
:named @kick_partial_app_316f3df084f5763fdd7368ea7ca301bd))

;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Reflection.V2.Arith.as_arith_expr; Namespace FStar.Reflection.V2.Arith
(assert (! 
;; def=FStar.Reflection.V2.Arith.fst(125,8-125,21); use=FStar.Reflection.V2.Arith.fst(125,8-125,21)
(forall ((@u0 Fuel) (@x1 Term))
 (! (= (FStar.Reflection.V2.Arith.as_arith_expr.fuel_instrumented (SFuel @u0)
@x1)
(FStar.Reflection.V2.Arith.as_arith_expr.fuel_instrumented ZFuel
@x1))
 

:pattern ((FStar.Reflection.V2.Arith.as_arith_expr.fuel_instrumented (SFuel @u0)
@x1))
:qid @fuel_irrelevance_FStar.Reflection.V2.Arith.as_arith_expr.fuel_instrumented))

:named @fuel_irrelevance_FStar.Reflection.V2.Arith.as_arith_expr.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Reflection.V2.Arith.as_arith_expr; Namespace FStar.Reflection.V2.Arith
(assert (! 
;; def=FStar.Reflection.V2.Arith.fst(125,8-125,21); use=FStar.Reflection.V2.Arith.fst(125,8-125,21)
(forall ((@x0 Term))
 (! (= (FStar.Reflection.V2.Arith.as_arith_expr @x0)
(FStar.Reflection.V2.Arith.as_arith_expr.fuel_instrumented MaxFuel
@x0))
 

:pattern ((FStar.Reflection.V2.Arith.as_arith_expr @x0))
:qid @fuel_correspondence_FStar.Reflection.V2.Arith.as_arith_expr.fuel_instrumented))

:named @fuel_correspondence_FStar.Reflection.V2.Arith.as_arith_expr.fuel_instrumented))

; </end encoding FStar.Reflection.V2.Arith.as_arith_expr>


; <Skipped />


; <Skipped FStar.Reflection.V2.Arith.is_arith_expr/>


; <Start encoding FStar.Reflection.V2.Arith.is_arith_expr>

(declare-fun FStar.Reflection.V2.Arith.is_arith_expr (Term) Term)

(declare-fun FStar.Reflection.V2.Arith.is_arith_expr@tok () Term)
(declare-fun Tm_refine_33ad4989b46871108f211d7665e62edc (Term) Term)
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name FStar.Reflection.V2.Arith.is_arith_expr; Namespace FStar.Reflection.V2.Arith
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.Tactics.V2.Builtins.term_to_string@tok))
:named @kick_partial_app_3b59a5d0ca58af1ae287cde711ac3c45))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name FStar.Reflection.V2.Arith.is_arith_expr; Namespace FStar.Reflection.V2.Arith
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.Reflection.V2.Arith.lift@tok))
:named @kick_partial_app_7b4f645db0c2f8e467a6f1b0f333891f))
;;;;;;;;;;;;;;;;s: Prims.string -> FStar.Reflection.V2.Arith.tm FStar.Reflection.V2.Arith.expr
(declare-fun Tm_arrow_192b7c2bf17d16a997b38898017f225e () Term)
(declare-fun Tm_abs_e70b645c7ab999c173a0a533f4c4825d () Term)
;;;;;;;;;;;;;;;;a: FStar.Reflection.V2.Arith.expr -> FStar.Reflection.V2.Arith.tm FStar.Reflection.V2.Arith.expr
(declare-fun Tm_arrow_0e5da6dd7208866503a4a0b2f026d3fd () Term)
(declare-fun Tm_abs_b6ee63b1fb2abef2e39521fd3fe59d4a () Term)

; </end encoding FStar.Reflection.V2.Arith.is_arith_expr>


; <Skipped FStar.Reflection.V2.Arith.is_arith_prop/>


; <Start encoding FStar.Reflection.V2.Arith.is_arith_prop>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Arith.is_arith_prop (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Arith.is_arith_prop@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.is_arith_prop>


; <Start encoding FStar.Reflection.V2.Arith.run_tm>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Reflection.V2.Arith.run_tm (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Reflection.V2.Arith.run_tm@tok () Term)

; </end encoding FStar.Reflection.V2.Arith.run_tm>


; <Start encoding FStar.Reflection.V2.Arith.expr_to_string>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Arith.expr_to_string.fuel_instrumented (Fuel Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Arith.expr_to_string.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Arith.expr_to_string (Term) Term)
(declare-fun FStar.Reflection.V2.Arith.expr_to_string@tok () Term)
;;;;;;;;;;;;;;;;e: FStar.Reflection.V2.Arith.expr -> Prims.string
(declare-fun Tm_arrow_d072e2c1f52c7e3c511c5cca2c8d2d1e () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Reflection.V2.Arith.expr_to_string; Namespace FStar.Reflection.V2.Arith
(assert (! 
;; def=FStar.Reflection.V2.Arith.fst(216,8-216,22); use=FStar.Reflection.V2.Arith.fst(216,8-216,22)
(forall ((@u0 Fuel) (@x1 Term))
 (! (= (FStar.Reflection.V2.Arith.expr_to_string.fuel_instrumented (SFuel @u0)
@x1)
(FStar.Reflection.V2.Arith.expr_to_string.fuel_instrumented ZFuel
@x1))
 

:pattern ((FStar.Reflection.V2.Arith.expr_to_string.fuel_instrumented (SFuel @u0)
@x1))
:qid @fuel_irrelevance_FStar.Reflection.V2.Arith.expr_to_string.fuel_instrumented))

:named @fuel_irrelevance_FStar.Reflection.V2.Arith.expr_to_string.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Reflection.V2.Arith.expr_to_string; Namespace FStar.Reflection.V2.Arith
(assert (! 
;; def=FStar.Reflection.V2.Arith.fst(216,8-216,22); use=FStar.Reflection.V2.Arith.fst(216,8-216,22)
(forall ((@x0 Term))
 (! (= (FStar.Reflection.V2.Arith.expr_to_string @x0)
(FStar.Reflection.V2.Arith.expr_to_string.fuel_instrumented MaxFuel
@x0))
 

:pattern ((FStar.Reflection.V2.Arith.expr_to_string @x0))
:qid @fuel_correspondence_FStar.Reflection.V2.Arith.expr_to_string.fuel_instrumented))

:named @fuel_correspondence_FStar.Reflection.V2.Arith.expr_to_string.fuel_instrumented))

; </end encoding FStar.Reflection.V2.Arith.expr_to_string>


; <Start encoding FStar.Reflection.V2.Arith.compare_expr>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Reflection.V2.Arith.compare_expr.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Reflection.V2.Arith.compare_expr.fuel_instrumented_token () Term)
(declare-fun FStar.Reflection.V2.Arith.compare_expr (Term Term) Term)
(declare-fun FStar.Reflection.V2.Arith.compare_expr@tok () Term)

(declare-fun Tm_abs_29456a62b6a5a14381465aaa26534ee1 (Fuel Term) Term)

(declare-fun Tm_abs_91c959257275174916b352ccf76d8e76 (Fuel Term) Term)

(declare-fun Tm_abs_a8290fc9c943501a910886dfd4e2dd1f (Fuel Term) Term)
;;;;;;;;;;;;;;;;e1: FStar.Reflection.V2.Arith.expr -> e2: FStar.Reflection.V2.Arith.expr -> FStar.Order.order
(declare-fun Tm_arrow_21de72127731fffff76728cdcd56fd1a () Term)
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.Reflection.V2.Arith.compare_expr; Namespace FStar.Reflection.V2.Arith
(assert (! 
;; def=FStar.Reflection.V2.Arith.fst(236,8-236,20); use=FStar.Reflection.V2.Arith.fst(236,8-236,20)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.Reflection.V2.Arith.compare_expr.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.Reflection.V2.Arith.compare_expr.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.Reflection.V2.Arith.compare_expr.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.Reflection.V2.Arith.compare_expr.fuel_instrumented))

:named @fuel_irrelevance_FStar.Reflection.V2.Arith.compare_expr.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.Reflection.V2.Arith.compare_expr; Namespace FStar.Reflection.V2.Arith
(assert (! 
;; def=FStar.Reflection.V2.Arith.fst(236,8-236,20); use=FStar.Reflection.V2.Arith.fst(236,8-236,20)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Reflection.V2.Arith.compare_expr @x0
@x1)
(FStar.Reflection.V2.Arith.compare_expr.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.Reflection.V2.Arith.compare_expr @x0
@x1))
:qid @fuel_correspondence_FStar.Reflection.V2.Arith.compare_expr.fuel_instrumented))

:named @fuel_correspondence_FStar.Reflection.V2.Arith.compare_expr.fuel_instrumented))

; </end encoding FStar.Reflection.V2.Arith.compare_expr>


; End Externals for module FStar.Reflection.V2.Arith


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End module FStar.Reflection.V2.Arith (949 decls; total size 72521)

;;; Start module FStar.Tactics.BV

; Externals for module FStar.Tactics.BV


; <Skipped FStar.Tactics.BV.cong_bvand/>


; <Start encoding FStar.Tactics.BV.cong_bvand>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.BV.cong_bvand (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.BV.cong_bvand@tok () Term)

; </end encoding FStar.Tactics.BV.cong_bvand>


; <Skipped FStar.Tactics.BV.cong_bvxor/>


; <Start encoding FStar.Tactics.BV.cong_bvxor>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.BV.cong_bvxor (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.BV.cong_bvxor@tok () Term)

; </end encoding FStar.Tactics.BV.cong_bvxor>


; <Skipped FStar.Tactics.BV.cong_bvor/>


; <Start encoding FStar.Tactics.BV.cong_bvor>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.BV.cong_bvor (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.BV.cong_bvor@tok () Term)

; </end encoding FStar.Tactics.BV.cong_bvor>


; <Skipped FStar.Tactics.BV.cong_bvshl/>


; <Start encoding FStar.Tactics.BV.cong_bvshl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.BV.cong_bvshl (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.BV.cong_bvshl@tok () Term)

; </end encoding FStar.Tactics.BV.cong_bvshl>


; <Skipped FStar.Tactics.BV.cong_bvshr/>


; <Start encoding FStar.Tactics.BV.cong_bvshr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.BV.cong_bvshr (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.BV.cong_bvshr@tok () Term)

; </end encoding FStar.Tactics.BV.cong_bvshr>


; <Skipped FStar.Tactics.BV.cong_bvdiv/>


; <Start encoding FStar.Tactics.BV.cong_bvdiv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.BV.cong_bvdiv (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.BV.cong_bvdiv@tok () Term)

; </end encoding FStar.Tactics.BV.cong_bvdiv>


; <Skipped FStar.Tactics.BV.cong_bvmod/>


; <Start encoding FStar.Tactics.BV.cong_bvmod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.BV.cong_bvmod (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.BV.cong_bvmod@tok () Term)

; </end encoding FStar.Tactics.BV.cong_bvmod>


; <Skipped FStar.Tactics.BV.cong_bvmul/>


; <Start encoding FStar.Tactics.BV.cong_bvmul>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.BV.cong_bvmul (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.BV.cong_bvmul@tok () Term)

; </end encoding FStar.Tactics.BV.cong_bvmul>


; <Skipped FStar.Tactics.BV.cong_bvadd/>


; <Start encoding FStar.Tactics.BV.cong_bvadd>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.BV.cong_bvadd (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.BV.cong_bvadd@tok () Term)

; </end encoding FStar.Tactics.BV.cong_bvadd>


; <Skipped FStar.Tactics.BV.cong_bvsub/>


; <Start encoding FStar.Tactics.BV.cong_bvsub>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.BV.cong_bvsub (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.BV.cong_bvsub@tok () Term)

; </end encoding FStar.Tactics.BV.cong_bvsub>


; <Skipped FStar.Tactics.BV.eq_to_bv/>


; <Start encoding FStar.Tactics.BV.eq_to_bv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.BV.eq_to_bv (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.BV.eq_to_bv@tok () Term)

; </end encoding FStar.Tactics.BV.eq_to_bv>


; <Skipped FStar.Tactics.BV.lt_to_bv/>


; <Start encoding FStar.Tactics.BV.lt_to_bv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.BV.lt_to_bv (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.BV.lt_to_bv@tok () Term)

; </end encoding FStar.Tactics.BV.lt_to_bv>


; <Skipped FStar.Tactics.BV.trans/>


; <Start encoding FStar.Tactics.BV.trans>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.BV.trans (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.BV.trans@tok () Term)

; </end encoding FStar.Tactics.BV.trans>


; <Skipped FStar.Tactics.BV.trans_lt/>


; <Start encoding FStar.Tactics.BV.trans_lt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.BV.trans_lt (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.BV.trans_lt@tok () Term)

; </end encoding FStar.Tactics.BV.trans_lt>


; <Skipped FStar.Tactics.BV.trans_lt2/>


; <Start encoding FStar.Tactics.BV.trans_lt2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.BV.trans_lt2 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.BV.trans_lt2@tok () Term)

; </end encoding FStar.Tactics.BV.trans_lt2>


; <Start encoding FStar.Tactics.BV.arith_expr_to_bv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.BV.arith_expr_to_bv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.BV.arith_expr_to_bv@tok () Term)

; </end encoding FStar.Tactics.BV.arith_expr_to_bv>


; <Start encoding FStar.Tactics.BV.arith_to_bv_tac>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.BV.arith_to_bv_tac (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.BV.arith_to_bv_tac@tok () Term)

; </end encoding FStar.Tactics.BV.arith_to_bv_tac>


; <Start encoding FStar.Tactics.BV.bv_tac>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.BV.bv_tac (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.BV.bv_tac@tok () Term)

; </end encoding FStar.Tactics.BV.bv_tac>


; <Start encoding FStar.Tactics.BV.bv_tac_lt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.BV.bv_tac_lt (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.BV.bv_tac_lt@tok () Term)

; </end encoding FStar.Tactics.BV.bv_tac_lt>


; <Start encoding FStar.Tactics.BV.to_bv_tac>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Tactics.BV.to_bv_tac (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Tactics.BV.to_bv_tac@tok () Term)

; </end encoding FStar.Tactics.BV.to_bv_tac>


; End Externals for module FStar.Tactics.BV


; UNSAT CORE: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @query, b2t_def, bool_inversion, bool_typing, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_FStar.UInt.size, equation_FStar.UInt.uint_t, equation_FStar.UInt128.u32_32, equation_Prims.nat, equation_Prims.pos, int_inversion, int_typing, lemma_FStar.UInt.pow2_values, lemma_FStar.UInt.shift_left_value_lemma, primitive_Prims.op_Addition, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Modulus, primitive_Prims.op_Multiply, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5, refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5, refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec, typing_FStar.UInt128.u32_32, typing_FStar.UInt32.v, typing_FStar.UInt64.v

;;; End module FStar.Tactics.BV (98 decls; total size 8659)

; Internals for FStar.UInt128

(push)

; encoding sigelt n


; <Start encoding FStar.UInt128.n>

(declare-fun FStar.UInt128.n (Dummy_sort) Term)

; </end encoding FStar.UInt128.n>


; encoding sigelt 


; <Skipped />


; encoding sigelt 


; <Skipped />


; encoding sigelt 


; <Skipped />


; encoding sigelt carry_uint64


; <Start encoding FStar.UInt128.carry_uint64>

(declare-fun FStar.UInt128.carry_uint64 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt.uint_t 64 -> b: FStar.UInt.uint_t 64 -> FStar.UInt.uint_t 64
(declare-fun Tm_arrow_3f041ccfd023be2732189654e336e937 () Term)
(declare-fun FStar.UInt128.carry_uint64@tok () Term)

; </end encoding FStar.UInt128.carry_uint64>


; encoding sigelt carry_bv


; <Start encoding FStar.UInt128.carry_bv>

(declare-fun FStar.UInt128.carry_bv (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt.uint_t 64 -> b: FStar.UInt.uint_t 64 -> FStar.BV.bv_t 64
(declare-fun Tm_arrow_6b013e4654f233e25f13ac095832b777 () Term)
(declare-fun FStar.UInt128.carry_bv@tok () Term)

; <start constructor BoxBitVec64>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxBitVec64 ((_ BitVec 64)) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxBitVec64_proj_0 (Term) (_ BitVec 64))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxBitVec64 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
76)
(= __@x0
(BoxBitVec64 (BoxBitVec64_proj_0 __@x0)))))

; </end constructor BoxBitVec64>













; </end encoding FStar.UInt128.carry_bv>


; encoding sigelt carry_uint64_ok


; <Start encoding FStar.UInt128.carry_uint64_ok>

(declare-fun FStar.UInt128.carry_uint64_ok (Term Term) Term)

(declare-fun Tm_refine_59a555c4865302c9db5fec676f8f3d4e (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt.uint_t 64 -> b: FStar.UInt.uint_t 64   -> Prims.squash (FStar.BV.int2bv (carry_uint64 a b) == carry_bv a b)
(declare-fun Tm_arrow_1eb68afd78e4a500818535458c7f2c94 () Term)
(declare-fun FStar.UInt128.carry_uint64_ok@tok () Term)



; </end encoding FStar.UInt128.carry_uint64_ok>


; encoding sigelt fact1


; <Start encoding FStar.UInt128.fact1>

(declare-fun FStar.UInt128.fact1 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt.uint_t 64 -> b: FStar.UInt.uint_t 64 -> Prims.logical
(declare-fun Tm_arrow_ff1cbadb229e90f1eb715280e420e9c2 () Term)
(declare-fun FStar.UInt128.fact1@tok () Term)



; </end encoding FStar.UInt128.fact1>


; encoding sigelt fact0


; <Start encoding FStar.UInt128.fact0>

(declare-fun FStar.UInt128.fact0 (Term Term) Term)

(declare-fun FStar.UInt128.fact0@tok () Term)



; </end encoding FStar.UInt128.fact0>


; encoding sigelt lem_ult_1


; <Start encoding FStar.UInt128.lem_ult_1>

(declare-fun FStar.UInt128.lem_ult_1 (Term Term) Term)



(declare-fun Tm_refine_52e9f2ff4fe5474cf5286356ea08cf88 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt.uint_t 64 -> b: FStar.UInt.uint_t 64   -> Prims.squash (FStar.BV.bvult (FStar.BV.int2bv a) (FStar.BV.int2bv b) ==> fact1 a b)
(declare-fun Tm_arrow_06f72d1506b5f1e07db75fa6a577f3d5 () Term)
(declare-fun FStar.UInt128.lem_ult_1@tok () Term)





; </end encoding FStar.UInt128.lem_ult_1>


; encoding sigelt lem_ult_2


; <Start encoding FStar.UInt128.lem_ult_2>

(declare-fun FStar.UInt128.lem_ult_2 (Term Term) Term)



(declare-fun Tm_refine_a100d202178f112d8791416979bd284b (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt.uint_t 64 -> b: FStar.UInt.uint_t 64   -> Prims.squash (Prims.op_Negation (FStar.BV.bvult (FStar.BV.int2bv a) (FStar.BV.int2bv b)) ==>         fact0 a b)
(declare-fun Tm_arrow_078b038129dc60f50678ba42cb9334fe () Term)
(declare-fun FStar.UInt128.lem_ult_2@tok () Term)





; </end encoding FStar.UInt128.lem_ult_2>


; encoding sigelt int2bv_ult


; <Start encoding FStar.UInt128.int2bv_ult>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.int2bv_ult (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.int2bv_ult@tok () Term)

; </end encoding FStar.UInt128.int2bv_ult>


; encoding sigelt lem_ult


; <Start encoding FStar.UInt128.lem_ult>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.lem_ult (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.lem_ult@tok () Term)

; </end encoding FStar.UInt128.lem_ult>


; encoding sigelt constant_time_carry


; <Start encoding FStar.UInt128.constant_time_carry>

(declare-fun FStar.UInt128.constant_time_carry (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt64.t -> b: FStar.UInt64.t -> FStar.UInt64.t
(declare-fun Tm_arrow_45639f5cc9940c7ea6f46775eb9a055b () Term)
(declare-fun FStar.UInt128.constant_time_carry@tok () Term)

; </end encoding FStar.UInt128.constant_time_carry>


; encoding sigelt carry_uint64_equiv


; <Start encoding FStar.UInt128.carry_uint64_equiv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.carry_uint64_equiv (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.carry_uint64_equiv@tok () Term)

; </end encoding FStar.UInt128.carry_uint64_equiv>


; encoding sigelt uint128, Mkuint128


; <Start encoding >

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.UInt128.uint128 () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.UInt128.Mkuint128 (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.UInt128.Mkuint128_low (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.UInt128.Mkuint128_high (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Mkuint128
(declare-fun FStar.UInt128.Mkuint128@tok () Term)
;;;;;;;;;;;;;;;;low: FStar.UInt64.t -> high: FStar.UInt64.t -> uint128
(declare-fun Tm_arrow_4e8b3fd4c06e2aa86eb0c32aa7fd18b7 () Term)

; <Start encoding FStar.UInt128.uint128>


; <start constructor FStar.UInt128.uint128>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.UInt128.uint128 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
158)
(= __@x0
FStar.UInt128.uint128)))

; </end constructor FStar.UInt128.uint128>


; </end encoding FStar.UInt128.uint128>


; <Start encoding FStar.UInt128.Mkuint128>


; <start constructor FStar.UInt128.Mkuint128>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.UInt128.Mkuint128 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
164)
(= __@x0
(FStar.UInt128.Mkuint128 (FStar.UInt128.Mkuint128_low __@x0)
(FStar.UInt128.Mkuint128_high __@x0)))))

; </end constructor FStar.UInt128.Mkuint128>


; </end encoding FStar.UInt128.Mkuint128>


; </end encoding >


; encoding sigelt uint128__uu___haseq


; <Start encoding FStar.UInt128.uint128__uu___haseq>


; </end encoding FStar.UInt128.uint128__uu___haseq>


; encoding sigelt __proj__Mkuint128__item__low


; <Start encoding FStar.UInt128.__proj__Mkuint128__item__low>

(declare-fun FStar.UInt128.__proj__Mkuint128__item__low (Term) Term)
;;;;;;;;;;;;;;;;projectee: uint128 -> FStar.UInt64.t
(declare-fun Tm_arrow_f59933fcc317acdd9717c900dcf228d1 () Term)
(declare-fun FStar.UInt128.__proj__Mkuint128__item__low@tok () Term)

; </end encoding FStar.UInt128.__proj__Mkuint128__item__low>


; encoding sigelt __proj__Mkuint128__item__low


; <Skipped FStar.UInt128.__proj__Mkuint128__item__low/>


; encoding sigelt __proj__Mkuint128__item__high


; <Start encoding FStar.UInt128.__proj__Mkuint128__item__high>

(declare-fun FStar.UInt128.__proj__Mkuint128__item__high (Term) Term)

(declare-fun FStar.UInt128.__proj__Mkuint128__item__high@tok () Term)

; </end encoding FStar.UInt128.__proj__Mkuint128__item__high>


; encoding sigelt __proj__Mkuint128__item__high


; <Skipped FStar.UInt128.__proj__Mkuint128__item__high/>


; encoding sigelt t


; <Skipped FStar.UInt128.t/>


; encoding sigelt t


; <Start encoding FStar.UInt128.t>

(declare-fun FStar.UInt128.t (Dummy_sort) Term)



; </end encoding FStar.UInt128.t>


; encoding sigelt uu___62


; <Start encoding FStar.UInt128.uu___62>

(declare-fun FStar.UInt128.uu___62 () Term)

; </end encoding FStar.UInt128.uu___62>


; encoding sigelt uu___63


; <Start encoding FStar.UInt128.uu___63>

(declare-fun FStar.UInt128.uu___63 () Term)



; </end encoding FStar.UInt128.uu___63>


; encoding sigelt v


; <Skipped FStar.UInt128.v/>


; encoding sigelt v


; <Start encoding FStar.UInt128.v>

(declare-fun FStar.UInt128.v (Term) Term)
;;;;;;;;;;;;;;;;x: t -> FStar.UInt.uint_t n
(declare-fun Tm_arrow_1e0f5f336a391e0e3f222969a4e20082 () Term)
(declare-fun FStar.UInt128.v@tok () Term)

; </end encoding FStar.UInt128.v>


; encoding sigelt div_mod


; <Start encoding FStar.UInt128.div_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.div_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.div_mod@tok () Term)

; </end encoding FStar.UInt128.div_mod>


; encoding sigelt uint_to_t


; <Skipped FStar.UInt128.uint_to_t/>


; encoding sigelt uint_to_t


; <Start encoding FStar.UInt128.uint_to_t>

(declare-fun FStar.UInt128.uint_to_t (Term) Term)
(declare-fun Tm_refine_5e8afe5488805949b2c6333b5c9e0e16 (Term) Term)
;;;;;;;;;;;;;;;;x: FStar.UInt.uint_t n -> Prims.Pure t
(declare-fun Tm_arrow_6add220f3aefee51a2a01f25e88b3a4d () Term)
(declare-fun FStar.UInt128.uint_to_t@tok () Term)


; </end encoding FStar.UInt128.uint_to_t>


; encoding sigelt v_inj


; <Skipped FStar.UInt128.v_inj/>


; encoding sigelt v_inj


; <Start encoding FStar.UInt128.v_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.v_inj (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.v_inj@tok () Term)

; </end encoding FStar.UInt128.v_inj>


; encoding sigelt constant_time_carry_ok


; <Start encoding FStar.UInt128.constant_time_carry_ok>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.constant_time_carry_ok (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.constant_time_carry_ok@tok () Term)

; </end encoding FStar.UInt128.constant_time_carry_ok>


; encoding sigelt carry


; <Start encoding FStar.UInt128.carry>

(declare-fun FStar.UInt128.carry (Term Term) Term)
(declare-fun Tm_refine_6fc6574f4d2135967bbb67619a2c5f95 (Term Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt64.t -> b: FStar.UInt64.t -> Prims.Pure FStar.UInt64.t
(declare-fun Tm_arrow_b10859ab47884af39c791ad14c1dba45 () Term)
(declare-fun FStar.UInt128.carry@tok () Term)


; </end encoding FStar.UInt128.carry>


; encoding sigelt carry_sum_ok


; <Start encoding FStar.UInt128.carry_sum_ok>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.carry_sum_ok (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.carry_sum_ok@tok () Term)

; </end encoding FStar.UInt128.carry_sum_ok>


; encoding sigelt add


; <Skipped FStar.UInt128.add/>


; encoding sigelt add


; <Start encoding FStar.UInt128.add>

(declare-fun FStar.UInt128.add (Term Term) Term)
(declare-fun Tm_refine_200045f8615f23a9b7995d72ac63d949 (Term Term) Term)
;;;;;;;;;;;;;;;;a: t -> b: t -> Prims.Pure t
(declare-fun Tm_arrow_fb9425641edccbf43d8d0ff9038e9a40 () Term)
(declare-fun FStar.UInt128.add@tok () Term)


; </end encoding FStar.UInt128.add>


; encoding sigelt add_underspec


; <Skipped FStar.UInt128.add_underspec/>


; encoding sigelt add_underspec


; <Start encoding FStar.UInt128.add_underspec>

(declare-fun FStar.UInt128.add_underspec (Term Term) Term)
(declare-fun Tm_refine_f0a188da54db4dcbcbfe1dd04a17a348 (Term Term) Term)
;;;;;;;;;;;;;;;;a: t -> b: t -> Prims.Pure t
(declare-fun Tm_arrow_a6d7d16b168014a515741d53de84e0e9 () Term)
(declare-fun FStar.UInt128.add_underspec@tok () Term)


; </end encoding FStar.UInt128.add_underspec>


; encoding sigelt mod_mod


; <Skipped FStar.UInt128.mod_mod/>


; encoding sigelt mod_mod


; <Start encoding FStar.UInt128.mod_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.mod_mod (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.mod_mod@tok () Term)

; </end encoding FStar.UInt128.mod_mod>


; encoding sigelt mod_spec


; <Start encoding FStar.UInt128.mod_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.mod_spec (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.mod_spec@tok () Term)

; </end encoding FStar.UInt128.mod_spec>


; encoding sigelt div_product


; <Skipped FStar.UInt128.div_product/>


; encoding sigelt div_product


; <Start encoding FStar.UInt128.div_product>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.div_product (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.div_product@tok () Term)

; </end encoding FStar.UInt128.div_product>


; encoding sigelt mul_div_cancel


; <Skipped FStar.UInt128.mul_div_cancel/>


; encoding sigelt mul_div_cancel


; <Start encoding FStar.UInt128.mul_div_cancel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.mul_div_cancel (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.mul_div_cancel@tok () Term)

; </end encoding FStar.UInt128.mul_div_cancel>


; encoding sigelt mod_mul


; <Skipped FStar.UInt128.mod_mul/>


; encoding sigelt mod_mul


; <Start encoding FStar.UInt128.mod_mul>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.mod_mul (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.mod_mul@tok () Term)

; </end encoding FStar.UInt128.mod_mul>


; encoding sigelt mod_spec_rew_n


; <Start encoding FStar.UInt128.mod_spec_rew_n>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.mod_spec_rew_n (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.mod_spec_rew_n@tok () Term)

; </end encoding FStar.UInt128.mod_spec_rew_n>


; encoding sigelt mod_add


; <Skipped FStar.UInt128.mod_add/>


; encoding sigelt mod_add


; <Start encoding FStar.UInt128.mod_add>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.mod_add (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.mod_add@tok () Term)

; </end encoding FStar.UInt128.mod_add>


; encoding sigelt mod_add_small


; <Skipped FStar.UInt128.mod_add_small/>


; encoding sigelt mod_add_small


; <Start encoding FStar.UInt128.mod_add_small>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.mod_add_small (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.mod_add_small@tok () Term)

; </end encoding FStar.UInt128.mod_add_small>


; encoding sigelt 


; <Skipped />


; encoding sigelt add_mod


; <Skipped FStar.UInt128.add_mod/>


; encoding sigelt add_mod


; <Start encoding FStar.UInt128.add_mod>

(declare-fun FStar.UInt128.add_mod (Term Term) Term)
(declare-fun Tm_refine_0b9eeff4a539d64421bc9cdf6ccef56c (Term Term) Term)
;;;;;;;;;;;;;;;;a: t -> b: t -> Prims.Pure t
(declare-fun Tm_arrow_7a8c80680009cc49cfc9cd9ec75a4263 () Term)
(declare-fun FStar.UInt128.add_mod@tok () Term)


; </end encoding FStar.UInt128.add_mod>


; encoding sigelt 


; <Skipped />


; encoding sigelt sub


; <Skipped FStar.UInt128.sub/>


; encoding sigelt sub


; <Start encoding FStar.UInt128.sub>

(declare-fun FStar.UInt128.sub (Term Term) Term)
(declare-fun Tm_refine_f570d27ada9e8b417d745c2ba97c9454 (Term Term) Term)
;;;;;;;;;;;;;;;;a: t -> b: t -> Prims.Pure t
(declare-fun Tm_arrow_66edeed80e2b43fa22b95ab3137c9c4c () Term)
(declare-fun FStar.UInt128.sub@tok () Term)


; </end encoding FStar.UInt128.sub>


; encoding sigelt sub_underspec


; <Skipped FStar.UInt128.sub_underspec/>


; encoding sigelt sub_underspec


; <Start encoding FStar.UInt128.sub_underspec>

(declare-fun FStar.UInt128.sub_underspec (Term Term) Term)
(declare-fun Tm_refine_783bc70be359dac929d8f93ad2fd48cf (Term Term) Term)
;;;;;;;;;;;;;;;;a: t -> b: t -> Prims.Pure t
(declare-fun Tm_arrow_1649416594e0f923a0b8de592081403d () Term)
(declare-fun FStar.UInt128.sub_underspec@tok () Term)


; </end encoding FStar.UInt128.sub_underspec>


; encoding sigelt sub_mod_impl


; <Start encoding FStar.UInt128.sub_mod_impl>

(declare-fun FStar.UInt128.sub_mod_impl (Term Term) Term)
;;;;;;;;;;;;;;;;a: t -> b: t -> t
(declare-fun Tm_arrow_0f234335650f22686a949d94186d0934 () Term)
(declare-fun FStar.UInt128.sub_mod_impl@tok () Term)

; </end encoding FStar.UInt128.sub_mod_impl>


; encoding sigelt 


; <Skipped />


; encoding sigelt sub_mod_pos_ok


; <Start encoding FStar.UInt128.sub_mod_pos_ok>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.sub_mod_pos_ok (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.sub_mod_pos_ok@tok () Term)

; </end encoding FStar.UInt128.sub_mod_pos_ok>


; encoding sigelt 


; <Skipped />


; encoding sigelt u64_diff_wrap


; <Skipped FStar.UInt128.u64_diff_wrap/>


; encoding sigelt u64_diff_wrap


; <Start encoding FStar.UInt128.u64_diff_wrap>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.u64_diff_wrap (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.u64_diff_wrap@tok () Term)

; </end encoding FStar.UInt128.u64_diff_wrap>


; encoding sigelt sub_mod_wrap1_ok


; <Skipped FStar.UInt128.sub_mod_wrap1_ok/>


; encoding sigelt sub_mod_wrap1_ok


; <Start encoding FStar.UInt128.sub_mod_wrap1_ok>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.sub_mod_wrap1_ok (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.sub_mod_wrap1_ok@tok () Term)

; </end encoding FStar.UInt128.sub_mod_wrap1_ok>


; encoding sigelt sum_lt


; <Start encoding FStar.UInt128.sum_lt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.sum_lt (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.sum_lt@tok () Term)

; </end encoding FStar.UInt128.sum_lt>


; encoding sigelt sub_mod_wrap2_ok


; <Start encoding FStar.UInt128.sub_mod_wrap2_ok>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.sub_mod_wrap2_ok (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.sub_mod_wrap2_ok@tok () Term)

; </end encoding FStar.UInt128.sub_mod_wrap2_ok>


; encoding sigelt sub_mod_wrap_ok


; <Start encoding FStar.UInt128.sub_mod_wrap_ok>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.sub_mod_wrap_ok (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.sub_mod_wrap_ok@tok () Term)

; </end encoding FStar.UInt128.sub_mod_wrap_ok>


; encoding sigelt 


; <Skipped />


; encoding sigelt sub_mod


; <Skipped FStar.UInt128.sub_mod/>


; encoding sigelt sub_mod


; <Start encoding FStar.UInt128.sub_mod>

(declare-fun FStar.UInt128.sub_mod (Term Term) Term)
(declare-fun Tm_refine_95b2f31bb163e95302627d5143c54d2a (Term Term) Term)
;;;;;;;;;;;;;;;;a: t -> b: t -> Prims.Pure t
(declare-fun Tm_arrow_5f5301d7f0dab1d6008a26736df4cf49 () Term)
(declare-fun FStar.UInt128.sub_mod@tok () Term)


; </end encoding FStar.UInt128.sub_mod>


; encoding sigelt 


; <Skipped />


; encoding sigelt shift_bound


; <Skipped FStar.UInt128.shift_bound/>


; encoding sigelt shift_bound


; <Start encoding FStar.UInt128.shift_bound>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.shift_bound (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.shift_bound@tok () Term)

; </end encoding FStar.UInt128.shift_bound>


; encoding sigelt append_uint


; <Skipped FStar.UInt128.append_uint/>


; encoding sigelt append_uint


; <Start encoding FStar.UInt128.append_uint>

(declare-fun FStar.UInt128.append_uint (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;num1: FStar.UInt.uint_t n1 -> num2: FStar.UInt.uint_t n2 -> FStar.UInt.uint_t (n1 + n2)
(declare-fun Tm_arrow_dc9cf7ac1573a88d53bc1eb0c31c761a () Term)
(declare-fun FStar.UInt128.append_uint@tok () Term)

; </end encoding FStar.UInt128.append_uint>


; encoding sigelt to_vec_append


; <Skipped FStar.UInt128.to_vec_append/>


; encoding sigelt to_vec_append


; <Start encoding FStar.UInt128.to_vec_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.to_vec_append (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.to_vec_append@tok () Term)

; </end encoding FStar.UInt128.to_vec_append>


; encoding sigelt vec128


; <Start encoding FStar.UInt128.vec128>

(declare-fun FStar.UInt128.vec128 (Term) Term)
;;;;;;;;;;;;;;;;a: t -> FStar.BitVector.bv_t 128
(declare-fun Tm_arrow_b9c52983505b389142af1dd63cca4650 () Term)
(declare-fun FStar.UInt128.vec128@tok () Term)

; </end encoding FStar.UInt128.vec128>


; encoding sigelt vec64


; <Start encoding FStar.UInt128.vec64>

(declare-fun FStar.UInt128.vec64 (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt64.t -> FStar.BitVector.bv_t 64
(declare-fun Tm_arrow_25ac2d9df5c97ce9067e36a3f520b087 () Term)
(declare-fun FStar.UInt128.vec64@tok () Term)

; </end encoding FStar.UInt128.vec64>


; encoding sigelt to_vec_v


; <Start encoding FStar.UInt128.to_vec_v>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.to_vec_v (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.to_vec_v@tok () Term)

; </end encoding FStar.UInt128.to_vec_v>


; encoding sigelt logand_vec_append


; <Skipped FStar.UInt128.logand_vec_append/>


; encoding sigelt logand_vec_append


; <Start encoding FStar.UInt128.logand_vec_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.logand_vec_append (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.logand_vec_append@tok () Term)

; </end encoding FStar.UInt128.logand_vec_append>


; encoding sigelt logand


; <Skipped FStar.UInt128.logand/>


; encoding sigelt logand


; <Start encoding FStar.UInt128.logand>

(declare-fun FStar.UInt128.logand (Term Term) Term)
(declare-fun Tm_refine_6377d26335dc60c35078980c34caecb6 (Term Term) Term)
;;;;;;;;;;;;;;;;a: t -> b: t -> Prims.Pure t
(declare-fun Tm_arrow_77ff2c671bb0c2c1fcc14fbf10eeb65b () Term)
(declare-fun FStar.UInt128.logand@tok () Term)


; </end encoding FStar.UInt128.logand>


; encoding sigelt logxor_vec_append


; <Skipped FStar.UInt128.logxor_vec_append/>


; encoding sigelt logxor_vec_append


; <Start encoding FStar.UInt128.logxor_vec_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.logxor_vec_append (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.logxor_vec_append@tok () Term)

; </end encoding FStar.UInt128.logxor_vec_append>


; encoding sigelt logxor


; <Skipped FStar.UInt128.logxor/>


; encoding sigelt logxor


; <Start encoding FStar.UInt128.logxor>

(declare-fun FStar.UInt128.logxor (Term Term) Term)
(declare-fun Tm_refine_1e2a54f659380dff04459b91e600441e (Term Term) Term)
;;;;;;;;;;;;;;;;a: t -> b: t -> Prims.Pure t
(declare-fun Tm_arrow_7f84de3be03d468fa2ad17457d9f4a18 () Term)
(declare-fun FStar.UInt128.logxor@tok () Term)


; </end encoding FStar.UInt128.logxor>


; encoding sigelt logor_vec_append


; <Skipped FStar.UInt128.logor_vec_append/>


; encoding sigelt logor_vec_append


; <Start encoding FStar.UInt128.logor_vec_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.logor_vec_append (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.logor_vec_append@tok () Term)

; </end encoding FStar.UInt128.logor_vec_append>


; encoding sigelt logor


; <Skipped FStar.UInt128.logor/>


; encoding sigelt logor


; <Start encoding FStar.UInt128.logor>

(declare-fun FStar.UInt128.logor (Term Term) Term)
(declare-fun Tm_refine_be6bb0b9b6f3f07f3a5bb3ae3b56ec6a (Term Term) Term)
;;;;;;;;;;;;;;;;a: t -> b: t -> Prims.Pure t
(declare-fun Tm_arrow_98d3158ebc9bf0ad30b0a1e6ea069757 () Term)
(declare-fun FStar.UInt128.logor@tok () Term)


; </end encoding FStar.UInt128.logor>


; encoding sigelt lognot_vec_append


; <Skipped FStar.UInt128.lognot_vec_append/>


; encoding sigelt lognot_vec_append


; <Start encoding FStar.UInt128.lognot_vec_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.lognot_vec_append (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.lognot_vec_append@tok () Term)

; </end encoding FStar.UInt128.lognot_vec_append>


; encoding sigelt lognot


; <Skipped FStar.UInt128.lognot/>


; encoding sigelt lognot


; <Start encoding FStar.UInt128.lognot>

(declare-fun FStar.UInt128.lognot (Term) Term)
(declare-fun Tm_refine_1512b534c5a3f7ce35a7cbe610648d54 (Term) Term)
;;;;;;;;;;;;;;;;a: t -> Prims.Pure t
(declare-fun Tm_arrow_a392c4cff94318eebb1d118180d500d5 () Term)
(declare-fun FStar.UInt128.lognot@tok () Term)


; </end encoding FStar.UInt128.lognot>


; encoding sigelt __uint_to_t


; <Start encoding FStar.UInt128.__uint_to_t>

(declare-fun FStar.UInt128.__uint_to_t (Term) Term)
;;;;;;;;;;;;;;;;x: Prims.int -> t
(declare-fun Tm_arrow_631f4d97ec7ab749f44ac6b2cdfdd773 () Term)
(declare-fun FStar.UInt128.__uint_to_t@tok () Term)

; </end encoding FStar.UInt128.__uint_to_t>


; encoding sigelt mod_mul_cancel


; <Start encoding FStar.UInt128.mod_mul_cancel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.mod_mul_cancel (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.mod_mul_cancel@tok () Term)

; </end encoding FStar.UInt128.mod_mul_cancel>


; encoding sigelt shift_past_mod


; <Start encoding FStar.UInt128.shift_past_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.shift_past_mod (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.shift_past_mod@tok () Term)

; </end encoding FStar.UInt128.shift_past_mod>


; encoding sigelt mod_double


; <Skipped FStar.UInt128.mod_double/>


; encoding sigelt mod_double


; <Start encoding FStar.UInt128.mod_double>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.mod_double (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.mod_double@tok () Term)

; </end encoding FStar.UInt128.mod_double>


; encoding sigelt shift_left_large_val


; <Start encoding FStar.UInt128.shift_left_large_val>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.shift_left_large_val (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.shift_left_large_val@tok () Term)

; </end encoding FStar.UInt128.shift_left_large_val>


; encoding sigelt 


; <Skipped />


; encoding sigelt shift_left_large_lemma


; <Start encoding FStar.UInt128.shift_left_large_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.shift_left_large_lemma (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.shift_left_large_lemma@tok () Term)

; </end encoding FStar.UInt128.shift_left_large_lemma>


; encoding sigelt 


; <Skipped />


; encoding sigelt shift_left_large_lemma_t


; <Skipped FStar.UInt128.shift_left_large_lemma_t/>


; encoding sigelt shift_left_large_lemma_t


; <Start encoding FStar.UInt128.shift_left_large_lemma_t>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.shift_left_large_lemma_t (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.shift_left_large_lemma_t@tok () Term)

; </end encoding FStar.UInt128.shift_left_large_lemma_t>


; encoding sigelt u32_64


; <Start encoding FStar.UInt128.u32_64>

(declare-fun FStar.UInt128.u32_64 (Dummy_sort) Term)
(declare-fun Tm_refine_e1d24c158e7f5ef1f6415367ebc96e66 () Term)


; </end encoding FStar.UInt128.u32_64>


; encoding sigelt div_pow2_diff


; <Skipped FStar.UInt128.div_pow2_diff/>


; encoding sigelt div_pow2_diff


; <Start encoding FStar.UInt128.div_pow2_diff>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.div_pow2_diff (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.div_pow2_diff@tok () Term)

; </end encoding FStar.UInt128.div_pow2_diff>


; encoding sigelt mod_mul_pow2


; <Skipped FStar.UInt128.mod_mul_pow2/>


; encoding sigelt mod_mul_pow2


; <Start encoding FStar.UInt128.mod_mul_pow2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.mod_mul_pow2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.mod_mul_pow2@tok () Term)

; </end encoding FStar.UInt128.mod_mul_pow2>


; encoding sigelt pow2_div_bound


; <Start encoding FStar.UInt128.pow2_div_bound>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.pow2_div_bound (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.pow2_div_bound@tok () Term)

; </end encoding FStar.UInt128.pow2_div_bound>


; encoding sigelt 


; <Skipped />


; encoding sigelt add_u64_shift_left


; <Start encoding FStar.UInt128.add_u64_shift_left>

(declare-fun Tm_refine_c7f8db3067cf5005a8929a372c0e9e9d () Term)
(declare-fun FStar.UInt128.add_u64_shift_left (Term Term Term) Term)

(declare-fun Tm_refine_7e6fd13b3a6bf215e6adc8e070e9b70b (Term Term Term) Term)
;;;;;;;;;;;;;;;;hi: FStar.UInt64.t -> lo: FStar.UInt64.t -> s: FStar.UInt32.t{FStar.UInt32.v s < 64}   -> Prims.Pure FStar.UInt64.t
(declare-fun Tm_arrow_8f7cdba61b4fe61e0dfbefd0ce853be7 () Term)
(declare-fun FStar.UInt128.add_u64_shift_left@tok () Term)



; </end encoding FStar.UInt128.add_u64_shift_left>


; encoding sigelt 


; <Skipped />


; encoding sigelt div_plus_multiple


; <Start encoding FStar.UInt128.div_plus_multiple>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.div_plus_multiple (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.div_plus_multiple@tok () Term)

; </end encoding FStar.UInt128.div_plus_multiple>


; encoding sigelt div_add_small


; <Skipped FStar.UInt128.div_add_small/>


; encoding sigelt div_add_small


; <Start encoding FStar.UInt128.div_add_small>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.div_add_small (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.div_add_small@tok () Term)

; </end encoding FStar.UInt128.div_add_small>


; encoding sigelt add_mod_small


; <Skipped FStar.UInt128.add_mod_small/>


; encoding sigelt add_mod_small


; <Start encoding FStar.UInt128.add_mod_small>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.add_mod_small (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.add_mod_small@tok () Term)

; </end encoding FStar.UInt128.add_mod_small>


; encoding sigelt mod_then_mul_64


; <Start encoding FStar.UInt128.mod_then_mul_64>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.mod_then_mul_64 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.mod_then_mul_64@tok () Term)

; </end encoding FStar.UInt128.mod_then_mul_64>


; encoding sigelt mul_abc_to_acb


; <Start encoding FStar.UInt128.mul_abc_to_acb>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.mul_abc_to_acb (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.mul_abc_to_acb@tok () Term)

; </end encoding FStar.UInt128.mul_abc_to_acb>


; encoding sigelt add_u64_shift_left_respec


; <Start encoding FStar.UInt128.add_u64_shift_left_respec>


(declare-fun FStar.UInt128.add_u64_shift_left_respec (Term Term Term) Term)

(declare-fun Tm_refine_c0289272adb5eded12fe46543452d952 (Term Term Term) Term)
;;;;;;;;;;;;;;;;hi: FStar.UInt64.t -> lo: FStar.UInt64.t -> s: FStar.UInt32.t{FStar.UInt32.v s < 64}   -> Prims.Pure FStar.UInt64.t
(declare-fun Tm_arrow_dc6f341fd74f201c5f481a253f408adc () Term)
(declare-fun FStar.UInt128.add_u64_shift_left_respec@tok () Term)



; </end encoding FStar.UInt128.add_u64_shift_left_respec>


; encoding sigelt add_mod_small'


; <Skipped FStar.UInt128.add_mod_small'/>


; encoding sigelt add_mod_small'


; <Start encoding FStar.UInt128.add_mod_small'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.add_mod_small_ (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.add_mod_small_@tok () Term)

; </end encoding FStar.UInt128.add_mod_small'>


; encoding sigelt 


; <Skipped />


; encoding sigelt shift_t_val


; <Start encoding FStar.UInt128.shift_t_val>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.shift_t_val (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.shift_t_val@tok () Term)

; </end encoding FStar.UInt128.shift_t_val>


; encoding sigelt 


; <Skipped />


; encoding sigelt mul_mod_bound


; <Skipped FStar.UInt128.mul_mod_bound/>


; encoding sigelt 


; <Skipped />


; encoding sigelt mul_mod_bound


; <Start encoding FStar.UInt128.mul_mod_bound>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.mul_mod_bound (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.mul_mod_bound@tok () Term)

; </end encoding FStar.UInt128.mul_mod_bound>


; encoding sigelt 


; <Skipped />


; encoding sigelt add_lt_le


; <Start encoding FStar.UInt128.add_lt_le>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.add_lt_le (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.add_lt_le@tok () Term)

; </end encoding FStar.UInt128.add_lt_le>


; encoding sigelt u64_pow2_bound


; <Start encoding FStar.UInt128.u64_pow2_bound>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.u64_pow2_bound (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.u64_pow2_bound@tok () Term)

; </end encoding FStar.UInt128.u64_pow2_bound>


; encoding sigelt shift_t_mod_val'


; <Start encoding FStar.UInt128.shift_t_mod_val'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.shift_t_mod_val_ (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.shift_t_mod_val_@tok () Term)

; </end encoding FStar.UInt128.shift_t_mod_val'>


; encoding sigelt shift_t_mod_val


; <Start encoding FStar.UInt128.shift_t_mod_val>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.shift_t_mod_val (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.shift_t_mod_val@tok () Term)

; </end encoding FStar.UInt128.shift_t_mod_val>


; encoding sigelt shift_left_small


; <Start encoding FStar.UInt128.shift_left_small>

(declare-fun FStar.UInt128.shift_left_small (Term Term) Term)
(declare-fun Tm_refine_b58359439b5710e70cb2c2ec5631c1eb (Term Term) Term)
;;;;;;;;;;;;;;;;a: t -> s: FStar.UInt32.t -> Prims.Pure t
(declare-fun Tm_arrow_ba357d179858e4b7732ce55e85fbdebf () Term)
(declare-fun FStar.UInt128.shift_left_small@tok () Term)


; </end encoding FStar.UInt128.shift_left_small>


; encoding sigelt shift_left_large


; <Skipped FStar.UInt128.shift_left_large/>


; encoding sigelt 


; <Skipped />


; encoding sigelt shift_left_large


; <Start encoding FStar.UInt128.shift_left_large>

(declare-fun Tm_refine_a2a071dd127b029ef35393f42269ee33 () Term)
(declare-fun FStar.UInt128.shift_left_large (Term Term) Term)


;;;;;;;;;;;;;;;;a: t -> s: FStar.UInt32.t{FStar.UInt32.v s >= 64 /\ FStar.UInt32.v s < 128}   -> r: t{v r = v a * Prims.pow2 (FStar.UInt32.v s) % Prims.pow2 128}
(declare-fun Tm_arrow_b2aca37868d03c2e193279329ca71b2d () Term)
(declare-fun FStar.UInt128.shift_left_large@tok () Term)



; </end encoding FStar.UInt128.shift_left_large>


; encoding sigelt 


; <Skipped />


; encoding sigelt shift_left


; <Skipped FStar.UInt128.shift_left/>


; encoding sigelt shift_left


; <Start encoding FStar.UInt128.shift_left>

(declare-fun FStar.UInt128.shift_left (Term Term) Term)
(declare-fun Tm_refine_a1ecca9ac49058a08f58aac038646add (Term Term) Term)
;;;;;;;;;;;;;;;;a: t -> s: FStar.UInt32.t -> Prims.Pure t
(declare-fun Tm_arrow_3222a887e37243a547266892f65df571 () Term)
(declare-fun FStar.UInt128.shift_left@tok () Term)


; </end encoding FStar.UInt128.shift_left>


; encoding sigelt add_u64_shift_right


; <Start encoding FStar.UInt128.add_u64_shift_right>


(declare-fun FStar.UInt128.add_u64_shift_right (Term Term Term) Term)

(declare-fun Tm_refine_853c9b06844077527111d7ed5f881aad (Term Term Term) Term)
;;;;;;;;;;;;;;;;hi: FStar.UInt64.t -> lo: FStar.UInt64.t -> s: FStar.UInt32.t{FStar.UInt32.v s < 64}   -> Prims.Pure FStar.UInt64.t
(declare-fun Tm_arrow_6f478af63dd9736b4e0f570792cf0434 () Term)
(declare-fun FStar.UInt128.add_u64_shift_right@tok () Term)



; </end encoding FStar.UInt128.add_u64_shift_right>


; encoding sigelt mul_pow2_diff


; <Skipped FStar.UInt128.mul_pow2_diff/>


; encoding sigelt mul_pow2_diff


; <Start encoding FStar.UInt128.mul_pow2_diff>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.mul_pow2_diff (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.mul_pow2_diff@tok () Term)

; </end encoding FStar.UInt128.mul_pow2_diff>


; encoding sigelt add_u64_shift_right_respec


; <Start encoding FStar.UInt128.add_u64_shift_right_respec>


(declare-fun FStar.UInt128.add_u64_shift_right_respec (Term Term Term) Term)

(declare-fun Tm_refine_aebb8e74359032cc8a673462176b17db (Term Term Term) Term)
;;;;;;;;;;;;;;;;hi: FStar.UInt64.t -> lo: FStar.UInt64.t -> s: FStar.UInt32.t{FStar.UInt32.v s < 64}   -> Prims.Pure FStar.UInt64.t
(declare-fun Tm_arrow_685902b1fb262b1934d55a4777ee4754 () Term)
(declare-fun FStar.UInt128.add_u64_shift_right_respec@tok () Term)



; </end encoding FStar.UInt128.add_u64_shift_right_respec>


; encoding sigelt mul_div_spec


; <Start encoding FStar.UInt128.mul_div_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.mul_div_spec (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.mul_div_spec@tok () Term)

; </end encoding FStar.UInt128.mul_div_spec>


; encoding sigelt mul_distr_sub


; <Start encoding FStar.UInt128.mul_distr_sub>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.mul_distr_sub (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.mul_distr_sub@tok () Term)

; </end encoding FStar.UInt128.mul_distr_sub>


; encoding sigelt div_product_comm


; <Skipped FStar.UInt128.div_product_comm/>


; encoding sigelt div_product_comm


; <Start encoding FStar.UInt128.div_product_comm>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.div_product_comm (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.div_product_comm@tok () Term)

; </end encoding FStar.UInt128.div_product_comm>


; encoding sigelt shift_right_reconstruct


; <Skipped FStar.UInt128.shift_right_reconstruct/>


; encoding sigelt shift_right_reconstruct


; <Start encoding FStar.UInt128.shift_right_reconstruct>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.shift_right_reconstruct (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.shift_right_reconstruct@tok () Term)

; </end encoding FStar.UInt128.shift_right_reconstruct>


; encoding sigelt u128_div_pow2


; <Skipped FStar.UInt128.u128_div_pow2/>


; encoding sigelt u128_div_pow2


; <Start encoding FStar.UInt128.u128_div_pow2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.u128_div_pow2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.u128_div_pow2@tok () Term)

; </end encoding FStar.UInt128.u128_div_pow2>


; encoding sigelt shift_right_small


; <Start encoding FStar.UInt128.shift_right_small>


(declare-fun FStar.UInt128.shift_right_small (Term Term) Term)

(declare-fun Tm_refine_ae880c61bd89ebe8bd4cc06ccf657330 (Term Term) Term)
;;;;;;;;;;;;;;;;a: t -> s: FStar.UInt32.t{FStar.UInt32.v s < 64} -> Prims.Pure t
(declare-fun Tm_arrow_b72d8329f820ebec8cafd343d3cb64d7 () Term)
(declare-fun FStar.UInt128.shift_right_small@tok () Term)



; </end encoding FStar.UInt128.shift_right_small>


; encoding sigelt shift_right_large


; <Start encoding FStar.UInt128.shift_right_large>


(declare-fun FStar.UInt128.shift_right_large (Term Term) Term)


;;;;;;;;;;;;;;;;a: t -> s: FStar.UInt32.t{FStar.UInt32.v s >= 64 /\ FStar.UInt32.v s < 128} -> Prims.Pure t
(declare-fun Tm_arrow_96fb69b5fa33d5571ea70c76728086b0 () Term)
(declare-fun FStar.UInt128.shift_right_large@tok () Term)



; </end encoding FStar.UInt128.shift_right_large>


; encoding sigelt shift_right


; <Skipped FStar.UInt128.shift_right/>


; encoding sigelt shift_right


; <Start encoding FStar.UInt128.shift_right>

(declare-fun FStar.UInt128.shift_right (Term Term) Term)

;;;;;;;;;;;;;;;;a: t -> s: FStar.UInt32.t -> Prims.Pure t
(declare-fun Tm_arrow_1d8436c2f45603ee4de2e80933dc075e () Term)
(declare-fun FStar.UInt128.shift_right@tok () Term)


; </end encoding FStar.UInt128.shift_right>


; encoding sigelt eq


; <Skipped FStar.UInt128.eq/>


; encoding sigelt eq


; <Start encoding FStar.UInt128.eq>

(declare-fun FStar.UInt128.eq (Term Term) Term)
(declare-fun Tm_refine_17bdce673f0f99167643711ae2c8398d (Term Term) Term)
;;;;;;;;;;;;;;;;a: t -> b: t -> Prims.Pure Prims.bool
(declare-fun Tm_arrow_6a8308c5b55a94e42f409204b68a39fe () Term)
(declare-fun FStar.UInt128.eq@tok () Term)


; </end encoding FStar.UInt128.eq>


; encoding sigelt gt


; <Skipped FStar.UInt128.gt/>


; encoding sigelt gt


; <Start encoding FStar.UInt128.gt>

(declare-fun FStar.UInt128.gt (Term Term) Term)
(declare-fun Tm_refine_ad71613c7c18e4200ebe056ffd50c6bd (Term Term) Term)
;;;;;;;;;;;;;;;;a: t -> b: t -> Prims.Pure Prims.bool
(declare-fun Tm_arrow_879ba229f4716600b8dd7fd9a02a56b0 () Term)
(declare-fun FStar.UInt128.gt@tok () Term)


; </end encoding FStar.UInt128.gt>


; encoding sigelt lt


; <Skipped FStar.UInt128.lt/>


; encoding sigelt lt


; <Start encoding FStar.UInt128.lt>

(declare-fun FStar.UInt128.lt (Term Term) Term)
(declare-fun Tm_refine_d92cd57a31527a4277019659be7180b3 (Term Term) Term)
;;;;;;;;;;;;;;;;a: t -> b: t -> Prims.Pure Prims.bool
(declare-fun Tm_arrow_342ba56e15643014ec03fa8309d60fd3 () Term)
(declare-fun FStar.UInt128.lt@tok () Term)


; </end encoding FStar.UInt128.lt>


; encoding sigelt gte


; <Skipped FStar.UInt128.gte/>


; encoding sigelt gte


; <Start encoding FStar.UInt128.gte>

(declare-fun FStar.UInt128.gte (Term Term) Term)
(declare-fun Tm_refine_af3877cdc4e82890dc596c9b9a18e702 (Term Term) Term)
;;;;;;;;;;;;;;;;a: t -> b: t -> Prims.Pure Prims.bool
(declare-fun Tm_arrow_7722b191f0154868206c9aed80fbb3bc () Term)
(declare-fun FStar.UInt128.gte@tok () Term)


; </end encoding FStar.UInt128.gte>


; encoding sigelt lte


; <Skipped FStar.UInt128.lte/>


; encoding sigelt lte


; <Start encoding FStar.UInt128.lte>

(declare-fun FStar.UInt128.lte (Term Term) Term)
(declare-fun Tm_refine_054034522c859ee7a09294edf08a7add (Term Term) Term)
;;;;;;;;;;;;;;;;a: t -> b: t -> Prims.Pure Prims.bool
(declare-fun Tm_arrow_cfe624425159e4a3707dc9302bca8b3d () Term)
(declare-fun FStar.UInt128.lte@tok () Term)


; </end encoding FStar.UInt128.lte>


; encoding sigelt u64_logand_comm


; <Start encoding FStar.UInt128.u64_logand_comm>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.u64_logand_comm (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.u64_logand_comm@tok () Term)

; </end encoding FStar.UInt128.u64_logand_comm>


; encoding sigelt u64_and_0


; <Skipped FStar.UInt128.u64_and_0/>


; encoding sigelt u64_and_0


; <Start encoding FStar.UInt128.u64_and_0>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.u64_and_0 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.u64_and_0@tok () Term)

; </end encoding FStar.UInt128.u64_and_0>


; encoding sigelt u64_0_and


; <Start encoding FStar.UInt128.u64_0_and>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.u64_0_and (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.u64_0_and@tok () Term)

; </end encoding FStar.UInt128.u64_0_and>


; encoding sigelt u64_1s_and


; <Skipped FStar.UInt128.u64_1s_and/>


; encoding sigelt u64_1s_and


; <Start encoding FStar.UInt128.u64_1s_and>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.u64_1s_and (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.u64_1s_and@tok () Term)

; </end encoding FStar.UInt128.u64_1s_and>


; encoding sigelt eq_mask


; <Skipped FStar.UInt128.eq_mask/>


; encoding sigelt eq_mask


; <Start encoding FStar.UInt128.eq_mask>

(declare-fun FStar.UInt128.eq_mask (Term Term) Term)
(declare-fun Tm_refine_68ab6aeda386ed241196c1cf02a3355f (Term Term) Term)
;;;;;;;;;;;;;;;;a: t -> b: t -> c: t{(v a = v b ==> v c = Prims.pow2 n - 1) /\ (v a <> v b ==> v c = 0)}
(declare-fun Tm_arrow_8744aced183e131fdcd8a3d0b5b481db () Term)
(declare-fun FStar.UInt128.eq_mask@tok () Term)


; </end encoding FStar.UInt128.eq_mask>


; encoding sigelt gte_characterization


; <Start encoding FStar.UInt128.gte_characterization>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.gte_characterization (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.gte_characterization@tok () Term)

; </end encoding FStar.UInt128.gte_characterization>


; encoding sigelt lt_characterization


; <Start encoding FStar.UInt128.lt_characterization>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.lt_characterization (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.lt_characterization@tok () Term)

; </end encoding FStar.UInt128.lt_characterization>


; encoding sigelt u64_logor_comm


; <Start encoding FStar.UInt128.u64_logor_comm>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.u64_logor_comm (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.u64_logor_comm@tok () Term)

; </end encoding FStar.UInt128.u64_logor_comm>


; encoding sigelt u64_or_1


; <Skipped FStar.UInt128.u64_or_1/>


; encoding sigelt u64_or_1


; <Start encoding FStar.UInt128.u64_or_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.u64_or_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.u64_or_1@tok () Term)

; </end encoding FStar.UInt128.u64_or_1>


; encoding sigelt u64_1_or


; <Start encoding FStar.UInt128.u64_1_or>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.u64_1_or (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.u64_1_or@tok () Term)

; </end encoding FStar.UInt128.u64_1_or>


; encoding sigelt u64_or_0


; <Skipped FStar.UInt128.u64_or_0/>


; encoding sigelt u64_or_0


; <Start encoding FStar.UInt128.u64_or_0>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.u64_or_0 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.u64_or_0@tok () Term)

; </end encoding FStar.UInt128.u64_or_0>


; encoding sigelt u64_not_0


; <Skipped FStar.UInt128.u64_not_0/>


; encoding sigelt u64_not_0


; <Start encoding FStar.UInt128.u64_not_0>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.u64_not_0 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.u64_not_0@tok () Term)

; </end encoding FStar.UInt128.u64_not_0>


; encoding sigelt u64_not_1


; <Skipped FStar.UInt128.u64_not_1/>


; encoding sigelt u64_not_1


; <Start encoding FStar.UInt128.u64_not_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.u64_not_1 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.u64_not_1@tok () Term)

; </end encoding FStar.UInt128.u64_not_1>


; encoding sigelt gte_mask


; <Skipped FStar.UInt128.gte_mask/>


; encoding sigelt gte_mask


; <Start encoding FStar.UInt128.gte_mask>

(declare-fun FStar.UInt128.gte_mask (Term Term) Term)
(declare-fun Tm_refine_c14dd0a1e5e977af38870e46b185d9f2 (Term Term) Term)
;;;;;;;;;;;;;;;;a: t -> b: t -> c: t{(v a >= v b ==> v c = Prims.pow2 n - 1) /\ (v a < v b ==> v c = 0)}
(declare-fun Tm_arrow_e86638e904e458749403b2b51347361f () Term)
(declare-fun FStar.UInt128.gte_mask@tok () Term)


; </end encoding FStar.UInt128.gte_mask>


; encoding sigelt uint64_to_uint128


; <Skipped FStar.UInt128.uint64_to_uint128/>


; encoding sigelt uint64_to_uint128


; <Start encoding FStar.UInt128.uint64_to_uint128>

(declare-fun FStar.UInt128.uint64_to_uint128 (Term) Term)
(declare-fun Tm_refine_89263c8dd7df5c497acdada0682b1aab (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt64.t -> b: t{v b == FStar.UInt64.v a}
(declare-fun Tm_arrow_210b5c612468a114c443675f11f947ae () Term)
(declare-fun FStar.UInt128.uint64_to_uint128@tok () Term)


; </end encoding FStar.UInt128.uint64_to_uint128>


; encoding sigelt uint128_to_uint64


; <Skipped FStar.UInt128.uint128_to_uint64/>


; encoding sigelt uint128_to_uint64


; <Start encoding FStar.UInt128.uint128_to_uint64>

(declare-fun FStar.UInt128.uint128_to_uint64 (Term) Term)
(declare-fun Tm_refine_720e19ea5d148e5c481de5679bfae876 (Term) Term)
;;;;;;;;;;;;;;;;a: t -> b: FStar.UInt64.t{FStar.UInt64.v b == v a % Prims.pow2 64}
(declare-fun Tm_arrow_254354cfa7eec0be5a706bf04320cef4 () Term)
(declare-fun FStar.UInt128.uint128_to_uint64@tok () Term)


; </end encoding FStar.UInt128.uint128_to_uint64>


; encoding sigelt op_Plus_Hat


; <Start encoding FStar.UInt128.op_Plus_Hat>

(declare-fun FStar.UInt128.op_Plus_Hat (Term Term) Term)


(declare-fun FStar.UInt128.op_Plus_Hat@tok () Term)


; </end encoding FStar.UInt128.op_Plus_Hat>


; encoding sigelt op_Plus_Question_Hat


; <Start encoding FStar.UInt128.op_Plus_Question_Hat>

(declare-fun FStar.UInt128.op_Plus_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt128.op_Plus_Question_Hat@tok () Term)


; </end encoding FStar.UInt128.op_Plus_Question_Hat>


; encoding sigelt op_Plus_Percent_Hat


; <Start encoding FStar.UInt128.op_Plus_Percent_Hat>

(declare-fun FStar.UInt128.op_Plus_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt128.op_Plus_Percent_Hat@tok () Term)


; </end encoding FStar.UInt128.op_Plus_Percent_Hat>


; encoding sigelt op_Subtraction_Hat


; <Start encoding FStar.UInt128.op_Subtraction_Hat>

(declare-fun FStar.UInt128.op_Subtraction_Hat (Term Term) Term)


(declare-fun FStar.UInt128.op_Subtraction_Hat@tok () Term)


; </end encoding FStar.UInt128.op_Subtraction_Hat>


; encoding sigelt op_Subtraction_Question_Hat


; <Start encoding FStar.UInt128.op_Subtraction_Question_Hat>

(declare-fun FStar.UInt128.op_Subtraction_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt128.op_Subtraction_Question_Hat@tok () Term)


; </end encoding FStar.UInt128.op_Subtraction_Question_Hat>


; encoding sigelt op_Subtraction_Percent_Hat


; <Start encoding FStar.UInt128.op_Subtraction_Percent_Hat>

(declare-fun FStar.UInt128.op_Subtraction_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt128.op_Subtraction_Percent_Hat@tok () Term)


; </end encoding FStar.UInt128.op_Subtraction_Percent_Hat>


; encoding sigelt op_Amp_Hat


; <Start encoding FStar.UInt128.op_Amp_Hat>

(declare-fun FStar.UInt128.op_Amp_Hat (Term Term) Term)


(declare-fun FStar.UInt128.op_Amp_Hat@tok () Term)


; </end encoding FStar.UInt128.op_Amp_Hat>


; encoding sigelt op_Hat_Hat


; <Start encoding FStar.UInt128.op_Hat_Hat>

(declare-fun FStar.UInt128.op_Hat_Hat (Term Term) Term)


(declare-fun FStar.UInt128.op_Hat_Hat@tok () Term)


; </end encoding FStar.UInt128.op_Hat_Hat>


; encoding sigelt op_Bar_Hat


; <Start encoding FStar.UInt128.op_Bar_Hat>

(declare-fun FStar.UInt128.op_Bar_Hat (Term Term) Term)


(declare-fun FStar.UInt128.op_Bar_Hat@tok () Term)


; </end encoding FStar.UInt128.op_Bar_Hat>


; encoding sigelt op_Less_Less_Hat


; <Start encoding FStar.UInt128.op_Less_Less_Hat>

(declare-fun FStar.UInt128.op_Less_Less_Hat (Term Term) Term)


(declare-fun FStar.UInt128.op_Less_Less_Hat@tok () Term)


; </end encoding FStar.UInt128.op_Less_Less_Hat>


; encoding sigelt op_Greater_Greater_Hat


; <Start encoding FStar.UInt128.op_Greater_Greater_Hat>

(declare-fun FStar.UInt128.op_Greater_Greater_Hat (Term Term) Term)


(declare-fun FStar.UInt128.op_Greater_Greater_Hat@tok () Term)


; </end encoding FStar.UInt128.op_Greater_Greater_Hat>


; encoding sigelt op_Equals_Hat


; <Start encoding FStar.UInt128.op_Equals_Hat>

(declare-fun FStar.UInt128.op_Equals_Hat (Term Term) Term)


(declare-fun FStar.UInt128.op_Equals_Hat@tok () Term)


; </end encoding FStar.UInt128.op_Equals_Hat>


; encoding sigelt op_Greater_Hat


; <Start encoding FStar.UInt128.op_Greater_Hat>

(declare-fun FStar.UInt128.op_Greater_Hat (Term Term) Term)


(declare-fun FStar.UInt128.op_Greater_Hat@tok () Term)


; </end encoding FStar.UInt128.op_Greater_Hat>


; encoding sigelt op_Less_Hat


; <Start encoding FStar.UInt128.op_Less_Hat>

(declare-fun FStar.UInt128.op_Less_Hat (Term Term) Term)


(declare-fun FStar.UInt128.op_Less_Hat@tok () Term)


; </end encoding FStar.UInt128.op_Less_Hat>


; encoding sigelt op_Greater_Equals_Hat


; <Start encoding FStar.UInt128.op_Greater_Equals_Hat>

(declare-fun FStar.UInt128.op_Greater_Equals_Hat (Term Term) Term)


(declare-fun FStar.UInt128.op_Greater_Equals_Hat@tok () Term)


; </end encoding FStar.UInt128.op_Greater_Equals_Hat>


; encoding sigelt op_Less_Equals_Hat


; <Start encoding FStar.UInt128.op_Less_Equals_Hat>

(declare-fun FStar.UInt128.op_Less_Equals_Hat (Term Term) Term)


(declare-fun FStar.UInt128.op_Less_Equals_Hat@tok () Term)


; </end encoding FStar.UInt128.op_Less_Equals_Hat>


; encoding sigelt u64_l32_mask


; <Start encoding FStar.UInt128.u64_l32_mask>

(declare-fun FStar.UInt128.u64_l32_mask (Dummy_sort) Term)
(declare-fun Tm_refine_48c02aeb52d751253bb6cbc645e3d0a5 () Term)


; </end encoding FStar.UInt128.u64_l32_mask>


; encoding sigelt u64_mod_32


; <Start encoding FStar.UInt128.u64_mod_32>

(declare-fun FStar.UInt128.u64_mod_32 (Term) Term)
(declare-fun Tm_refine_a8d13c9ec01c2b69d6d5e579825a4e75 (Term) Term)
;;;;;;;;;;;;;;;;a: FStar.UInt64.t -> Prims.Pure FStar.UInt64.t
(declare-fun Tm_arrow_28570691f2cd3f141dab8818cc77a623 () Term)
(declare-fun FStar.UInt128.u64_mod_32@tok () Term)


; </end encoding FStar.UInt128.u64_mod_32>


; encoding sigelt u64_32_digits


; <Start encoding FStar.UInt128.u64_32_digits>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.u64_32_digits (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.u64_32_digits@tok () Term)

; </end encoding FStar.UInt128.u64_32_digits>


; encoding sigelt mul32_digits


; <Skipped FStar.UInt128.mul32_digits/>


; encoding sigelt mul32_digits


; <Start encoding FStar.UInt128.mul32_digits>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt128.mul32_digits (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt128.mul32_digits@tok () Term)

; </end encoding FStar.UInt128.mul32_digits>


; encoding sigelt u32_32


; <Start encoding FStar.UInt128.u32_32>

(declare-fun FStar.UInt128.u32_32 (Dummy_sort) Term)
(declare-fun Tm_refine_abdf9dfe68d7634503222a934e1ba5a5 () Term)
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.UInt128.u32_32; Namespace FStar.UInt128
(assert (! 
;; def=FStar.UInt128.fst(878,13-878,35); use=FStar.UInt128.fst(878,13-878,35)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_abdf9dfe68d7634503222a934e1ba5a5)
(and (HasTypeFuel @u0
@x1
(FStar.UInt32.t Dummy_value))

;; def=FStar.UInt128.fst(878,21-878,34); use=FStar.UInt128.fst(878,21-878,34)
(= (FStar.UInt32.v @x1)
(BoxInt 32))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_abdf9dfe68d7634503222a934e1ba5a5))
:qid refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5))

:named refinement_interpretation_Tm_refine_abdf9dfe68d7634503222a934e1ba5a5))

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt128.u32_32; Namespace FStar.UInt128
(assert (! 
;; def=FStar.UInt128.fst(878,4-878,10); use=FStar.UInt128.fst(878,4-878,10)
(forall ((@u0 Dummy_sort))
 (! (HasType (FStar.UInt128.u32_32 @u0)
Tm_refine_abdf9dfe68d7634503222a934e1ba5a5)
 

:pattern ((FStar.UInt128.u32_32 @u0))
:qid typing_FStar.UInt128.u32_32))

:named typing_FStar.UInt128.u32_32))
;;;;;;;;;;;;;;;;Equation for FStar.UInt128.u32_32
;;; Fact-ids: Name FStar.UInt128.u32_32; Namespace FStar.UInt128
(assert (! 
;; def=FStar.UInt128.fst(878,4-878,10); use=FStar.UInt128.fst(878,4-878,10)
(forall ((@u0 Dummy_sort))
 (! (= 
;; def=FStar.UInt128.fst(878,4-878,10); use=FStar.UInt128.fst(878,4-878,10)
(FStar.UInt128.u32_32 @u0)

(FStar.UInt32.uint_to_t (BoxInt 32)))
 

:pattern (
;; def=FStar.UInt128.fst(878,4-878,10); use=FStar.UInt128.fst(878,4-878,10)
(FStar.UInt128.u32_32 @u0)
)
:qid equation_FStar.UInt128.u32_32))

:named equation_FStar.UInt128.u32_32))

; </end encoding FStar.UInt128.u32_32>


; Starting query at FStar.UInt128.fst(883,2-883,39)

(push)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)
(declare-fun Tm_refine_cde1ca397051832c6c262860f5dc341d (Term) Term)

; Encoding query formula : forall (hi: FStar.UInt64.t) (lo: FStar.UInt64.t).
;   (forall (r: _: FStar.UInt64.t{FStar.UInt64.v lo < Prims.pow2 32}).
;       (*could not prove post-condition*) Prims.pow2 32 > 0 ==> Prims.pow2 32 <> 0) /\
;   (forall (p: Prims.pure_post FStar.UInt64.t).
;       FStar.UInt64.v lo < Prims.pow2 32 /\
;       (forall (pure_result: FStar.UInt64.t).
;           FStar.UInt64.v pure_result =
;           (FStar.UInt64.v hi % Prims.pow2 32) * Prims.pow2 32 + FStar.UInt64.v lo ==>
;           p pure_result) ==>
;       FStar.UInt32.v FStar.UInt128.u32_32 < 64 /\
;       (forall (pure_result: FStar.UInt64.t).
;           FStar.UInt.shift_left (FStar.UInt64.v hi) (FStar.UInt32.v FStar.UInt128.u32_32) =
;           FStar.UInt64.v pure_result ==>
;           FStar.UInt64.shift_left hi FStar.UInt128.u32_32 == pure_result ==>
;           FStar.UInt.size (FStar.UInt64.v lo +
;               FStar.UInt64.v (FStar.UInt64.shift_left hi FStar.UInt128.u32_32))
;             64 /\
;           (forall (pure_result: FStar.UInt64.t).
;               FStar.UInt64.v lo + FStar.UInt64.v (FStar.UInt64.shift_left hi FStar.UInt128.u32_32) =
;               FStar.UInt64.v pure_result ==>
;               pure_result == FStar.UInt64.add lo (FStar.UInt64.shift_left hi FStar.UInt128.u32_32) ==>
;               (forall (return_val: FStar.UInt64.t). return_val == pure_result ==> p return_val))))

(push)

; <fuel='0' ifuel='0'>

;;; Fact-ids: 
(assert (! (= MaxFuel
ZFuel)
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
ZFuel)
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
(FStar.UInt64.t Dummy_value))
(HasType @x1
(FStar.UInt64.t Dummy_value)))

;; def=prims.fst(385,51-385,91); use=prims.fst(409,19-409,32)
(and 
;; def= dummy(0,0-0,0); use=FStar.UInt128.fst(883,2-883,39)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Tm_refine_cde1ca397051832c6c262860f5dc341d @x1))

;; def=prims.fst(662,18-662,23); use=FStar.UInt128.fst(883,2-883,39)
(> (BoxInt_proj_0 (Prims.pow2 (BoxInt 32)))
(BoxInt_proj_0 (BoxInt 0)))
)

;; def=prims.fst(665,22-665,28); use=FStar.UInt128.fst(882,42-882,49)
(or label_1

;; def=prims.fst(665,22-665,28); use=FStar.UInt128.fst(883,2-883,39)
(not (= (Prims.pow2 (BoxInt 32))
(BoxInt 0)))
)
)
 
;;no pats
:qid @query.1))


;; def=prims.fst(385,51-385,91); use=prims.fst(409,19-409,32)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Prims.pure_post (FStar.UInt64.t Dummy_value)))

;; def=FStar.UInt128.fst(881,12-881,32); use=FStar.UInt128.fst(883,2-883,39)
(< (BoxInt_proj_0 (FStar.UInt64.v @x1))
(BoxInt_proj_0 (Prims.pow2 (BoxInt 32))))


;; def=prims.fst(420,36-420,97); use=FStar.UInt128.fst(883,2-883,39)
(forall ((@x3 Term))
 (! (implies (and (or label_2
(HasType @x3
(FStar.UInt64.t Dummy_value)))

;; def=FStar.UInt128.fst(882,21-882,70); use=FStar.UInt128.fst(883,2-883,39)
(or label_3

;; def=FStar.UInt128.fst(882,21-882,70); use=FStar.UInt128.fst(883,2-883,39)
(= (FStar.UInt64.v @x3)
(Prims.op_Addition (Prims.op_Multiply (Prims.op_Modulus (FStar.UInt64.v @x0)
(Prims.pow2 (BoxInt 32)))
(Prims.pow2 (BoxInt 32)))
(FStar.UInt64.v @x1)))
)
)

;; def=prims.fst(420,83-420,96); use=FStar.UInt128.fst(883,2-883,39)
(Valid 
;; def=prims.fst(420,83-420,96); use=FStar.UInt128.fst(883,2-883,39)
(ApplyTT @x2
@x3)
)
)
 

:pattern (
;; def=prims.fst(420,83-420,96); use=FStar.UInt128.fst(883,2-883,39)
(Valid 
;; def=prims.fst(420,83-420,96); use=FStar.UInt128.fst(883,2-883,39)
(ApplyTT @x2
@x3)
)
)
:qid @query.3))
)

;; def=prims.fst(420,29-420,97); use=FStar.UInt128.fst(883,18-883,28)
(and 
;; def=FStar.UInt64.fsti(214,12-214,28); use=FStar.UInt128.fst(883,18-883,28)
(or label_4

;; def=FStar.UInt64.fsti(214,12-214,28); use=FStar.UInt128.fst(883,18-883,28)
(< (BoxInt_proj_0 (FStar.UInt32.v (FStar.UInt128.u32_32 Dummy_value)))
(BoxInt_proj_0 (BoxInt 64)))
)


;; def=prims.fst(420,36-420,97); use=FStar.UInt128.fst(883,18-883,28)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(FStar.UInt64.t Dummy_value))

;; def=FStar.UInt64.fsti(215,21-215,67); use=FStar.UInt128.fst(883,18-883,28)
(= (FStar.UInt.shift_left (BoxInt 64)
(FStar.UInt64.v @x0)
(FStar.UInt32.v (FStar.UInt128.u32_32 Dummy_value)))
(FStar.UInt64.v @x3))


;; def=FStar.UInt64.fsti(88,15-88,16); use=FStar.UInt128.fst(883,2-883,39)
(= (FStar.UInt64.shift_left @x0
(FStar.UInt128.u32_32 Dummy_value))
@x3)
)

;; def=prims.fst(420,29-420,97); use=FStar.UInt128.fst(883,6-883,9)
(and 
;; def=FStar.UInt64.fsti(89,12-89,32); use=FStar.UInt128.fst(883,6-883,9)
(or label_5

;; def=FStar.UInt64.fsti(89,12-89,32); use=FStar.UInt128.fst(883,6-883,9)
(Valid 
;; def=FStar.UInt64.fsti(89,12-89,32); use=FStar.UInt128.fst(883,6-883,9)
(FStar.UInt.size (Prims.op_Addition (FStar.UInt64.v @x1)
(FStar.UInt64.v (FStar.UInt64.shift_left @x0
(FStar.UInt128.u32_32 Dummy_value))))
(BoxInt 64))
)
)


;; def=prims.fst(420,36-420,97); use=FStar.UInt128.fst(883,6-883,9)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(FStar.UInt64.t Dummy_value))

;; def=FStar.UInt64.fsti(90,21-90,36); use=FStar.UInt128.fst(883,6-883,9)
(= (Prims.op_Addition (FStar.UInt64.v @x1)
(FStar.UInt64.v (FStar.UInt64.shift_left @x0
(FStar.UInt128.u32_32 Dummy_value))))
(FStar.UInt64.v @x4))


;; def=FStar.UInt128.fst(880,38-883,39); use=FStar.UInt128.fst(883,2-883,39)
(= @x4
(FStar.UInt64.add @x1
(FStar.UInt64.shift_left @x0
(FStar.UInt128.u32_32 Dummy_value))))
)

;; def=prims.fst(335,2-335,58); use=prims.fst(405,19-405,31)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(FStar.UInt64.t Dummy_value))

;; def=prims.fst(335,26-335,41); use=prims.fst(405,19-405,31)
(= @x5
@x4)
)

;; def=prims.fst(335,46-335,58); use=prims.fst(405,19-405,31)
(Valid 
;; def=prims.fst(335,46-335,58); use=prims.fst(405,19-405,31)
(ApplyTT @x2
@x5)
)
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query.2))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(check-sat)
